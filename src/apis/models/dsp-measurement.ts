/* tslint:disable */
/* eslint-disable */
/**
 * Measurement
 * Measurement management.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { createRequestFunction } from "../../helpers";

/**
 * Supported values are DSP(Demand Side Platform).
 * @export
 * @enum {string}
 */

export enum AdTypeV1 {
    Dsp = 'DSP'
}

/**
 * The type of the Asset.
 * @export
 * @enum {string}
 */

export enum AssetTypeV1M2 {
    Image = 'IMAGE',
    Video = 'VIDEO'
}

/**
 * The Amazon Creative Asset Library asset identifier. Refer https://advertising.amazon.com/API/docs/en-us/creative-asset-library
 * @export
 * @interface AssetV1M2
 */
export interface AssetV1M2 {
    /**
     * The assetId.
     * @type {string}
     * @memberof AssetV1M2
     */
    assetId?: string;
    /**
     * The version of the asset.
     * @type {string}
     * @memberof AssetV1M2
     */
    version?: string;
    /**
     * 
     * @type {AssetTypeV1M2}
     * @memberof AssetV1M2
     */
    assetType?: AssetTypeV1M2;
}
/**
 * The model for holding Audiece selection within a group. The expression within an audience group will be evaluated using the IntraGroupOperator. The InterGroupOperator will be applied on the output of one audience group with another audience group.
 * @export
 * @interface AudienceGroupV1M2
 */
export interface AudienceGroupV1M2 {
    /**
     * 
     * @type {AudienceSelectionOperatorV1M2}
     * @memberof AudienceGroupV1M2
     */
    interGroupOperator?: AudienceSelectionOperatorV1M2;
    /**
     * 
     * @type {AudienceSelectionOperatorV1M2}
     * @memberof AudienceGroupV1M2
     */
    intraGroupOperator?: AudienceSelectionOperatorV1M2;
    /**
     * List of audience segments in this group.
     * @type {Array<AudienceSegmentV1M2>}
     * @memberof AudienceGroupV1M2
     */
    audienceSegments?: Array<AudienceSegmentV1M2>;
}
/**
 * The result of Audience Research study.
 * @export
 * @interface AudienceResearchStudyResultV1M2
 */
export interface AudienceResearchStudyResultV1M2 {
    /**
     * Total number of responses received in the Survey.
     * @type {number}
     * @memberof AudienceResearchStudyResultV1M2
     */
    totalResponses?: number;
    /**
     * The canonical Id of Study.
     * @type {string}
     * @memberof AudienceResearchStudyResultV1M2
     */
    studyId?: string;
    /**
     * Detailed response rate for each response in Survey question aggregated by different segments.
     * @type {Array<SurveyResponseResultV1>}
     * @memberof AudienceResearchStudyResultV1M2
     */
    surveyResponses?: Array<SurveyResponseResultV1>;
}
/**
 * The model for holding an Audience Segment.
 * @export
 * @interface AudienceSegmentV1M2
 */
export interface AudienceSegmentV1M2 {
    /**
     * ID for the audience segment. This ID can be fetched from these APIs- https://advertising.amazon.com/API/docs/en-us/audiences/#/Discovery
     * @type {string}
     * @memberof AudienceSegmentV1M2
     */
    segmentId?: string;
}
/**
 * The operator used in Audience Segment Selection to determine which operation needs to be applied across selected segments. AND operator takes priority over OR operator.
 * @export
 * @enum {string}
 */

export enum AudienceSelectionOperatorV1M2 {
    Or = 'OR',
    And = 'AND'
}

/**
 * The model for holding Audiece targeting group. The includedAudienceGroups and excludedAudienceGroups are always joined with AND operator.
 * @export
 * @interface AudienceTargetingGroupV1M2
 */
export interface AudienceTargetingGroupV1M2 {
    /**
     * List of audience groups to be included in the targeted audience.
     * @type {Array<AudienceGroupV1M2>}
     * @memberof AudienceTargetingGroupV1M2
     */
    includedAudienceGroups?: Array<AudienceGroupV1M2>;
    /**
     * List of audience groups to be excluded from the targeted audience.
     * @type {Array<AudienceGroupV1M2>}
     * @memberof AudienceTargetingGroupV1M2
     */
    excludedAudienceGroups?: Array<AudienceGroupV1M2>;
}
/**
 * The request object of measurement eligibility check.
 * @export
 * @interface BaseEligibilityRequestV1
 */
export interface BaseEligibilityRequestV1 {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<FundingTypeV1>}
     * @memberof BaseEligibilityRequestV1
     */
    fundingTypeFilters?: Array<FundingTypeV1>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof BaseEligibilityRequestV1
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<VendorTypeV1>}
     * @memberof BaseEligibilityRequestV1
     */
    vendorTypeFilters?: Array<VendorTypeV1>;
}
/**
 * The request object of measurement eligibility check.
 * @export
 * @interface BaseEligibilityRequestV1M1
 */
export interface BaseEligibilityRequestV1M1 {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<FundingTypeV1M1>}
     * @memberof BaseEligibilityRequestV1M1
     */
    fundingTypeFilters?: Array<FundingTypeV1M1>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof BaseEligibilityRequestV1M1
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<VendorTypeV1M1>}
     * @memberof BaseEligibilityRequestV1M1
     */
    vendorTypeFilters?: Array<VendorTypeV1M1>;
}
/**
 * The request object of measurement eligibility check.
 * @export
 * @interface BaseEligibilityRequestV1M2
 */
export interface BaseEligibilityRequestV1M2 {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<FundingTypeV1M2>}
     * @memberof BaseEligibilityRequestV1M2
     */
    fundingTypeFilters?: Array<FundingTypeV1M2>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof BaseEligibilityRequestV1M2
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<VendorTypeV1M2>}
     * @memberof BaseEligibilityRequestV1M2
     */
    vendorTypeFilters?: Array<VendorTypeV1M2>;
}
/**
 * The request object of measurement eligibility check.
 * @export
 * @interface BaseEligibilityRequestV1M3
 */
export interface BaseEligibilityRequestV1M3 {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<FundingTypeV1M3>}
     * @memberof BaseEligibilityRequestV1M3
     */
    fundingTypeFilters?: Array<FundingTypeV1M3>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof BaseEligibilityRequestV1M3
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<VendorTypeV1M3>}
     * @memberof BaseEligibilityRequestV1M3
     */
    vendorTypeFilters?: Array<VendorTypeV1M3>;
}
/**
 * The base study object.
 * @export
 * @interface BaseStudyV1
 */
export interface BaseStudyV1 {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof BaseStudyV1
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof BaseStudyV1
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof BaseStudyV1
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof BaseStudyV1
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof BaseStudyV1
     */
    vendorProductId?: string;
    /**
     * 
     * @type {StudySubmissionTypeV1}
     * @memberof BaseStudyV1
     */
    submissionType?: StudySubmissionTypeV1;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof BaseStudyV1
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof BaseStudyV1
     */
    studyResultStatus?: BaseStudyV1StudyResultStatusEnum;
    /**
     * List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
     * @type {Array<string>}
     * @memberof BaseStudyV1
     * @deprecated
     */
    rejectionReasons?: Array<string>;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof BaseStudyV1
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof BaseStudyV1
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof BaseStudyV1
     */
    comment?: string;
    /**
     * The study canonical identifier. Immutable field. This is required for update.
     * @type {string}
     * @memberof BaseStudyV1
     */
    id?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof BaseStudyV1
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof BaseStudyV1
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof BaseStudyV1
     */
    createDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseStudyV1StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * The base study object.
 * @export
 * @interface BaseStudyV1M1
 */
export interface BaseStudyV1M1 {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof BaseStudyV1M1
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    vendorProductId?: string;
    /**
     * 
     * @type {StudySubmissionTypeV1}
     * @memberof BaseStudyV1M1
     */
    submissionType?: StudySubmissionTypeV1;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    studyResultStatus?: BaseStudyV1M1StudyResultStatusEnum;
    /**
     * List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
     * @type {Array<string>}
     * @memberof BaseStudyV1M1
     * @deprecated
     */
    rejectionReasons?: Array<string>;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    comment?: string;
    /**
     * 
     * @type {Array<ResourceLinkV1M1>}
     * @memberof BaseStudyV1M1
     */
    links?: Array<ResourceLinkV1M1>;
    /**
     * The study canonical identifier. Immutable field. This is required for update.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    id?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof BaseStudyV1M1
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    createDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseStudyV1M1StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * The base study object.
 * @export
 * @interface BaseStudyV1M2
 */
export interface BaseStudyV1M2 {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof BaseStudyV1M2
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof BaseStudyV1M2
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof BaseStudyV1M2
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof BaseStudyV1M2
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof BaseStudyV1M2
     */
    vendorProductId?: string;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof BaseStudyV1M2
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof BaseStudyV1M2
     */
    studyResultStatus?: BaseStudyV1M2StudyResultStatusEnum;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof BaseStudyV1M2
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof BaseStudyV1M2
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof BaseStudyV1M2
     */
    comment?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof BaseStudyV1M2
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof BaseStudyV1M2
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof BaseStudyV1M2
     */
    createDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseStudyV1M2StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * The study benchmark product category.
 * @export
 * @enum {string}
 */

export enum BenchmarkCategoryV1 {
    Appliances = 'APPLIANCES',
    AppsAndGames = 'APPS_AND_GAMES',
    ArtsCraftsAndSewing = 'ARTS_CRAFTS_AND_SEWING',
    Automotive = 'AUTOMOTIVE',
    Baby = 'BABY',
    BeautyAndPersonalCare = 'BEAUTY_AND_PERSONAL_CARE',
    Books = 'BOOKS',
    CellPhonesAndAccessories = 'CELL_PHONES_AND_ACCESSORIES',
    ClothingShoesAndJewelry = 'CLOTHING_SHOES_AND_JEWELRY',
    ComputersAndAccessories = 'COMPUTERS_AND_ACCESSORIES',
    DigitalMusic = 'DIGITAL_MUSIC',
    Electronics = 'ELECTRONICS',
    Education = 'EDUCATION',
    FinancialAndInsurance = 'FINANCIAL_AND_INSURANCE',
    Food = 'FOOD',
    Beverages = 'BEVERAGES',
    HealthAndHousehold = 'HEALTH_AND_HOUSEHOLD',
    HomeAndKitchen = 'HOME_AND_KITCHEN',
    KitchenAndDining = 'KITCHEN_AND_DINING',
    MoviesAndTv = 'MOVIES_AND_TV',
    OfficeProducts = 'OFFICE_PRODUCTS',
    PatioLawnAndGarden = 'PATIO_LAWN_AND_GARDEN',
    PetSupplies = 'PET_SUPPLIES',
    Restaurants = 'RESTAURANTS',
    Software = 'SOFTWARE',
    SportsAndOutdoors = 'SPORTS_AND_OUTDOORS',
    TelecommunicationsServices = 'TELECOMMUNICATIONS_SERVICES',
    ToolsAndHomeImprovement = 'TOOLS_AND_HOME_IMPROVEMENT',
    ToysAndGames = 'TOYS_AND_GAMES',
    VideoGames = 'VIDEO_GAMES',
    Hospitality = 'HOSPITALITY'
}

/**
 * The result of Brand Lift study.
 * @export
 * @interface BrandLiftStudyResultV1
 */
export interface BrandLiftStudyResultV1 {
    /**
     * Total number of responses received in the Survey.
     * @type {number}
     * @memberof BrandLiftStudyResultV1
     */
    totalResponses?: number;
    /**
     * Summary of Brand Lift achieved for each objective.
     * @type {Array<BrandLiftSummaryV1>}
     * @memberof BrandLiftStudyResultV1
     */
    brandLiftSummary?: Array<BrandLiftSummaryV1>;
    /**
     * The canonical Id of Study.
     * @type {string}
     * @memberof BrandLiftStudyResultV1
     */
    studyId?: string;
    /**
     * Detailed response rate for each response in Survey question aggregated by different segments.
     * @type {Array<SurveyResponseResultV1>}
     * @memberof BrandLiftStudyResultV1
     */
    surveyResponses?: Array<SurveyResponseResultV1>;
}
/**
 * The result of Brand Lift study.
 * @export
 * @interface BrandLiftStudyResultV1M1
 */
export interface BrandLiftStudyResultV1M1 {
    /**
     * Total number of responses received in the Survey.
     * @type {number}
     * @memberof BrandLiftStudyResultV1M1
     */
    totalResponses?: number;
    /**
     * Summary of Brand Lift achieved for each objective.
     * @type {Array<BrandLiftSummaryV1M1>}
     * @memberof BrandLiftStudyResultV1M1
     */
    brandLiftSummary?: Array<BrandLiftSummaryV1M1>;
    /**
     * The canonical Id of Study.
     * @type {string}
     * @memberof BrandLiftStudyResultV1M1
     */
    studyId?: string;
    /**
     * Detailed response rate for each response in Survey question aggregated by different segments.
     * @type {Array<SurveyResponseResultV1M1>}
     * @memberof BrandLiftStudyResultV1M1
     */
    surveyResponses?: Array<SurveyResponseResultV1M1>;
}
/**
 * Summary of Brand Lift achieved for an objective.
 * @export
 * @interface BrandLiftSummaryV1
 */
export interface BrandLiftSummaryV1 {
    /**
     * Qualifying responses aggregated to measure the Brand Lift.
     * @type {Array<string>}
     * @memberof BrandLiftSummaryV1
     */
    qualifyingResponses?: Array<string>;
    /**
     * The significance percentage of achieved Brand Lift.
     * @type {number}
     * @memberof BrandLiftSummaryV1
     */
    statisticalSignificance?: number;
    /**
     * Control group response rate.
     * @type {number}
     * @memberof BrandLiftSummaryV1
     */
    controlGroupRate?: number;
    /**
     * 
     * @type {SurveyQuestionObjectiveTypeV1}
     * @memberof BrandLiftSummaryV1
     */
    questionObjective?: SurveyQuestionObjectiveTypeV1;
    /**
     * Ad exposed group response rate.
     * @type {number}
     * @memberof BrandLiftSummaryV1
     */
    adExposedGroupRate?: number;
    /**
     * The benchmark lift rate for the selected product category in the Survey.
     * @type {number}
     * @memberof BrandLiftSummaryV1
     */
    benchmarkLiftRate?: number;
    /**
     * Text of the Survey question.
     * @type {string}
     * @memberof BrandLiftSummaryV1
     */
    questionText?: string;
}
/**
 * Summary of Brand Lift achieved for an objective.
 * @export
 * @interface BrandLiftSummaryV1M1
 */
export interface BrandLiftSummaryV1M1 {
    /**
     * Qualifying responses aggregated to measure the Brand Lift.
     * @type {Array<string>}
     * @memberof BrandLiftSummaryV1M1
     */
    qualifyingResponses?: Array<string>;
    /**
     * The significance percentage of achieved Brand Lift.
     * @type {number}
     * @memberof BrandLiftSummaryV1M1
     */
    statisticalSignificance?: number;
    /**
     * Control group response rate.
     * @type {number}
     * @memberof BrandLiftSummaryV1M1
     */
    controlGroupRate?: number;
    /**
     * 
     * @type {SurveyQuestionObjectiveTypeV1M1}
     * @memberof BrandLiftSummaryV1M1
     */
    questionObjective?: SurveyQuestionObjectiveTypeV1M1;
    /**
     * Ad exposed group response rate.
     * @type {number}
     * @memberof BrandLiftSummaryV1M1
     */
    adExposedGroupRate?: number;
    /**
     * The benchmark lift rate for the selected product category in the Survey.
     * @type {number}
     * @memberof BrandLiftSummaryV1M1
     */
    benchmarkLiftRate?: number;
    /**
     * Text of the Survey question.
     * @type {string}
     * @memberof BrandLiftSummaryV1M1
     */
    questionText?: string;
}
/**
 * Create DSP AUDIENCE_RESEARCH study object.
 * @export
 * @interface CreateDSPAudienceResearchStudyV1M2
 */
export interface CreateDSPAudienceResearchStudyV1M2 {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    vendorProductId?: string;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    studyResultStatus?: CreateDSPAudienceResearchStudyV1M2StudyResultStatusEnum;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    comment?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    createDate?: string;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    advertiserId?: string;
    /**
     * The study brand name.
     * @type {string}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    brandName?: string;
    /**
     * 
     * @type {AudienceTargetingGroupV1M2}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    audienceTargetingGroup?: AudienceTargetingGroupV1M2;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    peerNames?: Array<string>;
    /**
     * The study product category.
     * @type {string}
     * @memberof CreateDSPAudienceResearchStudyV1M2
     */
    productCategory?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateDSPAudienceResearchStudyV1M2StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * Create DSP CREATIVE_TESTING study object.
 * @export
 * @interface CreateDSPCreativeTestingStudyV1M2
 */
export interface CreateDSPCreativeTestingStudyV1M2 {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    vendorProductId?: string;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    studyResultStatus?: CreateDSPCreativeTestingStudyV1M2StudyResultStatusEnum;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    comment?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    createDate?: string;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    advertiserId?: string;
    /**
     * The study brand name.
     * @type {string}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    brandName?: string;
    /**
     * A list of assets to be used for the creative testing study as part of either the survey question or the response. In case of API responses, number of assets returned would be limited to 10 even if a creative testing study has more than 10 assets associated with it.
     * @type {Array<AssetV1M2>}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    assets?: Array<AssetV1M2>;
    /**
     * 
     * @type {AudienceTargetingGroupV1M2}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    audienceTargetingGroup?: AudienceTargetingGroupV1M2;
    /**
     * Optional study product category.
     * @type {string}
     * @memberof CreateDSPCreativeTestingStudyV1M2
     */
    productCategory?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateDSPCreativeTestingStudyV1M2StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * The result of Creative Testing study.
 * @export
 * @interface CreativeTestingStudyResultV1M2
 */
export interface CreativeTestingStudyResultV1M2 {
    /**
     * Total number of responses received in the Survey.
     * @type {number}
     * @memberof CreativeTestingStudyResultV1M2
     */
    totalResponses?: number;
    /**
     * The canonical Id of Study.
     * @type {string}
     * @memberof CreativeTestingStudyResultV1M2
     */
    studyId?: string;
    /**
     * Detailed response rate for each response in Survey question aggregated by different segments.
     * @type {Array<SurveyResponseResultV1M2>}
     * @memberof CreativeTestingStudyResultV1M2
     */
    surveyResponses?: Array<SurveyResponseResultV1M2>;
}
/**
 * The response object for downloading curated study results.
 * @export
 * @interface CuratedStudyResultV1
 */
export interface CuratedStudyResultV1 {
    /**
     * A pre-signed S3 URL which links to the curated study results file. The URL expires after 60 seconds. If the URL expires before the curated results file is downloaded, a new download request must be created.
     * @type {string}
     * @memberof CuratedStudyResultV1
     */
    fileDownloadUrl?: string;
    /**
     * The file type of the curated results file.
     * @type {string}
     * @memberof CuratedStudyResultV1
     */
    fileType?: CuratedStudyResultV1FileTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CuratedStudyResultV1FileTypeEnum {
    Pdf = 'PDF',
    Powerpoint = 'POWERPOINT',
    Jpeg = 'JPEG',
    Png = 'PNG',
    Other = 'OTHER'
}

/**
 * Currency Code.
 * @export
 * @enum {string}
 */

export enum CurrencyCodeV1M2 {
    Usd = 'USD',
    Cad = 'CAD',
    Mxn = 'MXN',
    Brl = 'BRL',
    Gbp = 'GBP',
    Eur = 'EUR',
    Aed = 'AED',
    Sar = 'SAR',
    Inr = 'INR',
    Jpy = 'JPY',
    Aud = 'AUD',
    Sgd = 'SGD',
    Try = 'TRY',
    Sek = 'SEK',
    Egp = 'EGP',
    Pln = 'PLN'
}

/**
 * The templated measurement survey question.
 * @export
 * @interface CustomSurveyQuestionV1
 */
export interface CustomSurveyQuestionV1 {
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomSurveyQuestionV1
     */
    responses?: Array<string>;
    /**
     * 
     * @type {SurveyQuestionTypeV1}
     * @memberof CustomSurveyQuestionV1
     */
    type?: SurveyQuestionTypeV1;
    /**
     * The survey question text.
     * @type {string}
     * @memberof CustomSurveyQuestionV1
     */
    questionText?: string;
}
/**
 * The request object of DSP Audience Research study cost estimation.
 * @export
 * @interface DSPAudienceResearchCostEstimationRequestV1M2
 */
export interface DSPAudienceResearchCostEstimationRequestV1M2 {
    /**
     * vendor product canonical identifier.
     * @type {string}
     * @memberof DSPAudienceResearchCostEstimationRequestV1M2
     */
    vendorProductId?: string;
    /**
     * A list of templated survey questions.
     * @type {Array<TemplatedSurveyQuestionV1>}
     * @memberof DSPAudienceResearchCostEstimationRequestV1M2
     */
    templatedQuestions?: Array<TemplatedSurveyQuestionV1>;
    /**
     * A list of custom survey questions.
     * @type {Array<CustomSurveyQuestionV1>}
     * @memberof DSPAudienceResearchCostEstimationRequestV1M2
     */
    customQuestions?: Array<CustomSurveyQuestionV1>;
    /**
     * 
     * @type {MeasurementLocaleV1}
     * @memberof DSPAudienceResearchCostEstimationRequestV1M2
     */
    locale?: MeasurementLocaleV1;
    /**
     * The associated advertiser identifier.
     * @type {string}
     * @memberof DSPAudienceResearchCostEstimationRequestV1M2
     */
    advertiserId?: string;
}
/**
 * The response object of DSP Audience Research study cost estimation.
 * @export
 * @interface DSPAudienceResearchCostEstimationResponseV1M2
 */
export interface DSPAudienceResearchCostEstimationResponseV1M2 {
    /**
     * The estimated cost for the Study.
     * @type {number}
     * @memberof DSPAudienceResearchCostEstimationResponseV1M2
     */
    cost?: number;
    /**
     * 
     * @type {CurrencyCodeV1M2}
     * @memberof DSPAudienceResearchCostEstimationResponseV1M2
     */
    currencyCode?: CurrencyCodeV1M2;
}
/**
 * The audience research study eligibility data.
 * @export
 * @interface DSPAudienceResearchEligibilityDataV1M2
 */
export interface DSPAudienceResearchEligibilityDataV1M2 {
    /**
     * 
     * @type {AudienceTargetingGroupV1M2}
     * @memberof DSPAudienceResearchEligibilityDataV1M2
     */
    audienceTargetingGroup?: AudienceTargetingGroupV1M2;
}
/**
 * The request object of DSP Audience Research study eligibility check.
 * @export
 * @interface DSPAudienceResearchEligibilityRequestV1M2
 */
export interface DSPAudienceResearchEligibilityRequestV1M2 {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<FundingTypeV1M2>}
     * @memberof DSPAudienceResearchEligibilityRequestV1M2
     */
    fundingTypeFilters?: Array<FundingTypeV1M2>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof DSPAudienceResearchEligibilityRequestV1M2
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<VendorTypeV1M2>}
     * @memberof DSPAudienceResearchEligibilityRequestV1M2
     */
    vendorTypeFilters?: Array<VendorTypeV1M2>;
    /**
     * 
     * @type {AudienceTargetingGroupV1M2}
     * @memberof DSPAudienceResearchEligibilityRequestV1M2
     */
    audienceTargetingGroup?: AudienceTargetingGroupV1M2;
}
/**
 * The basic model for all DSP AUDIENCE_RESEARCH objective studies.
 * @export
 * @interface DSPAudienceResearchMetadataV1M2
 */
export interface DSPAudienceResearchMetadataV1M2 {
    /**
     * The study brand name.
     * @type {string}
     * @memberof DSPAudienceResearchMetadataV1M2
     */
    brandName?: string;
    /**
     * 
     * @type {AudienceTargetingGroupV1M2}
     * @memberof DSPAudienceResearchMetadataV1M2
     */
    audienceTargetingGroup?: AudienceTargetingGroupV1M2;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof DSPAudienceResearchMetadataV1M2
     */
    peerNames?: Array<string>;
    /**
     * The study product category.
     * @type {string}
     * @memberof DSPAudienceResearchMetadataV1M2
     */
    productCategory?: string;
}
/**
 * DSP AUDIENCE_RESEARCH study object.
 * @export
 * @interface DSPAudienceResearchStudyV1M2
 */
export interface DSPAudienceResearchStudyV1M2 {
    /**
     * The study canonical identifier. Immutable field.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    id?: string;
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    vendorProductId?: string;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    studyResultStatus?: DSPAudienceResearchStudyV1M2StudyResultStatusEnum;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    comment?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    createDate?: string;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    advertiserId?: string;
    /**
     * The study brand name.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    brandName?: string;
    /**
     * 
     * @type {AudienceTargetingGroupV1M2}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    audienceTargetingGroup?: AudienceTargetingGroupV1M2;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    peerNames?: Array<string>;
    /**
     * The study product category.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2
     */
    productCategory?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DSPAudienceResearchStudyV1M2StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * 
 * @export
 * @interface DSPAudienceResearchStudyV1M2AllOf
 */
export interface DSPAudienceResearchStudyV1M2AllOf {
    /**
     * The study canonical identifier. Immutable field.
     * @type {string}
     * @memberof DSPAudienceResearchStudyV1M2AllOf
     */
    id?: string;
}
/**
 * The campaign study eligibility data.
 * @export
 * @interface DSPBrandLiftEligibilityDataV1
 */
export interface DSPBrandLiftEligibilityDataV1 {
    /**
     * Optional current study identifier, if provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility check.
     * @type {string}
     * @memberof DSPBrandLiftEligibilityDataV1
     */
    currentStudyId?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the eligibility check.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityDataV1
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityDataV1
     */
    orderIds?: Array<string>;
}
/**
 * The request object of DSP brand lift eligibility check.
 * @export
 * @interface DSPBrandLiftEligibilityRequestV1
 */
export interface DSPBrandLiftEligibilityRequestV1 {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<FundingTypeV1>}
     * @memberof DSPBrandLiftEligibilityRequestV1
     */
    fundingTypeFilters?: Array<FundingTypeV1>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityRequestV1
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<VendorTypeV1>}
     * @memberof DSPBrandLiftEligibilityRequestV1
     */
    vendorTypeFilters?: Array<VendorTypeV1>;
    /**
     * Optional current study identifier, if provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility check.
     * @type {string}
     * @memberof DSPBrandLiftEligibilityRequestV1
     */
    currentStudyId?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the eligibility check.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityRequestV1
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityRequestV1
     */
    orderIds?: Array<string>;
}
/**
 * The request object of DSP brand lift eligibility check.
 * @export
 * @interface DSPBrandLiftEligibilityRequestV1M1
 */
export interface DSPBrandLiftEligibilityRequestV1M1 {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<FundingTypeV1M1>}
     * @memberof DSPBrandLiftEligibilityRequestV1M1
     */
    fundingTypeFilters?: Array<FundingTypeV1M1>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityRequestV1M1
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<VendorTypeV1M1>}
     * @memberof DSPBrandLiftEligibilityRequestV1M1
     */
    vendorTypeFilters?: Array<VendorTypeV1M1>;
    /**
     * Optional current study identifier, if provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility check.
     * @type {string}
     * @memberof DSPBrandLiftEligibilityRequestV1M1
     */
    currentStudyId?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the eligibility check.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityRequestV1M1
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityRequestV1M1
     */
    orderIds?: Array<string>;
}
/**
 * The basic model for all DSP BRAND_LIFT objective studies.
 * @export
 * @interface DSPBrandLiftMetadataV1
 */
export interface DSPBrandLiftMetadataV1 {
    /**
     * The study brand name.
     * @type {string}
     * @memberof DSPBrandLiftMetadataV1
     */
    brandName?: string;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof DSPBrandLiftMetadataV1
     */
    peerNames?: Array<string>;
    /**
     * 
     * @type {BenchmarkCategoryV1}
     * @memberof DSPBrandLiftMetadataV1
     */
    benchmarkCategory?: BenchmarkCategoryV1;
    /**
     * The study product category.
     * @type {string}
     * @memberof DSPBrandLiftMetadataV1
     */
    productCategory?: string;
}
/**
 * The basic model for all DSP BRAND_LIFT objective studies.
 * @export
 * @interface DSPBrandLiftMetadataV1M1
 */
export interface DSPBrandLiftMetadataV1M1 {
    /**
     * The study brand name.
     * @type {string}
     * @memberof DSPBrandLiftMetadataV1M1
     */
    brandName?: string;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof DSPBrandLiftMetadataV1M1
     */
    peerNames?: Array<string>;
    /**
     * The verb that will be used in the applicable survey questions to construct the question text.
     * @type {string}
     * @memberof DSPBrandLiftMetadataV1M1
     */
    verb?: string;
    /**
     * 
     * @type {BenchmarkCategoryV1}
     * @memberof DSPBrandLiftMetadataV1M1
     */
    benchmarkCategory?: BenchmarkCategoryV1;
    /**
     * The study product category.
     * @type {string}
     * @memberof DSPBrandLiftMetadataV1M1
     */
    productCategory?: string;
}
/**
 * DSP BRAND_LIFT study object.
 * @export
 * @interface DSPBrandLiftStudyV1
 */
export interface DSPBrandLiftStudyV1 {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    vendorProductId?: string;
    /**
     * 
     * @type {StudySubmissionTypeV1}
     * @memberof DSPBrandLiftStudyV1
     */
    submissionType?: StudySubmissionTypeV1;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    studyResultStatus?: DSPBrandLiftStudyV1StudyResultStatusEnum;
    /**
     * List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1
     * @deprecated
     */
    rejectionReasons?: Array<string>;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    comment?: string;
    /**
     * The study canonical identifier. Immutable field. This is required for update.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    id?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof DSPBrandLiftStudyV1
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    createDate?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1
     */
    orderIds?: Array<string>;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    advertiserId?: string;
    /**
     * The study brand name.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    brandName?: string;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1
     */
    peerNames?: Array<string>;
    /**
     * 
     * @type {BenchmarkCategoryV1}
     * @memberof DSPBrandLiftStudyV1
     */
    benchmarkCategory?: BenchmarkCategoryV1;
    /**
     * The study product category.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    productCategory?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DSPBrandLiftStudyV1StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * DSP BRAND_LIFT study object.
 * @export
 * @interface DSPBrandLiftStudyV1M1
 */
export interface DSPBrandLiftStudyV1M1 {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1M1
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    vendorProductId?: string;
    /**
     * 
     * @type {StudySubmissionTypeV1}
     * @memberof DSPBrandLiftStudyV1M1
     */
    submissionType?: StudySubmissionTypeV1;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    studyResultStatus?: DSPBrandLiftStudyV1M1StudyResultStatusEnum;
    /**
     * List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1M1
     * @deprecated
     */
    rejectionReasons?: Array<string>;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    comment?: string;
    /**
     * 
     * @type {Array<ResourceLinkV1M1>}
     * @memberof DSPBrandLiftStudyV1M1
     */
    links?: Array<ResourceLinkV1M1>;
    /**
     * The study canonical identifier. Immutable field. This is required for update.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    id?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof DSPBrandLiftStudyV1M1
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    createDate?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1M1
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1M1
     */
    orderIds?: Array<string>;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    advertiserId?: string;
    /**
     * The study brand name.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    brandName?: string;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1M1
     */
    peerNames?: Array<string>;
    /**
     * The verb that will be used in the applicable survey questions to construct the question text.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    verb?: string;
    /**
     * 
     * @type {BenchmarkCategoryV1}
     * @memberof DSPBrandLiftStudyV1M1
     */
    benchmarkCategory?: BenchmarkCategoryV1;
    /**
     * The study product category.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    productCategory?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DSPBrandLiftStudyV1M1StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * The basic model for all DSP CAMPAIGN_MEASUREMENT objective studies.
 * @export
 * @interface DSPCampaignMeasurementMetadataV1
 */
export interface DSPCampaignMeasurementMetadataV1 {
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof DSPCampaignMeasurementMetadataV1
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPCampaignMeasurementMetadataV1
     */
    orderIds?: Array<string>;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof DSPCampaignMeasurementMetadataV1
     */
    advertiserId?: string;
}
/**
 * The basic model for all DSP CAMPAIGN_MEASUREMENT objective studies.
 * @export
 * @interface DSPCampaignMeasurementMetadataV1M1
 */
export interface DSPCampaignMeasurementMetadataV1M1 {
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof DSPCampaignMeasurementMetadataV1M1
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPCampaignMeasurementMetadataV1M1
     */
    orderIds?: Array<string>;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof DSPCampaignMeasurementMetadataV1M1
     */
    advertiserId?: string;
}
/**
 * The basic model for all DSP CAMPAIGN_PLANNING objective studies.
 * @export
 * @interface DSPCampaignPlanningMetadataV1M2
 */
export interface DSPCampaignPlanningMetadataV1M2 {
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof DSPCampaignPlanningMetadataV1M2
     */
    advertiserId?: string;
}
/**
 * The request object of DSP Creative Testing study cost estimation.
 * @export
 * @interface DSPCreativeTestingCostEstimationRequestV1M2
 */
export interface DSPCreativeTestingCostEstimationRequestV1M2 {
    /**
     * vendor product canonical identifier.
     * @type {string}
     * @memberof DSPCreativeTestingCostEstimationRequestV1M2
     */
    vendorProductId?: string;
    /**
     * A list of templated survey questions.
     * @type {Array<TemplatedSurveyQuestionV1>}
     * @memberof DSPCreativeTestingCostEstimationRequestV1M2
     */
    templatedQuestions?: Array<TemplatedSurveyQuestionV1>;
    /**
     * A list of assets to be used for the creative testing study as part of either the survey question or the response.
     * @type {Array<AssetV1M2>}
     * @memberof DSPCreativeTestingCostEstimationRequestV1M2
     */
    assets?: Array<AssetV1M2>;
    /**
     * A list of custom survey questions.
     * @type {Array<CustomSurveyQuestionV1>}
     * @memberof DSPCreativeTestingCostEstimationRequestV1M2
     */
    customQuestions?: Array<CustomSurveyQuestionV1>;
    /**
     * 
     * @type {MeasurementLocaleV1}
     * @memberof DSPCreativeTestingCostEstimationRequestV1M2
     */
    locale?: MeasurementLocaleV1;
    /**
     * The associated advertiser identifier.
     * @type {string}
     * @memberof DSPCreativeTestingCostEstimationRequestV1M2
     */
    advertiserId?: string;
}
/**
 * The response object of DSP Creative Testing study cost estimation.
 * @export
 * @interface DSPCreativeTestingCostEstimationResponseV1M2
 */
export interface DSPCreativeTestingCostEstimationResponseV1M2 {
    /**
     * The estimated cost for the Study.
     * @type {number}
     * @memberof DSPCreativeTestingCostEstimationResponseV1M2
     */
    cost?: number;
    /**
     * 
     * @type {CurrencyCodeV1M2}
     * @memberof DSPCreativeTestingCostEstimationResponseV1M2
     */
    currencyCode?: CurrencyCodeV1M2;
}
/**
 * The creative testing study eligibility data.
 * @export
 * @interface DSPCreativeTestingEligibilityDataV1M2
 */
export interface DSPCreativeTestingEligibilityDataV1M2 {
    /**
     * 
     * @type {AudienceTargetingGroupV1M2}
     * @memberof DSPCreativeTestingEligibilityDataV1M2
     */
    audienceTargetingGroup?: AudienceTargetingGroupV1M2;
}
/**
 * The request object of DSP Creative Testing study eligibility check.
 * @export
 * @interface DSPCreativeTestingEligibilityRequestV1M2
 */
export interface DSPCreativeTestingEligibilityRequestV1M2 {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<FundingTypeV1M2>}
     * @memberof DSPCreativeTestingEligibilityRequestV1M2
     */
    fundingTypeFilters?: Array<FundingTypeV1M2>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof DSPCreativeTestingEligibilityRequestV1M2
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<VendorTypeV1M2>}
     * @memberof DSPCreativeTestingEligibilityRequestV1M2
     */
    vendorTypeFilters?: Array<VendorTypeV1M2>;
    /**
     * 
     * @type {AudienceTargetingGroupV1M2}
     * @memberof DSPCreativeTestingEligibilityRequestV1M2
     */
    audienceTargetingGroup?: AudienceTargetingGroupV1M2;
}
/**
 * The basic model for all DSP CREATIVE_TESTING objective studies.
 * @export
 * @interface DSPCreativeTestingMetadataV1M2
 */
export interface DSPCreativeTestingMetadataV1M2 {
    /**
     * The study brand name.
     * @type {string}
     * @memberof DSPCreativeTestingMetadataV1M2
     */
    brandName?: string;
    /**
     * A list of assets to be used for the creative testing study as part of either the survey question or the response. In case of API responses, number of assets returned would be limited to 10 even if a creative testing study has more than 10 assets associated with it.
     * @type {Array<AssetV1M2>}
     * @memberof DSPCreativeTestingMetadataV1M2
     */
    assets?: Array<AssetV1M2>;
    /**
     * 
     * @type {AudienceTargetingGroupV1M2}
     * @memberof DSPCreativeTestingMetadataV1M2
     */
    audienceTargetingGroup?: AudienceTargetingGroupV1M2;
    /**
     * Optional study product category.
     * @type {string}
     * @memberof DSPCreativeTestingMetadataV1M2
     */
    productCategory?: string;
}
/**
 * DSP CREATIVE_TESTING study object.
 * @export
 * @interface DSPCreativeTestingStudyV1M2
 */
export interface DSPCreativeTestingStudyV1M2 {
    /**
     * The study canonical identifier. Immutable field.
     * @type {string}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    id?: string;
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    vendorProductId?: string;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    studyResultStatus?: DSPCreativeTestingStudyV1M2StudyResultStatusEnum;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    comment?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    createDate?: string;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    advertiserId?: string;
    /**
     * The study brand name.
     * @type {string}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    brandName?: string;
    /**
     * A list of assets to be used for the creative testing study as part of either the survey question or the response. In case of API responses, number of assets returned would be limited to 10 even if a creative testing study has more than 10 assets associated with it.
     * @type {Array<AssetV1M2>}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    assets?: Array<AssetV1M2>;
    /**
     * 
     * @type {AudienceTargetingGroupV1M2}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    audienceTargetingGroup?: AudienceTargetingGroupV1M2;
    /**
     * Optional study product category.
     * @type {string}
     * @memberof DSPCreativeTestingStudyV1M2
     */
    productCategory?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DSPCreativeTestingStudyV1M2StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * The campaign study eligibility data.
 * @export
 * @interface DSPOmnichannelMetricsEligibilityDataV1M2
 */
export interface DSPOmnichannelMetricsEligibilityDataV1M2 {
    /**
     * Optional current study identifier. If provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility checks.
     * @type {string}
     * @memberof DSPOmnichannelMetricsEligibilityDataV1M2
     */
    currentStudyId?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the eligibility check.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsEligibilityDataV1M2
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsEligibilityDataV1M2
     */
    orderIds?: Array<string>;
    /**
     * A list of canonical brand identifiers.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsEligibilityDataV1M2
     */
    brandIds?: Array<string>;
}
/**
 * The request object of DSP omnichannel metrics eligibility check.
 * @export
 * @interface DSPOmnichannelMetricsEligibilityRequestV1M2
 */
export interface DSPOmnichannelMetricsEligibilityRequestV1M2 {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<FundingTypeV1M2>}
     * @memberof DSPOmnichannelMetricsEligibilityRequestV1M2
     */
    fundingTypeFilters?: Array<FundingTypeV1M2>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsEligibilityRequestV1M2
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<VendorTypeV1M2>}
     * @memberof DSPOmnichannelMetricsEligibilityRequestV1M2
     */
    vendorTypeFilters?: Array<VendorTypeV1M2>;
    /**
     * Optional current study identifier. If provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility checks.
     * @type {string}
     * @memberof DSPOmnichannelMetricsEligibilityRequestV1M2
     */
    currentStudyId?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the eligibility check.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsEligibilityRequestV1M2
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsEligibilityRequestV1M2
     */
    orderIds?: Array<string>;
    /**
     * A list of canonical brand identifiers.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsEligibilityRequestV1M2
     */
    brandIds?: Array<string>;
}
/**
 * The request object of DSP omnichannel metrics eligibility check.
 * @export
 * @interface DSPOmnichannelMetricsEligibilityRequestV1M3
 */
export interface DSPOmnichannelMetricsEligibilityRequestV1M3 {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<FundingTypeV1M3>}
     * @memberof DSPOmnichannelMetricsEligibilityRequestV1M3
     */
    fundingTypeFilters?: Array<FundingTypeV1M3>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsEligibilityRequestV1M3
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<VendorTypeV1M3>}
     * @memberof DSPOmnichannelMetricsEligibilityRequestV1M3
     */
    vendorTypeFilters?: Array<VendorTypeV1M3>;
    /**
     * Optional current study identifier. If provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility checks.
     * @type {string}
     * @memberof DSPOmnichannelMetricsEligibilityRequestV1M3
     */
    currentStudyId?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the eligibility check.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsEligibilityRequestV1M3
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsEligibilityRequestV1M3
     */
    orderIds?: Array<string>;
    /**
     * A list of canonical brand identifiers.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsEligibilityRequestV1M3
     */
    brandIds?: Array<string>;
}
/**
 * The basic model for all DSP OMNICHANNEL_METRICS objective studies.
 * @export
 * @interface DSPOmnichannelMetricsMetadataV1M2
 */
export interface DSPOmnichannelMetricsMetadataV1M2 {
    /**
     * A list of canonical brand ids to be tracked for off-Amazon conversions.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsMetadataV1M2
     */
    brandIds?: Array<string>;
}
/**
 * DSP OMNICHANNEL_METRICS study object.
 * @export
 * @interface DSPOmnichannelMetricsStudyV1M2
 */
export interface DSPOmnichannelMetricsStudyV1M2 {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    vendorProductId?: string;
    /**
     * 
     * @type {StudySubmissionTypeV1}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    submissionType?: StudySubmissionTypeV1;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    studyResultStatus?: DSPOmnichannelMetricsStudyV1M2StudyResultStatusEnum;
    /**
     * List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     * @deprecated
     */
    rejectionReasons?: Array<string>;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    comment?: string;
    /**
     * The study canonical identifier. Immutable field. This is required for update.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    id?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    createDate?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    orderIds?: Array<string>;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    advertiserId?: string;
    /**
     * A list of canonical brand ids to be tracked for off-Amazon conversions.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsStudyV1M2
     */
    brandIds?: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum DSPOmnichannelMetricsStudyV1M2StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * DSP OMNICHANNEL_METRICS study object.
 * @export
 * @interface DSPOmnichannelMetricsStudyV1M3
 */
export interface DSPOmnichannelMetricsStudyV1M3 {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    vendorProductId?: string;
    /**
     * 
     * @type {StudySubmissionTypeV1}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    submissionType?: StudySubmissionTypeV1;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    studyResultStatus?: DSPOmnichannelMetricsStudyV1M3StudyResultStatusEnum;
    /**
     * List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     * @deprecated
     */
    rejectionReasons?: Array<string>;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    comment?: string;
    /**
     * 
     * @type {Array<ResourceLinkV1M1>}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    links?: Array<ResourceLinkV1M1>;
    /**
     * The study canonical identifier. Immutable field. This is required for update.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    id?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    createDate?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    orderIds?: Array<string>;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    advertiserId?: string;
    /**
     * A list of canonical brand ids to be tracked for off-Amazon conversions.
     * @type {Array<string>}
     * @memberof DSPOmnichannelMetricsStudyV1M3
     */
    brandIds?: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum DSPOmnichannelMetricsStudyV1M3StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * Fields that will be checked as part of eligibility API call.
 * @export
 * @enum {string}
 */

export enum EligibilityFieldV1 {
    Locale = 'LOCALE',
    Budget = 'BUDGET',
    Goal = 'GOAL',
    StartTime = 'START_TIME',
    EndTime = 'END_TIME',
    FlightLength = 'FLIGHT_LENGTH',
    LeadTime = 'LEAD_TIME',
    Impressions = 'IMPRESSIONS',
    Order = 'ORDER'
}

/**
 * Fields that will be checked as part of eligibility API call.
 * @export
 * @enum {string}
 */

export enum EligibilityFieldV1M2 {
    Locale = 'LOCALE',
    Budget = 'BUDGET',
    Goal = 'GOAL',
    StartTime = 'START_TIME',
    EndTime = 'END_TIME',
    FlightLength = 'FLIGHT_LENGTH',
    LeadTime = 'LEAD_TIME',
    Impressions = 'IMPRESSIONS',
    Order = 'ORDER',
    BuyerCount = 'BUYER_COUNT'
}

/**
 * Supported values are WARNING, ERROR. ERROR severity issues need to be resolved while WARNING severity issues can be ignored.
 * @export
 * @enum {string}
 */

export enum EligibilityIssueSeverityV1 {
    Warning = 'WARNING',
    Error = 'ERROR'
}

/**
 * The list of eligibility issues.
 * @export
 * @interface EligibilityIssueV1
 */
export interface EligibilityIssueV1 {
    /**
     * 
     * @type {EligibilityIssueSeverityV1}
     * @memberof EligibilityIssueV1
     */
    severity?: EligibilityIssueSeverityV1;
    /**
     * An enumerated issue code for machine use.
     * @type {string}
     * @memberof EligibilityIssueV1
     */
    code?: string;
    /**
     * 
     * @type {EligibilityFieldV1}
     * @memberof EligibilityIssueV1
     */
    field?: EligibilityFieldV1;
    /**
     * A human-readable description of the issue with suggestions on how to resolve the issue.
     * @type {string}
     * @memberof EligibilityIssueV1
     */
    message?: string;
}
/**
 * The list of eligibility issues.
 * @export
 * @interface EligibilityIssueV1M2
 */
export interface EligibilityIssueV1M2 {
    /**
     * 
     * @type {EligibilityIssueSeverityV1}
     * @memberof EligibilityIssueV1M2
     */
    severity?: EligibilityIssueSeverityV1;
    /**
     * An enumerated issue code for machine use.
     * @type {string}
     * @memberof EligibilityIssueV1M2
     */
    code?: string;
    /**
     * 
     * @type {EligibilityFieldV1M2}
     * @memberof EligibilityIssueV1M2
     */
    field?: EligibilityFieldV1M2;
    /**
     * A human-readable description of the issue with suggestions on how to resolve the issue.
     * @type {string}
     * @memberof EligibilityIssueV1M2
     */
    message?: string;
}
/**
 * The eligibility metadata.
 * @export
 * @interface EligibilityMetadataV1
 */
export interface EligibilityMetadataV1 {
    /**
     * The latest end date of the associated orders in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof EligibilityMetadataV1
     */
    endDate?: string;
    /**
     * The total estimated impressions.
     * @type {number}
     * @memberof EligibilityMetadataV1
     */
    impressions?: number;
    /**
     * The flight length of the associated orders. Expressed in days.
     * @type {number}
     * @memberof EligibilityMetadataV1
     */
    flightLength?: number;
    /**
     * The earliest start date of associated orders in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof EligibilityMetadataV1
     */
    startDate?: string;
    /**
     * The total budget. Expressed in dollars.
     * @type {number}
     * @memberof EligibilityMetadataV1
     */
    budget?: number;
}
/**
 * The eligibility check response object.
 * @export
 * @interface EligibilityResponseV1
 */
export interface EligibilityResponseV1 {
    /**
     * 
     * @type {EligibilityMetadataV1}
     * @memberof EligibilityResponseV1
     */
    metadata?: EligibilityMetadataV1;
    /**
     * 
     * @type {string}
     * @memberof EligibilityResponseV1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<VendorProductEligibilityV1>}
     * @memberof EligibilityResponseV1
     */
    vendorProductEligibilities?: Array<VendorProductEligibilityV1>;
}
/**
 * The eligibility check response object.
 * @export
 * @interface EligibilityResponseV1M2
 */
export interface EligibilityResponseV1M2 {
    /**
     * 
     * @type {EligibilityMetadataV1}
     * @memberof EligibilityResponseV1M2
     */
    metadata?: EligibilityMetadataV1;
    /**
     * 
     * @type {string}
     * @memberof EligibilityResponseV1M2
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<VendorProductEligibilityV1M2>}
     * @memberof EligibilityResponseV1M2
     */
    vendorProductEligibilities?: Array<VendorProductEligibilityV1M2>;
}
/**
 * Supported values are ELIGIBLE, INELIGIBLE and ELIGIBLE_WITH_WARNING. INELIGIBLE status indicates the study can not be created.
 * @export
 * @enum {string}
 */

export enum EligibilityStatusV1 {
    Eligible = 'ELIGIBLE',
    Ineligible = 'INELIGIBLE',
    EligibleWithWarning = 'ELIGIBLE_WITH_WARNING'
}

/**
 * The error response object.
 * @export
 * @interface ErrorV1
 */
export interface ErrorV1 {
    /**
     * Request Id that uniquely identifies your request.
     * @type {string}
     * @memberof ErrorV1
     */
    requestId?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof ErrorV1
     */
    message?: string;
    /**
     * 
     * @type {Array<SubErrorV1>}
     * @memberof ErrorV1
     */
    errors?: Array<SubErrorV1>;
}
/**
 * The measurement funding type. For COMPLIMENTARY studies the cost will be covered by Amazon.
 * @export
 * @enum {string}
 */

export enum FundingTypeV1 {
    Complimentary = 'COMPLIMENTARY'
}

/**
 * The measurement funding type. For COMPLIMENTARY studies the cost will be covered by Amazon.
 * @export
 * @enum {string}
 */

export enum FundingTypeV1M1 {
    Complimentary = 'COMPLIMENTARY',
    ThirdPartyPayment = 'THIRD_PARTY_PAYMENT'
}

/**
 * The measurement funding type. For COMPLIMENTARY studies the cost will be covered by Amazon.
 * @export
 * @enum {string}
 */

export enum FundingTypeV1M2 {
    Complimentary = 'COMPLIMENTARY',
    Cpm = 'CPM',
    FlatRate = 'FLAT_RATE'
}

/**
 * The measurement funding type. For COMPLIMENTARY studies the cost will be covered by Amazon.
 * @export
 * @enum {string}
 */

export enum FundingTypeV1M3 {
    Complimentary = 'COMPLIMENTARY',
    ThirdPartyPayment = 'THIRD_PARTY_PAYMENT',
    Cpm = 'CPM'
}

/**
 * The request object for fetching measurement studies.
 * @export
 * @interface GetMeasurementStudies
 */
export interface GetMeasurementStudies {
    /**
     * Study canonical identifier to filter with.
     * @type {Array<string>}
     * @memberof GetMeasurementStudies
     */
    studyIds?: Array<string>;
    /**
     * The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
     * @type {string}
     * @memberof GetMeasurementStudies
     */
    advertiserId?: string;
}
/**
 * The request object for audience research study.
 * @export
 * @interface GetMeasurementStudiesAudienceResearch
 */
export interface GetMeasurementStudiesAudienceResearch {
    /**
     * Study canonical identifier to filter with.
     * @type {Array<string>}
     * @memberof GetMeasurementStudiesAudienceResearch
     */
    studyIds?: Array<string>;
    /**
     * The advertiser canonical identifier. Used for querying audience research studies for a DSP advertiser Account.
     * @type {string}
     * @memberof GetMeasurementStudiesAudienceResearch
     */
    advertiserId?: string;
}
/**
 * The request object for fetching audience research study results of a specific study.
 * @export
 * @interface GetMeasurementStudiesAudienceResearchResult
 */
export interface GetMeasurementStudiesAudienceResearchResult {
    /**
     * The canonical identifier that represents a unique study.
     * @type {string}
     * @memberof GetMeasurementStudiesAudienceResearchResult
     */
    studyId?: string;
}
/**
 * The request object for fetching brand lift studies.
 * @export
 * @interface GetMeasurementStudiesBrandLift
 */
export interface GetMeasurementStudiesBrandLift {
    /**
     * Study canonical identifier to filter with.
     * @type {Array<string>}
     * @memberof GetMeasurementStudiesBrandLift
     */
    studyIds?: Array<string>;
    /**
     * The advertiser canonical identifier. Used for querying brand lift studies for a DSP advertiser Account.
     * @type {string}
     * @memberof GetMeasurementStudiesBrandLift
     */
    advertiserId?: string;
}
/**
 * The request object for fetching brand lift results of a specific study.
 * @export
 * @interface GetMeasurementStudiesBrandLiftResult
 */
export interface GetMeasurementStudiesBrandLiftResult {
    /**
     * The canonical identifier that represents a unique study.
     * @type {string}
     * @memberof GetMeasurementStudiesBrandLiftResult
     */
    studyId?: string;
}
/**
 * The request object for fetching creative testing studies.
 * @export
 * @interface GetMeasurementStudiesCreativeTesting
 */
export interface GetMeasurementStudiesCreativeTesting {
    /**
     * Study canonical identifier to filter with.
     * @type {Array<string>}
     * @memberof GetMeasurementStudiesCreativeTesting
     */
    studyIds?: Array<string>;
    /**
     * The advertiser canonical identifier. Used for querying creative testing studies for a DSP advertiser Account.
     * @type {string}
     * @memberof GetMeasurementStudiesCreativeTesting
     */
    advertiserId?: string;
}
/**
 * The request object for fetching creative testing results of a specific study.
 * @export
 * @interface GetMeasurementStudiesCreativeTestingResult
 */
export interface GetMeasurementStudiesCreativeTestingResult {
    /**
     * The canonical identifier that represents a unique study.
     * @type {string}
     * @memberof GetMeasurementStudiesCreativeTestingResult
     */
    studyId?: string;
}
/**
 * The request object for fetching omnichannel metrics study.
 * @export
 * @interface GetMeasurementStudiesOmnichannelMetrics
 */
export interface GetMeasurementStudiesOmnichannelMetrics {
    /**
     * Study canonical identifier to filter with.
     * @type {Array<string>}
     * @memberof GetMeasurementStudiesOmnichannelMetrics
     */
    studyIds?: Array<string>;
    /**
     * The advertiser canonical identifier. Used for querying omnichannel studies for a DSP advertiser Account.
     * @type {string}
     * @memberof GetMeasurementStudiesOmnichannelMetrics
     */
    advertiserId?: string;
}
/**
 * The request object for fetching omnichannel metrics results of a specific study.
 * @export
 * @interface GetMeasurementStudiesOmnichannelMetricsResult
 */
export interface GetMeasurementStudiesOmnichannelMetricsResult {
    /**
     * The canonical identifier that represents a unique study.
     * @type {string}
     * @memberof GetMeasurementStudiesOmnichannelMetricsResult
     */
    studyId?: string;
}
/**
 * The request object for fetching reach and frequency studies.
 * @export
 * @interface GetMeasurementStudiesReachAndFrequency
 */
export interface GetMeasurementStudiesReachAndFrequency {
    /**
     * Study canonical identifier to filter with.
     * @type {Array<string>}
     * @memberof GetMeasurementStudiesReachAndFrequency
     */
    studyIds?: Array<string>;
    /**
     * The advertiser canonical identifier. Used for querying reach and frequency studies for a DSP advertiser Account.
     * @type {string}
     * @memberof GetMeasurementStudiesReachAndFrequency
     */
    advertiserId?: string;
}
/**
 * The request object for fetching reach and frequency results of a specific study.
 * @export
 * @interface GetMeasurementStudiesReachAndFrequencyResult
 */
export interface GetMeasurementStudiesReachAndFrequencyResult {
    /**
     * The canonical identifier that represents a unique study.
     * @type {string}
     * @memberof GetMeasurementStudiesReachAndFrequencyResult
     */
    studyId?: string;
}
/**
 * The request object for fetching measurement studies based on surveys.
 * @export
 * @interface GetMeasurementStudiesSurvey
 */
export interface GetMeasurementStudiesSurvey {
    /**
     * A study canonical identifier. Either one of surveyIds or studyId should be provided.
     * @type {string}
     * @memberof GetMeasurementStudiesSurvey
     */
    studyId?: string;
    /**
     * Survey canonical identifier to filter with. Either one of surveyIds or studyId should be provided.
     * @type {Array<string>}
     * @memberof GetMeasurementStudiesSurvey
     */
    surveyIds?: Array<string>;
}
/**
 * The request object for fetching survey question templates of a specific vendor product.
 * @export
 * @interface GetMeasurementStudiesSurveyQuestionTemplate
 */
export interface GetMeasurementStudiesSurveyQuestionTemplate {
    /**
     * Vendor product canonical identifier to filter with.
     * @type {string}
     * @memberof GetMeasurementStudiesSurveyQuestionTemplate
     */
    vendorProductId?: string;
}
/**
 * The request object for fetching vendor product policies of specific vendor products.
 * @export
 * @interface GetMeasurementStudiesVendorProductPolicy
 */
export interface GetMeasurementStudiesVendorProductPolicy {
    /**
     * Vendor product canonical identifier to filter with.
     * @type {Array<string>}
     * @memberof GetMeasurementStudiesVendorProductPolicy
     */
    vendorProductIds?: Array<string>;
}
/**
 * The grid question response object. Only applicable for SINGLE_SELECT_GRID type question.
 * @export
 * @interface GridQuestionResponsesV1M1
 */
export interface GridQuestionResponsesV1M1 {
    /**
     * 
     * @type {Array<SurveyQuestionPlaceholderFieldValueV1>}
     * @memberof GridQuestionResponsesV1M1
     */
    columns?: Array<SurveyQuestionPlaceholderFieldValueV1>;
    /**
     * 
     * @type {Array<SurveyQuestionPlaceholderFieldValueV1>}
     * @memberof GridQuestionResponsesV1M1
     */
    rows?: Array<SurveyQuestionPlaceholderFieldValueV1>;
}
/**
 * The response object to get fee for a Audience Research study.
 * @export
 * @interface MeasurementAudienceResearchFee
 */
export interface MeasurementAudienceResearchFee {
    /**
     * The fee for the Study. Check currencyCode field for the currency in which this field is expressed.
     * @type {number}
     * @memberof MeasurementAudienceResearchFee
     */
    fee?: number;
    /**
     * 
     * @type {MeasurementStudiesCurrencyCode}
     * @memberof MeasurementAudienceResearchFee
     */
    currencyCode?: MeasurementStudiesCurrencyCode;
}
/**
 * The request object to get fee for a Audience Research study.
 * @export
 * @interface MeasurementAudienceResearchFeeRequest
 */
export interface MeasurementAudienceResearchFeeRequest {
    /**
     * vendor product canonical identifier.
     * @type {string}
     * @memberof MeasurementAudienceResearchFeeRequest
     */
    vendorProductId?: string;
    /**
     * A list of templated survey questions.
     * @type {Array<MeasurementStudiesTemplatedSurveyShortQuestion>}
     * @memberof MeasurementAudienceResearchFeeRequest
     */
    templatedShortQuestions?: Array<MeasurementStudiesTemplatedSurveyShortQuestion>;
    /**
     * The associated DSP advertiser identifier. Mandatory field for DSP clients.
     * @type {string}
     * @memberof MeasurementAudienceResearchFeeRequest
     */
    advertiserId?: string;
}
/**
 * AUDIENCE_RESEARCH study object.
 * @export
 * @interface MeasurementAudienceResearchStudy
 */
export interface MeasurementAudienceResearchStudy {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<MeasurementStudyStatusReason>}
     * @memberof MeasurementAudienceResearchStudy
     */
    statusReasons?: Array<MeasurementStudyStatusReason>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudy
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudy
     */
    endDate?: string;
    /**
     * 
     * @type {MeasurementStudiesResourceLink}
     * @memberof MeasurementAudienceResearchStudy
     */
    link?: MeasurementStudiesResourceLink;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudy
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudy
     */
    vendorProductId?: string;
    /**
     * 
     * @type {MeasurementStudySubmissionType}
     * @memberof MeasurementAudienceResearchStudy
     */
    submissionType?: MeasurementStudySubmissionType;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudy
     */
    lastUpdatedDate?: string;
    /**
     * 
     * @type {MeasurementStudyResultStatus}
     * @memberof MeasurementAudienceResearchStudy
     */
    studyResultStatus?: MeasurementStudyResultStatus;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudy
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudy
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudy
     */
    comment?: string;
    /**
     * The study canonical identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudy
     */
    studyId?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudy
     */
    startDate?: string;
    /**
     * 
     * @type {MeasurementStudyStatus}
     * @memberof MeasurementAudienceResearchStudy
     */
    status?: MeasurementStudyStatus;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudy
     */
    createDate?: string;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudy
     */
    advertiserId?: string;
    /**
     * The study brand name.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudy
     */
    brandName?: string;
    /**
     * 
     * @type {MeasurementStudiesAudienceTargetingGroup}
     * @memberof MeasurementAudienceResearchStudy
     */
    audienceTargetingGroup?: MeasurementStudiesAudienceTargetingGroup;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof MeasurementAudienceResearchStudy
     */
    peerNames?: Array<string>;
    /**
     * The study product category.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudy
     */
    productCategory?: string;
}
/**
 * The audience research study eligibility data.
 * @export
 * @interface MeasurementAudienceResearchStudyEligibilityData
 */
export interface MeasurementAudienceResearchStudyEligibilityData {
    /**
     * 
     * @type {MeasurementStudiesAudienceTargetingGroup}
     * @memberof MeasurementAudienceResearchStudyEligibilityData
     */
    audienceTargetingGroup?: MeasurementStudiesAudienceTargetingGroup;
}
/**
 * The request object of Audience Research study eligibility check.
 * @export
 * @interface MeasurementAudienceResearchStudyEligibilityRequest
 */
export interface MeasurementAudienceResearchStudyEligibilityRequest {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<MeasurementStudiesFundingType>}
     * @memberof MeasurementAudienceResearchStudyEligibilityRequest
     */
    fundingTypeFilters?: Array<MeasurementStudiesFundingType>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof MeasurementAudienceResearchStudyEligibilityRequest
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<MeasurementStudiesVendorType>}
     * @memberof MeasurementAudienceResearchStudyEligibilityRequest
     */
    vendorTypeFilters?: Array<MeasurementStudiesVendorType>;
    /**
     * 
     * @type {MeasurementStudiesAudienceTargetingGroup}
     * @memberof MeasurementAudienceResearchStudyEligibilityRequest
     */
    audienceTargetingGroup?: MeasurementStudiesAudienceTargetingGroup;
}
/**
 * The basic model for all AUDIENCE_RESEARCH objective studies.
 * @export
 * @interface MeasurementAudienceResearchStudyMetadata
 */
export interface MeasurementAudienceResearchStudyMetadata {
    /**
     * The study brand name.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudyMetadata
     */
    brandName?: string;
    /**
     * 
     * @type {MeasurementStudiesAudienceTargetingGroup}
     * @memberof MeasurementAudienceResearchStudyMetadata
     */
    audienceTargetingGroup?: MeasurementStudiesAudienceTargetingGroup;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof MeasurementAudienceResearchStudyMetadata
     */
    peerNames?: Array<string>;
    /**
     * The study product category.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudyMetadata
     */
    productCategory?: string;
}
/**
 * The response object for downloading study results.
 * @export
 * @interface MeasurementAudienceResearchStudyResult
 */
export interface MeasurementAudienceResearchStudyResult {
    /**
     * A pre-signed S3 URL which links to the curated study results file. The URL expires after 60 seconds. If the URL expires before the curated results file is downloaded, a new download request must be created.
     * @type {string}
     * @memberof MeasurementAudienceResearchStudyResult
     */
    fileDownloadUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof MeasurementAudienceResearchStudyResult
     */
    fileType?: MeasurementAudienceResearchStudyResultFileTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MeasurementAudienceResearchStudyResultFileTypeEnum {
    Csv = 'CSV'
}

/**
 * The base study object.
 * @export
 * @interface MeasurementBaseStudy
 */
export interface MeasurementBaseStudy {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<MeasurementStudyStatusReason>}
     * @memberof MeasurementBaseStudy
     */
    statusReasons?: Array<MeasurementStudyStatusReason>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof MeasurementBaseStudy
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof MeasurementBaseStudy
     */
    endDate?: string;
    /**
     * 
     * @type {MeasurementStudiesResourceLink}
     * @memberof MeasurementBaseStudy
     */
    link?: MeasurementStudiesResourceLink;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof MeasurementBaseStudy
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof MeasurementBaseStudy
     */
    vendorProductId?: string;
    /**
     * 
     * @type {MeasurementStudySubmissionType}
     * @memberof MeasurementBaseStudy
     */
    submissionType?: MeasurementStudySubmissionType;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementBaseStudy
     */
    lastUpdatedDate?: string;
    /**
     * 
     * @type {MeasurementStudyResultStatus}
     * @memberof MeasurementBaseStudy
     */
    studyResultStatus?: MeasurementStudyResultStatus;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementBaseStudy
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof MeasurementBaseStudy
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof MeasurementBaseStudy
     */
    comment?: string;
    /**
     * The study canonical identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementBaseStudy
     */
    studyId?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof MeasurementBaseStudy
     */
    startDate?: string;
    /**
     * 
     * @type {MeasurementStudyStatus}
     * @memberof MeasurementBaseStudy
     */
    status?: MeasurementStudyStatus;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementBaseStudy
     */
    createDate?: string;
}
/**
 * BRAND_LIFT study object.
 * @export
 * @interface MeasurementBrandLiftStudy
 */
export interface MeasurementBrandLiftStudy {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<MeasurementStudyStatusReason>}
     * @memberof MeasurementBrandLiftStudy
     */
    statusReasons?: Array<MeasurementStudyStatusReason>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    endDate?: string;
    /**
     * 
     * @type {MeasurementStudiesResourceLink}
     * @memberof MeasurementBrandLiftStudy
     */
    link?: MeasurementStudiesResourceLink;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    vendorProductId?: string;
    /**
     * 
     * @type {MeasurementStudySubmissionType}
     * @memberof MeasurementBrandLiftStudy
     */
    submissionType?: MeasurementStudySubmissionType;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    lastUpdatedDate?: string;
    /**
     * 
     * @type {MeasurementStudyResultStatus}
     * @memberof MeasurementBrandLiftStudy
     */
    studyResultStatus?: MeasurementStudyResultStatus;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    comment?: string;
    /**
     * The study canonical identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    studyId?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    startDate?: string;
    /**
     * 
     * @type {MeasurementStudyStatus}
     * @memberof MeasurementBrandLiftStudy
     */
    status?: MeasurementStudyStatus;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    createDate?: string;
    /**
     * The brand entity Id to be measured by the study.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    brandEntityId?: string;
    /**
     * The study brand name.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    brandName?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof MeasurementBrandLiftStudy
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof MeasurementBrandLiftStudy
     */
    peerNames?: Array<string>;
    /**
     * The verb that will be used in the applicable survey questions to construct the question text.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    verb?: string;
    /**
     * 
     * @type {MeasurementStudiesBenchmarkCategory}
     * @memberof MeasurementBrandLiftStudy
     */
    benchmarkCategory?: MeasurementStudiesBenchmarkCategory;
    /**
     * A list of canonical DSP order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof MeasurementBrandLiftStudy
     */
    orderIds?: Array<string>;
    /**
     * A list of canonical Sponsored Ads campaign identifiers that are associated with the study.
     * @type {Array<string>}
     * @memberof MeasurementBrandLiftStudy
     */
    campaignIds?: Array<string>;
    /**
     * The study product category.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    productCategory?: string;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementBrandLiftStudy
     */
    advertiserId?: string;
}
/**
 * The campaign study eligibility data.
 * @export
 * @interface MeasurementBrandLiftStudyEligibilityData
 */
export interface MeasurementBrandLiftStudyEligibilityData {
    /**
     * Optional current study identifier, if provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility check.
     * @type {string}
     * @memberof MeasurementBrandLiftStudyEligibilityData
     */
    currentStudyId?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the eligibility check.
     * @type {Array<string>}
     * @memberof MeasurementBrandLiftStudyEligibilityData
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical DSP order identifiers. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof MeasurementBrandLiftStudyEligibilityData
     */
    orderIds?: Array<string>;
    /**
     * A list of canonical Sponsored Ads campaign identifiers that are associated with the study.
     * @type {Array<string>}
     * @memberof MeasurementBrandLiftStudyEligibilityData
     */
    campaignIds?: Array<string>;
}
/**
 * The request object of brand lift eligibility check.
 * @export
 * @interface MeasurementBrandLiftStudyEligibilityRequest
 */
export interface MeasurementBrandLiftStudyEligibilityRequest {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<MeasurementStudiesFundingType>}
     * @memberof MeasurementBrandLiftStudyEligibilityRequest
     */
    fundingTypeFilters?: Array<MeasurementStudiesFundingType>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof MeasurementBrandLiftStudyEligibilityRequest
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<MeasurementStudiesVendorType>}
     * @memberof MeasurementBrandLiftStudyEligibilityRequest
     */
    vendorTypeFilters?: Array<MeasurementStudiesVendorType>;
    /**
     * Optional current study identifier, if provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility check.
     * @type {string}
     * @memberof MeasurementBrandLiftStudyEligibilityRequest
     */
    currentStudyId?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the eligibility check.
     * @type {Array<string>}
     * @memberof MeasurementBrandLiftStudyEligibilityRequest
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical DSP order identifiers. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof MeasurementBrandLiftStudyEligibilityRequest
     */
    orderIds?: Array<string>;
    /**
     * A list of canonical Sponsored Ads campaign identifiers that are associated with the study.
     * @type {Array<string>}
     * @memberof MeasurementBrandLiftStudyEligibilityRequest
     */
    campaignIds?: Array<string>;
}
/**
 * The basic model for all BRAND_LIFT studies.
 * @export
 * @interface MeasurementBrandLiftStudyMetadata
 */
export interface MeasurementBrandLiftStudyMetadata {
    /**
     * The brand entity Id to be measured by the study.
     * @type {string}
     * @memberof MeasurementBrandLiftStudyMetadata
     */
    brandEntityId?: string;
    /**
     * The study brand name.
     * @type {string}
     * @memberof MeasurementBrandLiftStudyMetadata
     */
    brandName?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof MeasurementBrandLiftStudyMetadata
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof MeasurementBrandLiftStudyMetadata
     */
    peerNames?: Array<string>;
    /**
     * The verb that will be used in the applicable survey questions to construct the question text.
     * @type {string}
     * @memberof MeasurementBrandLiftStudyMetadata
     */
    verb?: string;
    /**
     * 
     * @type {MeasurementStudiesBenchmarkCategory}
     * @memberof MeasurementBrandLiftStudyMetadata
     */
    benchmarkCategory?: MeasurementStudiesBenchmarkCategory;
    /**
     * A list of canonical DSP order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof MeasurementBrandLiftStudyMetadata
     */
    orderIds?: Array<string>;
    /**
     * A list of canonical Sponsored Ads campaign identifiers that are associated with the study.
     * @type {Array<string>}
     * @memberof MeasurementBrandLiftStudyMetadata
     */
    campaignIds?: Array<string>;
    /**
     * The study product category.
     * @type {string}
     * @memberof MeasurementBrandLiftStudyMetadata
     */
    productCategory?: string;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementBrandLiftStudyMetadata
     */
    advertiserId?: string;
}
/**
 * The response object for downloading study results.
 * @export
 * @interface MeasurementBrandLiftStudyResult
 */
export interface MeasurementBrandLiftStudyResult {
    /**
     * A pre-signed S3 URL which links to the curated study results file. The URL expires after 60 seconds. If the URL expires before the curated results file is downloaded, a new download request must be created.
     * @type {string}
     * @memberof MeasurementBrandLiftStudyResult
     */
    fileDownloadUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof MeasurementBrandLiftStudyResult
     */
    fileType?: MeasurementBrandLiftStudyResultFileTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MeasurementBrandLiftStudyResultFileTypeEnum {
    Csv = 'CSV',
    Pdf = 'PDF',
    Powerpoint = 'POWERPOINT',
    Jpeg = 'JPEG',
    Png = 'PNG',
    Other = 'OTHER'
}

/**
 * The measurement country.
 * @export
 * @enum {string}
 */

export enum MeasurementCountryV1 {
    Us = 'US',
    Ca = 'CA',
    Uk = 'UK',
    De = 'DE',
    It = 'IT',
    Es = 'ES',
    Fr = 'FR',
    Jp = 'JP',
    Mx = 'MX',
    Ae = 'AE',
    Au = 'AU',
    Nl = 'NL',
    Br = 'BR'
}

/**
 * The response object to get fee for a Creative Testing study.
 * @export
 * @interface MeasurementCreativeTestingFee
 */
export interface MeasurementCreativeTestingFee {
    /**
     * The fee for the Study. Check currencyCode field for the currency in which this field is expressed.
     * @type {number}
     * @memberof MeasurementCreativeTestingFee
     */
    fee?: number;
    /**
     * 
     * @type {MeasurementStudiesCurrencyCode}
     * @memberof MeasurementCreativeTestingFee
     */
    currencyCode?: MeasurementStudiesCurrencyCode;
}
/**
 * The request object to get fee for a Creative Testing study.
 * @export
 * @interface MeasurementCreativeTestingFeeRequest
 */
export interface MeasurementCreativeTestingFeeRequest {
    /**
     * vendor product canonical identifier.
     * @type {string}
     * @memberof MeasurementCreativeTestingFeeRequest
     */
    vendorProductId?: string;
    /**
     * A list of templated survey questions.
     * @type {Array<MeasurementStudiesTemplatedSurveyShortQuestion>}
     * @memberof MeasurementCreativeTestingFeeRequest
     */
    templatedQuestions?: Array<MeasurementStudiesTemplatedSurveyShortQuestion>;
    /**
     * A list of assets to be used for the creative testing study as part of either the survey question or the response.
     * @type {Array<MeasurementStudiesAsset>}
     * @memberof MeasurementCreativeTestingFeeRequest
     */
    assets?: Array<MeasurementStudiesAsset>;
    /**
     * The associated DSP advertiser identifier. Mandatory field for DSP clients.
     * @type {string}
     * @memberof MeasurementCreativeTestingFeeRequest
     */
    advertiserId?: string;
}
/**
 * CREATIVE_TESTING study object.
 * @export
 * @interface MeasurementCreativeTestingStudy
 */
export interface MeasurementCreativeTestingStudy {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<MeasurementStudyStatusReason>}
     * @memberof MeasurementCreativeTestingStudy
     */
    statusReasons?: Array<MeasurementStudyStatusReason>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudy
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudy
     */
    endDate?: string;
    /**
     * 
     * @type {MeasurementStudiesResourceLink}
     * @memberof MeasurementCreativeTestingStudy
     */
    link?: MeasurementStudiesResourceLink;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudy
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudy
     */
    vendorProductId?: string;
    /**
     * 
     * @type {MeasurementStudySubmissionType}
     * @memberof MeasurementCreativeTestingStudy
     */
    submissionType?: MeasurementStudySubmissionType;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudy
     */
    lastUpdatedDate?: string;
    /**
     * 
     * @type {MeasurementStudyResultStatus}
     * @memberof MeasurementCreativeTestingStudy
     */
    studyResultStatus?: MeasurementStudyResultStatus;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudy
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudy
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudy
     */
    comment?: string;
    /**
     * The study canonical identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudy
     */
    studyId?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudy
     */
    startDate?: string;
    /**
     * 
     * @type {MeasurementStudyStatus}
     * @memberof MeasurementCreativeTestingStudy
     */
    status?: MeasurementStudyStatus;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudy
     */
    createDate?: string;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudy
     */
    advertiserId?: string;
    /**
     * The study brand name.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudy
     */
    brandName?: string;
    /**
     * A list of assets to be used for the creative testing study as part of either the survey question or the response. In case of API responses, number of assets returned would be limited to 10 even if a creative testing study has more than 10 assets associated with it.
     * @type {Array<MeasurementStudiesAsset>}
     * @memberof MeasurementCreativeTestingStudy
     */
    assets?: Array<MeasurementStudiesAsset>;
    /**
     * 
     * @type {MeasurementStudiesAudienceTargetingGroup}
     * @memberof MeasurementCreativeTestingStudy
     */
    audienceTargetingGroup?: MeasurementStudiesAudienceTargetingGroup;
    /**
     * Optional study product category.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudy
     */
    productCategory?: string;
}
/**
 * The creative testing study eligibility data.
 * @export
 * @interface MeasurementCreativeTestingStudyEligibilityData
 */
export interface MeasurementCreativeTestingStudyEligibilityData {
    /**
     * 
     * @type {MeasurementStudiesAudienceTargetingGroup}
     * @memberof MeasurementCreativeTestingStudyEligibilityData
     */
    audienceTargetingGroup?: MeasurementStudiesAudienceTargetingGroup;
}
/**
 * The request object of Creative Testing study eligibility check.
 * @export
 * @interface MeasurementCreativeTestingStudyEligibilityRequest
 */
export interface MeasurementCreativeTestingStudyEligibilityRequest {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<MeasurementStudiesFundingType>}
     * @memberof MeasurementCreativeTestingStudyEligibilityRequest
     */
    fundingTypeFilters?: Array<MeasurementStudiesFundingType>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof MeasurementCreativeTestingStudyEligibilityRequest
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<MeasurementStudiesVendorType>}
     * @memberof MeasurementCreativeTestingStudyEligibilityRequest
     */
    vendorTypeFilters?: Array<MeasurementStudiesVendorType>;
    /**
     * 
     * @type {MeasurementStudiesAudienceTargetingGroup}
     * @memberof MeasurementCreativeTestingStudyEligibilityRequest
     */
    audienceTargetingGroup?: MeasurementStudiesAudienceTargetingGroup;
}
/**
 * The basic model for all CREATIVE_TESTING objective studies.
 * @export
 * @interface MeasurementCreativeTestingStudyMetadata
 */
export interface MeasurementCreativeTestingStudyMetadata {
    /**
     * The study brand name.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudyMetadata
     */
    brandName?: string;
    /**
     * A list of assets to be used for the creative testing study as part of either the survey question or the response. In case of API responses, number of assets returned would be limited to 10 even if a creative testing study has more than 10 assets associated with it.
     * @type {Array<MeasurementStudiesAsset>}
     * @memberof MeasurementCreativeTestingStudyMetadata
     */
    assets?: Array<MeasurementStudiesAsset>;
    /**
     * 
     * @type {MeasurementStudiesAudienceTargetingGroup}
     * @memberof MeasurementCreativeTestingStudyMetadata
     */
    audienceTargetingGroup?: MeasurementStudiesAudienceTargetingGroup;
    /**
     * Optional study product category.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudyMetadata
     */
    productCategory?: string;
}
/**
 * The response object for downloading study results.
 * @export
 * @interface MeasurementCreativeTestingStudyResult
 */
export interface MeasurementCreativeTestingStudyResult {
    /**
     * A pre-signed S3 URL which links to the curated study results file. The URL expires after 60 seconds. If the URL expires before the curated results file is downloaded, a new download request must be created.
     * @type {string}
     * @memberof MeasurementCreativeTestingStudyResult
     */
    fileDownloadUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof MeasurementCreativeTestingStudyResult
     */
    fileType?: MeasurementCreativeTestingStudyResultFileTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MeasurementCreativeTestingStudyResultFileTypeEnum {
    Csv = 'CSV'
}

/**
 * The measurement budget optimization goal type goal. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementGoal {
    EngagementWithMyAd = 'ENGAGEMENT_WITH_MY_AD',
    ConsiderationsOnAmazon = 'CONSIDERATIONS_ON_AMAZON',
    ConversionsOffAmazon = 'CONVERSIONS_OFF_AMAZON',
    PurchasesOnAmazon = 'PURCHASES_ON_AMAZON',
    MobileAppInstalls = 'MOBILE_APP_INSTALLS',
    Awareness = 'AWARENESS',
    Other = 'OTHER'
}

/**
 * The measurement budget optimization goal type goal.
 * @export
 * @enum {string}
 */

export enum MeasurementGoalV1 {
    EngagementWithMyAd = 'ENGAGEMENT_WITH_MY_AD',
    ConsiderationsOnAmazon = 'CONSIDERATIONS_ON_AMAZON',
    ConversionsOffAmazon = 'CONVERSIONS_OFF_AMAZON',
    PurchasesOnAmazon = 'PURCHASES_ON_AMAZON',
    MobileAppInstalls = 'MOBILE_APP_INSTALLS',
    Awareness = 'AWARENESS'
}

/**
 * The measurement locale.
 * @export
 * @enum {string}
 */

export enum MeasurementLocaleV1 {
    EnUs = 'EN_US'
}

/**
 * The marketplace with corresponding rules.
 * @export
 * @interface MeasurementMarketplaceV1
 */
export interface MeasurementMarketplaceV1 {
    /**
     * 
     * @type {MeasurementCountryV1}
     * @memberof MeasurementMarketplaceV1
     */
    country?: MeasurementCountryV1;
    /**
     * 
     * @type {Array<MeasurementLocaleV1>}
     * @memberof MeasurementMarketplaceV1
     */
    supportedLocales?: Array<MeasurementLocaleV1>;
    /**
     * The minimum impressions.
     * @type {number}
     * @memberof MeasurementMarketplaceV1
     */
    minimumImpressions?: number;
    /**
     * The minimum budget. Expressed in dollars.
     * @type {number}
     * @memberof MeasurementMarketplaceV1
     */
    minimumBudget?: number;
}
/**
 * The response object to get fee for an Omnichannel Metrics study.
 * @export
 * @interface MeasurementOmnichannelMetricsFee
 */
export interface MeasurementOmnichannelMetricsFee {
    /**
     * The fee rate for the Study in percent. This will be expressed as a value between 0.0000 and 1.0000 and  rounded to 4 decimal places.
     * @type {number}
     * @memberof MeasurementOmnichannelMetricsFee
     */
    fee?: number;
}
/**
 * The request object to get fee for an Omnichannel Metrics study.
 * @export
 * @interface MeasurementOmnichannelMetricsFeeRequest
 */
export interface MeasurementOmnichannelMetricsFeeRequest {
    /**
     * The canonical identifier that represents a unique study
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsFeeRequest
     */
    studyId?: string;
    /**
     * The associated DSP advertiser identifier. Mandatory field for DSP clients.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsFeeRequest
     */
    advertiserId?: string;
}
/**
 * The response object for downloading study results.
 * @export
 * @interface MeasurementOmnichannelMetricsResult
 */
export interface MeasurementOmnichannelMetricsResult {
    /**
     * A pre-signed S3 URL which links to the curated study results file. The URL expires after 60 seconds. If the URL expires before the curated results file is downloaded, a new download request must be created.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsResult
     */
    fileDownloadUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsResult
     */
    fileType?: MeasurementOmnichannelMetricsResultFileTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MeasurementOmnichannelMetricsResultFileTypeEnum {
    Excel = 'EXCEL'
}

/**
 * OMNICHANNEL_METRICS study object.
 * @export
 * @interface MeasurementOmnichannelMetricsStudy
 */
export interface MeasurementOmnichannelMetricsStudy {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<MeasurementStudyStatusReason>}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    statusReasons?: Array<MeasurementStudyStatusReason>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    endDate?: string;
    /**
     * 
     * @type {MeasurementStudiesResourceLink}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    link?: MeasurementStudiesResourceLink;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    vendorProductId?: string;
    /**
     * 
     * @type {MeasurementStudySubmissionType}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    submissionType?: MeasurementStudySubmissionType;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    lastUpdatedDate?: string;
    /**
     * 
     * @type {MeasurementStudyResultStatus}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    studyResultStatus?: MeasurementStudyResultStatus;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    comment?: string;
    /**
     * The study canonical identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    studyId?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    startDate?: string;
    /**
     * 
     * @type {MeasurementStudyStatus}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    status?: MeasurementStudyStatus;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    createDate?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of DSP canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    orderIds?: Array<string>;
    /**
     * A list of canonical Sponsored Ads campaign identifiers that are associated with the study.
     * @type {Array<string>}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    campaignIds?: Array<string>;
    /**
     * A list of canonical brand ids to be tracked for off-Amazon conversions.
     * @type {Array<string>}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    brandIds?: Array<string>;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsStudy
     */
    advertiserId?: string;
}
/**
 * The request object of omnichannel metrics eligibility check.
 * @export
 * @interface MeasurementOmnichannelMetricsStudyEligibilityRequest
 */
export interface MeasurementOmnichannelMetricsStudyEligibilityRequest {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<MeasurementStudiesFundingType>}
     * @memberof MeasurementOmnichannelMetricsStudyEligibilityRequest
     */
    fundingTypeFilters?: Array<MeasurementStudiesFundingType>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof MeasurementOmnichannelMetricsStudyEligibilityRequest
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<MeasurementStudiesVendorType>}
     * @memberof MeasurementOmnichannelMetricsStudyEligibilityRequest
     */
    vendorTypeFilters?: Array<MeasurementStudiesVendorType>;
    /**
     * Optional current study identifier. If provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility checks.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsStudyEligibilityRequest
     */
    currentStudyId?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the eligibility check.
     * @type {Array<string>}
     * @memberof MeasurementOmnichannelMetricsStudyEligibilityRequest
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of DSP canonical order identifiers. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof MeasurementOmnichannelMetricsStudyEligibilityRequest
     */
    orderIds?: Array<string>;
    /**
     * A list of canonical Sponsored Ads campaign identifiers that are associated with the study.
     * @type {Array<string>}
     * @memberof MeasurementOmnichannelMetricsStudyEligibilityRequest
     */
    campaignIds?: Array<string>;
    /**
     * A list of canonical brand identifiers.
     * @type {Array<string>}
     * @memberof MeasurementOmnichannelMetricsStudyEligibilityRequest
     */
    brandIds?: Array<string>;
}
/**
 * The basic model for all OMNICHANNEL_METRICS objective studies.
 * @export
 * @interface MeasurementOmnichannelMetricsStudyMetadata
 */
export interface MeasurementOmnichannelMetricsStudyMetadata {
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof MeasurementOmnichannelMetricsStudyMetadata
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of DSP canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof MeasurementOmnichannelMetricsStudyMetadata
     */
    orderIds?: Array<string>;
    /**
     * A list of canonical Sponsored Ads campaign identifiers that are associated with the study.
     * @type {Array<string>}
     * @memberof MeasurementOmnichannelMetricsStudyMetadata
     */
    campaignIds?: Array<string>;
    /**
     * A list of canonical brand ids to be tracked for off-Amazon conversions.
     * @type {Array<string>}
     * @memberof MeasurementOmnichannelMetricsStudyMetadata
     */
    brandIds?: Array<string>;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementOmnichannelMetricsStudyMetadata
     */
    advertiserId?: string;
}
/**
 * The campaign study eligibility data.
 * @export
 * @interface MeasurementReachAndFrequencyEligibilityData
 */
export interface MeasurementReachAndFrequencyEligibilityData {
    /**
     * Optional current study identifier, if provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility check.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyEligibilityData
     */
    currentStudyId?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the eligibility check.
     * @type {Array<string>}
     * @memberof MeasurementReachAndFrequencyEligibilityData
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical DSP order identifiers. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof MeasurementReachAndFrequencyEligibilityData
     */
    orderIds?: Array<string>;
}
/**
 * The request object of reach and frequency eligibility check.
 * @export
 * @interface MeasurementReachAndFrequencyEligibilityRequest
 */
export interface MeasurementReachAndFrequencyEligibilityRequest {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<MeasurementStudiesFundingType>}
     * @memberof MeasurementReachAndFrequencyEligibilityRequest
     */
    fundingTypeFilters?: Array<MeasurementStudiesFundingType>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof MeasurementReachAndFrequencyEligibilityRequest
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<MeasurementStudiesVendorType>}
     * @memberof MeasurementReachAndFrequencyEligibilityRequest
     */
    vendorTypeFilters?: Array<MeasurementStudiesVendorType>;
    /**
     * Optional current study identifier, if provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility check.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyEligibilityRequest
     */
    currentStudyId?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the eligibility check.
     * @type {Array<string>}
     * @memberof MeasurementReachAndFrequencyEligibilityRequest
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical DSP order identifiers. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof MeasurementReachAndFrequencyEligibilityRequest
     */
    orderIds?: Array<string>;
}
/**
 * The basic model for all REACH_AND_FREQUENCY studies.
 * @export
 * @interface MeasurementReachAndFrequencyMetadata
 */
export interface MeasurementReachAndFrequencyMetadata {
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof MeasurementReachAndFrequencyMetadata
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical DSP order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof MeasurementReachAndFrequencyMetadata
     */
    orderIds?: Array<string>;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyMetadata
     */
    advertiserId?: string;
}
/**
 * REACH_AND_FREQUENCY study object.
 * @export
 * @interface MeasurementReachAndFrequencyStudy
 */
export interface MeasurementReachAndFrequencyStudy {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<MeasurementStudyStatusReason>}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    statusReasons?: Array<MeasurementStudyStatusReason>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    endDate?: string;
    /**
     * 
     * @type {MeasurementStudiesResourceLink}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    link?: MeasurementStudiesResourceLink;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    vendorProductId?: string;
    /**
     * 
     * @type {MeasurementStudySubmissionType}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    submissionType?: MeasurementStudySubmissionType;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    lastUpdatedDate?: string;
    /**
     * 
     * @type {MeasurementStudyResultStatus}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    studyResultStatus?: MeasurementStudyResultStatus;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    comment?: string;
    /**
     * The study canonical identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    studyId?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    startDate?: string;
    /**
     * 
     * @type {MeasurementStudyStatus}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    status?: MeasurementStudyStatus;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    createDate?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical DSP order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    orderIds?: Array<string>;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyStudy
     */
    advertiserId?: string;
}
/**
 * The response object for downloading study results.
 * @export
 * @interface MeasurementReachAndFrequencyStudyResult
 */
export interface MeasurementReachAndFrequencyStudyResult {
    /**
     * A pre-signed S3 URL which links to the curated study results file. The URL expires after 60 seconds. If the URL expires before the curated results file is downloaded, a new download request must be created.
     * @type {string}
     * @memberof MeasurementReachAndFrequencyStudyResult
     */
    fileDownloadUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof MeasurementReachAndFrequencyStudyResult
     */
    fileType?: MeasurementReachAndFrequencyStudyResultFileTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MeasurementReachAndFrequencyStudyResultFileTypeEnum {
    Pdf = 'PDF',
    Powerpoint = 'POWERPOINT',
    Jpeg = 'JPEG',
    Png = 'PNG',
    Other = 'OTHER'
}

/**
 * Supported ad types.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesAdType {
    Dsp = 'DSP',
    Sb = 'SB',
    Sp = 'SP',
    Sd = 'SD'
}

/**
 * The Amazon Creative Asset Library asset identifier. Refer https://advertising.amazon.com/API/docs/en-us/creative-asset-library
 * @export
 * @interface MeasurementStudiesAsset
 */
export interface MeasurementStudiesAsset {
    /**
     * The assetId.
     * @type {string}
     * @memberof MeasurementStudiesAsset
     */
    assetId?: string;
    /**
     * The version of the asset.
     * @type {string}
     * @memberof MeasurementStudiesAsset
     */
    version?: string;
    /**
     * 
     * @type {MeasurementStudiesAssetType}
     * @memberof MeasurementStudiesAsset
     */
    assetType?: MeasurementStudiesAssetType;
}
/**
 * The type of the Asset.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesAssetType {
    Image = 'IMAGE',
    Video = 'VIDEO'
}

/**
 * The model for holding Audience selection within a group. The expression within an audience group will be evaluated using the IntraGroupOperator. The InterGroupOperator will be applied on the output of one audience group with another audience group.
 * @export
 * @interface MeasurementStudiesAudienceGroup
 */
export interface MeasurementStudiesAudienceGroup {
    /**
     * 
     * @type {MeasurementStudiesAudienceSelectionOperator}
     * @memberof MeasurementStudiesAudienceGroup
     */
    interGroupOperator?: MeasurementStudiesAudienceSelectionOperator;
    /**
     * 
     * @type {MeasurementStudiesAudienceSelectionOperator}
     * @memberof MeasurementStudiesAudienceGroup
     */
    intraGroupOperator?: MeasurementStudiesAudienceSelectionOperator;
    /**
     * List of audience segments in this group.
     * @type {Array<MeasurementStudiesAudienceSegment>}
     * @memberof MeasurementStudiesAudienceGroup
     */
    audienceSegments?: Array<MeasurementStudiesAudienceSegment>;
}
/**
 * The model for holding an Audience Segment.
 * @export
 * @interface MeasurementStudiesAudienceSegment
 */
export interface MeasurementStudiesAudienceSegment {
    /**
     * ID for the audience segment. This ID can be fetched from these APIs- https://advertising.amazon.com/API/docs/en-us/audiences/#/Discovery
     * @type {string}
     * @memberof MeasurementStudiesAudienceSegment
     */
    segmentId?: string;
}
/**
 * The operator used in Audience Segment Selection to determine which operation needs to be applied across selected segments. AND operator takes priority over OR operator.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesAudienceSelectionOperator {
    Or = 'OR',
    And = 'AND'
}

/**
 * The model for holding Audience targeting group. The includedAudienceGroups and excludedAudienceGroups are always joined with AND operator.
 * @export
 * @interface MeasurementStudiesAudienceTargetingGroup
 */
export interface MeasurementStudiesAudienceTargetingGroup {
    /**
     * List of audience groups to be included in the targeted audience.
     * @type {Array<MeasurementStudiesAudienceGroup>}
     * @memberof MeasurementStudiesAudienceTargetingGroup
     */
    includedAudienceGroups?: Array<MeasurementStudiesAudienceGroup>;
    /**
     * List of audience groups to be excluded from the targeted audience.
     * @type {Array<MeasurementStudiesAudienceGroup>}
     * @memberof MeasurementStudiesAudienceTargetingGroup
     */
    excludedAudienceGroups?: Array<MeasurementStudiesAudienceGroup>;
}
/**
 * The request object of measurement eligibility check.
 * @export
 * @interface MeasurementStudiesBaseEligibilityRequest
 */
export interface MeasurementStudiesBaseEligibilityRequest {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<MeasurementStudiesFundingType>}
     * @memberof MeasurementStudiesBaseEligibilityRequest
     */
    fundingTypeFilters?: Array<MeasurementStudiesFundingType>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof MeasurementStudiesBaseEligibilityRequest
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<MeasurementStudiesVendorType>}
     * @memberof MeasurementStudiesBaseEligibilityRequest
     */
    vendorTypeFilters?: Array<MeasurementStudiesVendorType>;
}
/**
 * The study benchmark product category. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesBenchmarkCategory {
    Appliances = 'APPLIANCES',
    AppsAndGames = 'APPS_AND_GAMES',
    ArtsCraftsAndSewing = 'ARTS_CRAFTS_AND_SEWING',
    Automotive = 'AUTOMOTIVE',
    Baby = 'BABY',
    BeautyAndPersonalCare = 'BEAUTY_AND_PERSONAL_CARE',
    Books = 'BOOKS',
    CellPhonesAndAccessories = 'CELL_PHONES_AND_ACCESSORIES',
    ClothingShoesAndJewelry = 'CLOTHING_SHOES_AND_JEWELRY',
    ComputersAndAccessories = 'COMPUTERS_AND_ACCESSORIES',
    DigitalMusic = 'DIGITAL_MUSIC',
    Electronics = 'ELECTRONICS',
    Education = 'EDUCATION',
    FinancialAndInsurance = 'FINANCIAL_AND_INSURANCE',
    Food = 'FOOD',
    Beverages = 'BEVERAGES',
    HealthAndHousehold = 'HEALTH_AND_HOUSEHOLD',
    HomeAndKitchen = 'HOME_AND_KITCHEN',
    KitchenAndDining = 'KITCHEN_AND_DINING',
    MoviesAndTv = 'MOVIES_AND_TV',
    OfficeProducts = 'OFFICE_PRODUCTS',
    PatioLawnAndGarden = 'PATIO_LAWN_AND_GARDEN',
    PetSupplies = 'PET_SUPPLIES',
    Restaurants = 'RESTAURANTS',
    Software = 'SOFTWARE',
    SportsAndOutdoors = 'SPORTS_AND_OUTDOORS',
    TelecommunicationsServices = 'TELECOMMUNICATIONS_SERVICES',
    ToolsAndHomeImprovement = 'TOOLS_AND_HOME_IMPROVEMENT',
    ToysAndGames = 'TOYS_AND_GAMES',
    VideoGames = 'VIDEO_GAMES',
    Hospitality = 'HOSPITALITY',
    Other = 'OTHER'
}

/**
 * The basic model for all CAMPAIGN_PLANNING objective studies.
 * @export
 * @interface MeasurementStudiesCampaignPlanningMetadata
 */
export interface MeasurementStudiesCampaignPlanningMetadata {
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementStudiesCampaignPlanningMetadata
     */
    advertiserId?: string;
}
/**
 * Cancel study response.
 * @export
 * @interface MeasurementStudiesCancelStudyResponse
 */
export interface MeasurementStudiesCancelStudyResponse {
    /**
     * An enumerated success or error code for machine use.
     * @type {string}
     * @memberof MeasurementStudiesCancelStudyResponse
     */
    code?: string;
    /**
     * The study canonical identifier.
     * @type {string}
     * @memberof MeasurementStudiesCancelStudyResponse
     */
    studyId?: string;
    /**
     * A human-readable message of the code.
     * @type {string}
     * @memberof MeasurementStudiesCancelStudyResponse
     */
    message?: string;
    /**
     * 
     * @type {Array<MeasurementStudiesSubError>}
     * @memberof MeasurementStudiesCancelStudyResponse
     */
    errors?: Array<MeasurementStudiesSubError>;
}
/**
 * The measurement country. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesCountry {
    Us = 'US',
    Uk = 'UK',
    De = 'DE',
    Fr = 'FR',
    Jp = 'JP',
    Ca = 'CA',
    It = 'IT',
    Es = 'ES',
    Eg = 'EG',
    Br = 'BR',
    Au = 'AU',
    Ae = 'AE',
    Sa = 'SA',
    Ru = 'RU',
    Mx = 'MX',
    Nl = 'NL',
    Sg = 'SG',
    Se = 'SE',
    Tr = 'TR',
    Pl = 'PL',
    In = 'IN',
    Other = 'OTHER'
}

/**
 * Currency Code. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesCurrencyCode {
    Usd = 'USD',
    Cad = 'CAD',
    Mxn = 'MXN',
    Brl = 'BRL',
    Gbp = 'GBP',
    Eur = 'EUR',
    Aed = 'AED',
    Sar = 'SAR',
    Inr = 'INR',
    Jpy = 'JPY',
    Aud = 'AUD',
    Sgd = 'SGD',
    Try = 'TRY',
    Sek = 'SEK',
    Egp = 'EGP',
    Pln = 'PLN',
    Other = 'OTHER'
}

/**
 * The templated measurement survey question.
 * @export
 * @interface MeasurementStudiesCustomSurveyQuestion
 */
export interface MeasurementStudiesCustomSurveyQuestion {
    /**
     * 
     * @type {Array<string>}
     * @memberof MeasurementStudiesCustomSurveyQuestion
     */
    responses?: Array<string>;
    /**
     * 
     * @type {MeasurementStudiesSurveyQuestionType}
     * @memberof MeasurementStudiesCustomSurveyQuestion
     */
    type?: MeasurementStudiesSurveyQuestionType;
    /**
     * The survey question text.
     * @type {string}
     * @memberof MeasurementStudiesCustomSurveyQuestion
     */
    questionText?: string;
}
/**
 * Fields that will be checked as part of eligibility API call. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesEligibilityField {
    Locale = 'LOCALE',
    Budget = 'BUDGET',
    Goal = 'GOAL',
    StartTime = 'START_TIME',
    EndTime = 'END_TIME',
    FlightLength = 'FLIGHT_LENGTH',
    LeadTime = 'LEAD_TIME',
    Impressions = 'IMPRESSIONS',
    Order = 'ORDER',
    BuyerCount = 'BUYER_COUNT',
    Other = 'OTHER'
}

/**
 * The list of eligibility issues.
 * @export
 * @interface MeasurementStudiesEligibilityIssue
 */
export interface MeasurementStudiesEligibilityIssue {
    /**
     * 
     * @type {MeasurementStudiesEligibilityIssueSeverity}
     * @memberof MeasurementStudiesEligibilityIssue
     */
    severity?: MeasurementStudiesEligibilityIssueSeverity;
    /**
     * An enumerated issue code for machine use.
     * @type {string}
     * @memberof MeasurementStudiesEligibilityIssue
     */
    code?: string;
    /**
     * 
     * @type {MeasurementStudiesEligibilityField}
     * @memberof MeasurementStudiesEligibilityIssue
     */
    field?: MeasurementStudiesEligibilityField;
    /**
     * A human-readable description of the issue with suggestions on how to resolve the issue.
     * @type {string}
     * @memberof MeasurementStudiesEligibilityIssue
     */
    message?: string;
}
/**
 * Supported values are WARNING, ERROR. ERROR severity issues need to be resolved while WARNING severity issues can be ignored. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesEligibilityIssueSeverity {
    Warning = 'WARNING',
    Error = 'ERROR',
    Other = 'OTHER'
}

/**
 * The eligibility metadata.
 * @export
 * @interface MeasurementStudiesEligibilityMetadata
 */
export interface MeasurementStudiesEligibilityMetadata {
    /**
     * The latest end date of the associated orders in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementStudiesEligibilityMetadata
     */
    endDate?: string;
    /**
     * The total estimated impressions.
     * @type {number}
     * @memberof MeasurementStudiesEligibilityMetadata
     */
    impressions?: number;
    /**
     * The flight length of the associated orders. Expressed in days.
     * @type {number}
     * @memberof MeasurementStudiesEligibilityMetadata
     */
    flightLength?: number;
    /**
     * The earliest start date of associated orders in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementStudiesEligibilityMetadata
     */
    startDate?: string;
    /**
     * The total budget. Expressed in dollars.
     * @type {number}
     * @memberof MeasurementStudiesEligibilityMetadata
     */
    budget?: number;
}
/**
 * The eligibility check response object.
 * @export
 * @interface MeasurementStudiesEligibilityResponse
 */
export interface MeasurementStudiesEligibilityResponse {
    /**
     * 
     * @type {MeasurementStudiesEligibilityMetadata}
     * @memberof MeasurementStudiesEligibilityResponse
     */
    metadata?: MeasurementStudiesEligibilityMetadata;
    /**
     * 
     * @type {string}
     * @memberof MeasurementStudiesEligibilityResponse
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<MeasurementStudiesVendorProductEligibility>}
     * @memberof MeasurementStudiesEligibilityResponse
     */
    vendorProductEligibilities?: Array<MeasurementStudiesVendorProductEligibility>;
}
/**
 * Supported values are ELIGIBLE, INELIGIBLE and ELIGIBLE_WITH_WARNING. INELIGIBLE status indicates the study can not be created.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesEligibilityStatus {
    Eligible = 'ELIGIBLE',
    Ineligible = 'INELIGIBLE',
    EligibleWithWarning = 'ELIGIBLE_WITH_WARNING'
}

/**
 * The error response object.
 * @export
 * @interface MeasurementStudiesError
 */
export interface MeasurementStudiesError {
    /**
     * Request Id that uniquely identifies your request.
     * @type {string}
     * @memberof MeasurementStudiesError
     */
    requestId?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof MeasurementStudiesError
     */
    message?: string;
    /**
     * 
     * @type {Array<MeasurementStudiesSubError>}
     * @memberof MeasurementStudiesError
     */
    errors?: Array<MeasurementStudiesSubError>;
}
/**
 * The measurement funding type. For COMPLIMENTARY studies the cost will be covered by Amazon. Check vendor product policy for pricing info. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesFundingType {
    Complimentary = 'COMPLIMENTARY',
    ThirdPartyPayment = 'THIRD_PARTY_PAYMENT',
    Cpm = 'CPM',
    FlatRate = 'FLAT_RATE',
    Other = 'OTHER'
}

/**
 * The grid question response object. Only applicable for SINGLE_SELECT_GRID type question.
 * @export
 * @interface MeasurementStudiesGridQuestionResponses
 */
export interface MeasurementStudiesGridQuestionResponses {
    /**
     * 
     * @type {Array<MeasurementStudiesSurveyQuestionPlaceholderFieldValue>}
     * @memberof MeasurementStudiesGridQuestionResponses
     */
    columns?: Array<MeasurementStudiesSurveyQuestionPlaceholderFieldValue>;
    /**
     * 
     * @type {Array<MeasurementStudiesSurveyQuestionPlaceholderFieldValue>}
     * @memberof MeasurementStudiesGridQuestionResponses
     */
    rows?: Array<MeasurementStudiesSurveyQuestionPlaceholderFieldValue>;
}
/**
 * The measurement locale. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesLocale {
    EnUs = 'EN_US',
    Other = 'OTHER'
}

/**
 * The marketplace with corresponding rules.
 * @export
 * @interface MeasurementStudiesMarketplace
 */
export interface MeasurementStudiesMarketplace {
    /**
     * 
     * @type {MeasurementStudiesCountry}
     * @memberof MeasurementStudiesMarketplace
     */
    country?: MeasurementStudiesCountry;
    /**
     * 
     * @type {Array<MeasurementStudiesLocale>}
     * @memberof MeasurementStudiesMarketplace
     */
    supportedLocales?: Array<MeasurementStudiesLocale>;
    /**
     * The minimum impressions.
     * @type {number}
     * @memberof MeasurementStudiesMarketplace
     */
    minimumImpressions?: number;
    /**
     * The time span in days to calculate budget. Null represents total impressions for the campaigns.
     * @type {number}
     * @memberof MeasurementStudiesMarketplace
     */
    budgetTimeSpan?: number;
    /**
     * The minimum budget. Expressed in marketplace currency.
     * @type {number}
     * @memberof MeasurementStudiesMarketplace
     */
    minimumBudget?: number;
    /**
     * The time span in days to calculate impressions. Null represents total impressions for the campaigns.
     * @type {number}
     * @memberof MeasurementStudiesMarketplace
     */
    impressionTimeSpan?: number;
}
/**
 * 
 * @export
 * @interface MeasurementStudiesOmnichannelMetricsBrand
 */
export interface MeasurementStudiesOmnichannelMetricsBrand {
    /**
     * The brand canonical Id
     * @type {string}
     * @memberof MeasurementStudiesOmnichannelMetricsBrand
     */
    brandId?: string;
    /**
     * 
     * @type {string}
     * @memberof MeasurementStudiesOmnichannelMetricsBrand
     */
    company?: string;
    /**
     * 
     * @type {string}
     * @memberof MeasurementStudiesOmnichannelMetricsBrand
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof MeasurementStudiesOmnichannelMetricsBrand
     */
    subcategory?: string;
    /**
     * The brand name.
     * @type {string}
     * @memberof MeasurementStudiesOmnichannelMetricsBrand
     */
    brand?: string;
    /**
     * 
     * @type {string}
     * @memberof MeasurementStudiesOmnichannelMetricsBrand
     */
    majorBrand?: string;
    /**
     * 
     * @type {string}
     * @memberof MeasurementStudiesOmnichannelMetricsBrand
     */
    manufacturer?: string;
}
/**
 * The request object to fetch brands to be used in the OMNICHANNEL_METRICS vendor product.
 * @export
 * @interface MeasurementStudiesOmnichannelMetricsBrandSearchRequest
 */
export interface MeasurementStudiesOmnichannelMetricsBrandSearchRequest {
    /**
     * List of brandIds in the omnichannel metrics brand catalog. Either one of brandIdFilter or brandNameSearch should be provided.
     * @type {Array<string>}
     * @memberof MeasurementStudiesOmnichannelMetricsBrandSearchRequest
     */
    brandIdFilter?: Array<string>;
    /**
     * Text to search for eligible brands in the omnichannel metrics brand catalog. Either one of brandIdFilter or brandNameSearch should be provided.
     * @type {string}
     * @memberof MeasurementStudiesOmnichannelMetricsBrandSearchRequest
     */
    brandNameSearch?: string;
}
/**
 * The campaign study eligibility data.
 * @export
 * @interface MeasurementStudiesOmnichannelMetricsEligibilityData
 */
export interface MeasurementStudiesOmnichannelMetricsEligibilityData {
    /**
     * Optional current study identifier. If provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility checks.
     * @type {string}
     * @memberof MeasurementStudiesOmnichannelMetricsEligibilityData
     */
    currentStudyId?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the eligibility check.
     * @type {Array<string>}
     * @memberof MeasurementStudiesOmnichannelMetricsEligibilityData
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of DSP canonical order identifiers. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof MeasurementStudiesOmnichannelMetricsEligibilityData
     */
    orderIds?: Array<string>;
    /**
     * A list of canonical Sponsored Ads campaign identifiers that are associated with the study.
     * @type {Array<string>}
     * @memberof MeasurementStudiesOmnichannelMetricsEligibilityData
     */
    campaignIds?: Array<string>;
    /**
     * A list of canonical brand identifiers.
     * @type {Array<string>}
     * @memberof MeasurementStudiesOmnichannelMetricsEligibilityData
     */
    brandIds?: Array<string>;
}
/**
 * A list of measurement vendor products.
 * @export
 * @interface MeasurementStudiesPaginatedVendorProducts
 */
export interface MeasurementStudiesPaginatedVendorProducts {
    /**
     * The total number of vendor products.
     * @type {number}
     * @memberof MeasurementStudiesPaginatedVendorProducts
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<MeasurementStudiesVendorProduct>}
     * @memberof MeasurementStudiesPaginatedVendorProducts
     */
    vendorProducts?: Array<MeasurementStudiesVendorProduct>;
    /**
     * 
     * @type {string}
     * @memberof MeasurementStudiesPaginatedVendorProducts
     */
    nextToken?: string;
}
/**
 * The placeholder value type. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesPlaceholderValueType {
    String = 'STRING',
    Integer = 'INTEGER',
    Other = 'OTHER'
}

/**
 * The link that can be used to access corresponding resources in advertising portal.
 * @export
 * @interface MeasurementStudiesResourceLink
 */
export interface MeasurementStudiesResourceLink {
    /**
     * The resource name.
     * @type {string}
     * @memberof MeasurementStudiesResourceLink
     */
    name?: string;
    /**
     * The resource url.
     * @type {string}
     * @memberof MeasurementStudiesResourceLink
     */
    url?: string;
}
/**
 * The sub error object.
 * @export
 * @interface MeasurementStudiesSubError
 */
export interface MeasurementStudiesSubError {
    /**
     * 
     * @type {string}
     * @memberof MeasurementStudiesSubError
     */
    fieldName?: string;
    /**
     * 
     * @type {string}
     * @memberof MeasurementStudiesSubError
     */
    errorType: string;
    /**
     * 
     * @type {string}
     * @memberof MeasurementStudiesSubError
     */
    message: string;
}
/**
 * The measurement survey.
 * @export
 * @interface MeasurementStudiesSurvey
 */
export interface MeasurementStudiesSurvey {
    /**
     * The vendor product canonical identifier.
     * @type {string}
     * @memberof MeasurementStudiesSurvey
     */
    vendorProductId?: string;
    /**
     * The survey canonical identifier. Immutable field.
     * @type {string}
     * @memberof MeasurementStudiesSurvey
     */
    surveyId?: string;
    /**
     * A list of custom survey questions.
     * @type {Array<MeasurementStudiesCustomSurveyQuestion>}
     * @memberof MeasurementStudiesSurvey
     */
    customQuestions?: Array<MeasurementStudiesCustomSurveyQuestion>;
    /**
     * A list of templated survey short questions.
     * @type {Array<MeasurementStudiesTemplatedSurveyShortQuestion>}
     * @memberof MeasurementStudiesSurvey
     */
    templatedShortQuestions?: Array<MeasurementStudiesTemplatedSurveyShortQuestion>;
    /**
     * The associated study identifier. Survey needs to be created prior to the study creation.
     * @type {string}
     * @memberof MeasurementStudiesSurvey
     */
    studyId?: string;
    /**
     * 
     * @type {MeasurementStudiesSurveyStatus}
     * @memberof MeasurementStudiesSurvey
     */
    status?: MeasurementStudiesSurveyStatus;
}
/**
 * The survey question category. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesSurveyQuestionCategory {
    BrandKpi = 'BRAND_KPI',
    Weighting = 'WEIGHTING',
    Custom = 'CUSTOM',
    Other = 'OTHER'
}

/**
 * The requirement for specific survey question category.
 * @export
 * @interface MeasurementStudiesSurveyQuestionCategoryRequirement
 */
export interface MeasurementStudiesSurveyQuestionCategoryRequirement {
    /**
     * The minimum number of questions required for the question category.
     * @type {number}
     * @memberof MeasurementStudiesSurveyQuestionCategoryRequirement
     */
    minimumQuestions?: number;
    /**
     * The maximum number of questions required for the question category.
     * @type {number}
     * @memberof MeasurementStudiesSurveyQuestionCategoryRequirement
     */
    maximumQuestions?: number;
    /**
     * 
     * @type {MeasurementStudiesSurveyQuestionCategory}
     * @memberof MeasurementStudiesSurveyQuestionCategoryRequirement
     */
    category?: MeasurementStudiesSurveyQuestionCategory;
}
/**
 * The grid question response object. Only applicable for SINGLE_SELECT_GRID type question.
 * @export
 * @interface MeasurementStudiesSurveyQuestionGridQuestionResponse
 */
export interface MeasurementStudiesSurveyQuestionGridQuestionResponse {
    /**
     * 
     * @type {MeasurementStudiesSurveyQuestionPlaceholderCandidate}
     * @memberof MeasurementStudiesSurveyQuestionGridQuestionResponse
     */
    columns?: MeasurementStudiesSurveyQuestionPlaceholderCandidate;
    /**
     * 
     * @type {MeasurementStudiesSurveyQuestionPlaceholderCandidate}
     * @memberof MeasurementStudiesSurveyQuestionGridQuestionResponse
     */
    rows?: MeasurementStudiesSurveyQuestionPlaceholderCandidate;
}
/**
 * The survey objective. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesSurveyQuestionObjectiveType {
    Awareness = 'AWARENESS',
    Preference = 'PREFERENCE',
    Favorability = 'FAVORABILITY',
    AdRecall = 'AD_RECALL',
    Intent = 'INTENT',
    Attitudes = 'ATTITUDES',
    UnaidedAwareness = 'UNAIDED_AWARENESS',
    Consideration = 'CONSIDERATION',
    Age = 'AGE',
    Gender = 'GENDER',
    HouseholdIncome = 'HOUSEHOLD_INCOME',
    HouseholdSize = 'HOUSEHOLD_SIZE',
    ChildrenInHousehold = 'CHILDREN_IN_HOUSEHOLD',
    Education = 'EDUCATION',
    Ethnicity = 'ETHNICITY',
    TimeOnline = 'TIME_ONLINE',
    TvMediaConsumption = 'TV_MEDIA_CONSUMPTION',
    InMarketStatus = 'IN_MARKET_STATUS',
    PurchaseFrequency = 'PURCHASE_FREQUENCY',
    PurchaseHistory = 'PURCHASE_HISTORY',
    PurchaseLocation = 'PURCHASE_LOCATION',
    Behaviors = 'BEHAVIORS',
    Familiarity = 'FAMILIARITY',
    Association = 'ASSOCIATION',
    Other = 'OTHER'
}

/**
 * The object specifying a placeholder in Survey question.
 * @export
 * @interface MeasurementStudiesSurveyQuestionPlaceholder
 */
export interface MeasurementStudiesSurveyQuestionPlaceholder {
    /**
     * The survey question placeholder field name.
     * @type {string}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholder
     */
    fieldName?: string;
    /**
     * The survey question placeholder field values.
     * @type {Array<MeasurementStudiesSurveyQuestionPlaceholderFieldValue>}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholder
     */
    fieldValues?: Array<MeasurementStudiesSurveyQuestionPlaceholderFieldValue>;
}
/**
 * Allowed value range for placeholder.
 * @export
 * @interface MeasurementStudiesSurveyQuestionPlaceholderAllowedRange
 */
export interface MeasurementStudiesSurveyQuestionPlaceholderAllowedRange {
    /**
     * The minimum allowed value.
     * @type {number}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderAllowedRange
     */
    minimumValue?: number;
    /**
     * The field value that this range depends on. Will be empty if this range is the default range.
     * @type {string}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderAllowedRange
     */
    parentValue?: string;
    /**
     * The maximum allowed value.
     * @type {number}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderAllowedRange
     */
    maximumValue?: number;
    /**
     * The field name that this range depends on. Will be empty if this range is the default range.
     * @type {string}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderAllowedRange
     */
    parentField?: string;
}
/**
 * Allowed value for placeholder.
 * @export
 * @interface MeasurementStudiesSurveyQuestionPlaceholderAllowedValue
 */
export interface MeasurementStudiesSurveyQuestionPlaceholderAllowedValue {
    /**
     * The field value that this value list depend on. Will be empty if this is the default list.
     * @type {string}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderAllowedValue
     */
    parentValue?: string;
    /**
     * Allowed value string..
     * @type {string}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderAllowedValue
     */
    value?: string;
    /**
     * The field name that this value list depends on. Will be empty if this is the default list.
     * @type {string}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderAllowedValue
     */
    parentField?: string;
}
/**
 * The placeholder candidate in Survey question.
 * @export
 * @interface MeasurementStudiesSurveyQuestionPlaceholderCandidate
 */
export interface MeasurementStudiesSurveyQuestionPlaceholderCandidate {
    /**
     * Allowed values for placeholder. Will be empty if placeholder is free text field.
     * @type {Array<MeasurementStudiesSurveyQuestionPlaceholderAllowedValue>}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderCandidate
     */
    allowedValues?: Array<MeasurementStudiesSurveyQuestionPlaceholderAllowedValue>;
    /**
     * The maximum allowed character length for each individual placeholder value.
     * @type {number}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderCandidate
     */
    maximumValueLength?: number;
    /**
     * The survey question placeholder field name.
     * @type {string}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderCandidate
     */
    fieldName?: string;
    /**
     * Allowed value ranges for placeholder. Only applicable if the valueType is INTEGER.
     * @type {Array<MeasurementStudiesSurveyQuestionPlaceholderAllowedRange>}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderCandidate
     */
    allowedValueRanges?: Array<MeasurementStudiesSurveyQuestionPlaceholderAllowedRange>;
    /**
     * 
     * @type {MeasurementStudiesPlaceholderValueType}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderCandidate
     */
    valueType?: MeasurementStudiesPlaceholderValueType;
    /**
     * Where the placeholder values will be inferred from.
     * @type {Array<MeasurementStudiesSurveyQuestionPlaceholderInferredField>}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderCandidate
     */
    inferredFields?: Array<MeasurementStudiesSurveyQuestionPlaceholderInferredField>;
    /**
     * Default values that will be appended to the values list regardless.
     * @type {Array<string>}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderCandidate
     */
    defaultValues?: Array<string>;
    /**
     * The minimum allowed character length for each individual placeholder value.
     * @type {number}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderCandidate
     */
    minimumValueLength?: number;
    /**
     * Whether custom value is allowed for the placeholder.
     * @type {boolean}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderCandidate
     */
    allowCustomValue?: boolean;
    /**
     * 
     * @type {MeasurementStudiesSurveyQuestionPlaceholderCandidateType}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderCandidate
     */
    placeholderCandidateType?: MeasurementStudiesSurveyQuestionPlaceholderCandidateType;
}
/**
 * The placeholder type for survey question template. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesSurveyQuestionPlaceholderCandidateType {
    Channel = 'CHANNEL',
    QuestionText = 'QUESTION_TEXT',
    PlacementType = 'PLACEMENT_TYPE',
    Response = 'RESPONSE',
    Action = 'ACTION',
    Time = 'TIME',
    DummyPlaceholder1 = 'DUMMY_PLACEHOLDER_1',
    DummyPlaceholder2 = 'DUMMY_PLACEHOLDER_2',
    BrandOrProductCategory = 'BRAND_OR_PRODUCT_CATEGORY',
    BrandOrProductName = 'BRAND_OR_PRODUCT_NAME',
    Characteristic = 'CHARACTERISTIC',
    Verb = 'VERB',
    Category = 'CATEGORY',
    Period = 'PERIOD',
    CustomStatement = 'CUSTOM_STATEMENT',
    Other = 'OTHER'
}

/**
 * 
 * @export
 * @interface MeasurementStudiesSurveyQuestionPlaceholderFieldValue
 */
export interface MeasurementStudiesSurveyQuestionPlaceholderFieldValue {
    /**
     * The survey question placeholder field value.
     * @type {string}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderFieldValue
     */
    value?: string;
    /**
     * This is only required if the corresponding field is \'response\', this will help to define if the response value will be counted as a positive one in the study report.
     * @type {boolean}
     * @memberof MeasurementStudiesSurveyQuestionPlaceholderFieldValue
     */
    isQualifying?: boolean;
}
/**
 * The inferred field for survey question placeholder candidate. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesSurveyQuestionPlaceholderInferredField {
    StudyBrandName = 'STUDY_BRAND_NAME',
    StudyBrandNameUnqualified = 'STUDY_BRAND_NAME_UNQUALIFIED',
    StudyPeerName = 'STUDY_PEER_NAME',
    StudyProductCategory = 'STUDY_PRODUCT_CATEGORY',
    StudyVerb = 'STUDY_VERB',
    Other = 'OTHER'
}

/**
 * The survey question sub-category. Only applicable to certain categories. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesSurveyQuestionSubCategory {
    Demographic = 'DEMOGRAPHIC',
    Behavior = 'BEHAVIOR',
    PurchaseHistory = 'PURCHASE_HISTORY',
    Other = 'OTHER'
}

/**
 * The survey question type. SINGLE_SELECT question will allow customers to choose only one response, MULTI_SELECT question will allow customers to choose multiple responses, RATING will allow customers to choose a rating on a scale (e.g. 1 to 5), FREE_TEXT will allow customers to provide a free formed question text, SINGLE_ASSET_SELECT will allow customers to choose an asset as the response. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesSurveyQuestionType {
    SingleSelect = 'SINGLE_SELECT',
    MultiSelect = 'MULTI_SELECT',
    Rating = 'RATING',
    FreeText = 'FREE_TEXT',
    SingleAssetSelect = 'SINGLE_ASSET_SELECT',
    SingleSelectGrid = 'SINGLE_SELECT_GRID',
    Other = 'OTHER'
}

/**
 * Template for short survey question for a vendor product. A short question supports 10 responses per question. For Grid based questions, maximum rows and columns can be 10 each.
 * @export
 * @interface MeasurementStudiesSurveyShortQuestionTemplate
 */
export interface MeasurementStudiesSurveyShortQuestionTemplate {
    /**
     * The minimum number of qualifying responses required for the question. This will be available if the qualifying responses are not pre-defined/inferred.
     * @type {number}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    minimumQualifyingResponses?: number;
    /**
     * The maximum number of qualifying responses allowed for the question. This will be available if the qualifying responses are not pre-defined/inferred.
     * @type {number}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    maximumQualifyingResponses?: number;
    /**
     * 
     * @type {MeasurementStudiesSurveyQuestionSubCategory}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    subCategory?: MeasurementStudiesSurveyQuestionSubCategory;
    /**
     * The pre-defined qualifying survey question responses with placeholders, this will help to define which responses will be counted as positive ones in the study report.
     * @type {Array<string>}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    qualifyingResponses?: Array<string>;
    /**
     * The pre-defined survey question responses with placeholders.
     * @type {Array<string>}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    questionResponses?: Array<string>;
    /**
     * 
     * @type {MeasurementStudiesLocale}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    locale?: MeasurementStudiesLocale;
    /**
     * 
     * @type {MeasurementStudiesSurveyQuestionType}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    type?: MeasurementStudiesSurveyQuestionType;
    /**
     * The priority of the question. If present this will determine the ordering of questions in a survey. The check will be enforced when a survey is created/updated. Lower number indicates higher priority.
     * @type {number}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    priority?: number;
    /**
     * 
     * @type {MeasurementStudiesSurveyQuestionObjectiveType}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    objectiveType?: MeasurementStudiesSurveyQuestionObjectiveType;
    /**
     * The survey question text with placeholders.
     * @type {string}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    questionText?: string;
    /**
     * The associated vendor product id.
     * @type {string}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    vendorProductId?: string;
    /**
     * 
     * @type {Array<MeasurementStudiesSurveyQuestionPlaceholderCandidate>}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    placeholderCandidates?: Array<MeasurementStudiesSurveyQuestionPlaceholderCandidate>;
    /**
     * 
     * @type {MeasurementStudiesSurveyQuestionGridQuestionResponse}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    gridQuestionResponse?: MeasurementStudiesSurveyQuestionGridQuestionResponse;
    /**
     * The minimum number of responses required for the question. This will be available if the question responses are not pre-defined/inferred.
     * @type {number}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    minimumQuestionResponses?: number;
    /**
     * 
     * @type {MeasurementStudiesSurveyQuestionCategory}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    category?: MeasurementStudiesSurveyQuestionCategory;
    /**
     * The maximum number of responses allowed for the question. This will be available if the question responses are not pre-defined/inferred.
     * @type {number}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    maximumQuestionResponses?: number;
    /**
     * The survey question template canonical Id.
     * @type {string}
     * @memberof MeasurementStudiesSurveyShortQuestionTemplate
     */
    surveyQuestionTemplateId?: string;
}
/**
 * The survey status. Only required if the survey is in DRAFT. Created survey will be in AVAILABLE status by default and will only be in IN_USE status if it\'s associated with a study.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesSurveyStatus {
    InUse = 'IN_USE',
    Available = 'AVAILABLE',
    Draft = 'DRAFT'
}

/**
 * The templated measurement survey question.
 * @export
 * @interface MeasurementStudiesTemplatedSurveyShortQuestion
 */
export interface MeasurementStudiesTemplatedSurveyShortQuestion {
    /**
     * 
     * @type {MeasurementStudiesGridQuestionResponses}
     * @memberof MeasurementStudiesTemplatedSurveyShortQuestion
     */
    gridQuestionResponse?: MeasurementStudiesGridQuestionResponses;
    /**
     * List of question placeholders
     * @type {Array<MeasurementStudiesSurveyQuestionPlaceholder>}
     * @memberof MeasurementStudiesTemplatedSurveyShortQuestion
     */
    placeholders?: Array<MeasurementStudiesSurveyQuestionPlaceholder>;
    /**
     * The survey question template canonical identifier.
     * @type {string}
     * @memberof MeasurementStudiesTemplatedSurveyShortQuestion
     */
    surveyQuestionTemplateId?: string;
}
/**
 * The measurement vendor product.
 * @export
 * @interface MeasurementStudiesVendorProduct
 */
export interface MeasurementStudiesVendorProduct {
    /**
     * 
     * @type {MeasurementStudiesVendorType}
     * @memberof MeasurementStudiesVendorProduct
     */
    vendorType?: MeasurementStudiesVendorType;
    /**
     * The vendor product identifier.
     * @type {string}
     * @memberof MeasurementStudiesVendorProduct
     */
    vendorProductId?: string;
    /**
     * 
     * @type {Array<MeasurementStudiesAdType>}
     * @memberof MeasurementStudiesVendorProduct
     */
    adType?: Array<MeasurementStudiesAdType>;
    /**
     * 
     * @type {MeasurementStudiesFundingType}
     * @memberof MeasurementStudiesVendorProduct
     */
    fundingType?: MeasurementStudiesFundingType;
    /**
     * The vendor product display name.
     * @type {string}
     * @memberof MeasurementStudiesVendorProduct
     */
    displayName?: string;
    /**
     * 
     * @type {MeasurementStudyType}
     * @memberof MeasurementStudiesVendorProduct
     */
    studyType?: MeasurementStudyType;
    /**
     * 
     * @type {MeasurementStudyObjective}
     * @memberof MeasurementStudiesVendorProduct
     */
    objective?: MeasurementStudyObjective;
}
/**
 * The measurement eligibility details for a certain vendor product.
 * @export
 * @interface MeasurementStudiesVendorProductEligibility
 */
export interface MeasurementStudiesVendorProductEligibility {
    /**
     * vendor product canonical identifier.
     * @type {string}
     * @memberof MeasurementStudiesVendorProductEligibility
     */
    vendorProductId?: string;
    /**
     * A list of issues will be provided containing the fields causing the issue if the status is INELIGIBLE or ELIGIBLE_WITH_WARNING.
     * @type {Array<MeasurementStudiesEligibilityIssue>}
     * @memberof MeasurementStudiesVendorProductEligibility
     */
    issues?: Array<MeasurementStudiesEligibilityIssue>;
    /**
     * 
     * @type {MeasurementStudiesEligibilityStatus}
     * @memberof MeasurementStudiesVendorProductEligibility
     */
    status?: MeasurementStudiesEligibilityStatus;
}
/**
 * The policy rules will be enforced at vendor product level.
 * @export
 * @interface MeasurementStudiesVendorProductPolicy
 */
export interface MeasurementStudiesVendorProductPolicy {
    /**
     * The maximum number of order allowed for the product.
     * @type {number}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    maximumOrders?: number;
    /**
     * 
     * @type {Array<MeasurementGoal>}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    supportedGoals?: Array<MeasurementGoal>;
    /**
     * Days required for measurement configuration. It is recommended that the startDate of the campaign has sufficient padding to accommodate this lead time, but measurement can begin after the campaign start date in some cases.
     * @type {number}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    leadTime?: number;
    /**
     * The required question objectives that need to be included as part of the survey.
     * @type {Array<MeasurementStudiesSurveyQuestionObjectiveType>}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    requiredQuestionObjectives?: Array<MeasurementStudiesSurveyQuestionObjectiveType>;
    /**
     * Whether or not the benchMark category is required for measurement setup.
     * @type {boolean}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    benchMarkCategoryRequired?: boolean;
    /**
     * List of top 100 supported verbs that can be used in survey questions.
     * @type {Array<string>}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    supportedVerbs?: Array<string>;
    /**
     * The maximum number of survey questions required for the product.
     * @type {number}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    maximumSurveyQuestions?: number;
    /**
     * The maximum number of orders required for the product.
     * @type {number}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    minimumOrders?: number;
    /**
     * vendor product canonical identifier.
     * @type {string}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    vendorProductId?: string;
    /**
     * Whether or not a verb is required for measurement setup. It will be used in applicable survey questions to construct the question text.
     * @type {boolean}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    verbRequired?: boolean;
    /**
     * Whether custom survey questions are allowed.
     * @type {boolean}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    customQuestionAllowed?: boolean;
    /**
     * The maximum required length/duration of the study in days.
     * @type {number}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    maximumStudyLength?: number;
    /**
     * The maximum number of peer names required for the product.
     * @type {number}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    maximumPeerNames?: number;
    /**
     * The requirements for survey question categories.
     * @type {Array<MeasurementStudiesSurveyQuestionCategoryRequirement>}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    requiredQuestionCategories?: Array<MeasurementStudiesSurveyQuestionCategoryRequirement>;
    /**
     * 
     * @type {Array<MeasurementStudiesMarketplace>}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    supportedMarketplaces?: Array<MeasurementStudiesMarketplace>;
    /**
     * The minimum required length/duration of the study in days.
     * @type {number}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    minimumStudyLength?: number;
    /**
     * Whether or not the vendor requires an additional sign off process to fully qualify for study.
     * @type {boolean}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    vendorApprovalRequired?: boolean;
    /**
     * The minimum number of peer names required for the product.
     * @type {number}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    minimumPeerNames?: number;
    /**
     * Whether or not the vendor assigned external reference identifier is required for measurement setup.
     * @type {boolean}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    externalReferenceIdRequired?: boolean;
    /**
     * The minimum number of survey questions required for the product.
     * @type {number}
     * @memberof MeasurementStudiesVendorProductPolicy
     */
    minimumSurveyQuestions?: number;
}
/**
 * The vendor product recommendation object with elgibility status.
 * @export
 * @interface MeasurementStudiesVendorProductRecommendation
 */
export interface MeasurementStudiesVendorProductRecommendation {
    /**
     * Vendor product canonical identifier.
     * @type {string}
     * @memberof MeasurementStudiesVendorProductRecommendation
     */
    vendorProductId?: string;
    /**
     * The lower the number, the more recommended the vendor product is.
     * @type {number}
     * @memberof MeasurementStudiesVendorProductRecommendation
     */
    rank?: number;
    /**
     * A list of issues will be provided containing the fields causing the issue if the status is INELIGIBLE or ELIGIBLE_WITH_WARNING.
     * @type {Array<MeasurementStudiesEligibilityIssue>}
     * @memberof MeasurementStudiesVendorProductRecommendation
     */
    issues?: Array<MeasurementStudiesEligibilityIssue>;
    /**
     * 
     * @type {MeasurementStudiesEligibilityStatus}
     * @memberof MeasurementStudiesVendorProductRecommendation
     */
    status?: MeasurementStudiesEligibilityStatus;
}
/**
 * The recommendations metadata.
 * @export
 * @interface MeasurementStudiesVendorProductRecommendationsMetadata
 */
export interface MeasurementStudiesVendorProductRecommendationsMetadata {
    /**
     * 
     * @type {Array<MeasurementStudiesVendorProductRecommendationsOrderMetadata>}
     * @memberof MeasurementStudiesVendorProductRecommendationsMetadata
     */
    orderMetadata?: Array<MeasurementStudiesVendorProductRecommendationsOrderMetadata>;
    /**
     * 
     * @type {MeasurementStudiesLocale}
     * @memberof MeasurementStudiesVendorProductRecommendationsMetadata
     */
    locale?: MeasurementStudiesLocale;
    /**
     * StudyType identifier filters to be applied when fecthing recommendations. If not supplied we will check for all available vendor products.
     * @type {Array<MeasurementStudyType>}
     * @memberof MeasurementStudiesVendorProductRecommendationsMetadata
     */
    studyTypeFilters?: Array<MeasurementStudyType>;
    /**
     * The advertiserId.
     * @type {string}
     * @memberof MeasurementStudiesVendorProductRecommendationsMetadata
     */
    advertiserId?: string;
}
/**
 * Metadata around a hypothetical order.
 * @export
 * @interface MeasurementStudiesVendorProductRecommendationsOrderMetadata
 */
export interface MeasurementStudiesVendorProductRecommendationsOrderMetadata {
    /**
     * 
     * @type {MeasurementGoal}
     * @memberof MeasurementStudiesVendorProductRecommendationsOrderMetadata
     */
    goal?: MeasurementGoal;
    /**
     * The estimated end date of the order in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementStudiesVendorProductRecommendationsOrderMetadata
     */
    endDate?: string;
    /**
     * The total estimated impressions of the order.
     * @type {number}
     * @memberof MeasurementStudiesVendorProductRecommendationsOrderMetadata
     */
    impressions?: number;
    /**
     * The estimated start date of the order in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof MeasurementStudiesVendorProductRecommendationsOrderMetadata
     */
    startDate?: string;
    /**
     * The total estimated budget of the order.
     * @type {number}
     * @memberof MeasurementStudiesVendorProductRecommendationsOrderMetadata
     */
    budget?: number;
}
/**
 * The request object to get recommendations.
 * @export
 * @interface MeasurementStudiesVendorProductRecommendationsRequest
 */
export interface MeasurementStudiesVendorProductRecommendationsRequest {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<MeasurementStudiesFundingType>}
     * @memberof MeasurementStudiesVendorProductRecommendationsRequest
     */
    fundingTypeFilters?: Array<MeasurementStudiesFundingType>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof MeasurementStudiesVendorProductRecommendationsRequest
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<MeasurementStudiesVendorType>}
     * @memberof MeasurementStudiesVendorProductRecommendationsRequest
     */
    vendorTypeFilters?: Array<MeasurementStudiesVendorType>;
    /**
     * 
     * @type {Array<MeasurementStudiesVendorProductRecommendationsOrderMetadata>}
     * @memberof MeasurementStudiesVendorProductRecommendationsRequest
     */
    orderMetadata?: Array<MeasurementStudiesVendorProductRecommendationsOrderMetadata>;
    /**
     * 
     * @type {MeasurementStudiesLocale}
     * @memberof MeasurementStudiesVendorProductRecommendationsRequest
     */
    locale?: MeasurementStudiesLocale;
    /**
     * StudyType identifier filters to be applied when fecthing recommendations. If not supplied we will check for all available vendor products.
     * @type {Array<MeasurementStudyType>}
     * @memberof MeasurementStudiesVendorProductRecommendationsRequest
     */
    studyTypeFilters?: Array<MeasurementStudyType>;
    /**
     * The advertiserId.
     * @type {string}
     * @memberof MeasurementStudiesVendorProductRecommendationsRequest
     */
    advertiserId?: string;
}
/**
 * The request object to fetch measurement vendor products.
 * @export
 * @interface MeasurementStudiesVendorProductRequest
 */
export interface MeasurementStudiesVendorProductRequest {
    /**
     * FundingType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<MeasurementStudiesFundingType>}
     * @memberof MeasurementStudiesVendorProductRequest
     */
    fundingTypeFilters?: Array<MeasurementStudiesFundingType>;
    /**
     * StudyObjective filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<MeasurementStudyObjective>}
     * @memberof MeasurementStudiesVendorProductRequest
     */
    objectiveTypeFilters?: Array<MeasurementStudyObjective>;
    /**
     * VendorProduct identifier filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<string>}
     * @memberof MeasurementStudiesVendorProductRequest
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * AdType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<MeasurementStudiesAdType>}
     * @memberof MeasurementStudiesVendorProductRequest
     */
    adTypeFilters?: Array<MeasurementStudiesAdType>;
    /**
     * VendorType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<MeasurementStudiesVendorType>}
     * @memberof MeasurementStudiesVendorProductRequest
     */
    vendorTypeFilters?: Array<MeasurementStudiesVendorType>;
    /**
     * StudyType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<MeasurementStudyType>}
     * @memberof MeasurementStudiesVendorProductRequest
     */
    studyTypeFilters?: Array<MeasurementStudyType>;
}
/**
 * The measurement vendor name, each study type will have different supported vendors. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudiesVendorType {
    Amazon = 'AMAZON',
    Kantar = 'KANTAR',
    Upwave = 'UPWAVE',
    Nielsen = 'NIELSEN',
    Macromill = 'MACROMILL',
    Dynata = 'DYNATA',
    Lucid = 'LUCID',
    OmnichannelMetrics = 'OMNICHANNEL_METRICS',
    Ispot = 'ISPOT',
    Videoamp = 'VIDEOAMP',
    Other = 'OTHER'
}

/**
 * Measurement category based on the purpose of the measurement. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudyObjective {
    CampaignMeasurement = 'CAMPAIGN_MEASUREMENT',
    CampaignPlanning = 'CAMPAIGN_PLANNING',
    Other = 'OTHER'
}

/**
 * The status of the result of the study. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudyResultStatus {
    Available = 'AVAILABLE',
    Other = 'OTHER'
}

/**
 * The study status. Only required if study is in DRAFT as part of study creation/update. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudyStatus {
    Running = 'RUNNING',
    Pending = 'PENDING',
    Approved = 'APPROVED',
    Rejected = 'REJECTED',
    Ended = 'ENDED',
    Cancelled = 'CANCELLED',
    Draft = 'DRAFT',
    Infeasible = 'INFEASIBLE',
    Other = 'OTHER'
}

/**
 * Measurement study status reason.
 * @export
 * @interface MeasurementStudyStatusReason
 */
export interface MeasurementStudyStatusReason {
    /**
     * 
     * @type {MeasurementStudyStatusReasonType}
     * @memberof MeasurementStudyStatusReason
     */
    measurementStudyStatusReasonType?: MeasurementStudyStatusReasonType;
    /**
     * Human readable description of status reason.
     * @type {string}
     * @memberof MeasurementStudyStatusReason
     */
    statusReasonDescription?: string;
}
/**
 * Measurement study reason type. Consider upgrading API version if enum OTHER is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudyStatusReasonType {
    RemoveExtraSpacesBetweenBeforeOrAfterWords = 'REMOVE_EXTRA_SPACES_BETWEEN_BEFORE_OR_AFTER_WORDS',
    RemoveSpacesBetweenLetters = 'REMOVE_SPACES_BETWEEN_LETTERS',
    RemoveAllcapitalizedWordsExceptForAcronyms = 'REMOVE_ALLCAPITALIZED_WORDS_EXCEPT_FOR_ACRONYMS',
    CapitalizeTheFirstLetterOfProperNounsLikeCountryNames = 'CAPITALIZE_THE_FIRST_LETTER_OF_PROPER_NOUNS_LIKE_COUNTRY_NAMES',
    CapitalizeTheFirstLetterOfAllCustomAttributes = 'CAPITALIZE_THE_FIRST_LETTER_OF_ALL_CUSTOM_ATTRIBUTES',
    ResolveInappropriatelyCapitalizedWords = 'RESOLVE_INAPPROPRIATELY_CAPITALIZED_WORDS',
    ResolveImproperlyCapitalizedBrandOrProductCategory = 'RESOLVE_IMPROPERLY_CAPITALIZED_BRAND_OR_PRODUCT_CATEGORY',
    ResolveImproperlyCapitalizedCustomInputs = 'RESOLVE_IMPROPERLY_CAPITALIZED_CUSTOM_INPUTS',
    ResolveImproperlyPluralizedCustomInputs = 'RESOLVE_IMPROPERLY_PLURALIZED_CUSTOM_INPUTS',
    RemoveEllipses = 'REMOVE_ELLIPSES',
    RemoveHyphensSeparatingSingleWords = 'REMOVE_HYPHENS_SEPARATING_SINGLE_WORDS',
    RemoveExtraHyphens = 'REMOVE_EXTRA_HYPHENS',
    RemovePunctationCombinations = 'REMOVE_PUNCTATION_COMBINATIONS',
    RemoveExtraPunctuation = 'REMOVE_EXTRA_PUNCTUATION',
    RemovePunctuationAtTheEndOfWords = 'REMOVE_PUNCTUATION_AT_THE_END_OF_WORDS',
    ResolveUnclearBrandOrProductCategory = 'RESOLVE_UNCLEAR_BRAND_OR_PRODUCT_CATEGORY',
    ResolveUnclearPeers = 'RESOLVE_UNCLEAR_PEERS',
    ResolveUnclearBrandOrProductName = 'RESOLVE_UNCLEAR_BRAND_OR_PRODUCT_NAME',
    ResolveUnclearCustomInputs = 'RESOLVE_UNCLEAR_CUSTOM_INPUTS',
    RemoveTypos = 'REMOVE_TYPOS',
    ResolveSubjectVerbDisagreement = 'RESOLVE_SUBJECT_VERB_DISAGREEMENT',
    MakeBrandOrProductCategoryPlural = 'MAKE_BRAND_OR_PRODUCT_CATEGORY_PLURAL',
    ResolveIncorrectPossessiveNouns = 'RESOLVE_INCORRECT_POSSESSIVE_NOUNS',
    CapitalizeTheFirstLetterOfProperNouns = 'CAPITALIZE_THE_FIRST_LETTER_OF_PROPER_NOUNS',
    RemoveRedundantAnswerChoices = 'REMOVE_REDUNDANT_ANSWER_CHOICES',
    ResolveIncorrectTenses = 'RESOLVE_INCORRECT_TENSES',
    RemoveDuplicateInputs = 'REMOVE_DUPLICATE_INPUTS',
    RemoveSpecialCharactersAndSymbols = 'REMOVE_SPECIAL_CHARACTERS_AND_SYMBOLS',
    RemoveNonenglishWords = 'REMOVE_NONENGLISH_WORDS',
    RemoveUnclearOrObfuscatedOffensiveLanguage = 'REMOVE_UNCLEAR_OR_OBFUSCATED_OFFENSIVE_LANGUAGE',
    RemoveDerogatoryLanguage = 'REMOVE_DEROGATORY_LANGUAGE',
    RemoveOffensiveAcronymsAndAbbreviations = 'REMOVE_OFFENSIVE_ACRONYMS_AND_ABBREVIATIONS',
    RemoveOffensiveWordsOrTermsDisguisedAsNonoffensiveTerms = 'REMOVE_OFFENSIVE_WORDS_OR_TERMS_DISGUISED_AS_NONOFFENSIVE_TERMS',
    RemoveTermsPresentedInAWayInWhichTheirTrueMeaningIsClearlyOffensive = 'REMOVE_TERMS_PRESENTED_IN_A_WAY_IN_WHICH_THEIR_TRUE_MEANING_IS_CLEARLY_OFFENSIVE',
    RemoveVulgarAndProfaneWords = 'REMOVE_VULGAR_AND_PROFANE_WORDS',
    RemoveIrrelevantWords = 'REMOVE_IRRELEVANT_WORDS',
    ResolveNegativeQuestionsAndAnswersAboutPeers = 'RESOLVE_NEGATIVE_QUESTIONS_AND_ANSWERS_ABOUT_PEERS',
    SurveysWithPoliticalContentAreNotAllowed = 'SURVEYS_WITH_POLITICAL_CONTENT_ARE_NOT_ALLOWED',
    OnlyOneActiveStudyIsAllowedPerBrandOrProduct = 'ONLY_ONE_ACTIVE_STUDY_IS_ALLOWED_PER_BRAND_OR_PRODUCT',
    AddOrdersToIncreaseImpressions = 'ADD_ORDERS_TO_INCREASE_IMPRESSIONS',
    InfeasibleNotEnoughImpressions = 'INFEASIBLE_NOT_ENOUGH_IMPRESSIONS',
    Other = 'OTHER'
}

/**
 * The submission type for the creation and updating of studies. Currently, this submission type is supported for brand lift and reach and frequency studies only.  This is an optional parameter in each of the request objects and its default value is `SUBMISSION` if not provided. A value of `SUBMISSION` indicates that a study should be submitted for approval. A value of `DRAFT` indicates that a study should be saved but not submitted.
 * @export
 * @enum {string}
 */

export enum MeasurementStudySubmissionType {
    Draft = 'DRAFT',
    Submission = 'SUBMISSION'
}

/**
 * The study type. Consider upgrading API version if enum `OTHER` is received.
 * @export
 * @enum {string}
 */

export enum MeasurementStudyType {
    BrandLift = 'BRAND_LIFT',
    OmnichannelMetrics = 'OMNICHANNEL_METRICS',
    AudienceResearch = 'AUDIENCE_RESEARCH',
    CreativeTesting = 'CREATIVE_TESTING',
    ReachAndFrequency = 'REACH_AND_FREQUENCY',
    Other = 'OTHER'
}

/**
 * The request object to fetch brands to be used in the OMNICHANNEL_METRICS vendor product.
 * @export
 * @interface OmnichannelMetricsBrandSearchRequestV1M2
 */
export interface OmnichannelMetricsBrandSearchRequestV1M2 {
    /**
     * List of brandIds in the omnichannel metrics brand catalog. Either one of brandIdFilter or brandNameSearch should be provided.
     * @type {Array<string>}
     * @memberof OmnichannelMetricsBrandSearchRequestV1M2
     */
    brandIdFilter?: Array<string>;
    /**
     * Text to search for eligible brands in the omnichannel metrics brand catalog. Either one of brandIdFilter or brandNameSearch should be provided.
     * @type {string}
     * @memberof OmnichannelMetricsBrandSearchRequestV1M2
     */
    brandNameSearch?: string;
}
/**
 * 
 * @export
 * @interface OmnichannelMetricsBrandV1M2
 */
export interface OmnichannelMetricsBrandV1M2 {
    /**
     * 
     * @type {string}
     * @memberof OmnichannelMetricsBrandV1M2
     */
    company?: string;
    /**
     * The brand canonical Id
     * @type {string}
     * @memberof OmnichannelMetricsBrandV1M2
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof OmnichannelMetricsBrandV1M2
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof OmnichannelMetricsBrandV1M2
     */
    subcategory?: string;
    /**
     * The brand name.
     * @type {string}
     * @memberof OmnichannelMetricsBrandV1M2
     */
    brand?: string;
    /**
     * 
     * @type {string}
     * @memberof OmnichannelMetricsBrandV1M2
     */
    majorBrand?: string;
    /**
     * 
     * @type {string}
     * @memberof OmnichannelMetricsBrandV1M2
     */
    manufacturer?: string;
}
/**
 * A list of studies.
 * @export
 * @interface PaginatedBaseStudiesV1
 */
export interface PaginatedBaseStudiesV1 {
    /**
     * 
     * @type {string}
     * @memberof PaginatedBaseStudiesV1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<BaseStudyV1>}
     * @memberof PaginatedBaseStudiesV1
     */
    measurements?: Array<BaseStudyV1>;
}
/**
 * A list of studies.
 * @export
 * @interface PaginatedBaseStudiesV1M1
 */
export interface PaginatedBaseStudiesV1M1 {
    /**
     * 
     * @type {string}
     * @memberof PaginatedBaseStudiesV1M1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<BaseStudyV1M1>}
     * @memberof PaginatedBaseStudiesV1M1
     */
    measurements?: Array<BaseStudyV1M1>;
}
/**
 * A list of audience research studies.
 * @export
 * @interface PaginatedDSPAudienceResearchStudiesV1M2
 */
export interface PaginatedDSPAudienceResearchStudiesV1M2 {
    /**
     * 
     * @type {string}
     * @memberof PaginatedDSPAudienceResearchStudiesV1M2
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<DSPAudienceResearchStudyV1M2>}
     * @memberof PaginatedDSPAudienceResearchStudiesV1M2
     */
    measurements?: Array<DSPAudienceResearchStudyV1M2>;
}
/**
 * A list of studies.
 * @export
 * @interface PaginatedDSPBrandLiftStudiesV1
 */
export interface PaginatedDSPBrandLiftStudiesV1 {
    /**
     * 
     * @type {string}
     * @memberof PaginatedDSPBrandLiftStudiesV1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<DSPBrandLiftStudyV1>}
     * @memberof PaginatedDSPBrandLiftStudiesV1
     */
    measurements?: Array<DSPBrandLiftStudyV1>;
}
/**
 * A list of studies.
 * @export
 * @interface PaginatedDSPBrandLiftStudiesV1M1
 */
export interface PaginatedDSPBrandLiftStudiesV1M1 {
    /**
     * 
     * @type {string}
     * @memberof PaginatedDSPBrandLiftStudiesV1M1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<DSPBrandLiftStudyV1M1>}
     * @memberof PaginatedDSPBrandLiftStudiesV1M1
     */
    measurements?: Array<DSPBrandLiftStudyV1M1>;
}
/**
 * A list of creative testing studies.
 * @export
 * @interface PaginatedDSPCreativeTestingStudiesV1M2
 */
export interface PaginatedDSPCreativeTestingStudiesV1M2 {
    /**
     * 
     * @type {string}
     * @memberof PaginatedDSPCreativeTestingStudiesV1M2
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<DSPCreativeTestingStudyV1M2>}
     * @memberof PaginatedDSPCreativeTestingStudiesV1M2
     */
    measurements?: Array<DSPCreativeTestingStudyV1M2>;
}
/**
 * A list of studies.
 * @export
 * @interface PaginatedDSPOmnichannelMetricsStudiesV1M2
 */
export interface PaginatedDSPOmnichannelMetricsStudiesV1M2 {
    /**
     * 
     * @type {string}
     * @memberof PaginatedDSPOmnichannelMetricsStudiesV1M2
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<DSPOmnichannelMetricsStudyV1M2>}
     * @memberof PaginatedDSPOmnichannelMetricsStudiesV1M2
     */
    measurements?: Array<DSPOmnichannelMetricsStudyV1M2>;
}
/**
 * A list of studies.
 * @export
 * @interface PaginatedDSPOmnichannelMetricsStudiesV1M3
 */
export interface PaginatedDSPOmnichannelMetricsStudiesV1M3 {
    /**
     * 
     * @type {string}
     * @memberof PaginatedDSPOmnichannelMetricsStudiesV1M3
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<DSPOmnichannelMetricsStudyV1M3>}
     * @memberof PaginatedDSPOmnichannelMetricsStudiesV1M3
     */
    measurements?: Array<DSPOmnichannelMetricsStudyV1M3>;
}
/**
 * A list of audience research studies.
 * @export
 * @interface PaginatedMeasurementAudienceResearchStudies
 */
export interface PaginatedMeasurementAudienceResearchStudies {
    /**
     * 
     * @type {string}
     * @memberof PaginatedMeasurementAudienceResearchStudies
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<MeasurementAudienceResearchStudy>}
     * @memberof PaginatedMeasurementAudienceResearchStudies
     */
    measurements?: Array<MeasurementAudienceResearchStudy>;
}
/**
 * A list of studies.
 * @export
 * @interface PaginatedMeasurementBaseStudies
 */
export interface PaginatedMeasurementBaseStudies {
    /**
     * 
     * @type {string}
     * @memberof PaginatedMeasurementBaseStudies
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<MeasurementBaseStudy>}
     * @memberof PaginatedMeasurementBaseStudies
     */
    measurements?: Array<MeasurementBaseStudy>;
}
/**
 * A list of Brand Lift studies.
 * @export
 * @interface PaginatedMeasurementBrandLiftStudies
 */
export interface PaginatedMeasurementBrandLiftStudies {
    /**
     * 
     * @type {string}
     * @memberof PaginatedMeasurementBrandLiftStudies
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<MeasurementBrandLiftStudy>}
     * @memberof PaginatedMeasurementBrandLiftStudies
     */
    measurements?: Array<MeasurementBrandLiftStudy>;
}
/**
 * A list of creative testing studies.
 * @export
 * @interface PaginatedMeasurementCreativeTestingStudies
 */
export interface PaginatedMeasurementCreativeTestingStudies {
    /**
     * 
     * @type {string}
     * @memberof PaginatedMeasurementCreativeTestingStudies
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<MeasurementCreativeTestingStudy>}
     * @memberof PaginatedMeasurementCreativeTestingStudies
     */
    measurements?: Array<MeasurementCreativeTestingStudy>;
}
/**
 * A list of studies.
 * @export
 * @interface PaginatedMeasurementOmnichannelMetricsStudies
 */
export interface PaginatedMeasurementOmnichannelMetricsStudies {
    /**
     * 
     * @type {string}
     * @memberof PaginatedMeasurementOmnichannelMetricsStudies
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<MeasurementOmnichannelMetricsStudy>}
     * @memberof PaginatedMeasurementOmnichannelMetricsStudies
     */
    measurements?: Array<MeasurementOmnichannelMetricsStudy>;
}
/**
 * A list of Reach and Frequency studies.
 * @export
 * @interface PaginatedMeasurementReachAndFrequencyStudies
 */
export interface PaginatedMeasurementReachAndFrequencyStudies {
    /**
     * 
     * @type {string}
     * @memberof PaginatedMeasurementReachAndFrequencyStudies
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<MeasurementReachAndFrequencyStudy>}
     * @memberof PaginatedMeasurementReachAndFrequencyStudies
     */
    measurements?: Array<MeasurementReachAndFrequencyStudy>;
}
/**
 * 
 * @export
 * @interface PaginatedMeasurementStudiesOmnichannelMetricsBrands
 */
export interface PaginatedMeasurementStudiesOmnichannelMetricsBrands {
    /**
     * The total number of matched brands.
     * @type {number}
     * @memberof PaginatedMeasurementStudiesOmnichannelMetricsBrands
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<MeasurementStudiesOmnichannelMetricsBrand>}
     * @memberof PaginatedMeasurementStudiesOmnichannelMetricsBrands
     */
    brands?: Array<MeasurementStudiesOmnichannelMetricsBrand>;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMeasurementStudiesOmnichannelMetricsBrands
     */
    nextToken?: string;
}
/**
 * 
 * @export
 * @interface PaginatedMeasurementStudiesSurveyQuestionTemplates
 */
export interface PaginatedMeasurementStudiesSurveyQuestionTemplates {
    /**
     * 
     * @type {Array<MeasurementStudiesSurveyShortQuestionTemplate>}
     * @memberof PaginatedMeasurementStudiesSurveyQuestionTemplates
     */
    surveyQuestionTemplates?: Array<MeasurementStudiesSurveyShortQuestionTemplate>;
    /**
     * The total number of templates.
     * @type {number}
     * @memberof PaginatedMeasurementStudiesSurveyQuestionTemplates
     */
    totalResults?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMeasurementStudiesSurveyQuestionTemplates
     */
    nextToken?: string;
}
/**
 * A list of study surveys.
 * @export
 * @interface PaginatedMeasurementStudiesSurveys
 */
export interface PaginatedMeasurementStudiesSurveys {
    /**
     * 
     * @type {string}
     * @memberof PaginatedMeasurementStudiesSurveys
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<MeasurementStudiesSurvey>}
     * @memberof PaginatedMeasurementStudiesSurveys
     */
    surveys?: Array<MeasurementStudiesSurvey>;
}
/**
 * A list of measurement vendor products policies.
 * @export
 * @interface PaginatedMeasurementStudiesVendorProductPolicies
 */
export interface PaginatedMeasurementStudiesVendorProductPolicies {
    /**
     * The total number of vendor products.
     * @type {number}
     * @memberof PaginatedMeasurementStudiesVendorProductPolicies
     */
    totalResults?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMeasurementStudiesVendorProductPolicies
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<MeasurementStudiesVendorProductPolicy>}
     * @memberof PaginatedMeasurementStudiesVendorProductPolicies
     */
    policies?: Array<MeasurementStudiesVendorProductPolicy>;
}
/**
 * The vendor product recommendations response object.
 * @export
 * @interface PaginatedMeasurementStudiesVendorProductRecommendationsResponse
 */
export interface PaginatedMeasurementStudiesVendorProductRecommendationsResponse {
    /**
     * 
     * @type {MeasurementStudiesEligibilityMetadata}
     * @memberof PaginatedMeasurementStudiesVendorProductRecommendationsResponse
     */
    metadata?: MeasurementStudiesEligibilityMetadata;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMeasurementStudiesVendorProductRecommendationsResponse
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<MeasurementStudiesVendorProductRecommendation>}
     * @memberof PaginatedMeasurementStudiesVendorProductRecommendationsResponse
     */
    recommendations?: Array<MeasurementStudiesVendorProductRecommendation>;
}
/**
 * 
 * @export
 * @interface PaginatedOmnichannelMetricsBrandsV1M2
 */
export interface PaginatedOmnichannelMetricsBrandsV1M2 {
    /**
     * The total number of matched brands.
     * @type {number}
     * @memberof PaginatedOmnichannelMetricsBrandsV1M2
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<OmnichannelMetricsBrandV1M2>}
     * @memberof PaginatedOmnichannelMetricsBrandsV1M2
     */
    brands?: Array<OmnichannelMetricsBrandV1M2>;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOmnichannelMetricsBrandsV1M2
     */
    nextToken?: string;
}
/**
 * 
 * @export
 * @interface PaginatedSurveyQuestionTemplatesV1
 */
export interface PaginatedSurveyQuestionTemplatesV1 {
    /**
     * 
     * @type {Array<SurveyQuestionTemplateV1>}
     * @memberof PaginatedSurveyQuestionTemplatesV1
     */
    surveyQuestionTemplates?: Array<SurveyQuestionTemplateV1>;
    /**
     * The total number of templates.
     * @type {number}
     * @memberof PaginatedSurveyQuestionTemplatesV1
     */
    totalResults?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSurveyQuestionTemplatesV1
     */
    nextToken?: string;
}
/**
 * 
 * @export
 * @interface PaginatedSurveyQuestionTemplatesV1M1
 */
export interface PaginatedSurveyQuestionTemplatesV1M1 {
    /**
     * 
     * @type {Array<SurveyQuestionTemplateV1M1>}
     * @memberof PaginatedSurveyQuestionTemplatesV1M1
     */
    surveyQuestionTemplates?: Array<SurveyQuestionTemplateV1M1>;
    /**
     * The total number of templates.
     * @type {number}
     * @memberof PaginatedSurveyQuestionTemplatesV1M1
     */
    totalResults?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSurveyQuestionTemplatesV1M1
     */
    nextToken?: string;
}
/**
 * A list of study surveys.
 * @export
 * @interface PaginatedSurveysV1
 */
export interface PaginatedSurveysV1 {
    /**
     * 
     * @type {string}
     * @memberof PaginatedSurveysV1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<SurveyV1>}
     * @memberof PaginatedSurveysV1
     */
    surveys?: Array<SurveyV1>;
}
/**
 * A list of study surveys.
 * @export
 * @interface PaginatedSurveysV1M1
 */
export interface PaginatedSurveysV1M1 {
    /**
     * 
     * @type {string}
     * @memberof PaginatedSurveysV1M1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<SurveyV1M1>}
     * @memberof PaginatedSurveysV1M1
     */
    surveys?: Array<SurveyV1M1>;
}
/**
 * A list of measurement vendor products policies.
 * @export
 * @interface PaginatedVendorProductPoliciesV1
 */
export interface PaginatedVendorProductPoliciesV1 {
    /**
     * The total number of vendor products.
     * @type {number}
     * @memberof PaginatedVendorProductPoliciesV1
     */
    totalResults?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedVendorProductPoliciesV1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<VendorProductPolicyV1>}
     * @memberof PaginatedVendorProductPoliciesV1
     */
    policies?: Array<VendorProductPolicyV1>;
}
/**
 * A list of measurement vendor products policies.
 * @export
 * @interface PaginatedVendorProductPoliciesV1M1
 */
export interface PaginatedVendorProductPoliciesV1M1 {
    /**
     * The total number of vendor products.
     * @type {number}
     * @memberof PaginatedVendorProductPoliciesV1M1
     */
    totalResults?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedVendorProductPoliciesV1M1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<VendorProductPolicyV1M1>}
     * @memberof PaginatedVendorProductPoliciesV1M1
     */
    policies?: Array<VendorProductPolicyV1M1>;
}
/**
 * A list of measurement vendor products.
 * @export
 * @interface PaginatedVendorProductsV1
 */
export interface PaginatedVendorProductsV1 {
    /**
     * The total number of vendor products.
     * @type {number}
     * @memberof PaginatedVendorProductsV1
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<VendorProductV1>}
     * @memberof PaginatedVendorProductsV1
     */
    vendorProducts?: Array<VendorProductV1>;
    /**
     * 
     * @type {string}
     * @memberof PaginatedVendorProductsV1
     */
    nextToken?: string;
}
/**
 * A list of measurement vendor products.
 * @export
 * @interface PaginatedVendorProductsV1M1
 */
export interface PaginatedVendorProductsV1M1 {
    /**
     * The total number of vendor products.
     * @type {number}
     * @memberof PaginatedVendorProductsV1M1
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<VendorProductV1M1>}
     * @memberof PaginatedVendorProductsV1M1
     */
    vendorProducts?: Array<VendorProductV1M1>;
    /**
     * 
     * @type {string}
     * @memberof PaginatedVendorProductsV1M1
     */
    nextToken?: string;
}
/**
 * The placeholder value type.
 * @export
 * @enum {string}
 */

export enum PlaceholderValueTypeV1 {
    String = 'STRING',
    Integer = 'INTEGER'
}

/**
 * The planning eligibility data.
 * @export
 * @interface PlanningEligibilityDataV1M3
 */
export interface PlanningEligibilityDataV1M3 {
    /**
     * 
     * @type {Array<PlanningOrderMetadataV1M3>}
     * @memberof PlanningEligibilityDataV1M3
     */
    orderMetadata?: Array<PlanningOrderMetadataV1M3>;
    /**
     * 
     * @type {MeasurementLocaleV1}
     * @memberof PlanningEligibilityDataV1M3
     */
    locale?: MeasurementLocaleV1;
    /**
     * StudyType identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<StudyTypeV1M2>}
     * @memberof PlanningEligibilityDataV1M3
     */
    studyTypeFilters?: Array<StudyTypeV1M2>;
    /**
     * The advertiserId.
     * @type {string}
     * @memberof PlanningEligibilityDataV1M3
     */
    advertiserId?: string;
}
/**
 * The request object of planning eligibility check.
 * @export
 * @interface PlanningEligibilityRequestV1M3
 */
export interface PlanningEligibilityRequestV1M3 {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<FundingTypeV1M2>}
     * @memberof PlanningEligibilityRequestV1M3
     */
    fundingTypeFilters?: Array<FundingTypeV1M2>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof PlanningEligibilityRequestV1M3
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<VendorTypeV1M2>}
     * @memberof PlanningEligibilityRequestV1M3
     */
    vendorTypeFilters?: Array<VendorTypeV1M2>;
    /**
     * 
     * @type {Array<PlanningOrderMetadataV1M3>}
     * @memberof PlanningEligibilityRequestV1M3
     */
    orderMetadata?: Array<PlanningOrderMetadataV1M3>;
    /**
     * 
     * @type {MeasurementLocaleV1}
     * @memberof PlanningEligibilityRequestV1M3
     */
    locale?: MeasurementLocaleV1;
    /**
     * StudyType identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<StudyTypeV1M2>}
     * @memberof PlanningEligibilityRequestV1M3
     */
    studyTypeFilters?: Array<StudyTypeV1M2>;
    /**
     * The advertiserId.
     * @type {string}
     * @memberof PlanningEligibilityRequestV1M3
     */
    advertiserId?: string;
}
/**
 * The planning eligibility response object.
 * @export
 * @interface PlanningEligibilityResponseV1M3
 */
export interface PlanningEligibilityResponseV1M3 {
    /**
     * 
     * @type {EligibilityMetadataV1}
     * @memberof PlanningEligibilityResponseV1M3
     */
    metadata?: EligibilityMetadataV1;
    /**
     * 
     * @type {string}
     * @memberof PlanningEligibilityResponseV1M3
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<PlanningEligibilityV1M3>}
     * @memberof PlanningEligibilityResponseV1M3
     */
    vendorProductEligibilities?: Array<PlanningEligibilityV1M3>;
}
/**
 * The request object of measurement eligibility check.
 * @export
 * @interface PlanningEligibilityV1M3
 */
export interface PlanningEligibilityV1M3 {
    /**
     * Vendor product canonical identifier.
     * @type {string}
     * @memberof PlanningEligibilityV1M3
     */
    vendorProductId?: string;
    /**
     * The lower the number, the more recommended the vendor product is.
     * @type {number}
     * @memberof PlanningEligibilityV1M3
     */
    rank?: number;
    /**
     * A list of issues will be provided if the status is INELIGIBLE or ELIGIBLE_WITH_WARNING.
     * @type {Array<EligibilityIssueV1M2>}
     * @memberof PlanningEligibilityV1M3
     */
    issues?: Array<EligibilityIssueV1M2>;
    /**
     * 
     * @type {EligibilityStatusV1}
     * @memberof PlanningEligibilityV1M3
     */
    status?: EligibilityStatusV1;
}
/**
 * Metadata around a hypothetical order.
 * @export
 * @interface PlanningOrderMetadataV1M3
 */
export interface PlanningOrderMetadataV1M3 {
    /**
     * 
     * @type {MeasurementGoalV1}
     * @memberof PlanningOrderMetadataV1M3
     */
    goal?: MeasurementGoalV1;
    /**
     * The estimated end date of the order in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof PlanningOrderMetadataV1M3
     */
    endDate?: string;
    /**
     * The total estimated impressions of the order.
     * @type {number}
     * @memberof PlanningOrderMetadataV1M3
     */
    impressions?: number;
    /**
     * The estimated start date of the order in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof PlanningOrderMetadataV1M3
     */
    startDate?: string;
    /**
     * The total estimated budget of the order.
     * @type {number}
     * @memberof PlanningOrderMetadataV1M3
     */
    budget?: number;
}
/**
 * The link that can be used to access corresponding resources in advertising portal.
 * @export
 * @interface ResourceLinkV1M1
 */
export interface ResourceLinkV1M1 {
    /**
     * The resource name.
     * @type {string}
     * @memberof ResourceLinkV1M1
     */
    name?: string;
    /**
     * The resource url.
     * @type {string}
     * @memberof ResourceLinkV1M1
     */
    url?: string;
}
/**
 * Measurement category based on the purpose of the measurement.
 * @export
 * @enum {string}
 */

export enum StudyObjectiveV1 {
    Measurement = 'CAMPAIGN_MEASUREMENT',
    Planning = 'CAMPAIGN_PLANNING'
}

/**
 * Study response.
 * @export
 * @interface StudyResponseV1
 */
export interface StudyResponseV1 {
    /**
     * An enumerated success or error code for machine use.
     * @type {string}
     * @memberof StudyResponseV1
     */
    code?: string;
    /**
     * The index of the object in the request, starting from 1.
     * @type {number}
     * @memberof StudyResponseV1
     */
    index?: number;
    /**
     * The study canonical identifier.
     * @type {string}
     * @memberof StudyResponseV1
     */
    studyId?: string;
    /**
     * A human-readable message of the code.
     * @type {string}
     * @memberof StudyResponseV1
     */
    message?: string;
    /**
     * 
     * @type {Array<SubErrorV1>}
     * @memberof StudyResponseV1
     */
    errors?: Array<SubErrorV1>;
}
/**
 * Studies response.
 * @export
 * @interface StudyResponsesV1
 */
export interface StudyResponsesV1 {
    /**
     * Request Id that uniquely identifies your request.
     * @type {string}
     * @memberof StudyResponsesV1
     */
    requestId?: string;
    /**
     * 
     * @type {Array<StudyResponseV1>}
     * @memberof StudyResponsesV1
     */
    responses?: Array<StudyResponseV1>;
}
/**
 * Review an study.
 * @export
 * @interface StudyReviewRequestV1
 */
export interface StudyReviewRequestV1 {
    /**
     * List of reasons for study status. For example, when study is marked REJECTED or INELIGIBLE, this field would be available.
     * @type {Array<string>}
     * @memberof StudyReviewRequestV1
     */
    statusReasons?: Array<string>;
    /**
     * List of reasons for rejection, this will only be required if the status is REJECTED. This field is deprecated, use statusReasons instead.
     * @type {Array<string>}
     * @memberof StudyReviewRequestV1
     * @deprecated
     */
    rejectionReasons?: Array<string>;
    /**
     * The study canonical identifier.
     * @type {string}
     * @memberof StudyReviewRequestV1
     */
    studyId?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof StudyReviewRequestV1
     */
    comment?: string;
    /**
     * 
     * @type {StudyReviewStatusV1}
     * @memberof StudyReviewRequestV1
     */
    status?: StudyReviewStatusV1;
}
/**
 * The study review status. APPROVED studies will start delivering once reach the startDate.
 * @export
 * @enum {string}
 */

export enum StudyReviewStatusV1 {
    Approved = 'APPROVED',
    Rejected = 'REJECTED',
    Infeasible = 'INFEASIBLE'
}

/**
 * The study status. Only required if study is in DRAFT as part of study creation/update.
 * @export
 * @enum {string}
 */

export enum StudyStatusV1 {
    Running = 'RUNNING',
    Pending = 'PENDING',
    Approved = 'APPROVED',
    Rejected = 'REJECTED',
    Ended = 'ENDED',
    Cancelled = 'CANCELLED',
    Draft = 'DRAFT',
    Infeasible = 'INFEASIBLE'
}

/**
 * The submission type for the creation and updating of studies. Currently, this submission type is supported for brand lift studies only.  This is an optional parameter in each of the request objects and its default value is `SUBMISSION` if not provided. A value of `SUBMISSION` indicates that a study should be submitted for approval. A value of `DRAFT` indicates that a study should be saved but not submitted.
 * @export
 * @enum {string}
 */

export enum StudySubmissionTypeV1 {
    Draft = 'DRAFT',
    Submission = 'SUBMISSION'
}

/**
 * The study type.
 * @export
 * @enum {string}
 */

export enum StudyTypeV1 {
    BrandLift = 'BRAND_LIFT'
}

/**
 * The study type.
 * @export
 * @enum {string}
 */

export enum StudyTypeV1M2 {
    BrandLift = 'BRAND_LIFT',
    OmnichannelMetrics = 'OMNICHANNEL_METRICS',
    AudienceResearch = 'AUDIENCE_RESEARCH',
    CreativeTesting = 'CREATIVE_TESTING'
}

/**
 * The sub error object.
 * @export
 * @interface SubErrorV1
 */
export interface SubErrorV1 {
    /**
     * 
     * @type {string}
     * @memberof SubErrorV1
     */
    fieldName?: string;
    /**
     * 
     * @type {string}
     * @memberof SubErrorV1
     */
    errorType: string;
    /**
     * 
     * @type {string}
     * @memberof SubErrorV1
     */
    message: string;
}
/**
 * The survey error object.
 * @export
 * @interface SurveyErrorV1
 */
export interface SurveyErrorV1 {
    /**
     * 
     * @type {string}
     * @memberof SurveyErrorV1
     */
    fieldName?: string;
    /**
     * 
     * @type {string}
     * @memberof SurveyErrorV1
     */
    questionTemplateId?: string;
    /**
     * 
     * @type {string}
     * @memberof SurveyErrorV1
     */
    errorType: string;
    /**
     * 
     * @type {string}
     * @memberof SurveyErrorV1
     */
    message: string;
}
/**
 * The requirement for specific survey question category.
 * @export
 * @interface SurveyQuestionCategoryRequirementV1M1
 */
export interface SurveyQuestionCategoryRequirementV1M1 {
    /**
     * The minimum number of questions required for the question category.
     * @type {number}
     * @memberof SurveyQuestionCategoryRequirementV1M1
     */
    minimumQuestions?: number;
    /**
     * The maximum number of questions required for the question category.
     * @type {number}
     * @memberof SurveyQuestionCategoryRequirementV1M1
     */
    maximumQuestions?: number;
    /**
     * 
     * @type {SurveyQuestionCategoryV1M1}
     * @memberof SurveyQuestionCategoryRequirementV1M1
     */
    category?: SurveyQuestionCategoryV1M1;
}
/**
 * The survey question category.
 * @export
 * @enum {string}
 */

export enum SurveyQuestionCategoryV1M1 {
    BrandKpi = 'BRAND_KPI',
    Weighting = 'WEIGHTING',
    Custom = 'CUSTOM'
}

/**
 * The grid question response object. Only applicable for SINGLE_SELECT_GRID type question.
 * @export
 * @interface SurveyQuestionGridQuestionResponseV1M1
 */
export interface SurveyQuestionGridQuestionResponseV1M1 {
    /**
     * 
     * @type {SurveyQuestionPlaceholderCandidateV1}
     * @memberof SurveyQuestionGridQuestionResponseV1M1
     */
    columns?: SurveyQuestionPlaceholderCandidateV1;
    /**
     * 
     * @type {SurveyQuestionPlaceholderCandidateV1}
     * @memberof SurveyQuestionGridQuestionResponseV1M1
     */
    rows?: SurveyQuestionPlaceholderCandidateV1;
}
/**
 * The survey objective.
 * @export
 * @enum {string}
 */

export enum SurveyQuestionObjectiveTypeV1 {
    Awareness = 'AWARENESS',
    Preference = 'PREFERENCE',
    Favorability = 'FAVORABILITY',
    AdRecall = 'AD_RECALL',
    Intent = 'INTENT',
    Attitudes = 'ATTITUDES',
    Behaviors = 'BEHAVIORS',
    Familiarity = 'FAMILIARITY',
    Association = 'ASSOCIATION'
}

/**
 * The survey objective.
 * @export
 * @enum {string}
 */

export enum SurveyQuestionObjectiveTypeV1M1 {
    Awareness = 'AWARENESS',
    Preference = 'PREFERENCE',
    Favorability = 'FAVORABILITY',
    AdRecall = 'AD_RECALL',
    Intent = 'INTENT',
    Attitudes = 'ATTITUDES',
    UnaidedAwareness = 'UNAIDED_AWARENESS',
    Consideration = 'CONSIDERATION',
    Age = 'AGE',
    Gender = 'GENDER',
    HouseholdIncome = 'HOUSEHOLD_INCOME',
    HouseholdSize = 'HOUSEHOLD_SIZE',
    ChildrenInHousehold = 'CHILDREN_IN_HOUSEHOLD',
    Education = 'EDUCATION',
    Ethnicity = 'ETHNICITY',
    TimeOnline = 'TIME_ONLINE',
    TvMediaConsumption = 'TV_MEDIA_CONSUMPTION',
    InMarketStatus = 'IN_MARKET_STATUS',
    PurchaseFrequency = 'PURCHASE_FREQUENCY',
    PurchaseHistory = 'PURCHASE_HISTORY',
    PurchaseLocation = 'PURCHASE_LOCATION',
    Behaviors = 'BEHAVIORS',
    Familiarity = 'FAMILIARITY'
}

/**
 * Allowed value range for placeholder.
 * @export
 * @interface SurveyQuestionPlaceholderAllowedRangeV1
 */
export interface SurveyQuestionPlaceholderAllowedRangeV1 {
    /**
     * The minimum allowed value.
     * @type {number}
     * @memberof SurveyQuestionPlaceholderAllowedRangeV1
     */
    minimumValue?: number;
    /**
     * The field value that this range depends on. Will be empty if this range is the default range.
     * @type {string}
     * @memberof SurveyQuestionPlaceholderAllowedRangeV1
     */
    parentValue?: string;
    /**
     * The maximum allowed value.
     * @type {number}
     * @memberof SurveyQuestionPlaceholderAllowedRangeV1
     */
    maximumValue?: number;
    /**
     * The field name that this range depends on. Will be empty if this range is the default range.
     * @type {string}
     * @memberof SurveyQuestionPlaceholderAllowedRangeV1
     */
    parentField?: string;
}
/**
 * Allowed values for placeholder.
 * @export
 * @interface SurveyQuestionPlaceholderAllowedValueV1
 */
export interface SurveyQuestionPlaceholderAllowedValueV1 {
    /**
     * Allowed values for placeholder.
     * @type {Array<string>}
     * @memberof SurveyQuestionPlaceholderAllowedValueV1
     */
    values?: Array<string>;
    /**
     * The field value that this value list depend on. Will be empty if this is the default list.
     * @type {string}
     * @memberof SurveyQuestionPlaceholderAllowedValueV1
     */
    parentValue?: string;
    /**
     * The field name that this value list depends on. Will be empty if this is the default list.
     * @type {string}
     * @memberof SurveyQuestionPlaceholderAllowedValueV1
     */
    parentField?: string;
}
/**
 * The placeholder candidate in Survey question.
 * @export
 * @interface SurveyQuestionPlaceholderCandidateV1
 */
export interface SurveyQuestionPlaceholderCandidateV1 {
    /**
     * Allowed values for placeholder. Will be empty if placeholder is free text field.
     * @type {Array<SurveyQuestionPlaceholderAllowedValueV1>}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    allowedValues?: Array<SurveyQuestionPlaceholderAllowedValueV1>;
    /**
     * The maximum allowed character length for each individual placeholder value.
     * @type {number}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    maximumValueLength?: number;
    /**
     * The survey question placeholder field name.
     * @type {string}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    fieldName?: string;
    /**
     * Allowed value ranges for placeholder. Only applicable if the valueType is INTEGER.
     * @type {Array<SurveyQuestionPlaceholderAllowedRangeV1>}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    allowedValueRanges?: Array<SurveyQuestionPlaceholderAllowedRangeV1>;
    /**
     * 
     * @type {PlaceholderValueTypeV1}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    valueType?: PlaceholderValueTypeV1;
    /**
     * Where the placeholder values will be inferred from.
     * @type {Array<string>}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    inferredFields?: Array<string>;
    /**
     * Default values that will be appended to the values list regardless.
     * @type {Array<string>}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    defaultValues?: Array<string>;
    /**
     * The minimum allowed character length for each individual placeholder value.
     * @type {number}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    minimumValueLength?: number;
    /**
     * Whether custom value is allowed for the placeholder.
     * @type {boolean}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    allowCustomValue?: boolean;
}
/**
 * 
 * @export
 * @interface SurveyQuestionPlaceholderFieldValueV1
 */
export interface SurveyQuestionPlaceholderFieldValueV1 {
    /**
     * The survey question placeholder field value.
     * @type {string}
     * @memberof SurveyQuestionPlaceholderFieldValueV1
     */
    value?: string;
    /**
     * This is only required if the corresponding field is \'response\', this will help to define if the response value will be counted as a positive one in the study report.
     * @type {boolean}
     * @memberof SurveyQuestionPlaceholderFieldValueV1
     */
    isQualifying?: boolean;
}
/**
 * The object specifying a placeholder in Survey question.
 * @export
 * @interface SurveyQuestionPlaceholderV1
 */
export interface SurveyQuestionPlaceholderV1 {
    /**
     * The survey question placeholder field name.
     * @type {string}
     * @memberof SurveyQuestionPlaceholderV1
     */
    fieldName?: string;
    /**
     * The survey question placeholder field values.
     * @type {Array<SurveyQuestionPlaceholderFieldValueV1>}
     * @memberof SurveyQuestionPlaceholderV1
     */
    fieldValues?: Array<SurveyQuestionPlaceholderFieldValueV1>;
}
/**
 * The survey question response chosen by Survey audience.
 * @export
 * @interface SurveyQuestionResponseV1M2
 */
export interface SurveyQuestionResponseV1M2 {
    /**
     * The type of response.
     * @type {string}
     * @memberof SurveyQuestionResponseV1M2
     */
    responseType?: SurveyQuestionResponseV1M2ResponseTypeEnum;
    /**
     * The response text if the question response type is TEXT.
     * @type {string}
     * @memberof SurveyQuestionResponseV1M2
     */
    responseValue?: string;
    /**
     * 
     * @type {AssetV1M2}
     * @memberof SurveyQuestionResponseV1M2
     */
    asset?: AssetV1M2;
}

/**
    * @export
    * @enum {string}
    */
export enum SurveyQuestionResponseV1M2ResponseTypeEnum {
    Text = 'TEXT',
    Asset = 'ASSET'
}

/**
 * The survey question sub-category. Only applicable to certain categories
 * @export
 * @enum {string}
 */

export enum SurveyQuestionSubCategoryV1M1 {
    Demographic = 'DEMOGRAPHIC',
    Behavior = 'BEHAVIOR',
    PurchaseHistory = 'PURCHASE_HISTORY'
}

/**
 * Survey question template for vendor product.
 * @export
 * @interface SurveyQuestionTemplateV1
 */
export interface SurveyQuestionTemplateV1 {
    /**
     * The minimum number of qualifying responses required for the question. This will be available if the qualifying responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1
     */
    minimumQualifyingResponses?: number;
    /**
     * The maximum number of qualifying responses allowed for the question. This will be available if the qualifying responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1
     */
    maximumQualifyingResponses?: number;
    /**
     * The pre-defined qualifying survey question responses with placeholders, this will help to define which responses will be counted as positive ones in the study report.
     * @type {Array<string>}
     * @memberof SurveyQuestionTemplateV1
     */
    qualifyingResponses?: Array<string>;
    /**
     * The pre-defined survey question responses with placeholders.
     * @type {Array<string>}
     * @memberof SurveyQuestionTemplateV1
     */
    questionResponses?: Array<string>;
    /**
     * 
     * @type {MeasurementLocaleV1}
     * @memberof SurveyQuestionTemplateV1
     */
    locale?: MeasurementLocaleV1;
    /**
     * 
     * @type {SurveyQuestionTypeV1}
     * @memberof SurveyQuestionTemplateV1
     */
    type?: SurveyQuestionTypeV1;
    /**
     * 
     * @type {SurveyQuestionObjectiveTypeV1}
     * @memberof SurveyQuestionTemplateV1
     */
    objectiveType?: SurveyQuestionObjectiveTypeV1;
    /**
     * The survey question text with placeholders.
     * @type {string}
     * @memberof SurveyQuestionTemplateV1
     */
    questionText?: string;
    /**
     * The associated vendor product id.
     * @type {string}
     * @memberof SurveyQuestionTemplateV1
     */
    vendorProductId?: string;
    /**
     * 
     * @type {Array<SurveyQuestionPlaceholderCandidateV1>}
     * @memberof SurveyQuestionTemplateV1
     */
    placeholderCandidates?: Array<SurveyQuestionPlaceholderCandidateV1>;
    /**
     * The minimum number of responses required for the question. This will be available if the question responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1
     */
    minimumQuestionResponses?: number;
    /**
     * The survey question template canonical Id.
     * @type {string}
     * @memberof SurveyQuestionTemplateV1
     */
    id?: string;
    /**
     * The maximum number of responses allowed for the question. This will be available if the question responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1
     */
    maximumQuestionResponses?: number;
}
/**
 * Survey question template for vendor product.
 * @export
 * @interface SurveyQuestionTemplateV1M1
 */
export interface SurveyQuestionTemplateV1M1 {
    /**
     * The minimum number of qualifying responses required for the question. This will be available if the qualifying responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1M1
     */
    minimumQualifyingResponses?: number;
    /**
     * The maximum number of qualifying responses allowed for the question. This will be available if the qualifying responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1M1
     */
    maximumQualifyingResponses?: number;
    /**
     * 
     * @type {SurveyQuestionSubCategoryV1M1}
     * @memberof SurveyQuestionTemplateV1M1
     */
    subCategory?: SurveyQuestionSubCategoryV1M1;
    /**
     * The pre-defined qualifying survey question responses with placeholders, this will help to define which responses will be counted as positive ones in the study report.
     * @type {Array<string>}
     * @memberof SurveyQuestionTemplateV1M1
     */
    qualifyingResponses?: Array<string>;
    /**
     * The pre-defined survey question responses with placeholders.
     * @type {Array<string>}
     * @memberof SurveyQuestionTemplateV1M1
     */
    questionResponses?: Array<string>;
    /**
     * 
     * @type {MeasurementLocaleV1}
     * @memberof SurveyQuestionTemplateV1M1
     */
    locale?: MeasurementLocaleV1;
    /**
     * 
     * @type {SurveyQuestionTypeV1M1}
     * @memberof SurveyQuestionTemplateV1M1
     */
    type?: SurveyQuestionTypeV1M1;
    /**
     * The priority of the question. If present this will determine the ordering of questions in a survey. The check will be enforced when a survey is created/updated. Lower number indicates higher priority.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1M1
     */
    priority?: number;
    /**
     * 
     * @type {SurveyQuestionObjectiveTypeV1M1}
     * @memberof SurveyQuestionTemplateV1M1
     */
    objectiveType?: SurveyQuestionObjectiveTypeV1M1;
    /**
     * The survey question text with placeholders.
     * @type {string}
     * @memberof SurveyQuestionTemplateV1M1
     */
    questionText?: string;
    /**
     * The associated vendor product id.
     * @type {string}
     * @memberof SurveyQuestionTemplateV1M1
     */
    vendorProductId?: string;
    /**
     * 
     * @type {Array<SurveyQuestionPlaceholderCandidateV1>}
     * @memberof SurveyQuestionTemplateV1M1
     */
    placeholderCandidates?: Array<SurveyQuestionPlaceholderCandidateV1>;
    /**
     * 
     * @type {SurveyQuestionGridQuestionResponseV1M1}
     * @memberof SurveyQuestionTemplateV1M1
     */
    gridQuestionResponse?: SurveyQuestionGridQuestionResponseV1M1;
    /**
     * The minimum number of responses required for the question. This will be available if the question responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1M1
     */
    minimumQuestionResponses?: number;
    /**
     * The survey question template canonical Id.
     * @type {string}
     * @memberof SurveyQuestionTemplateV1M1
     */
    id?: string;
    /**
     * 
     * @type {SurveyQuestionCategoryV1M1}
     * @memberof SurveyQuestionTemplateV1M1
     */
    category?: SurveyQuestionCategoryV1M1;
    /**
     * The maximum number of responses allowed for the question. This will be available if the question responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1M1
     */
    maximumQuestionResponses?: number;
}
/**
 * The survey question type. SINGLE_SELECT question will allow customers to choose only one response, MULTI_SELECT question will allow customers to choose multiple responses, RATING will allow customers to choose a rating on a scale (e.g. 1 to 5), FREE_TEXT will allow customers to provide a free formed question text, SINGLE_ASSET_SELECT will allow customers to choose an asset as the response.
 * @export
 * @enum {string}
 */

export enum SurveyQuestionTypeV1 {
    SingleSelect = 'SINGLE_SELECT',
    MultiSelect = 'MULTI_SELECT',
    Rating = 'RATING',
    FreeText = 'FREE_TEXT',
    SingleAssetSelect = 'SINGLE_ASSET_SELECT'
}

/**
 * The survey question type. SINGLE_SELECT question will allow customers to choose only one response, MULTI_SELECT question will allow customers to choose multiple responses, RATING will allow customers to choose a rating on a scale (e.g. 1 to 5), FREE_TEXT will allow customers to provide a free formed question text.
 * @export
 * @enum {string}
 */

export enum SurveyQuestionTypeV1M1 {
    SingleSelect = 'SINGLE_SELECT',
    SingleSelectGrid = 'SINGLE_SELECT_GRID',
    MultiSelect = 'MULTI_SELECT',
    Rating = 'RATING',
    FreeText = 'FREE_TEXT'
}

/**
 * The rate of response for each response in Survey question.
 * @export
 * @interface SurveyResponseResultV1
 */
export interface SurveyResponseResultV1 {
    /**
     * The response choosen by Survey audience.
     * @type {string}
     * @memberof SurveyResponseResultV1
     */
    questionResponse?: string;
    /**
     * The significance percentage for the response data in this segment.
     * @type {number}
     * @memberof SurveyResponseResultV1
     */
    statisticalSignificance?: number;
    /**
     * Is the response a qualifying response. Used in calculating Brand Lift.
     * @type {boolean}
     * @memberof SurveyResponseResultV1
     */
    isQualifyingResponse?: boolean;
    /**
     * The percentage of people choosing this response.
     * @type {number}
     * @memberof SurveyResponseResultV1
     */
    responseRate?: number;
    /**
     * The percent of people in ad exposed group choosing this response.
     * @type {number}
     * @memberof SurveyResponseResultV1
     */
    adExposedGroupResponseRate?: number;
    /**
     * The percent of people in control group choosing this response.
     * @type {number}
     * @memberof SurveyResponseResultV1
     */
    controlGroupResponseRate?: number;
    /**
     * 
     * @type {SurveyQuestionObjectiveTypeV1}
     * @memberof SurveyResponseResultV1
     */
    questionObjective?: SurveyQuestionObjectiveTypeV1;
    /**
     * The segment value to which this response data belongs to. Would be corresponding to the above segmentType field.
     * @type {string}
     * @memberof SurveyResponseResultV1
     */
    segmentValue?: string;
    /**
     * Sequence number of the question in the Survey.
     * @type {number}
     * @memberof SurveyResponseResultV1
     */
    questionSequence?: number;
    /**
     * Text of the Survey question.
     * @type {string}
     * @memberof SurveyResponseResultV1
     */
    questionText?: string;
    /**
     * The segment type to which this response data belongs to.
     * @type {string}
     * @memberof SurveyResponseResultV1
     */
    segmentType?: SurveyResponseResultV1SegmentTypeEnum;
    /**
     * The percentage of margin of error for this response.
     * @type {number}
     * @memberof SurveyResponseResultV1
     */
    marginOfError?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum SurveyResponseResultV1SegmentTypeEnum {
    Overall = 'OVERALL',
    Age = 'AGE',
    HouseholdIncome = 'HOUSEHOLD_INCOME',
    Gender = 'GENDER',
    Audiences = 'AUDIENCES',
    Frequency = 'FREQUENCY',
    Channel = 'CHANNEL'
}

/**
 * The rate of response for each response in Survey question.
 * @export
 * @interface SurveyResponseResultV1M1
 */
export interface SurveyResponseResultV1M1 {
    /**
     * The response choosen by Survey audience.
     * @type {string}
     * @memberof SurveyResponseResultV1M1
     */
    questionResponse?: string;
    /**
     * The significance percentage for the response data in this segment.
     * @type {number}
     * @memberof SurveyResponseResultV1M1
     */
    statisticalSignificance?: number;
    /**
     * Is the response a qualifying response. Used in calculating Brand Lift.
     * @type {boolean}
     * @memberof SurveyResponseResultV1M1
     */
    isQualifyingResponse?: boolean;
    /**
     * The percentage of people choosing this response.
     * @type {number}
     * @memberof SurveyResponseResultV1M1
     */
    responseRate?: number;
    /**
     * The percent of people in ad exposed group choosing this response.
     * @type {number}
     * @memberof SurveyResponseResultV1M1
     */
    adExposedGroupResponseRate?: number;
    /**
     * The percent of people in control group choosing this response.
     * @type {number}
     * @memberof SurveyResponseResultV1M1
     */
    controlGroupResponseRate?: number;
    /**
     * 
     * @type {SurveyQuestionObjectiveTypeV1M1}
     * @memberof SurveyResponseResultV1M1
     */
    questionObjective?: SurveyQuestionObjectiveTypeV1M1;
    /**
     * The segment value to which this response data belongs to. Would be corresponding to the above segmentType field.
     * @type {string}
     * @memberof SurveyResponseResultV1M1
     */
    segmentValue?: string;
    /**
     * Sequence number of the question in the Survey.
     * @type {number}
     * @memberof SurveyResponseResultV1M1
     */
    questionSequence?: number;
    /**
     * Text of the Survey question.
     * @type {string}
     * @memberof SurveyResponseResultV1M1
     */
    questionText?: string;
    /**
     * The segment type to which this response data belongs to.
     * @type {string}
     * @memberof SurveyResponseResultV1M1
     */
    segmentType?: SurveyResponseResultV1M1SegmentTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SurveyResponseResultV1M1SegmentTypeEnum {
    Overall = 'OVERALL',
    Age = 'AGE',
    HouseholdIncome = 'HOUSEHOLD_INCOME',
    Gender = 'GENDER',
    Audiences = 'AUDIENCES',
    Frequency = 'FREQUENCY',
    Channel = 'CHANNEL'
}

/**
 * The rate of response for each response in Survey question.
 * @export
 * @interface SurveyResponseResultV1M2
 */
export interface SurveyResponseResultV1M2 {
    /**
     * 
     * @type {SurveyQuestionResponseV1M2}
     * @memberof SurveyResponseResultV1M2
     */
    questionResponse?: SurveyQuestionResponseV1M2;
    /**
     * 
     * @type {AssetV1M2}
     * @memberof SurveyResponseResultV1M2
     */
    questionAsset?: AssetV1M2;
    /**
     * Is the response a qualifying response. Used in calculating Brand Lift.
     * @type {boolean}
     * @memberof SurveyResponseResultV1M2
     */
    isQualifyingResponse?: boolean;
    /**
     * The percentage of people choosing this response.
     * @type {number}
     * @memberof SurveyResponseResultV1M2
     */
    responseRate?: number;
    /**
     * 
     * @type {SurveyQuestionObjectiveTypeV1}
     * @memberof SurveyResponseResultV1M2
     */
    questionObjective?: SurveyQuestionObjectiveTypeV1;
    /**
     * The segment value to which this response data belongs to. Would be corresponding to the above segmentType field.
     * @type {string}
     * @memberof SurveyResponseResultV1M2
     */
    segmentValue?: string;
    /**
     * Text of the Survey question.
     * @type {string}
     * @memberof SurveyResponseResultV1M2
     */
    questionText?: string;
    /**
     * The percentage of margin of error for this response.
     * @type {number}
     * @memberof SurveyResponseResultV1M2
     */
    marginOfError?: number;
    /**
     * The significance percentage for the response data in this segment.
     * @type {number}
     * @memberof SurveyResponseResultV1M2
     */
    statisticalSignificance?: number;
    /**
     * The percent of people in ad exposed group choosing this response.
     * @type {number}
     * @memberof SurveyResponseResultV1M2
     */
    adExposedGroupResponseRate?: number;
    /**
     * The percent of people in control group choosing this response.
     * @type {number}
     * @memberof SurveyResponseResultV1M2
     */
    controlGroupResponseRate?: number;
    /**
     * Sequence number of the question in the Survey.
     * @type {number}
     * @memberof SurveyResponseResultV1M2
     */
    questionSequence?: number;
    /**
     * The segment type to which this response data belongs to.
     * @type {string}
     * @memberof SurveyResponseResultV1M2
     */
    segmentType?: SurveyResponseResultV1M2SegmentTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SurveyResponseResultV1M2SegmentTypeEnum {
    Overall = 'OVERALL',
    Age = 'AGE',
    HouseholdIncome = 'HOUSEHOLD_INCOME',
    Gender = 'GENDER',
    Audiences = 'AUDIENCES',
    Frequency = 'FREQUENCY',
    Channel = 'CHANNEL'
}

/**
 * Survey response.
 * @export
 * @interface SurveyResponseV1
 */
export interface SurveyResponseV1 {
    /**
     * The survey canonical identifier.
     * @type {string}
     * @memberof SurveyResponseV1
     */
    surveyId?: string;
    /**
     * An enumerated success or error code for machine use.
     * @type {string}
     * @memberof SurveyResponseV1
     */
    code?: string;
    /**
     * The index of the object in the request, starting from 1.
     * @type {number}
     * @memberof SurveyResponseV1
     */
    index?: number;
    /**
     * A human-readable message of the code.
     * @type {string}
     * @memberof SurveyResponseV1
     */
    message?: string;
    /**
     * 
     * @type {Array<SurveyErrorV1>}
     * @memberof SurveyResponseV1
     */
    errors?: Array<SurveyErrorV1>;
}
/**
 * Surveys response.
 * @export
 * @interface SurveyResponsesV1
 */
export interface SurveyResponsesV1 {
    /**
     * Request Id that uniquely identifies your request.
     * @type {string}
     * @memberof SurveyResponsesV1
     */
    requestId?: string;
    /**
     * 
     * @type {Array<SurveyResponseV1>}
     * @memberof SurveyResponsesV1
     */
    responses?: Array<SurveyResponseV1>;
}
/**
 * The survey status. Only required if the survey is in DRAFT. Created survey will be in AVAILABLE status by default and will only be in IN_USE status if it\'s associated with a study.
 * @export
 * @enum {string}
 */

export enum SurveyStatusV1 {
    InUse = 'IN_USE',
    Available = 'AVAILABLE',
    Draft = 'DRAFT'
}

/**
 * The measurement survey.
 * @export
 * @interface SurveyV1
 */
export interface SurveyV1 {
    /**
     * The vendor product canonical identifier.
     * @type {string}
     * @memberof SurveyV1
     */
    vendorProductId?: string;
    /**
     * A list of templated survey questions.
     * @type {Array<TemplatedSurveyQuestionV1>}
     * @memberof SurveyV1
     */
    templatedQuestions?: Array<TemplatedSurveyQuestionV1>;
    /**
     * A list of custom survey questions.
     * @type {Array<CustomSurveyQuestionV1>}
     * @memberof SurveyV1
     * @deprecated
     */
    customQuestions?: Array<CustomSurveyQuestionV1>;
    /**
     * The associated study identifier. Survey needs to be created prior to the study creation.
     * @type {string}
     * @memberof SurveyV1
     */
    studyId?: string;
    /**
     * The survey canonical identifier. Immutable field. This is required for update.
     * @type {string}
     * @memberof SurveyV1
     */
    id?: string;
    /**
     * 
     * @type {SurveyStatusV1}
     * @memberof SurveyV1
     */
    status?: SurveyStatusV1;
}
/**
 * The measurement survey.
 * @export
 * @interface SurveyV1M1
 */
export interface SurveyV1M1 {
    /**
     * The vendor product canonical identifier.
     * @type {string}
     * @memberof SurveyV1M1
     */
    vendorProductId?: string;
    /**
     * A list of templated survey questions.
     * @type {Array<TemplatedSurveyQuestionV1M1>}
     * @memberof SurveyV1M1
     */
    templatedQuestions?: Array<TemplatedSurveyQuestionV1M1>;
    /**
     * A list of custom survey questions.
     * @type {Array<CustomSurveyQuestionV1>}
     * @memberof SurveyV1M1
     * @deprecated
     */
    customQuestions?: Array<CustomSurveyQuestionV1>;
    /**
     * The associated study identifier. Survey needs to be created prior to the study creation.
     * @type {string}
     * @memberof SurveyV1M1
     */
    studyId?: string;
    /**
     * The survey canonical identifier. Immutable field. This is required for update.
     * @type {string}
     * @memberof SurveyV1M1
     */
    id?: string;
    /**
     * 
     * @type {SurveyStatusV1}
     * @memberof SurveyV1M1
     */
    status?: SurveyStatusV1;
}
/**
 * The templated measurement survey question.
 * @export
 * @interface TemplatedSurveyQuestionV1
 */
export interface TemplatedSurveyQuestionV1 {
    /**
     * List of question placeholders
     * @type {Array<SurveyQuestionPlaceholderV1>}
     * @memberof TemplatedSurveyQuestionV1
     */
    placeholders?: Array<SurveyQuestionPlaceholderV1>;
    /**
     * The survey question template canonical identifier.
     * @type {string}
     * @memberof TemplatedSurveyQuestionV1
     */
    id?: string;
}
/**
 * The templated measurement survey question.
 * @export
 * @interface TemplatedSurveyQuestionV1M1
 */
export interface TemplatedSurveyQuestionV1M1 {
    /**
     * 
     * @type {GridQuestionResponsesV1M1}
     * @memberof TemplatedSurveyQuestionV1M1
     */
    gridQuestionResponse?: GridQuestionResponsesV1M1;
    /**
     * List of question placeholders
     * @type {Array<SurveyQuestionPlaceholderV1>}
     * @memberof TemplatedSurveyQuestionV1M1
     */
    placeholders?: Array<SurveyQuestionPlaceholderV1>;
    /**
     * The survey question template canonical identifier.
     * @type {string}
     * @memberof TemplatedSurveyQuestionV1M1
     */
    id?: string;
}
/**
 * Update DSP AUDIENCE_RESEARCH study object.
 * @export
 * @interface UpdateDSPAudienceResearchStudyV1M2
 */
export interface UpdateDSPAudienceResearchStudyV1M2 {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    vendorProductId?: string;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    studyResultStatus?: UpdateDSPAudienceResearchStudyV1M2StudyResultStatusEnum;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    comment?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    createDate?: string;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    advertiserId?: string;
    /**
     * The study brand name.
     * @type {string}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    brandName?: string;
    /**
     * 
     * @type {AudienceTargetingGroupV1M2}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    audienceTargetingGroup?: AudienceTargetingGroupV1M2;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    peerNames?: Array<string>;
    /**
     * The study product category.
     * @type {string}
     * @memberof UpdateDSPAudienceResearchStudyV1M2
     */
    productCategory?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateDSPAudienceResearchStudyV1M2StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * Update DSP CREATIVE_TESTING study object.
 * @export
 * @interface UpdateDSPCreativeTestingStudyV1M2
 */
export interface UpdateDSPCreativeTestingStudyV1M2 {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    vendorProductId?: string;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    studyResultStatus?: UpdateDSPCreativeTestingStudyV1M2StudyResultStatusEnum;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    comment?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    createDate?: string;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    advertiserId?: string;
    /**
     * The study brand name.
     * @type {string}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    brandName?: string;
    /**
     * A list of assets to be used for the creative testing study as part of either the survey question or the response. In case of API responses, number of assets returned would be limited to 10 even if a creative testing study has more than 10 assets associated with it.
     * @type {Array<AssetV1M2>}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    assets?: Array<AssetV1M2>;
    /**
     * 
     * @type {AudienceTargetingGroupV1M2}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    audienceTargetingGroup?: AudienceTargetingGroupV1M2;
    /**
     * Optional study product category.
     * @type {string}
     * @memberof UpdateDSPCreativeTestingStudyV1M2
     */
    productCategory?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateDSPCreativeTestingStudyV1M2StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * The measurement eligibility details for a certain vendor product.
 * @export
 * @interface VendorProductEligibilityV1
 */
export interface VendorProductEligibilityV1 {
    /**
     * vendor product canonical identifier.
     * @type {string}
     * @memberof VendorProductEligibilityV1
     */
    vendorProductId?: string;
    /**
     * A list of issues will be provided if the status is INELIGIBLE or ELIGIBLE_WITH_WARNING.
     * @type {Array<EligibilityIssueV1>}
     * @memberof VendorProductEligibilityV1
     */
    issues?: Array<EligibilityIssueV1>;
    /**
     * 
     * @type {EligibilityStatusV1}
     * @memberof VendorProductEligibilityV1
     */
    status?: EligibilityStatusV1;
}
/**
 * The measurement eligibility details for a certain vendor product.
 * @export
 * @interface VendorProductEligibilityV1M2
 */
export interface VendorProductEligibilityV1M2 {
    /**
     * vendor product canonical identifier.
     * @type {string}
     * @memberof VendorProductEligibilityV1M2
     */
    vendorProductId?: string;
    /**
     * A list of issues will be provided if the status is INELIGIBLE or ELIGIBLE_WITH_WARNING.
     * @type {Array<EligibilityIssueV1M2>}
     * @memberof VendorProductEligibilityV1M2
     */
    issues?: Array<EligibilityIssueV1M2>;
    /**
     * 
     * @type {EligibilityStatusV1}
     * @memberof VendorProductEligibilityV1M2
     */
    status?: EligibilityStatusV1;
}
/**
 * The policy rules will be enforced at vendor product level.
 * @export
 * @interface VendorProductPolicyV1
 */
export interface VendorProductPolicyV1 {
    /**
     * The maximum number of order allowed for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    maximumOrders?: number;
    /**
     * 
     * @type {Array<MeasurementGoalV1>}
     * @memberof VendorProductPolicyV1
     */
    supportedGoals?: Array<MeasurementGoalV1>;
    /**
     * Days required for measurement configuration. It is recommended that the startDate of the campaign has sufficient padding to accommodate this lead time, but measurement can begin after the campaign start date in some cases.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    leadTime?: number;
    /**
     * The required question objectives that need to be included as part of the survey.
     * @type {Array<SurveyQuestionObjectiveTypeV1>}
     * @memberof VendorProductPolicyV1
     */
    requiredQuestionObjectives?: Array<SurveyQuestionObjectiveTypeV1>;
    /**
     * Whether or not the benchMark category is required for measurement setup.
     * @type {boolean}
     * @memberof VendorProductPolicyV1
     */
    benchMarkCategoryRequired?: boolean;
    /**
     * The maximum number of survey questions required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    maximumSurveyQuestions?: number;
    /**
     * The maximum number of orders required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    minimumOrders?: number;
    /**
     * vendor product canonical identifier.
     * @type {string}
     * @memberof VendorProductPolicyV1
     */
    vendorProductId?: string;
    /**
     * Whether custom survey questions are allowed.
     * @type {boolean}
     * @memberof VendorProductPolicyV1
     */
    customQuestionAllowed?: boolean;
    /**
     * The maximum required length/duration of the study in days.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    maximumStudyLength?: number;
    /**
     * The maximum number of peer names required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    maximumPeerNames?: number;
    /**
     * 
     * @type {Array<MeasurementMarketplaceV1>}
     * @memberof VendorProductPolicyV1
     */
    supportedMarketplaces?: Array<MeasurementMarketplaceV1>;
    /**
     * The minimum required length/duration of the study in days.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    minimumStudyLength?: number;
    /**
     * Whether or not the vendor requires an additional sign off process to fully qualify for study.
     * @type {boolean}
     * @memberof VendorProductPolicyV1
     */
    vendorApprovalRequired?: boolean;
    /**
     * The minimum number of peer names required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    minimumPeerNames?: number;
    /**
     * Whether or not the vendor assigned external reference identifier is required for measurement setup.
     * @type {boolean}
     * @memberof VendorProductPolicyV1
     */
    externalReferenceIdRequired?: boolean;
    /**
     * The minimum number of survey questions required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    minimumSurveyQuestions?: number;
}
/**
 * The policy rules will be enforced at vendor product level.
 * @export
 * @interface VendorProductPolicyV1M1
 */
export interface VendorProductPolicyV1M1 {
    /**
     * The maximum number of order allowed for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    maximumOrders?: number;
    /**
     * 
     * @type {Array<MeasurementGoalV1>}
     * @memberof VendorProductPolicyV1M1
     */
    supportedGoals?: Array<MeasurementGoalV1>;
    /**
     * Days required for measurement configuration. It is recommended that the startDate of the campaign has sufficient padding to accommodate this lead time, but measurement can begin after the campaign start date in some cases.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    leadTime?: number;
    /**
     * The required question objectives that need to be included as part of the survey.
     * @type {Array<SurveyQuestionObjectiveTypeV1M1>}
     * @memberof VendorProductPolicyV1M1
     */
    requiredQuestionObjectives?: Array<SurveyQuestionObjectiveTypeV1M1>;
    /**
     * Whether or not the benchMark category is required for measurement setup.
     * @type {boolean}
     * @memberof VendorProductPolicyV1M1
     */
    benchMarkCategoryRequired?: boolean;
    /**
     * List of supported verbs that can be used in survey questions.
     * @type {Array<string>}
     * @memberof VendorProductPolicyV1M1
     */
    supportedVerbs?: Array<string>;
    /**
     * The maximum number of survey questions required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    maximumSurveyQuestions?: number;
    /**
     * The maximum number of orders required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    minimumOrders?: number;
    /**
     * vendor product canonical identifier.
     * @type {string}
     * @memberof VendorProductPolicyV1M1
     */
    vendorProductId?: string;
    /**
     * Whether or not a verb is required for measurement setup. It will be used in applicable survey questions to construct the question text.
     * @type {boolean}
     * @memberof VendorProductPolicyV1M1
     */
    verbRequired?: boolean;
    /**
     * Whether custom survey questions are allowed.
     * @type {boolean}
     * @memberof VendorProductPolicyV1M1
     */
    customQuestionAllowed?: boolean;
    /**
     * The maximum required length/duration of the study in days.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    maximumStudyLength?: number;
    /**
     * The maximum number of peer names required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    maximumPeerNames?: number;
    /**
     * The requirements for survey question categories.
     * @type {Array<SurveyQuestionCategoryRequirementV1M1>}
     * @memberof VendorProductPolicyV1M1
     */
    requiredQuestionCategories?: Array<SurveyQuestionCategoryRequirementV1M1>;
    /**
     * 
     * @type {Array<MeasurementMarketplaceV1>}
     * @memberof VendorProductPolicyV1M1
     */
    supportedMarketplaces?: Array<MeasurementMarketplaceV1>;
    /**
     * The minimum required length/duration of the study in days.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    minimumStudyLength?: number;
    /**
     * Whether or not the vendor requires an additional sign off process to fully qualify for study.
     * @type {boolean}
     * @memberof VendorProductPolicyV1M1
     */
    vendorApprovalRequired?: boolean;
    /**
     * The minimum number of peer names required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    minimumPeerNames?: number;
    /**
     * Whether or not the vendor assigned external reference identifier is required for measurement setup.
     * @type {boolean}
     * @memberof VendorProductPolicyV1M1
     */
    externalReferenceIdRequired?: boolean;
    /**
     * The minimum number of survey questions required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    minimumSurveyQuestions?: number;
}
/**
 * The request object to fetch measurement vendor products.
 * @export
 * @interface VendorProductRequestV1
 */
export interface VendorProductRequestV1 {
    /**
     * FundingType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<FundingTypeV1>}
     * @memberof VendorProductRequestV1
     */
    fundingTypeFilters?: Array<FundingTypeV1>;
    /**
     * StudyObjective filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<StudyObjectiveV1>}
     * @memberof VendorProductRequestV1
     */
    objectiveTypeFilters?: Array<StudyObjectiveV1>;
    /**
     * VendorProduct identifier filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<string>}
     * @memberof VendorProductRequestV1
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * AdType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<AdTypeV1>}
     * @memberof VendorProductRequestV1
     */
    adTypeFilters?: Array<AdTypeV1>;
    /**
     * VendorType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<VendorTypeV1>}
     * @memberof VendorProductRequestV1
     */
    vendorTypeFilters?: Array<VendorTypeV1>;
    /**
     * StudyType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<StudyTypeV1>}
     * @memberof VendorProductRequestV1
     */
    studyTypeFilters?: Array<StudyTypeV1>;
}
/**
 * The request object to fetch measurement vendor products.
 * @export
 * @interface VendorProductRequestV1M1
 */
export interface VendorProductRequestV1M1 {
    /**
     * FundingType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<FundingTypeV1M1>}
     * @memberof VendorProductRequestV1M1
     */
    fundingTypeFilters?: Array<FundingTypeV1M1>;
    /**
     * StudyObjective filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<StudyObjectiveV1>}
     * @memberof VendorProductRequestV1M1
     */
    objectiveTypeFilters?: Array<StudyObjectiveV1>;
    /**
     * VendorProduct identifier filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<string>}
     * @memberof VendorProductRequestV1M1
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * AdType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<AdTypeV1>}
     * @memberof VendorProductRequestV1M1
     */
    adTypeFilters?: Array<AdTypeV1>;
    /**
     * VendorType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<VendorTypeV1M1>}
     * @memberof VendorProductRequestV1M1
     */
    vendorTypeFilters?: Array<VendorTypeV1M1>;
    /**
     * StudyType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<StudyTypeV1>}
     * @memberof VendorProductRequestV1M1
     */
    studyTypeFilters?: Array<StudyTypeV1>;
}
/**
 * The measurement vendor product type.
 * @export
 * @enum {string}
 */

export enum VendorProductTypeV1 {
    ShopperPanel = 'SHOPPER_PANEL'
}

/**
 * The measurement vendor product type.
 * @export
 * @enum {string}
 */

export enum VendorProductTypeV1M1 {
    ShopperPanel = 'SHOPPER_PANEL',
    BrandLiftInsights = 'BRAND_LIFT_INSIGHTS',
    Dash = 'DASH',
    Upwave = 'UPWAVE',
    DigitalBrandEffect = 'DIGITAL_BRAND_EFFECT',
    ExpandedViewLite = 'EXPANDED_VIEW_LITE',
    Macromill = 'MACROMILL',
    Dynata = 'DYNATA',
    Lucid = 'LUCID'
}

/**
 * The measurement vendor product type.
 * @export
 * @enum {string}
 */

export enum VendorProductTypeV1M2 {
    ShopperPanel = 'SHOPPER_PANEL',
    OmnichannelMetrics = 'OMNICHANNEL_METRICS',
    ShopperPanelAudienceResearch = 'SHOPPER_PANEL_AUDIENCE_RESEARCH',
    ShopperPanelComparisonCreativeTesting = 'SHOPPER_PANEL_COMPARISON_CREATIVE_TESTING'
}

/**
 * The measurement vendor product type.
 * @export
 * @enum {string}
 */

export enum VendorProductTypeV1M3 {
    ShopperPanel = 'SHOPPER_PANEL',
    BrandLiftInsights = 'BRAND_LIFT_INSIGHTS',
    Dash = 'DASH',
    Upwave = 'UPWAVE',
    DigitalBrandEffect = 'DIGITAL_BRAND_EFFECT',
    ExpandedViewLite = 'EXPANDED_VIEW_LITE',
    Macromill = 'MACROMILL',
    Dynata = 'DYNATA',
    Lucid = 'LUCID',
    OmnichannelMetrics = 'OMNICHANNEL_METRICS'
}

/**
 * The measurement vendor product.
 * @export
 * @interface VendorProductV1
 */
export interface VendorProductV1 {
    /**
     * 
     * @type {VendorTypeV1}
     * @memberof VendorProductV1
     */
    vendorType?: VendorTypeV1;
    /**
     * 
     * @type {VendorProductTypeV1}
     * @memberof VendorProductV1
     */
    vendorProductType?: VendorProductTypeV1;
    /**
     * 
     * @type {AdTypeV1}
     * @memberof VendorProductV1
     */
    adType?: AdTypeV1;
    /**
     * 
     * @type {FundingTypeV1}
     * @memberof VendorProductV1
     */
    fundingType?: FundingTypeV1;
    /**
     * 
     * @type {StudyTypeV1}
     * @memberof VendorProductV1
     */
    studyType?: StudyTypeV1;
    /**
     * The vendor product identifier.
     * @type {string}
     * @memberof VendorProductV1
     */
    id?: string;
    /**
     * 
     * @type {StudyObjectiveV1}
     * @memberof VendorProductV1
     */
    objective?: StudyObjectiveV1;
}
/**
 * The measurement vendor product.
 * @export
 * @interface VendorProductV1M1
 */
export interface VendorProductV1M1 {
    /**
     * 
     * @type {VendorTypeV1M1}
     * @memberof VendorProductV1M1
     */
    vendorType?: VendorTypeV1M1;
    /**
     * 
     * @type {VendorProductTypeV1M1}
     * @memberof VendorProductV1M1
     */
    vendorProductType?: VendorProductTypeV1M1;
    /**
     * 
     * @type {AdTypeV1}
     * @memberof VendorProductV1M1
     */
    adType?: AdTypeV1;
    /**
     * 
     * @type {FundingTypeV1M1}
     * @memberof VendorProductV1M1
     */
    fundingType?: FundingTypeV1M1;
    /**
     * The vendor product display name.
     * @type {string}
     * @memberof VendorProductV1M1
     */
    displayName?: string;
    /**
     * 
     * @type {StudyTypeV1}
     * @memberof VendorProductV1M1
     */
    studyType?: StudyTypeV1;
    /**
     * The vendor product identifier.
     * @type {string}
     * @memberof VendorProductV1M1
     */
    id?: string;
    /**
     * 
     * @type {StudyObjectiveV1}
     * @memberof VendorProductV1M1
     */
    objective?: StudyObjectiveV1;
}
/**
 * The measurement vendor type, each study type will have different supported vendors.
 * @export
 * @enum {string}
 */

export enum VendorTypeV1 {
    Amazon = 'AMAZON'
}

/**
 * The measurement vendor type, each study type will have different supported vendors.
 * @export
 * @enum {string}
 */

export enum VendorTypeV1M1 {
    Amazon = 'AMAZON',
    Kantar = 'KANTAR',
    Upwave = 'UPWAVE',
    Nielsen = 'NIELSEN',
    Macromill = 'MACROMILL',
    Dynata = 'DYNATA',
    Lucid = 'LUCID'
}

/**
 * The measurement vendor type, each study type will have different supported vendors.
 * @export
 * @enum {string}
 */

export enum VendorTypeV1M2 {
    Amazon = 'AMAZON',
    OmnichannelMetrics = 'OMNICHANNEL_METRICS'
}

/**
 * The measurement vendor type, each study type will have different supported vendors.
 * @export
 * @enum {string}
 */

export enum VendorTypeV1M3 {
    Amazon = 'AMAZON',
    Kantar = 'KANTAR',
    Upwave = 'UPWAVE',
    Nielsen = 'NIELSEN',
    Macromill = 'MACROMILL',
    Dynata = 'DYNATA',
    Lucid = 'LUCID',
    OmnichannelMetrics = 'OMNICHANNEL_METRICS'
}


/**
 * MeasurementApi - axios parameter creator
 * @export
 */
export const MeasurementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel existing studies.  **Requires one of these permissions**: []
         * @summary Cancel existing studies. Once a study is cancelled it can not be resumed again.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIds] Study canonical identifiers to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelMeasurementStudies: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('cancelMeasurementStudies', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('cancelMeasurementStudies', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (studyIds) {
                localVarQueryParameter['studyIds'] = studyIds.join(COLLECTION_FORMATS.csv);
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Checks the DSP AUDIENCE_RESEARCH study type eligibility status against vendor products.  **Requires one of these permissions**: []
         * @summary Checks the DSP AUDIENCE_RESEARCH study type eligibility against vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {DSPAudienceResearchEligibilityRequestV1M2} [dSPAudienceResearchEligibilityRequestV1M2] The DSP audience research study eligibility request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDSPAudienceResearchEligibility: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, dSPAudienceResearchEligibilityRequestV1M2?: DSPAudienceResearchEligibilityRequestV1M2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('checkDSPAudienceResearchEligibility', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('checkDSPAudienceResearchEligibility', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/eligibility/audienceResearch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.measurementeligibility.v1.2+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dSPAudienceResearchEligibilityRequestV1M2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Checks the DSP BRAND_LIFT study type eligibility status against vendor products.  **Requires one of these permissions**: []
         * @summary Checks the DSP BRAND_LIFT study type eligibility against vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {DSPBrandLiftEligibilityRequestV1} [dSPBrandLiftEligibilityRequestV1] The DSP brand lift eligibility request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDSPBrandLiftEligibility: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, dSPBrandLiftEligibilityRequestV1?: DSPBrandLiftEligibilityRequestV1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('checkDSPBrandLiftEligibility', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('checkDSPBrandLiftEligibility', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/eligibility/brandLift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.measurementeligibility.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dSPBrandLiftEligibilityRequestV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Checks the DSP CREATIVE_TESTING study type eligibility status against vendor products.  **Requires one of these permissions**: []
         * @summary Checks the DSP CREATIVE_TESTING study type eligibility against vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {DSPCreativeTestingEligibilityRequestV1M2} [dSPCreativeTestingEligibilityRequestV1M2] The DSP creative testing study eligibility request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDSPCreativeTestingEligibility: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, dSPCreativeTestingEligibilityRequestV1M2?: DSPCreativeTestingEligibilityRequestV1M2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('checkDSPCreativeTestingEligibility', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('checkDSPCreativeTestingEligibility', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/eligibility/creativeTesting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.measurementeligibility.v1.2+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dSPCreativeTestingEligibilityRequestV1M2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Checks the DSP OMNICHANNEL_METRICS study type eligibility status against vendor products.  **Requires one of these permissions**: []
         * @summary Checks the DSP OMNICHANNEL_METRICS study type eligibility against vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {DSPOmnichannelMetricsEligibilityRequestV1M2} [dSPOmnichannelMetricsEligibilityRequestV1M2] The DSP omnichannel metrics eligibility request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDSPOmnichannelMetricsEligibility: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, dSPOmnichannelMetricsEligibilityRequestV1M2?: DSPOmnichannelMetricsEligibilityRequestV1M2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('checkDSPOmnichannelMetricsEligibility', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('checkDSPOmnichannelMetricsEligibility', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/eligibility/omnichannelMetrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.measurementeligibility.v1.2+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dSPOmnichannelMetricsEligibilityRequestV1M2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Checks eligibility against all vendor products.  **Requires one of these permissions**: []
         * @summary Checks eligibility against all vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {PlanningEligibilityRequestV1M3} [planningEligibilityRequestV1M3] Fetch measurement vendor products request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPlanningEligibility: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, planningEligibilityRequestV1M3?: PlanningEligibilityRequestV1M3, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('checkPlanningEligibility', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('checkPlanningEligibility', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/planning/eligibility`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.measurementeligibility.v1.3+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(planningEligibilityRequestV1M3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new DSP AUDIENCE_RESEARCH study.  **Requires one of these permissions**: []
         * @summary Create new DSP AUDIENCE_RESEARCH study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {CreateDSPAudienceResearchStudyV1M2} [createDSPAudienceResearchStudyV1M2] Create object for DSP AUDIENCE_RESEARCH study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDSPAudienceResearchStudy: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createDSPAudienceResearchStudyV1M2?: CreateDSPAudienceResearchStudyV1M2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createDSPAudienceResearchStudy', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createDSPAudienceResearchStudy', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/studies/audienceResearch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.studymanagement.v1.2+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDSPAudienceResearchStudyV1M2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new DSP BRAND_LIFT studies.  **Requires one of these permissions**: []
         * @summary Create new DSP BRAND_LIFT studies.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPBrandLiftStudyV1M1>} [dSPBrandLiftStudyV1M1] An array of study objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDSPBrandLiftStudies: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createDSPBrandLiftStudies', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createDSPBrandLiftStudies', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/studies/brandLift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.studymanagement.v1.1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dSPBrandLiftStudyV1M1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new DSP CREATIVE_TESTING study.  **Requires one of these permissions**: []
         * @summary Create new DSP CREATIVE_TESTING study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {CreateDSPCreativeTestingStudyV1M2} [createDSPCreativeTestingStudyV1M2] Create object for DSP CREATIVE_TESTING study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDSPCreativeTestingStudy: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createDSPCreativeTestingStudyV1M2?: CreateDSPCreativeTestingStudyV1M2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createDSPCreativeTestingStudy', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createDSPCreativeTestingStudy', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/studies/creativeTesting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.studymanagement.v1.2+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDSPCreativeTestingStudyV1M2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new DSP OMNICHANNEL_METRICS studies.  **Requires one of these permissions**: []
         * @summary Create new DSP OMNICHANNEL_METRICS studies.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPOmnichannelMetricsStudyV1M2>} [dSPOmnichannelMetricsStudyV1M2] An array of study objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDSPOmnichannelMetricsStudies: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPOmnichannelMetricsStudyV1M2?: Array<DSPOmnichannelMetricsStudyV1M2>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createDSPOmnichannelMetricsStudies', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createDSPOmnichannelMetricsStudies', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/studies/omnichannelMetrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.studymanagement.v1.2+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dSPOmnichannelMetricsStudyV1M2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new study surveys.  **Requires one of these permissions**: []
         * @summary Create new study surveys.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<SurveyV1M1>} [surveyV1M1] An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSurveys: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyV1M1?: Array<SurveyV1M1>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createSurveys', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createSurveys', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/studies/surveys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.studymanagement.v1.1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(surveyV1M1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the download link and file type of the 3P vendor\'s study results in an easy to read and understand format which breaks down the effectiveness of an ad campaign. Returns a `200` response that includes an AWS S3 pre-signed URL where the curated study results file is located and the file type (format). The `OTHER` file type is returned when a new file type is added and is not supported in the current version of this API.For full support of the new file type, migrate to the latest version of this API when it is made available. The URL expires after 60 seconds. If the URL expires before the curated results file is downloaded, a new download request must be created.  **Requires one of these permissions**: []
         * @summary Get the 3P vendor\'s curated result file.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1+json&#x60;.
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCuratedStudyResult: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getCuratedStudyResult', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getCuratedStudyResult', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('getCuratedStudyResult', 'accept', accept)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('getCuratedStudyResult', 'studyId', studyId)
            const localVarPath = `/measurement/studies/{studyId}/curatedResult/download`
                .replace(`{${"studyId"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets one or more DSP AUDIENCE_RESEARCH studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more DSP AUDIENCE_RESEARCH studies with requested study identifiers or an advertiser identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIds] Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPAudienceResearchStudies: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIds?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getDSPAudienceResearchStudies', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getDSPAudienceResearchStudies', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/studies/audienceResearch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (studyIds) {
                localVarQueryParameter['studyIds'] = studyIds.join(COLLECTION_FORMATS.csv);
            }

            if (advertiserId !== undefined) {
                localVarQueryParameter['advertiserId'] = advertiserId;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get result of a DSP AUDIENCE_RESEARCH study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
         * @summary Get result of a DSP AUDIENCE_RESEARCH study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1.2+json&#x60;, &#x60;text/vnd.measurementresult.v1.2+csv&#x60;.
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPAudienceResearchStudyResult: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getDSPAudienceResearchStudyResult', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getDSPAudienceResearchStudyResult', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('getDSPAudienceResearchStudyResult', 'accept', accept)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('getDSPAudienceResearchStudyResult', 'studyId', studyId)
            const localVarPath = `/dsp/measurement/studies/audienceResearch/{studyId}/result`
                .replace(`{${"studyId"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIdFilters] Study canonical identifier to filter with. Either one of studyIdFilters or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIdFilters or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPBrandLiftStudies: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIdFilters?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getDSPBrandLiftStudies', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getDSPBrandLiftStudies', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/studies/brandLift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (studyIdFilters) {
                localVarQueryParameter['studyIdFilters'] = studyIdFilters.join(COLLECTION_FORMATS.csv);
            }

            if (advertiserId !== undefined) {
                localVarQueryParameter['advertiserId'] = advertiserId;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get result of a DSP BRAND_LIFT study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
         * @summary Get result of a DSP BRAND_LIFT study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1+json&#x60;, &#x60;application/vnd.measurementresult.v1.1+json&#x60;, &#x60;text/vnd.measurementresult.v1+csv&#x60;
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPBrandLiftStudyResult: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getDSPBrandLiftStudyResult', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getDSPBrandLiftStudyResult', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('getDSPBrandLiftStudyResult', 'accept', accept)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('getDSPBrandLiftStudyResult', 'studyId', studyId)
            const localVarPath = `/measurement/studies/brandLift/{studyId}/result`
                .replace(`{${"studyId"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets one or more DSP CREATIVE_TESTING studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more DSP CREATIVE_TESTING studies with requested study identifiers or an advertiser identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIds] Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPCreativeTestingStudies: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIds?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getDSPCreativeTestingStudies', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getDSPCreativeTestingStudies', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/studies/creativeTesting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (studyIds) {
                localVarQueryParameter['studyIds'] = studyIds.join(COLLECTION_FORMATS.csv);
            }

            if (advertiserId !== undefined) {
                localVarQueryParameter['advertiserId'] = advertiserId;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get result of a DSP CREATIVE_TESTING study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
         * @summary Get result of a DSP CREATIVE_TESTING study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1.2+json&#x60;, &#x60;text/vnd.measurementresult.v1.2+csv&#x60;.
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPCreativeTestingStudyResult: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getDSPCreativeTestingStudyResult', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getDSPCreativeTestingStudyResult', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('getDSPCreativeTestingStudyResult', 'accept', accept)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('getDSPCreativeTestingStudyResult', 'studyId', studyId)
            const localVarPath = `/dsp/measurement/studies/creativeTesting/{studyId}/result`
                .replace(`{${"studyId"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets one or more DSP OMNICHANNEL_METRICS studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more DSP OMNICHANNEL_METRICS studies with requested study identifiers or an advertiser identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIds] Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIdFilters or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPOmnichannelMetricsStudies: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIds?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getDSPOmnichannelMetricsStudies', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getDSPOmnichannelMetricsStudies', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/studies/omnichannelMetrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (studyIds) {
                localVarQueryParameter['studyIds'] = studyIds.join(COLLECTION_FORMATS.csv);
            }

            if (advertiserId !== undefined) {
                localVarQueryParameter['advertiserId'] = advertiserId;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get result of a DSP OMNICHANNEL_METRICS study. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds. Accept header does not support json for OMNICHANNEL_METRICS study type.  **Requires one of these permissions**: []
         * @summary Get result of a DSP OMNICHANNEL_METRICS study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;text/vnd.measurementresult.v1+xlsx&#x60;
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPOmnichannelMetricsStudyResult: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getDSPOmnichannelMetricsStudyResult', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getDSPOmnichannelMetricsStudyResult', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('getDSPOmnichannelMetricsStudyResult', 'accept', accept)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('getDSPOmnichannelMetricsStudyResult', 'studyId', studyId)
            const localVarPath = `/dsp/measurement/studies/omnichannelMetrics/{studyId}/result`
                .replace(`{${"studyId"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets base study objects given a list of studyIds or a list of advertiserIds.  **Requires one of these permissions**: []
         * @summary Gets base study objects given a list of studyIds or a list of advertiserIds.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIds] Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudies: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIds?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getStudies', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getStudies', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (studyIds) {
                localVarQueryParameter['studyIds'] = studyIds.join(COLLECTION_FORMATS.csv);
            }

            if (advertiserId !== undefined) {
                localVarQueryParameter['advertiserId'] = advertiserId;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets one or more study surveys with requested survey identifiers or a study identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more study surveys with requested survey identifiers or a study identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [surveyIds] Survey canonical identifier to filter with. Either one of surveyIds or studyId should be provided.
         * @param {string} [studyId] A study canonical identifier. Either one of surveyIds or studyId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSurveys: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyIds?: Array<string>, studyId?: string, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getSurveys', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getSurveys', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/studies/surveys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (surveyIds) {
                localVarQueryParameter['surveyIds'] = surveyIds.join(COLLECTION_FORMATS.csv);
            }

            if (studyId !== undefined) {
                localVarQueryParameter['studyId'] = studyId;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for brands to be used in the OMNICHANNEL_METRICS vendor product.  **Requires one of these permissions**: []
         * @summary Search for brands to be used in the OMNICHANNEL_METRICS vendor product.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of brands in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {OmnichannelMetricsBrandSearchRequestV1M2} [omnichannelMetricsBrandSearchRequestV1M2] Fetch measurement vendor products request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        omnichannelMetricsBrandSearch: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, omnichannelMetricsBrandSearchRequestV1M2?: OmnichannelMetricsBrandSearchRequestV1M2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('omnichannelMetricsBrandSearch', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('omnichannelMetricsBrandSearch', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/vendorProducts/omnichannelMetrics/brands/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.ocmbrands.v1.3+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(omnichannelMetricsBrandSearchRequestV1M2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update DSP AUDIENCE_RESEARCH study. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update DSP AUDIENCE_RESEARCH study. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {UpdateDSPAudienceResearchStudyV1M2} [updateDSPAudienceResearchStudyV1M2] Update object for DSP AUDIENCE_RESEARCH study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDSPAudienceResearchStudy: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyId: string, updateDSPAudienceResearchStudyV1M2?: UpdateDSPAudienceResearchStudyV1M2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateDSPAudienceResearchStudy', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateDSPAudienceResearchStudy', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('updateDSPAudienceResearchStudy', 'studyId', studyId)
            const localVarPath = `/dsp/measurement/studies/audienceResearch/{studyId}`
                .replace(`{${"studyId"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.studymanagement.v1.2+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDSPAudienceResearchStudyV1M2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update DSP BRAND_LIFT studies. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update DSP BRAND_LIFT studies. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPBrandLiftStudyV1M1>} [dSPBrandLiftStudyV1M1] An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDSPBrandLiftStudies: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateDSPBrandLiftStudies', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateDSPBrandLiftStudies', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/studies/brandLift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.studymanagement.v1.1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dSPBrandLiftStudyV1M1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update DSP CREATIVE_TESTING study. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update DSP CREATIVE_TESTING study. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {UpdateDSPCreativeTestingStudyV1M2} [updateDSPCreativeTestingStudyV1M2] Update object for DSP CREATIVE_TESTING study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDSPCreativeTestingStudy: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyId: string, updateDSPCreativeTestingStudyV1M2?: UpdateDSPCreativeTestingStudyV1M2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateDSPCreativeTestingStudy', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateDSPCreativeTestingStudy', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('updateDSPCreativeTestingStudy', 'studyId', studyId)
            const localVarPath = `/dsp/measurement/studies/creativeTesting/{studyId}`
                .replace(`{${"studyId"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.studymanagement.v1.2+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDSPCreativeTestingStudyV1M2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update DSP OMNICHANNEL_METRICS studies. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update DSP OMNICHANNEL_METRICS studies. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPOmnichannelMetricsStudyV1M2>} [dSPOmnichannelMetricsStudyV1M2] An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDSPOmnichannelMetricsStudies: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPOmnichannelMetricsStudyV1M2?: Array<DSPOmnichannelMetricsStudyV1M2>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateDSPOmnichannelMetricsStudies', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateDSPOmnichannelMetricsStudies', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/studies/omnichannelMetrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.studymanagement.v1.2+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dSPOmnichannelMetricsStudyV1M2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update measurement surveys. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update measurement surveys. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<SurveyV1M1>} [surveyV1M1] An array of survey objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSurveys: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyV1M1?: Array<SurveyV1M1>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateSurveys', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateSurveys', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/studies/surveys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.studymanagement.v1.1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(surveyV1M1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the supported measurement vendors products.  **Requires one of these permissions**: []
         * @summary Lists the supported measurement vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {VendorProductRequestV1M1} [vendorProductRequestV1M1] Fetch measurement vendor products request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorProduct: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, vendorProductRequestV1M1?: VendorProductRequestV1M1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('vendorProduct', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('vendorProduct', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/vendorProducts/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.measurementvendor.v1.1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vendorProductRequestV1M1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the policies for the specific vendor product(s).  **Requires one of these permissions**: []
         * @summary Gets the policies for the specific vendor product(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [vendorProductIds] Vendor product canonical identifier to filter with.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorProductPolicy: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, vendorProductIds?: Array<string>, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('vendorProductPolicy', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('vendorProductPolicy', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/vendorProducts/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (vendorProductIds) {
                localVarQueryParameter['vendorProductIds'] = vendorProductIds.join(COLLECTION_FORMATS.csv);
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the survey question templates for the specific vendor product(s).  **Requires one of these permissions**: []
         * @summary Gets the survey question templates for the specific vendor product(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [vendorProductIds] Vendor product canonical identifier to filter with.
         * @param {Array<string>} [surveyQuestionTemplateIds] Vendor product survey question template identifier to filter with.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorProductSurveyQuestionTemplates: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, vendorProductIds?: Array<string>, surveyQuestionTemplateIds?: Array<string>, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('vendorProductSurveyQuestionTemplates', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('vendorProductSurveyQuestionTemplates', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/vendorProducts/surveyQuestionTemplates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (vendorProductIds) {
                localVarQueryParameter['vendorProductIds'] = vendorProductIds.join(COLLECTION_FORMATS.csv);
            }

            if (surveyQuestionTemplateIds) {
                localVarQueryParameter['surveyQuestionTemplateIds'] = surveyQuestionTemplateIds.join(COLLECTION_FORMATS.csv);
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeasurementApi - functional programming interface
 * @export
 */
export const MeasurementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeasurementApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel existing studies.  **Requires one of these permissions**: []
         * @summary Cancel existing studies. Once a study is cancelled it can not be resumed again.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIds] Study canonical identifiers to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelMeasurementStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyResponsesV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelMeasurementStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Checks the DSP AUDIENCE_RESEARCH study type eligibility status against vendor products.  **Requires one of these permissions**: []
         * @summary Checks the DSP AUDIENCE_RESEARCH study type eligibility against vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {DSPAudienceResearchEligibilityRequestV1M2} [dSPAudienceResearchEligibilityRequestV1M2] The DSP audience research study eligibility request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkDSPAudienceResearchEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, dSPAudienceResearchEligibilityRequestV1M2?: DSPAudienceResearchEligibilityRequestV1M2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EligibilityResponseV1M2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkDSPAudienceResearchEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, dSPAudienceResearchEligibilityRequestV1M2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Checks the DSP BRAND_LIFT study type eligibility status against vendor products.  **Requires one of these permissions**: []
         * @summary Checks the DSP BRAND_LIFT study type eligibility against vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {DSPBrandLiftEligibilityRequestV1} [dSPBrandLiftEligibilityRequestV1] The DSP brand lift eligibility request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkDSPBrandLiftEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, dSPBrandLiftEligibilityRequestV1?: DSPBrandLiftEligibilityRequestV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EligibilityResponseV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkDSPBrandLiftEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, dSPBrandLiftEligibilityRequestV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Checks the DSP CREATIVE_TESTING study type eligibility status against vendor products.  **Requires one of these permissions**: []
         * @summary Checks the DSP CREATIVE_TESTING study type eligibility against vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {DSPCreativeTestingEligibilityRequestV1M2} [dSPCreativeTestingEligibilityRequestV1M2] The DSP creative testing study eligibility request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkDSPCreativeTestingEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, dSPCreativeTestingEligibilityRequestV1M2?: DSPCreativeTestingEligibilityRequestV1M2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EligibilityResponseV1M2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkDSPCreativeTestingEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, dSPCreativeTestingEligibilityRequestV1M2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Checks the DSP OMNICHANNEL_METRICS study type eligibility status against vendor products.  **Requires one of these permissions**: []
         * @summary Checks the DSP OMNICHANNEL_METRICS study type eligibility against vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {DSPOmnichannelMetricsEligibilityRequestV1M2} [dSPOmnichannelMetricsEligibilityRequestV1M2] The DSP omnichannel metrics eligibility request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkDSPOmnichannelMetricsEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, dSPOmnichannelMetricsEligibilityRequestV1M2?: DSPOmnichannelMetricsEligibilityRequestV1M2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EligibilityResponseV1M2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkDSPOmnichannelMetricsEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, dSPOmnichannelMetricsEligibilityRequestV1M2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Checks eligibility against all vendor products.  **Requires one of these permissions**: []
         * @summary Checks eligibility against all vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {PlanningEligibilityRequestV1M3} [planningEligibilityRequestV1M3] Fetch measurement vendor products request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPlanningEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, planningEligibilityRequestV1M3?: PlanningEligibilityRequestV1M3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanningEligibilityResponseV1M3>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkPlanningEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, planningEligibilityRequestV1M3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create new DSP AUDIENCE_RESEARCH study.  **Requires one of these permissions**: []
         * @summary Create new DSP AUDIENCE_RESEARCH study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {CreateDSPAudienceResearchStudyV1M2} [createDSPAudienceResearchStudyV1M2] Create object for DSP AUDIENCE_RESEARCH study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDSPAudienceResearchStudy(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createDSPAudienceResearchStudyV1M2?: CreateDSPAudienceResearchStudyV1M2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DSPAudienceResearchStudyV1M2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDSPAudienceResearchStudy(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createDSPAudienceResearchStudyV1M2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create new DSP BRAND_LIFT studies.  **Requires one of these permissions**: []
         * @summary Create new DSP BRAND_LIFT studies.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPBrandLiftStudyV1M1>} [dSPBrandLiftStudyV1M1] An array of study objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDSPBrandLiftStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyResponsesV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDSPBrandLiftStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dSPBrandLiftStudyV1M1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create new DSP CREATIVE_TESTING study.  **Requires one of these permissions**: []
         * @summary Create new DSP CREATIVE_TESTING study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {CreateDSPCreativeTestingStudyV1M2} [createDSPCreativeTestingStudyV1M2] Create object for DSP CREATIVE_TESTING study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDSPCreativeTestingStudy(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createDSPCreativeTestingStudyV1M2?: CreateDSPCreativeTestingStudyV1M2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DSPCreativeTestingStudyV1M2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDSPCreativeTestingStudy(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createDSPCreativeTestingStudyV1M2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create new DSP OMNICHANNEL_METRICS studies.  **Requires one of these permissions**: []
         * @summary Create new DSP OMNICHANNEL_METRICS studies.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPOmnichannelMetricsStudyV1M2>} [dSPOmnichannelMetricsStudyV1M2] An array of study objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDSPOmnichannelMetricsStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPOmnichannelMetricsStudyV1M2?: Array<DSPOmnichannelMetricsStudyV1M2>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyResponsesV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDSPOmnichannelMetricsStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dSPOmnichannelMetricsStudyV1M2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create new study surveys.  **Requires one of these permissions**: []
         * @summary Create new study surveys.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<SurveyV1M1>} [surveyV1M1] An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSurveys(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyV1M1?: Array<SurveyV1M1>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SurveyResponsesV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSurveys(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, surveyV1M1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the download link and file type of the 3P vendor\'s study results in an easy to read and understand format which breaks down the effectiveness of an ad campaign. Returns a `200` response that includes an AWS S3 pre-signed URL where the curated study results file is located and the file type (format). The `OTHER` file type is returned when a new file type is added and is not supported in the current version of this API.For full support of the new file type, migrate to the latest version of this API when it is made available. The URL expires after 60 seconds. If the URL expires before the curated results file is downloaded, a new download request must be created.  **Requires one of these permissions**: []
         * @summary Get the 3P vendor\'s curated result file.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1+json&#x60;.
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCuratedStudyResult(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CuratedStudyResultV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCuratedStudyResult(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, accept, studyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets one or more DSP AUDIENCE_RESEARCH studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more DSP AUDIENCE_RESEARCH studies with requested study identifiers or an advertiser identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIds] Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDSPAudienceResearchStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIds?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedDSPAudienceResearchStudiesV1M2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDSPAudienceResearchStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIds, advertiserId, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get result of a DSP AUDIENCE_RESEARCH study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
         * @summary Get result of a DSP AUDIENCE_RESEARCH study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1.2+json&#x60;, &#x60;text/vnd.measurementresult.v1.2+csv&#x60;.
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDSPAudienceResearchStudyResult(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AudienceResearchStudyResultV1M2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDSPAudienceResearchStudyResult(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, accept, studyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIdFilters] Study canonical identifier to filter with. Either one of studyIdFilters or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIdFilters or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDSPBrandLiftStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIdFilters?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedDSPBrandLiftStudiesV1M1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDSPBrandLiftStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIdFilters, advertiserId, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get result of a DSP BRAND_LIFT study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
         * @summary Get result of a DSP BRAND_LIFT study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1+json&#x60;, &#x60;application/vnd.measurementresult.v1.1+json&#x60;, &#x60;text/vnd.measurementresult.v1+csv&#x60;
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDSPBrandLiftStudyResult(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandLiftStudyResultV1M1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDSPBrandLiftStudyResult(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, accept, studyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets one or more DSP CREATIVE_TESTING studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more DSP CREATIVE_TESTING studies with requested study identifiers or an advertiser identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIds] Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDSPCreativeTestingStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIds?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedDSPCreativeTestingStudiesV1M2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDSPCreativeTestingStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIds, advertiserId, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get result of a DSP CREATIVE_TESTING study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
         * @summary Get result of a DSP CREATIVE_TESTING study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1.2+json&#x60;, &#x60;text/vnd.measurementresult.v1.2+csv&#x60;.
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDSPCreativeTestingStudyResult(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreativeTestingStudyResultV1M2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDSPCreativeTestingStudyResult(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, accept, studyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets one or more DSP OMNICHANNEL_METRICS studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more DSP OMNICHANNEL_METRICS studies with requested study identifiers or an advertiser identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIds] Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIdFilters or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDSPOmnichannelMetricsStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIds?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedDSPOmnichannelMetricsStudiesV1M2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDSPOmnichannelMetricsStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIds, advertiserId, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get result of a DSP OMNICHANNEL_METRICS study. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds. Accept header does not support json for OMNICHANNEL_METRICS study type.  **Requires one of these permissions**: []
         * @summary Get result of a DSP OMNICHANNEL_METRICS study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;text/vnd.measurementresult.v1+xlsx&#x60;
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDSPOmnichannelMetricsStudyResult(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDSPOmnichannelMetricsStudyResult(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, accept, studyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets base study objects given a list of studyIds or a list of advertiserIds.  **Requires one of these permissions**: []
         * @summary Gets base study objects given a list of studyIds or a list of advertiserIds.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIds] Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIds?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBaseStudiesV1M1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIds, advertiserId, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets one or more study surveys with requested survey identifiers or a study identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more study surveys with requested survey identifiers or a study identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [surveyIds] Survey canonical identifier to filter with. Either one of surveyIds or studyId should be provided.
         * @param {string} [studyId] A study canonical identifier. Either one of surveyIds or studyId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSurveys(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyIds?: Array<string>, studyId?: string, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSurveysV1M1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSurveys(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, surveyIds, studyId, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for brands to be used in the OMNICHANNEL_METRICS vendor product.  **Requires one of these permissions**: []
         * @summary Search for brands to be used in the OMNICHANNEL_METRICS vendor product.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of brands in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {OmnichannelMetricsBrandSearchRequestV1M2} [omnichannelMetricsBrandSearchRequestV1M2] Fetch measurement vendor products request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async omnichannelMetricsBrandSearch(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, omnichannelMetricsBrandSearchRequestV1M2?: OmnichannelMetricsBrandSearchRequestV1M2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOmnichannelMetricsBrandsV1M2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.omnichannelMetricsBrandSearch(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, omnichannelMetricsBrandSearchRequestV1M2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update DSP AUDIENCE_RESEARCH study. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update DSP AUDIENCE_RESEARCH study. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {UpdateDSPAudienceResearchStudyV1M2} [updateDSPAudienceResearchStudyV1M2] Update object for DSP AUDIENCE_RESEARCH study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDSPAudienceResearchStudy(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyId: string, updateDSPAudienceResearchStudyV1M2?: UpdateDSPAudienceResearchStudyV1M2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DSPAudienceResearchStudyV1M2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDSPAudienceResearchStudy(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyId, updateDSPAudienceResearchStudyV1M2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update DSP BRAND_LIFT studies. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update DSP BRAND_LIFT studies. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPBrandLiftStudyV1M1>} [dSPBrandLiftStudyV1M1] An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDSPBrandLiftStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyResponsesV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDSPBrandLiftStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dSPBrandLiftStudyV1M1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update DSP CREATIVE_TESTING study. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update DSP CREATIVE_TESTING study. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {UpdateDSPCreativeTestingStudyV1M2} [updateDSPCreativeTestingStudyV1M2] Update object for DSP CREATIVE_TESTING study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDSPCreativeTestingStudy(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyId: string, updateDSPCreativeTestingStudyV1M2?: UpdateDSPCreativeTestingStudyV1M2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DSPCreativeTestingStudyV1M2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDSPCreativeTestingStudy(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyId, updateDSPCreativeTestingStudyV1M2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update DSP OMNICHANNEL_METRICS studies. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update DSP OMNICHANNEL_METRICS studies. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPOmnichannelMetricsStudyV1M2>} [dSPOmnichannelMetricsStudyV1M2] An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDSPOmnichannelMetricsStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPOmnichannelMetricsStudyV1M2?: Array<DSPOmnichannelMetricsStudyV1M2>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyResponsesV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDSPOmnichannelMetricsStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dSPOmnichannelMetricsStudyV1M2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update measurement surveys. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update measurement surveys. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<SurveyV1M1>} [surveyV1M1] An array of survey objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSurveys(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyV1M1?: Array<SurveyV1M1>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SurveyResponsesV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSurveys(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, surveyV1M1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the supported measurement vendors products.  **Requires one of these permissions**: []
         * @summary Lists the supported measurement vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {VendorProductRequestV1M1} [vendorProductRequestV1M1] Fetch measurement vendor products request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorProduct(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, vendorProductRequestV1M1?: VendorProductRequestV1M1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedVendorProductsV1M1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorProduct(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, vendorProductRequestV1M1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the policies for the specific vendor product(s).  **Requires one of these permissions**: []
         * @summary Gets the policies for the specific vendor product(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [vendorProductIds] Vendor product canonical identifier to filter with.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorProductPolicy(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, vendorProductIds?: Array<string>, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedVendorProductPoliciesV1M1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorProductPolicy(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, vendorProductIds, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the survey question templates for the specific vendor product(s).  **Requires one of these permissions**: []
         * @summary Gets the survey question templates for the specific vendor product(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [vendorProductIds] Vendor product canonical identifier to filter with.
         * @param {Array<string>} [surveyQuestionTemplateIds] Vendor product survey question template identifier to filter with.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorProductSurveyQuestionTemplates(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, vendorProductIds?: Array<string>, surveyQuestionTemplateIds?: Array<string>, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSurveyQuestionTemplatesV1M1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorProductSurveyQuestionTemplates(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, vendorProductIds, surveyQuestionTemplateIds, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeasurementApi - factory interface
 * @export
 */
export const MeasurementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeasurementApiFp(configuration)
    return {
        /**
         * Cancel existing studies.  **Requires one of these permissions**: []
         * @summary Cancel existing studies. Once a study is cancelled it can not be resumed again.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIds] Study canonical identifiers to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelMeasurementStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIds?: Array<string>, options?: any): AxiosPromise<StudyResponsesV1> {
            return localVarFp.cancelMeasurementStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Checks the DSP AUDIENCE_RESEARCH study type eligibility status against vendor products.  **Requires one of these permissions**: []
         * @summary Checks the DSP AUDIENCE_RESEARCH study type eligibility against vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {DSPAudienceResearchEligibilityRequestV1M2} [dSPAudienceResearchEligibilityRequestV1M2] The DSP audience research study eligibility request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDSPAudienceResearchEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, dSPAudienceResearchEligibilityRequestV1M2?: DSPAudienceResearchEligibilityRequestV1M2, options?: any): AxiosPromise<EligibilityResponseV1M2> {
            return localVarFp.checkDSPAudienceResearchEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, dSPAudienceResearchEligibilityRequestV1M2, options).then((request) => request(axios, basePath));
        },
        /**
         * Checks the DSP BRAND_LIFT study type eligibility status against vendor products.  **Requires one of these permissions**: []
         * @summary Checks the DSP BRAND_LIFT study type eligibility against vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {DSPBrandLiftEligibilityRequestV1} [dSPBrandLiftEligibilityRequestV1] The DSP brand lift eligibility request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDSPBrandLiftEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, dSPBrandLiftEligibilityRequestV1?: DSPBrandLiftEligibilityRequestV1, options?: any): AxiosPromise<EligibilityResponseV1> {
            return localVarFp.checkDSPBrandLiftEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, dSPBrandLiftEligibilityRequestV1, options).then((request) => request(axios, basePath));
        },
        /**
         * Checks the DSP CREATIVE_TESTING study type eligibility status against vendor products.  **Requires one of these permissions**: []
         * @summary Checks the DSP CREATIVE_TESTING study type eligibility against vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {DSPCreativeTestingEligibilityRequestV1M2} [dSPCreativeTestingEligibilityRequestV1M2] The DSP creative testing study eligibility request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDSPCreativeTestingEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, dSPCreativeTestingEligibilityRequestV1M2?: DSPCreativeTestingEligibilityRequestV1M2, options?: any): AxiosPromise<EligibilityResponseV1M2> {
            return localVarFp.checkDSPCreativeTestingEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, dSPCreativeTestingEligibilityRequestV1M2, options).then((request) => request(axios, basePath));
        },
        /**
         * Checks the DSP OMNICHANNEL_METRICS study type eligibility status against vendor products.  **Requires one of these permissions**: []
         * @summary Checks the DSP OMNICHANNEL_METRICS study type eligibility against vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {DSPOmnichannelMetricsEligibilityRequestV1M2} [dSPOmnichannelMetricsEligibilityRequestV1M2] The DSP omnichannel metrics eligibility request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDSPOmnichannelMetricsEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, dSPOmnichannelMetricsEligibilityRequestV1M2?: DSPOmnichannelMetricsEligibilityRequestV1M2, options?: any): AxiosPromise<EligibilityResponseV1M2> {
            return localVarFp.checkDSPOmnichannelMetricsEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, dSPOmnichannelMetricsEligibilityRequestV1M2, options).then((request) => request(axios, basePath));
        },
        /**
         * Checks eligibility against all vendor products.  **Requires one of these permissions**: []
         * @summary Checks eligibility against all vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {PlanningEligibilityRequestV1M3} [planningEligibilityRequestV1M3] Fetch measurement vendor products request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPlanningEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, planningEligibilityRequestV1M3?: PlanningEligibilityRequestV1M3, options?: any): AxiosPromise<PlanningEligibilityResponseV1M3> {
            return localVarFp.checkPlanningEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, planningEligibilityRequestV1M3, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new DSP AUDIENCE_RESEARCH study.  **Requires one of these permissions**: []
         * @summary Create new DSP AUDIENCE_RESEARCH study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {CreateDSPAudienceResearchStudyV1M2} [createDSPAudienceResearchStudyV1M2] Create object for DSP AUDIENCE_RESEARCH study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDSPAudienceResearchStudy(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createDSPAudienceResearchStudyV1M2?: CreateDSPAudienceResearchStudyV1M2, options?: any): AxiosPromise<DSPAudienceResearchStudyV1M2> {
            return localVarFp.createDSPAudienceResearchStudy(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createDSPAudienceResearchStudyV1M2, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new DSP BRAND_LIFT studies.  **Requires one of these permissions**: []
         * @summary Create new DSP BRAND_LIFT studies.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPBrandLiftStudyV1M1>} [dSPBrandLiftStudyV1M1] An array of study objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDSPBrandLiftStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>, options?: any): AxiosPromise<StudyResponsesV1> {
            return localVarFp.createDSPBrandLiftStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dSPBrandLiftStudyV1M1, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new DSP CREATIVE_TESTING study.  **Requires one of these permissions**: []
         * @summary Create new DSP CREATIVE_TESTING study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {CreateDSPCreativeTestingStudyV1M2} [createDSPCreativeTestingStudyV1M2] Create object for DSP CREATIVE_TESTING study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDSPCreativeTestingStudy(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createDSPCreativeTestingStudyV1M2?: CreateDSPCreativeTestingStudyV1M2, options?: any): AxiosPromise<DSPCreativeTestingStudyV1M2> {
            return localVarFp.createDSPCreativeTestingStudy(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createDSPCreativeTestingStudyV1M2, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new DSP OMNICHANNEL_METRICS studies.  **Requires one of these permissions**: []
         * @summary Create new DSP OMNICHANNEL_METRICS studies.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPOmnichannelMetricsStudyV1M2>} [dSPOmnichannelMetricsStudyV1M2] An array of study objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDSPOmnichannelMetricsStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPOmnichannelMetricsStudyV1M2?: Array<DSPOmnichannelMetricsStudyV1M2>, options?: any): AxiosPromise<StudyResponsesV1> {
            return localVarFp.createDSPOmnichannelMetricsStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dSPOmnichannelMetricsStudyV1M2, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new study surveys.  **Requires one of these permissions**: []
         * @summary Create new study surveys.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<SurveyV1M1>} [surveyV1M1] An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSurveys(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyV1M1?: Array<SurveyV1M1>, options?: any): AxiosPromise<SurveyResponsesV1> {
            return localVarFp.createSurveys(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, surveyV1M1, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the download link and file type of the 3P vendor\'s study results in an easy to read and understand format which breaks down the effectiveness of an ad campaign. Returns a `200` response that includes an AWS S3 pre-signed URL where the curated study results file is located and the file type (format). The `OTHER` file type is returned when a new file type is added and is not supported in the current version of this API.For full support of the new file type, migrate to the latest version of this API when it is made available. The URL expires after 60 seconds. If the URL expires before the curated results file is downloaded, a new download request must be created.  **Requires one of these permissions**: []
         * @summary Get the 3P vendor\'s curated result file.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1+json&#x60;.
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCuratedStudyResult(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options?: any): AxiosPromise<CuratedStudyResultV1> {
            return localVarFp.getCuratedStudyResult(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, accept, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets one or more DSP AUDIENCE_RESEARCH studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more DSP AUDIENCE_RESEARCH studies with requested study identifiers or an advertiser identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIds] Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPAudienceResearchStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIds?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<PaginatedDSPAudienceResearchStudiesV1M2> {
            return localVarFp.getDSPAudienceResearchStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIds, advertiserId, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Get result of a DSP AUDIENCE_RESEARCH study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
         * @summary Get result of a DSP AUDIENCE_RESEARCH study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1.2+json&#x60;, &#x60;text/vnd.measurementresult.v1.2+csv&#x60;.
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPAudienceResearchStudyResult(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options?: any): AxiosPromise<AudienceResearchStudyResultV1M2> {
            return localVarFp.getDSPAudienceResearchStudyResult(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, accept, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIdFilters] Study canonical identifier to filter with. Either one of studyIdFilters or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIdFilters or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPBrandLiftStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIdFilters?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<PaginatedDSPBrandLiftStudiesV1M1> {
            return localVarFp.getDSPBrandLiftStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIdFilters, advertiserId, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Get result of a DSP BRAND_LIFT study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
         * @summary Get result of a DSP BRAND_LIFT study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1+json&#x60;, &#x60;application/vnd.measurementresult.v1.1+json&#x60;, &#x60;text/vnd.measurementresult.v1+csv&#x60;
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPBrandLiftStudyResult(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options?: any): AxiosPromise<BrandLiftStudyResultV1M1> {
            return localVarFp.getDSPBrandLiftStudyResult(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, accept, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets one or more DSP CREATIVE_TESTING studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more DSP CREATIVE_TESTING studies with requested study identifiers or an advertiser identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIds] Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPCreativeTestingStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIds?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<PaginatedDSPCreativeTestingStudiesV1M2> {
            return localVarFp.getDSPCreativeTestingStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIds, advertiserId, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Get result of a DSP CREATIVE_TESTING study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
         * @summary Get result of a DSP CREATIVE_TESTING study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1.2+json&#x60;, &#x60;text/vnd.measurementresult.v1.2+csv&#x60;.
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPCreativeTestingStudyResult(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options?: any): AxiosPromise<CreativeTestingStudyResultV1M2> {
            return localVarFp.getDSPCreativeTestingStudyResult(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, accept, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets one or more DSP OMNICHANNEL_METRICS studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more DSP OMNICHANNEL_METRICS studies with requested study identifiers or an advertiser identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIds] Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIdFilters or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPOmnichannelMetricsStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIds?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<PaginatedDSPOmnichannelMetricsStudiesV1M2> {
            return localVarFp.getDSPOmnichannelMetricsStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIds, advertiserId, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Get result of a DSP OMNICHANNEL_METRICS study. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds. Accept header does not support json for OMNICHANNEL_METRICS study type.  **Requires one of these permissions**: []
         * @summary Get result of a DSP OMNICHANNEL_METRICS study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;text/vnd.measurementresult.v1+xlsx&#x60;
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPOmnichannelMetricsStudyResult(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getDSPOmnichannelMetricsStudyResult(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, accept, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets base study objects given a list of studyIds or a list of advertiserIds.  **Requires one of these permissions**: []
         * @summary Gets base study objects given a list of studyIds or a list of advertiserIds.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIds] Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIds?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<PaginatedBaseStudiesV1M1> {
            return localVarFp.getStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIds, advertiserId, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets one or more study surveys with requested survey identifiers or a study identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more study surveys with requested survey identifiers or a study identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [surveyIds] Survey canonical identifier to filter with. Either one of surveyIds or studyId should be provided.
         * @param {string} [studyId] A study canonical identifier. Either one of surveyIds or studyId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSurveys(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyIds?: Array<string>, studyId?: string, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<PaginatedSurveysV1M1> {
            return localVarFp.getSurveys(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, surveyIds, studyId, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for brands to be used in the OMNICHANNEL_METRICS vendor product.  **Requires one of these permissions**: []
         * @summary Search for brands to be used in the OMNICHANNEL_METRICS vendor product.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of brands in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {OmnichannelMetricsBrandSearchRequestV1M2} [omnichannelMetricsBrandSearchRequestV1M2] Fetch measurement vendor products request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        omnichannelMetricsBrandSearch(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, omnichannelMetricsBrandSearchRequestV1M2?: OmnichannelMetricsBrandSearchRequestV1M2, options?: any): AxiosPromise<PaginatedOmnichannelMetricsBrandsV1M2> {
            return localVarFp.omnichannelMetricsBrandSearch(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, omnichannelMetricsBrandSearchRequestV1M2, options).then((request) => request(axios, basePath));
        },
        /**
         * Update DSP AUDIENCE_RESEARCH study. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update DSP AUDIENCE_RESEARCH study. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {UpdateDSPAudienceResearchStudyV1M2} [updateDSPAudienceResearchStudyV1M2] Update object for DSP AUDIENCE_RESEARCH study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDSPAudienceResearchStudy(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyId: string, updateDSPAudienceResearchStudyV1M2?: UpdateDSPAudienceResearchStudyV1M2, options?: any): AxiosPromise<DSPAudienceResearchStudyV1M2> {
            return localVarFp.updateDSPAudienceResearchStudy(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyId, updateDSPAudienceResearchStudyV1M2, options).then((request) => request(axios, basePath));
        },
        /**
         * Update DSP BRAND_LIFT studies. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update DSP BRAND_LIFT studies. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPBrandLiftStudyV1M1>} [dSPBrandLiftStudyV1M1] An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDSPBrandLiftStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>, options?: any): AxiosPromise<StudyResponsesV1> {
            return localVarFp.updateDSPBrandLiftStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dSPBrandLiftStudyV1M1, options).then((request) => request(axios, basePath));
        },
        /**
         * Update DSP CREATIVE_TESTING study. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update DSP CREATIVE_TESTING study. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {UpdateDSPCreativeTestingStudyV1M2} [updateDSPCreativeTestingStudyV1M2] Update object for DSP CREATIVE_TESTING study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDSPCreativeTestingStudy(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyId: string, updateDSPCreativeTestingStudyV1M2?: UpdateDSPCreativeTestingStudyV1M2, options?: any): AxiosPromise<DSPCreativeTestingStudyV1M2> {
            return localVarFp.updateDSPCreativeTestingStudy(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyId, updateDSPCreativeTestingStudyV1M2, options).then((request) => request(axios, basePath));
        },
        /**
         * Update DSP OMNICHANNEL_METRICS studies. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update DSP OMNICHANNEL_METRICS studies. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPOmnichannelMetricsStudyV1M2>} [dSPOmnichannelMetricsStudyV1M2] An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDSPOmnichannelMetricsStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPOmnichannelMetricsStudyV1M2?: Array<DSPOmnichannelMetricsStudyV1M2>, options?: any): AxiosPromise<StudyResponsesV1> {
            return localVarFp.updateDSPOmnichannelMetricsStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dSPOmnichannelMetricsStudyV1M2, options).then((request) => request(axios, basePath));
        },
        /**
         * Update measurement surveys. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update measurement surveys. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<SurveyV1M1>} [surveyV1M1] An array of survey objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSurveys(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyV1M1?: Array<SurveyV1M1>, options?: any): AxiosPromise<SurveyResponsesV1> {
            return localVarFp.updateSurveys(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, surveyV1M1, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the supported measurement vendors products.  **Requires one of these permissions**: []
         * @summary Lists the supported measurement vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {VendorProductRequestV1M1} [vendorProductRequestV1M1] Fetch measurement vendor products request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorProduct(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, vendorProductRequestV1M1?: VendorProductRequestV1M1, options?: any): AxiosPromise<PaginatedVendorProductsV1M1> {
            return localVarFp.vendorProduct(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, vendorProductRequestV1M1, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the policies for the specific vendor product(s).  **Requires one of these permissions**: []
         * @summary Gets the policies for the specific vendor product(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [vendorProductIds] Vendor product canonical identifier to filter with.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorProductPolicy(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, vendorProductIds?: Array<string>, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<PaginatedVendorProductPoliciesV1M1> {
            return localVarFp.vendorProductPolicy(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, vendorProductIds, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the survey question templates for the specific vendor product(s).  **Requires one of these permissions**: []
         * @summary Gets the survey question templates for the specific vendor product(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [vendorProductIds] Vendor product canonical identifier to filter with.
         * @param {Array<string>} [surveyQuestionTemplateIds] Vendor product survey question template identifier to filter with.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorProductSurveyQuestionTemplates(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, vendorProductIds?: Array<string>, surveyQuestionTemplateIds?: Array<string>, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<PaginatedSurveyQuestionTemplatesV1M1> {
            return localVarFp.vendorProductSurveyQuestionTemplates(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, vendorProductIds, surveyQuestionTemplateIds, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelMeasurementStudies operation in MeasurementApi.
 * @export
 * @interface MeasurementApiCancelMeasurementStudiesRequest
 */
export interface MeasurementApiCancelMeasurementStudiesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiCancelMeasurementStudies
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiCancelMeasurementStudies
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Study canonical identifiers to cancel.
     * @type {Array<string>}
     * @memberof MeasurementApiCancelMeasurementStudies
     */
    readonly studyIds?: Array<string>
}

/**
 * Request parameters for checkDSPAudienceResearchEligibility operation in MeasurementApi.
 * @export
 * @interface MeasurementApiCheckDSPAudienceResearchEligibilityRequest
 */
export interface MeasurementApiCheckDSPAudienceResearchEligibilityRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiCheckDSPAudienceResearchEligibility
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiCheckDSPAudienceResearchEligibility
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiCheckDSPAudienceResearchEligibility
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiCheckDSPAudienceResearchEligibility
     */
    readonly maxResults?: number

    /**
     * The DSP audience research study eligibility request object.
     * @type {DSPAudienceResearchEligibilityRequestV1M2}
     * @memberof MeasurementApiCheckDSPAudienceResearchEligibility
     */
    readonly dSPAudienceResearchEligibilityRequestV1M2?: DSPAudienceResearchEligibilityRequestV1M2
}

/**
 * Request parameters for checkDSPBrandLiftEligibility operation in MeasurementApi.
 * @export
 * @interface MeasurementApiCheckDSPBrandLiftEligibilityRequest
 */
export interface MeasurementApiCheckDSPBrandLiftEligibilityRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiCheckDSPBrandLiftEligibility
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiCheckDSPBrandLiftEligibility
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiCheckDSPBrandLiftEligibility
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiCheckDSPBrandLiftEligibility
     */
    readonly maxResults?: number

    /**
     * The DSP brand lift eligibility request object.
     * @type {DSPBrandLiftEligibilityRequestV1}
     * @memberof MeasurementApiCheckDSPBrandLiftEligibility
     */
    readonly dSPBrandLiftEligibilityRequestV1?: DSPBrandLiftEligibilityRequestV1
}

/**
 * Request parameters for checkDSPCreativeTestingEligibility operation in MeasurementApi.
 * @export
 * @interface MeasurementApiCheckDSPCreativeTestingEligibilityRequest
 */
export interface MeasurementApiCheckDSPCreativeTestingEligibilityRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiCheckDSPCreativeTestingEligibility
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiCheckDSPCreativeTestingEligibility
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiCheckDSPCreativeTestingEligibility
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiCheckDSPCreativeTestingEligibility
     */
    readonly maxResults?: number

    /**
     * The DSP creative testing study eligibility request object.
     * @type {DSPCreativeTestingEligibilityRequestV1M2}
     * @memberof MeasurementApiCheckDSPCreativeTestingEligibility
     */
    readonly dSPCreativeTestingEligibilityRequestV1M2?: DSPCreativeTestingEligibilityRequestV1M2
}

/**
 * Request parameters for checkDSPOmnichannelMetricsEligibility operation in MeasurementApi.
 * @export
 * @interface MeasurementApiCheckDSPOmnichannelMetricsEligibilityRequest
 */
export interface MeasurementApiCheckDSPOmnichannelMetricsEligibilityRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiCheckDSPOmnichannelMetricsEligibility
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiCheckDSPOmnichannelMetricsEligibility
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiCheckDSPOmnichannelMetricsEligibility
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiCheckDSPOmnichannelMetricsEligibility
     */
    readonly maxResults?: number

    /**
     * The DSP omnichannel metrics eligibility request object.
     * @type {DSPOmnichannelMetricsEligibilityRequestV1M2}
     * @memberof MeasurementApiCheckDSPOmnichannelMetricsEligibility
     */
    readonly dSPOmnichannelMetricsEligibilityRequestV1M2?: DSPOmnichannelMetricsEligibilityRequestV1M2
}

/**
 * Request parameters for checkPlanningEligibility operation in MeasurementApi.
 * @export
 * @interface MeasurementApiCheckPlanningEligibilityRequest
 */
export interface MeasurementApiCheckPlanningEligibilityRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiCheckPlanningEligibility
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiCheckPlanningEligibility
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiCheckPlanningEligibility
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiCheckPlanningEligibility
     */
    readonly maxResults?: number

    /**
     * Fetch measurement vendor products request object.
     * @type {PlanningEligibilityRequestV1M3}
     * @memberof MeasurementApiCheckPlanningEligibility
     */
    readonly planningEligibilityRequestV1M3?: PlanningEligibilityRequestV1M3
}

/**
 * Request parameters for createDSPAudienceResearchStudy operation in MeasurementApi.
 * @export
 * @interface MeasurementApiCreateDSPAudienceResearchStudyRequest
 */
export interface MeasurementApiCreateDSPAudienceResearchStudyRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiCreateDSPAudienceResearchStudy
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiCreateDSPAudienceResearchStudy
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Create object for DSP AUDIENCE_RESEARCH study.
     * @type {CreateDSPAudienceResearchStudyV1M2}
     * @memberof MeasurementApiCreateDSPAudienceResearchStudy
     */
    readonly createDSPAudienceResearchStudyV1M2?: CreateDSPAudienceResearchStudyV1M2
}

/**
 * Request parameters for createDSPBrandLiftStudies operation in MeasurementApi.
 * @export
 * @interface MeasurementApiCreateDSPBrandLiftStudiesRequest
 */
export interface MeasurementApiCreateDSPBrandLiftStudiesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiCreateDSPBrandLiftStudies
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiCreateDSPBrandLiftStudies
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of study objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<DSPBrandLiftStudyV1M1>}
     * @memberof MeasurementApiCreateDSPBrandLiftStudies
     */
    readonly dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>
}

/**
 * Request parameters for createDSPCreativeTestingStudy operation in MeasurementApi.
 * @export
 * @interface MeasurementApiCreateDSPCreativeTestingStudyRequest
 */
export interface MeasurementApiCreateDSPCreativeTestingStudyRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiCreateDSPCreativeTestingStudy
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiCreateDSPCreativeTestingStudy
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Create object for DSP CREATIVE_TESTING study.
     * @type {CreateDSPCreativeTestingStudyV1M2}
     * @memberof MeasurementApiCreateDSPCreativeTestingStudy
     */
    readonly createDSPCreativeTestingStudyV1M2?: CreateDSPCreativeTestingStudyV1M2
}

/**
 * Request parameters for createDSPOmnichannelMetricsStudies operation in MeasurementApi.
 * @export
 * @interface MeasurementApiCreateDSPOmnichannelMetricsStudiesRequest
 */
export interface MeasurementApiCreateDSPOmnichannelMetricsStudiesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiCreateDSPOmnichannelMetricsStudies
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiCreateDSPOmnichannelMetricsStudies
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of study objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<DSPOmnichannelMetricsStudyV1M2>}
     * @memberof MeasurementApiCreateDSPOmnichannelMetricsStudies
     */
    readonly dSPOmnichannelMetricsStudyV1M2?: Array<DSPOmnichannelMetricsStudyV1M2>
}

/**
 * Request parameters for createSurveys operation in MeasurementApi.
 * @export
 * @interface MeasurementApiCreateSurveysRequest
 */
export interface MeasurementApiCreateSurveysRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiCreateSurveys
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiCreateSurveys
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<SurveyV1M1>}
     * @memberof MeasurementApiCreateSurveys
     */
    readonly surveyV1M1?: Array<SurveyV1M1>
}

/**
 * Request parameters for getCuratedStudyResult operation in MeasurementApi.
 * @export
 * @interface MeasurementApiGetCuratedStudyResultRequest
 */
export interface MeasurementApiGetCuratedStudyResultRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiGetCuratedStudyResult
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiGetCuratedStudyResult
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1+json&#x60;.
     * @type {string}
     * @memberof MeasurementApiGetCuratedStudyResult
     */
    readonly accept: string

    /**
     * The canonical identifier that represents a unique study.
     * @type {string}
     * @memberof MeasurementApiGetCuratedStudyResult
     */
    readonly studyId: string
}

/**
 * Request parameters for getDSPAudienceResearchStudies operation in MeasurementApi.
 * @export
 * @interface MeasurementApiGetDSPAudienceResearchStudiesRequest
 */
export interface MeasurementApiGetDSPAudienceResearchStudiesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiGetDSPAudienceResearchStudies
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiGetDSPAudienceResearchStudies
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
     * @type {Array<string>}
     * @memberof MeasurementApiGetDSPAudienceResearchStudies
     */
    readonly studyIds?: Array<string>

    /**
     * The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
     * @type {string}
     * @memberof MeasurementApiGetDSPAudienceResearchStudies
     */
    readonly advertiserId?: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiGetDSPAudienceResearchStudies
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiGetDSPAudienceResearchStudies
     */
    readonly maxResults?: number
}

/**
 * Request parameters for getDSPAudienceResearchStudyResult operation in MeasurementApi.
 * @export
 * @interface MeasurementApiGetDSPAudienceResearchStudyResultRequest
 */
export interface MeasurementApiGetDSPAudienceResearchStudyResultRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiGetDSPAudienceResearchStudyResult
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiGetDSPAudienceResearchStudyResult
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1.2+json&#x60;, &#x60;text/vnd.measurementresult.v1.2+csv&#x60;.
     * @type {string}
     * @memberof MeasurementApiGetDSPAudienceResearchStudyResult
     */
    readonly accept: string

    /**
     * The canonical identifier that represents a unique study.
     * @type {string}
     * @memberof MeasurementApiGetDSPAudienceResearchStudyResult
     */
    readonly studyId: string
}

/**
 * Request parameters for getDSPBrandLiftStudies operation in MeasurementApi.
 * @export
 * @interface MeasurementApiGetDSPBrandLiftStudiesRequest
 */
export interface MeasurementApiGetDSPBrandLiftStudiesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudies
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudies
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Study canonical identifier to filter with. Either one of studyIdFilters or advertiserId should be provided.
     * @type {Array<string>}
     * @memberof MeasurementApiGetDSPBrandLiftStudies
     */
    readonly studyIdFilters?: Array<string>

    /**
     * The advertiser canonical identifier. Either one of studyIdFilters or advertiserId should be provided.
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudies
     */
    readonly advertiserId?: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudies
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiGetDSPBrandLiftStudies
     */
    readonly maxResults?: number
}

/**
 * Request parameters for getDSPBrandLiftStudyResult operation in MeasurementApi.
 * @export
 * @interface MeasurementApiGetDSPBrandLiftStudyResultRequest
 */
export interface MeasurementApiGetDSPBrandLiftStudyResultRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudyResult
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudyResult
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1+json&#x60;, &#x60;application/vnd.measurementresult.v1.1+json&#x60;, &#x60;text/vnd.measurementresult.v1+csv&#x60;
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudyResult
     */
    readonly accept: string

    /**
     * The canonical identifier that represents a unique study.
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudyResult
     */
    readonly studyId: string
}

/**
 * Request parameters for getDSPCreativeTestingStudies operation in MeasurementApi.
 * @export
 * @interface MeasurementApiGetDSPCreativeTestingStudiesRequest
 */
export interface MeasurementApiGetDSPCreativeTestingStudiesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiGetDSPCreativeTestingStudies
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiGetDSPCreativeTestingStudies
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
     * @type {Array<string>}
     * @memberof MeasurementApiGetDSPCreativeTestingStudies
     */
    readonly studyIds?: Array<string>

    /**
     * The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
     * @type {string}
     * @memberof MeasurementApiGetDSPCreativeTestingStudies
     */
    readonly advertiserId?: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiGetDSPCreativeTestingStudies
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiGetDSPCreativeTestingStudies
     */
    readonly maxResults?: number
}

/**
 * Request parameters for getDSPCreativeTestingStudyResult operation in MeasurementApi.
 * @export
 * @interface MeasurementApiGetDSPCreativeTestingStudyResultRequest
 */
export interface MeasurementApiGetDSPCreativeTestingStudyResultRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiGetDSPCreativeTestingStudyResult
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiGetDSPCreativeTestingStudyResult
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1.2+json&#x60;, &#x60;text/vnd.measurementresult.v1.2+csv&#x60;.
     * @type {string}
     * @memberof MeasurementApiGetDSPCreativeTestingStudyResult
     */
    readonly accept: string

    /**
     * The canonical identifier that represents a unique study.
     * @type {string}
     * @memberof MeasurementApiGetDSPCreativeTestingStudyResult
     */
    readonly studyId: string
}

/**
 * Request parameters for getDSPOmnichannelMetricsStudies operation in MeasurementApi.
 * @export
 * @interface MeasurementApiGetDSPOmnichannelMetricsStudiesRequest
 */
export interface MeasurementApiGetDSPOmnichannelMetricsStudiesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiGetDSPOmnichannelMetricsStudies
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiGetDSPOmnichannelMetricsStudies
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
     * @type {Array<string>}
     * @memberof MeasurementApiGetDSPOmnichannelMetricsStudies
     */
    readonly studyIds?: Array<string>

    /**
     * The advertiser canonical identifier. Either one of studyIdFilters or advertiserId should be provided.
     * @type {string}
     * @memberof MeasurementApiGetDSPOmnichannelMetricsStudies
     */
    readonly advertiserId?: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiGetDSPOmnichannelMetricsStudies
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiGetDSPOmnichannelMetricsStudies
     */
    readonly maxResults?: number
}

/**
 * Request parameters for getDSPOmnichannelMetricsStudyResult operation in MeasurementApi.
 * @export
 * @interface MeasurementApiGetDSPOmnichannelMetricsStudyResultRequest
 */
export interface MeasurementApiGetDSPOmnichannelMetricsStudyResultRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiGetDSPOmnichannelMetricsStudyResult
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiGetDSPOmnichannelMetricsStudyResult
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The version(s) of the requested resource. Available version(s) - &#x60;text/vnd.measurementresult.v1+xlsx&#x60;
     * @type {string}
     * @memberof MeasurementApiGetDSPOmnichannelMetricsStudyResult
     */
    readonly accept: string

    /**
     * The canonical identifier that represents a unique study.
     * @type {string}
     * @memberof MeasurementApiGetDSPOmnichannelMetricsStudyResult
     */
    readonly studyId: string
}

/**
 * Request parameters for getStudies operation in MeasurementApi.
 * @export
 * @interface MeasurementApiGetStudiesRequest
 */
export interface MeasurementApiGetStudiesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiGetStudies
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiGetStudies
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Study canonical identifier to filter with. Either one of studyIds or advertiserId should be provided.
     * @type {Array<string>}
     * @memberof MeasurementApiGetStudies
     */
    readonly studyIds?: Array<string>

    /**
     * The advertiser canonical identifier. Either one of studyIds or advertiserId should be provided.
     * @type {string}
     * @memberof MeasurementApiGetStudies
     */
    readonly advertiserId?: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiGetStudies
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiGetStudies
     */
    readonly maxResults?: number
}

/**
 * Request parameters for getSurveys operation in MeasurementApi.
 * @export
 * @interface MeasurementApiGetSurveysRequest
 */
export interface MeasurementApiGetSurveysRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiGetSurveys
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiGetSurveys
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Survey canonical identifier to filter with. Either one of surveyIds or studyId should be provided.
     * @type {Array<string>}
     * @memberof MeasurementApiGetSurveys
     */
    readonly surveyIds?: Array<string>

    /**
     * A study canonical identifier. Either one of surveyIds or studyId should be provided.
     * @type {string}
     * @memberof MeasurementApiGetSurveys
     */
    readonly studyId?: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiGetSurveys
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiGetSurveys
     */
    readonly maxResults?: number
}

/**
 * Request parameters for omnichannelMetricsBrandSearch operation in MeasurementApi.
 * @export
 * @interface MeasurementApiOmnichannelMetricsBrandSearchRequest
 */
export interface MeasurementApiOmnichannelMetricsBrandSearchRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiOmnichannelMetricsBrandSearch
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiOmnichannelMetricsBrandSearch
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiOmnichannelMetricsBrandSearch
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of brands in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiOmnichannelMetricsBrandSearch
     */
    readonly maxResults?: number

    /**
     * Fetch measurement vendor products request object.
     * @type {OmnichannelMetricsBrandSearchRequestV1M2}
     * @memberof MeasurementApiOmnichannelMetricsBrandSearch
     */
    readonly omnichannelMetricsBrandSearchRequestV1M2?: OmnichannelMetricsBrandSearchRequestV1M2
}

/**
 * Request parameters for updateDSPAudienceResearchStudy operation in MeasurementApi.
 * @export
 * @interface MeasurementApiUpdateDSPAudienceResearchStudyRequest
 */
export interface MeasurementApiUpdateDSPAudienceResearchStudyRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiUpdateDSPAudienceResearchStudy
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiUpdateDSPAudienceResearchStudy
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The canonical identifier that represents a unique study.
     * @type {string}
     * @memberof MeasurementApiUpdateDSPAudienceResearchStudy
     */
    readonly studyId: string

    /**
     * Update object for DSP AUDIENCE_RESEARCH study.
     * @type {UpdateDSPAudienceResearchStudyV1M2}
     * @memberof MeasurementApiUpdateDSPAudienceResearchStudy
     */
    readonly updateDSPAudienceResearchStudyV1M2?: UpdateDSPAudienceResearchStudyV1M2
}

/**
 * Request parameters for updateDSPBrandLiftStudies operation in MeasurementApi.
 * @export
 * @interface MeasurementApiUpdateDSPBrandLiftStudiesRequest
 */
export interface MeasurementApiUpdateDSPBrandLiftStudiesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiUpdateDSPBrandLiftStudies
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiUpdateDSPBrandLiftStudies
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<DSPBrandLiftStudyV1M1>}
     * @memberof MeasurementApiUpdateDSPBrandLiftStudies
     */
    readonly dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>
}

/**
 * Request parameters for updateDSPCreativeTestingStudy operation in MeasurementApi.
 * @export
 * @interface MeasurementApiUpdateDSPCreativeTestingStudyRequest
 */
export interface MeasurementApiUpdateDSPCreativeTestingStudyRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiUpdateDSPCreativeTestingStudy
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiUpdateDSPCreativeTestingStudy
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The canonical identifier that represents a unique study.
     * @type {string}
     * @memberof MeasurementApiUpdateDSPCreativeTestingStudy
     */
    readonly studyId: string

    /**
     * Update object for DSP CREATIVE_TESTING study.
     * @type {UpdateDSPCreativeTestingStudyV1M2}
     * @memberof MeasurementApiUpdateDSPCreativeTestingStudy
     */
    readonly updateDSPCreativeTestingStudyV1M2?: UpdateDSPCreativeTestingStudyV1M2
}

/**
 * Request parameters for updateDSPOmnichannelMetricsStudies operation in MeasurementApi.
 * @export
 * @interface MeasurementApiUpdateDSPOmnichannelMetricsStudiesRequest
 */
export interface MeasurementApiUpdateDSPOmnichannelMetricsStudiesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiUpdateDSPOmnichannelMetricsStudies
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiUpdateDSPOmnichannelMetricsStudies
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<DSPOmnichannelMetricsStudyV1M2>}
     * @memberof MeasurementApiUpdateDSPOmnichannelMetricsStudies
     */
    readonly dSPOmnichannelMetricsStudyV1M2?: Array<DSPOmnichannelMetricsStudyV1M2>
}

/**
 * Request parameters for updateSurveys operation in MeasurementApi.
 * @export
 * @interface MeasurementApiUpdateSurveysRequest
 */
export interface MeasurementApiUpdateSurveysRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiUpdateSurveys
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiUpdateSurveys
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of survey objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<SurveyV1M1>}
     * @memberof MeasurementApiUpdateSurveys
     */
    readonly surveyV1M1?: Array<SurveyV1M1>
}

/**
 * Request parameters for vendorProduct operation in MeasurementApi.
 * @export
 * @interface MeasurementApiVendorProductRequest
 */
export interface MeasurementApiVendorProductRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiVendorProduct
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiVendorProduct
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiVendorProduct
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiVendorProduct
     */
    readonly maxResults?: number

    /**
     * Fetch measurement vendor products request object.
     * @type {VendorProductRequestV1M1}
     * @memberof MeasurementApiVendorProduct
     */
    readonly vendorProductRequestV1M1?: VendorProductRequestV1M1
}

/**
 * Request parameters for vendorProductPolicy operation in MeasurementApi.
 * @export
 * @interface MeasurementApiVendorProductPolicyRequest
 */
export interface MeasurementApiVendorProductPolicyRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiVendorProductPolicy
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiVendorProductPolicy
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Vendor product canonical identifier to filter with.
     * @type {Array<string>}
     * @memberof MeasurementApiVendorProductPolicy
     */
    readonly vendorProductIds?: Array<string>

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiVendorProductPolicy
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiVendorProductPolicy
     */
    readonly maxResults?: number
}

/**
 * Request parameters for vendorProductSurveyQuestionTemplates operation in MeasurementApi.
 * @export
 * @interface MeasurementApiVendorProductSurveyQuestionTemplatesRequest
 */
export interface MeasurementApiVendorProductSurveyQuestionTemplatesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiVendorProductSurveyQuestionTemplates
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiVendorProductSurveyQuestionTemplates
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Vendor product canonical identifier to filter with.
     * @type {Array<string>}
     * @memberof MeasurementApiVendorProductSurveyQuestionTemplates
     */
    readonly vendorProductIds?: Array<string>

    /**
     * Vendor product survey question template identifier to filter with.
     * @type {Array<string>}
     * @memberof MeasurementApiVendorProductSurveyQuestionTemplates
     */
    readonly surveyQuestionTemplateIds?: Array<string>

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiVendorProductSurveyQuestionTemplates
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiVendorProductSurveyQuestionTemplates
     */
    readonly maxResults?: number
}

/**
 * MeasurementApi - object-oriented interface
 * @export
 * @class MeasurementApi
 * @extends {BaseAPI}
 */
export class MeasurementApi extends BaseAPI {
    /**
     * Cancel existing studies.  **Requires one of these permissions**: []
     * @summary Cancel existing studies. Once a study is cancelled it can not be resumed again.
     * @param {MeasurementApiCancelMeasurementStudiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public cancelMeasurementStudies(requestParameters: MeasurementApiCancelMeasurementStudiesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).cancelMeasurementStudies(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.studyIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Checks the DSP AUDIENCE_RESEARCH study type eligibility status against vendor products.  **Requires one of these permissions**: []
     * @summary Checks the DSP AUDIENCE_RESEARCH study type eligibility against vendor products.
     * @param {MeasurementApiCheckDSPAudienceResearchEligibilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public checkDSPAudienceResearchEligibility(requestParameters: MeasurementApiCheckDSPAudienceResearchEligibilityRequest, options?: any) {
        return MeasurementApiFp(this.configuration).checkDSPAudienceResearchEligibility(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.nextToken, requestParameters.maxResults, requestParameters.dSPAudienceResearchEligibilityRequestV1M2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Checks the DSP BRAND_LIFT study type eligibility status against vendor products.  **Requires one of these permissions**: []
     * @summary Checks the DSP BRAND_LIFT study type eligibility against vendor products.
     * @param {MeasurementApiCheckDSPBrandLiftEligibilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public checkDSPBrandLiftEligibility(requestParameters: MeasurementApiCheckDSPBrandLiftEligibilityRequest, options?: any) {
        return MeasurementApiFp(this.configuration).checkDSPBrandLiftEligibility(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.nextToken, requestParameters.maxResults, requestParameters.dSPBrandLiftEligibilityRequestV1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Checks the DSP CREATIVE_TESTING study type eligibility status against vendor products.  **Requires one of these permissions**: []
     * @summary Checks the DSP CREATIVE_TESTING study type eligibility against vendor products.
     * @param {MeasurementApiCheckDSPCreativeTestingEligibilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public checkDSPCreativeTestingEligibility(requestParameters: MeasurementApiCheckDSPCreativeTestingEligibilityRequest, options?: any) {
        return MeasurementApiFp(this.configuration).checkDSPCreativeTestingEligibility(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.nextToken, requestParameters.maxResults, requestParameters.dSPCreativeTestingEligibilityRequestV1M2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Checks the DSP OMNICHANNEL_METRICS study type eligibility status against vendor products.  **Requires one of these permissions**: []
     * @summary Checks the DSP OMNICHANNEL_METRICS study type eligibility against vendor products.
     * @param {MeasurementApiCheckDSPOmnichannelMetricsEligibilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public checkDSPOmnichannelMetricsEligibility(requestParameters: MeasurementApiCheckDSPOmnichannelMetricsEligibilityRequest, options?: any) {
        return MeasurementApiFp(this.configuration).checkDSPOmnichannelMetricsEligibility(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.nextToken, requestParameters.maxResults, requestParameters.dSPOmnichannelMetricsEligibilityRequestV1M2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Checks eligibility against all vendor products.  **Requires one of these permissions**: []
     * @summary Checks eligibility against all vendor products.
     * @param {MeasurementApiCheckPlanningEligibilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public checkPlanningEligibility(requestParameters: MeasurementApiCheckPlanningEligibilityRequest, options?: any) {
        return MeasurementApiFp(this.configuration).checkPlanningEligibility(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.nextToken, requestParameters.maxResults, requestParameters.planningEligibilityRequestV1M3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create new DSP AUDIENCE_RESEARCH study.  **Requires one of these permissions**: []
     * @summary Create new DSP AUDIENCE_RESEARCH study.
     * @param {MeasurementApiCreateDSPAudienceResearchStudyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public createDSPAudienceResearchStudy(requestParameters: MeasurementApiCreateDSPAudienceResearchStudyRequest, options?: any) {
        return MeasurementApiFp(this.configuration).createDSPAudienceResearchStudy(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createDSPAudienceResearchStudyV1M2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create new DSP BRAND_LIFT studies.  **Requires one of these permissions**: []
     * @summary Create new DSP BRAND_LIFT studies.
     * @param {MeasurementApiCreateDSPBrandLiftStudiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public createDSPBrandLiftStudies(requestParameters: MeasurementApiCreateDSPBrandLiftStudiesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).createDSPBrandLiftStudies(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.dSPBrandLiftStudyV1M1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create new DSP CREATIVE_TESTING study.  **Requires one of these permissions**: []
     * @summary Create new DSP CREATIVE_TESTING study.
     * @param {MeasurementApiCreateDSPCreativeTestingStudyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public createDSPCreativeTestingStudy(requestParameters: MeasurementApiCreateDSPCreativeTestingStudyRequest, options?: any) {
        return MeasurementApiFp(this.configuration).createDSPCreativeTestingStudy(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createDSPCreativeTestingStudyV1M2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create new DSP OMNICHANNEL_METRICS studies.  **Requires one of these permissions**: []
     * @summary Create new DSP OMNICHANNEL_METRICS studies.
     * @param {MeasurementApiCreateDSPOmnichannelMetricsStudiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public createDSPOmnichannelMetricsStudies(requestParameters: MeasurementApiCreateDSPOmnichannelMetricsStudiesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).createDSPOmnichannelMetricsStudies(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.dSPOmnichannelMetricsStudyV1M2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create new study surveys.  **Requires one of these permissions**: []
     * @summary Create new study surveys.
     * @param {MeasurementApiCreateSurveysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public createSurveys(requestParameters: MeasurementApiCreateSurveysRequest, options?: any) {
        return MeasurementApiFp(this.configuration).createSurveys(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.surveyV1M1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the download link and file type of the 3P vendor\'s study results in an easy to read and understand format which breaks down the effectiveness of an ad campaign. Returns a `200` response that includes an AWS S3 pre-signed URL where the curated study results file is located and the file type (format). The `OTHER` file type is returned when a new file type is added and is not supported in the current version of this API.For full support of the new file type, migrate to the latest version of this API when it is made available. The URL expires after 60 seconds. If the URL expires before the curated results file is downloaded, a new download request must be created.  **Requires one of these permissions**: []
     * @summary Get the 3P vendor\'s curated result file.
     * @param {MeasurementApiGetCuratedStudyResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public getCuratedStudyResult(requestParameters: MeasurementApiGetCuratedStudyResultRequest, options?: any) {
        return MeasurementApiFp(this.configuration).getCuratedStudyResult(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.accept, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets one or more DSP AUDIENCE_RESEARCH studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
     * @summary Gets one or more DSP AUDIENCE_RESEARCH studies with requested study identifiers or an advertiser identifier.
     * @param {MeasurementApiGetDSPAudienceResearchStudiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public getDSPAudienceResearchStudies(requestParameters: MeasurementApiGetDSPAudienceResearchStudiesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).getDSPAudienceResearchStudies(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.studyIds, requestParameters.advertiserId, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get result of a DSP AUDIENCE_RESEARCH study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
     * @summary Get result of a DSP AUDIENCE_RESEARCH study.
     * @param {MeasurementApiGetDSPAudienceResearchStudyResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public getDSPAudienceResearchStudyResult(requestParameters: MeasurementApiGetDSPAudienceResearchStudyResultRequest, options?: any) {
        return MeasurementApiFp(this.configuration).getDSPAudienceResearchStudyResult(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.accept, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
     * @summary Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.
     * @param {MeasurementApiGetDSPBrandLiftStudiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public getDSPBrandLiftStudies(requestParameters: MeasurementApiGetDSPBrandLiftStudiesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).getDSPBrandLiftStudies(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.studyIdFilters, requestParameters.advertiserId, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get result of a DSP BRAND_LIFT study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
     * @summary Get result of a DSP BRAND_LIFT study.
     * @param {MeasurementApiGetDSPBrandLiftStudyResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public getDSPBrandLiftStudyResult(requestParameters: MeasurementApiGetDSPBrandLiftStudyResultRequest, options?: any) {
        return MeasurementApiFp(this.configuration).getDSPBrandLiftStudyResult(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.accept, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets one or more DSP CREATIVE_TESTING studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
     * @summary Gets one or more DSP CREATIVE_TESTING studies with requested study identifiers or an advertiser identifier.
     * @param {MeasurementApiGetDSPCreativeTestingStudiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public getDSPCreativeTestingStudies(requestParameters: MeasurementApiGetDSPCreativeTestingStudiesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).getDSPCreativeTestingStudies(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.studyIds, requestParameters.advertiserId, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get result of a DSP CREATIVE_TESTING study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
     * @summary Get result of a DSP CREATIVE_TESTING study.
     * @param {MeasurementApiGetDSPCreativeTestingStudyResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public getDSPCreativeTestingStudyResult(requestParameters: MeasurementApiGetDSPCreativeTestingStudyResultRequest, options?: any) {
        return MeasurementApiFp(this.configuration).getDSPCreativeTestingStudyResult(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.accept, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets one or more DSP OMNICHANNEL_METRICS studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
     * @summary Gets one or more DSP OMNICHANNEL_METRICS studies with requested study identifiers or an advertiser identifier.
     * @param {MeasurementApiGetDSPOmnichannelMetricsStudiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public getDSPOmnichannelMetricsStudies(requestParameters: MeasurementApiGetDSPOmnichannelMetricsStudiesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).getDSPOmnichannelMetricsStudies(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.studyIds, requestParameters.advertiserId, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get result of a DSP OMNICHANNEL_METRICS study. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds. Accept header does not support json for OMNICHANNEL_METRICS study type.  **Requires one of these permissions**: []
     * @summary Get result of a DSP OMNICHANNEL_METRICS study.
     * @param {MeasurementApiGetDSPOmnichannelMetricsStudyResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public getDSPOmnichannelMetricsStudyResult(requestParameters: MeasurementApiGetDSPOmnichannelMetricsStudyResultRequest, options?: any) {
        return MeasurementApiFp(this.configuration).getDSPOmnichannelMetricsStudyResult(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.accept, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets base study objects given a list of studyIds or a list of advertiserIds.  **Requires one of these permissions**: []
     * @summary Gets base study objects given a list of studyIds or a list of advertiserIds.
     * @param {MeasurementApiGetStudiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public getStudies(requestParameters: MeasurementApiGetStudiesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).getStudies(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.studyIds, requestParameters.advertiserId, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets one or more study surveys with requested survey identifiers or a study identifier.  **Requires one of these permissions**: []
     * @summary Gets one or more study surveys with requested survey identifiers or a study identifier.
     * @param {MeasurementApiGetSurveysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public getSurveys(requestParameters: MeasurementApiGetSurveysRequest, options?: any) {
        return MeasurementApiFp(this.configuration).getSurveys(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.surveyIds, requestParameters.studyId, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for brands to be used in the OMNICHANNEL_METRICS vendor product.  **Requires one of these permissions**: []
     * @summary Search for brands to be used in the OMNICHANNEL_METRICS vendor product.
     * @param {MeasurementApiOmnichannelMetricsBrandSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public omnichannelMetricsBrandSearch(requestParameters: MeasurementApiOmnichannelMetricsBrandSearchRequest, options?: any) {
        return MeasurementApiFp(this.configuration).omnichannelMetricsBrandSearch(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.nextToken, requestParameters.maxResults, requestParameters.omnichannelMetricsBrandSearchRequestV1M2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update DSP AUDIENCE_RESEARCH study. This will be a full update.  **Requires one of these permissions**: []
     * @summary Update DSP AUDIENCE_RESEARCH study. This will be a full update.
     * @param {MeasurementApiUpdateDSPAudienceResearchStudyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public updateDSPAudienceResearchStudy(requestParameters: MeasurementApiUpdateDSPAudienceResearchStudyRequest, options?: any) {
        return MeasurementApiFp(this.configuration).updateDSPAudienceResearchStudy(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.studyId, requestParameters.updateDSPAudienceResearchStudyV1M2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update DSP BRAND_LIFT studies. This will be a full update.  **Requires one of these permissions**: []
     * @summary Update DSP BRAND_LIFT studies. This will be a full update.
     * @param {MeasurementApiUpdateDSPBrandLiftStudiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public updateDSPBrandLiftStudies(requestParameters: MeasurementApiUpdateDSPBrandLiftStudiesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).updateDSPBrandLiftStudies(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.dSPBrandLiftStudyV1M1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update DSP CREATIVE_TESTING study. This will be a full update.  **Requires one of these permissions**: []
     * @summary Update DSP CREATIVE_TESTING study. This will be a full update.
     * @param {MeasurementApiUpdateDSPCreativeTestingStudyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public updateDSPCreativeTestingStudy(requestParameters: MeasurementApiUpdateDSPCreativeTestingStudyRequest, options?: any) {
        return MeasurementApiFp(this.configuration).updateDSPCreativeTestingStudy(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.studyId, requestParameters.updateDSPCreativeTestingStudyV1M2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update DSP OMNICHANNEL_METRICS studies. This will be a full update.  **Requires one of these permissions**: []
     * @summary Update DSP OMNICHANNEL_METRICS studies. This will be a full update.
     * @param {MeasurementApiUpdateDSPOmnichannelMetricsStudiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public updateDSPOmnichannelMetricsStudies(requestParameters: MeasurementApiUpdateDSPOmnichannelMetricsStudiesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).updateDSPOmnichannelMetricsStudies(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.dSPOmnichannelMetricsStudyV1M2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update measurement surveys. This will be a full update.  **Requires one of these permissions**: []
     * @summary Update measurement surveys. This will be a full update.
     * @param {MeasurementApiUpdateSurveysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public updateSurveys(requestParameters: MeasurementApiUpdateSurveysRequest, options?: any) {
        return MeasurementApiFp(this.configuration).updateSurveys(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.surveyV1M1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the supported measurement vendors products.  **Requires one of these permissions**: []
     * @summary Lists the supported measurement vendor products.
     * @param {MeasurementApiVendorProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public vendorProduct(requestParameters: MeasurementApiVendorProductRequest, options?: any) {
        return MeasurementApiFp(this.configuration).vendorProduct(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.nextToken, requestParameters.maxResults, requestParameters.vendorProductRequestV1M1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the policies for the specific vendor product(s).  **Requires one of these permissions**: []
     * @summary Gets the policies for the specific vendor product(s).
     * @param {MeasurementApiVendorProductPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public vendorProductPolicy(requestParameters: MeasurementApiVendorProductPolicyRequest, options?: any) {
        return MeasurementApiFp(this.configuration).vendorProductPolicy(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.vendorProductIds, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the survey question templates for the specific vendor product(s).  **Requires one of these permissions**: []
     * @summary Gets the survey question templates for the specific vendor product(s).
     * @param {MeasurementApiVendorProductSurveyQuestionTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public vendorProductSurveyQuestionTemplates(requestParameters: MeasurementApiVendorProductSurveyQuestionTemplatesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).vendorProductSurveyQuestionTemplates(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.vendorProductIds, requestParameters.surveyQuestionTemplateIds, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OmnichannelMetricsStudyApi - axios parameter creator
 * @export
 */
export const OmnichannelMetricsStudyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Search for brands to be used in the OMNICHANNEL_METRICS vendor product.  **Requires one of these permissions**: []  **Requires one of these permissions**: []
         * @summary Search for brands to be used in the OMNICHANNEL_METRICS vendor product.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of brands in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {MeasurementStudiesOmnichannelMetricsBrandSearchRequest} [measurementStudiesOmnichannelMetricsBrandSearchRequest] Fetch measurement vendor products request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementStudiesOmnichannelMetricsBrands: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, measurementStudiesOmnichannelMetricsBrandSearchRequest?: MeasurementStudiesOmnichannelMetricsBrandSearchRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getMeasurementStudiesOmnichannelMetricsBrands', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getMeasurementStudiesOmnichannelMetricsBrands', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurementStudies/omnichannelMetrics/brands/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.measurementstudiesomnichannelmetricsbrands.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(measurementStudiesOmnichannelMetricsBrandSearchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OmnichannelMetricsStudyApi - functional programming interface
 * @export
 */
export const OmnichannelMetricsStudyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OmnichannelMetricsStudyApiAxiosParamCreator(configuration)
    return {
        /**
         * Search for brands to be used in the OMNICHANNEL_METRICS vendor product.  **Requires one of these permissions**: []  **Requires one of these permissions**: []
         * @summary Search for brands to be used in the OMNICHANNEL_METRICS vendor product.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of brands in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {MeasurementStudiesOmnichannelMetricsBrandSearchRequest} [measurementStudiesOmnichannelMetricsBrandSearchRequest] Fetch measurement vendor products request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeasurementStudiesOmnichannelMetricsBrands(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, measurementStudiesOmnichannelMetricsBrandSearchRequest?: MeasurementStudiesOmnichannelMetricsBrandSearchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMeasurementStudiesOmnichannelMetricsBrands>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeasurementStudiesOmnichannelMetricsBrands(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, measurementStudiesOmnichannelMetricsBrandSearchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OmnichannelMetricsStudyApi - factory interface
 * @export
 */
export const OmnichannelMetricsStudyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OmnichannelMetricsStudyApiFp(configuration)
    return {
        /**
         * Search for brands to be used in the OMNICHANNEL_METRICS vendor product.  **Requires one of these permissions**: []  **Requires one of these permissions**: []
         * @summary Search for brands to be used in the OMNICHANNEL_METRICS vendor product.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of brands in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {MeasurementStudiesOmnichannelMetricsBrandSearchRequest} [measurementStudiesOmnichannelMetricsBrandSearchRequest] Fetch measurement vendor products request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeasurementStudiesOmnichannelMetricsBrands(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, measurementStudiesOmnichannelMetricsBrandSearchRequest?: MeasurementStudiesOmnichannelMetricsBrandSearchRequest, options?: any): AxiosPromise<PaginatedMeasurementStudiesOmnichannelMetricsBrands> {
            return localVarFp.getMeasurementStudiesOmnichannelMetricsBrands(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, measurementStudiesOmnichannelMetricsBrandSearchRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMeasurementStudiesOmnichannelMetricsBrands operation in OmnichannelMetricsStudyApi.
 * @export
 * @interface OmnichannelMetricsStudyApiGetMeasurementStudiesOmnichannelMetricsBrandsRequest
 */
export interface OmnichannelMetricsStudyApiGetMeasurementStudiesOmnichannelMetricsBrandsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OmnichannelMetricsStudyApiGetMeasurementStudiesOmnichannelMetricsBrands
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof OmnichannelMetricsStudyApiGetMeasurementStudiesOmnichannelMetricsBrands
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof OmnichannelMetricsStudyApiGetMeasurementStudiesOmnichannelMetricsBrands
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of brands in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof OmnichannelMetricsStudyApiGetMeasurementStudiesOmnichannelMetricsBrands
     */
    readonly maxResults?: number

    /**
     * Fetch measurement vendor products request object.
     * @type {MeasurementStudiesOmnichannelMetricsBrandSearchRequest}
     * @memberof OmnichannelMetricsStudyApiGetMeasurementStudiesOmnichannelMetricsBrands
     */
    readonly measurementStudiesOmnichannelMetricsBrandSearchRequest?: MeasurementStudiesOmnichannelMetricsBrandSearchRequest
}

/**
 * OmnichannelMetricsStudyApi - object-oriented interface
 * @export
 * @class OmnichannelMetricsStudyApi
 * @extends {BaseAPI}
 */
export class OmnichannelMetricsStudyApi extends BaseAPI {
    /**
     * Search for brands to be used in the OMNICHANNEL_METRICS vendor product.  **Requires one of these permissions**: []  **Requires one of these permissions**: []
     * @summary Search for brands to be used in the OMNICHANNEL_METRICS vendor product.
     * @param {OmnichannelMetricsStudyApiGetMeasurementStudiesOmnichannelMetricsBrandsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OmnichannelMetricsStudyApi
     */
    public getMeasurementStudiesOmnichannelMetricsBrands(requestParameters: OmnichannelMetricsStudyApiGetMeasurementStudiesOmnichannelMetricsBrandsRequest, options?: any) {
        return OmnichannelMetricsStudyApiFp(this.configuration).getMeasurementStudiesOmnichannelMetricsBrands(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.nextToken, requestParameters.maxResults, requestParameters.measurementStudiesOmnichannelMetricsBrandSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


