/* tslint:disable */
/* eslint-disable */
/**
 * Sponsored Brands - Snapshots
 * Used to retrieve a record of your campaigns and keywords in bulk. This interface is used to download bulk account snapshots files asynchronously.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * Restricts results to entities with state within the specified comma-separated list. Must be one of: enabled, paused, archived. Default behavior is to include enabled and paused.
     * @type {string}
     * @memberof InlineObject
     */
    stateFilter?: InlineObjectStateFilterEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineObjectStateFilterEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * The SnapshotResponse will contain snapshot status. Additional metadata will be populated when the snapshot has completed and the location header will specify the location of the generated report.
 * @export
 * @interface Snapshot
 */
export interface Snapshot {
    /**
     * The ID of the snapshot that was requested.
     * @type {string}
     * @memberof Snapshot
     */
    snapshotId?: string;
    /**
     * The record type of the report.
     * @type {string}
     * @memberof Snapshot
     */
    recordType?: SnapshotRecordTypeEnum;
    /**
     * The status of the generation of the snapshot.
     * @type {string}
     * @memberof Snapshot
     */
    status?: SnapshotStatusEnum;
    /**
     * Description of the status.
     * @type {string}
     * @memberof Snapshot
     */
    statusDetails?: string;
    /**
     * The URI for the snapshot. It\'s only available if status is SUCCESS.
     * @type {string}
     * @memberof Snapshot
     */
    location?: string;
    /**
     * The size of the snapshot file in bytes. It\'s only available if status is SUCCESS.
     * @type {number}
     * @memberof Snapshot
     */
    fileSize?: number;
    /**
     * The epoch time for expiration of the snapshot file. It\'s only available if status is SUCCESS.
     * @type {number}
     * @memberof Snapshot
     */
    expiration?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum SnapshotRecordTypeEnum {
    Campaigns = 'campaigns',
    Keywords = 'keywords'
}
/**
    * @export
    * @enum {string}
    */
export enum SnapshotStatusEnum {
    InProgress = 'IN_PROGRESS',
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * The Error Response Object.
 * @export
 * @interface SnapshotError
 */
export interface SnapshotError {
    /**
     * An enumerated error code for machine use.
     * @type {string}
     * @memberof SnapshotError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof SnapshotError
     */
    details?: string;
}
/**
 * Data for the requested snapshot
 * @export
 * @interface SnapshotRequest
 */
export interface SnapshotRequest {
    /**
     * The ID of the snapshot that was requested.
     * @type {string}
     * @memberof SnapshotRequest
     */
    snapshotId?: string;
}

/**
 * SnapshotsApi - axios parameter creator
 * @export
 */
export const SnapshotsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *   Request a snapshot report for all entities of a single record type for Sponsored Products or Sponsored Brands. Currently, the Ads API does not support snapshots for Sponsored Brands video campaigns. Snapshots include records for non-video campaigns only.
         * @summary Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} recordType The type of entity for which the snapshot should be generated. This must be one of: campaigns, or keywords.
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestSnapshot: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: string, inlineObject?: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('requestSnapshot', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('requestSnapshot', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'recordType' is not null or undefined
            assertParamExists('requestSnapshot', 'recordType', recordType)
            const localVarPath = `/v2/hsa/{recordType}/snapshot`
                .replace(`{${"recordType"}}`, encodeURIComponent(String(recordType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *   **The SnapshotResponse will contain snapshot status. Additional metadata will be populated when the snapshot has completed and the location header will specify the location of the generated report.
         * @summary Retrieve status, metadata and location of previously requested snapshot.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} snapshotId The ID of a snapshot that was previously requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSnapshot: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('retrieveSnapshot', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('retrieveSnapshot', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('retrieveSnapshot', 'snapshotId', snapshotId)
            const localVarPath = `/v2/hsa/snapshots/{snapshotId}`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SnapshotsApi - functional programming interface
 * @export
 */
export const SnapshotsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SnapshotsApiAxiosParamCreator(configuration)
    return {
        /**
         *   Request a snapshot report for all entities of a single record type for Sponsored Products or Sponsored Brands. Currently, the Ads API does not support snapshots for Sponsored Brands video campaigns. Snapshots include records for non-video campaigns only.
         * @summary Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} recordType The type of entity for which the snapshot should be generated. This must be one of: campaigns, or keywords.
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: string, inlineObject?: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *   **The SnapshotResponse will contain snapshot status. Additional metadata will be populated when the snapshot has completed and the location header will specify the location of the generated report.
         * @summary Retrieve status, metadata and location of previously requested snapshot.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} snapshotId The ID of a snapshot that was previously requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Snapshot>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SnapshotsApi - factory interface
 * @export
 */
export const SnapshotsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SnapshotsApiFp(configuration)
    return {
        /**
         *   Request a snapshot report for all entities of a single record type for Sponsored Products or Sponsored Brands. Currently, the Ads API does not support snapshots for Sponsored Brands video campaigns. Snapshots include records for non-video campaigns only.
         * @summary Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} recordType The type of entity for which the snapshot should be generated. This must be one of: campaigns, or keywords.
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: string, inlineObject?: InlineObject, options?: any): AxiosPromise<SnapshotRequest> {
            return localVarFp.requestSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         *   **The SnapshotResponse will contain snapshot status. Additional metadata will be populated when the snapshot has completed and the location header will specify the location of the generated report.
         * @summary Retrieve status, metadata and location of previously requested snapshot.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} snapshotId The ID of a snapshot that was previously requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options?: any): AxiosPromise<Snapshot> {
            return localVarFp.retrieveSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for requestSnapshot operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiRequestSnapshotRequest
 */
export interface SnapshotsApiRequestSnapshotRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof SnapshotsApiRequestSnapshot
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof SnapshotsApiRequestSnapshot
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The type of entity for which the snapshot should be generated. This must be one of: campaigns, or keywords.
     * @type {string}
     * @memberof SnapshotsApiRequestSnapshot
     */
    readonly recordType: string

    /**
     * 
     * @type {InlineObject}
     * @memberof SnapshotsApiRequestSnapshot
     */
    readonly inlineObject?: InlineObject
}

/**
 * Request parameters for retrieveSnapshot operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiRetrieveSnapshotRequest
 */
export interface SnapshotsApiRetrieveSnapshotRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof SnapshotsApiRetrieveSnapshot
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof SnapshotsApiRetrieveSnapshot
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The ID of a snapshot that was previously requested.
     * @type {string}
     * @memberof SnapshotsApiRetrieveSnapshot
     */
    readonly snapshotId: string
}

/**
 * SnapshotsApi - object-oriented interface
 * @export
 * @class SnapshotsApi
 * @extends {BaseAPI}
 */
export class SnapshotsApi extends BaseAPI {
    /**
     *   Request a snapshot report for all entities of a single record type for Sponsored Products or Sponsored Brands. Currently, the Ads API does not support snapshots for Sponsored Brands video campaigns. Snapshots include records for non-video campaigns only.
     * @summary Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria.
     * @param {SnapshotsApiRequestSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    public requestSnapshot(requestParameters: SnapshotsApiRequestSnapshotRequest, options?: any) {
        return SnapshotsApiFp(this.configuration).requestSnapshot(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.recordType, requestParameters.inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *   **The SnapshotResponse will contain snapshot status. Additional metadata will be populated when the snapshot has completed and the location header will specify the location of the generated report.
     * @summary Retrieve status, metadata and location of previously requested snapshot.
     * @param {SnapshotsApiRetrieveSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    public retrieveSnapshot(requestParameters: SnapshotsApiRetrieveSnapshotRequest, options?: any) {
        return SnapshotsApiFp(this.configuration).retrieveSnapshot(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.snapshotId, options).then((request) => request(this.axios, this.basePath));
    }
}


