/* tslint:disable */
/* eslint-disable */
/**
 * Amazon Ads API for Data Providers.
 * Use to create, read, or update audience metadata and to add or remove audience records. For onboarding information, see [_setting up for the Amazon Ads API_](../setting-up/account-setup).
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { createRequestFunction } from "../../helpers";

/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * The audience name. Must be an alphanumeric string between 10 to 128 characters in length.
     * @type {string}
     * @memberof InlineObject
     */
    name: string;
    /**
     * The audience description. Must be an alphanumeric, non-null string between 0 to 1000 characters in length.
     * @type {string}
     * @memberof InlineObject
     */
    description: string;
    /**
     * The advertiser identifier.
     * @type {number}
     * @memberof InlineObject
     */
    advertiserId: number;
    /**
     * 
     * @type {V2DpAudiencemetadataMetadata}
     * @memberof InlineObject
     */
    metadata: V2DpAudiencemetadataMetadata;
}
/**
 * A data provider audience object with updated values.
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * The audience description. Must be an alphanumeric, non-null string between 0 to 1000 characters in length.
     * @type {string}
     * @memberof InlineObject1
     */
    description?: string;
    /**
     * 
     * @type {V2DpAudiencemetadataAudienceIdMetadata}
     * @memberof InlineObject1
     */
    metadata?: V2DpAudiencemetadataAudienceIdMetadata;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {Array<V2DpAudiencePatches>}
     * @memberof InlineObject2
     */
    patches?: Array<V2DpAudiencePatches>;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {Array<V2DpUsersUsers>}
     * @memberof InlineObject3
     */
    users?: Array<V2DpUsersUsers>;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * The request identifier.
     * @type {string}
     * @memberof InlineResponse200
     */
    requestId?: string;
    /**
     * 
     * @type {InlineResponse200Audience}
     * @memberof InlineResponse200
     */
    audience?: InlineResponse200Audience;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * The request identifier.
     * @type {string}
     * @memberof InlineResponse2001
     */
    requestId?: string;
    /**
     * 
     * @type {InlineResponse2001Audience}
     * @memberof InlineResponse2001
     */
    audience?: InlineResponse2001Audience;
}
/**
 * 
 * @export
 * @interface InlineResponse2001Audience
 */
export interface InlineResponse2001Audience {
    /**
     * The
     * @type {number}
     * @memberof InlineResponse2001Audience
     */
    id?: number;
    /**
     * The audience name. Must be an alphanumeric string between 10 to 128 characters in length.
     * @type {string}
     * @memberof InlineResponse2001Audience
     */
    name?: string;
    /**
     * The audience description. Must be an alphanumeric, non-null string between 0 to 1000 characters in length.
     * @type {string}
     * @memberof InlineResponse2001Audience
     */
    description?: string;
    /**
     * The advertiser identifier.
     * @type {number}
     * @memberof InlineResponse2001Audience
     */
    advertiserId?: number;
    /**
     * 
     * @type {InlineResponse2001AudienceMetadata}
     * @memberof InlineResponse2001Audience
     */
    metadata?: InlineResponse2001AudienceMetadata;
}
/**
 * 
 * @export
 * @interface InlineResponse2001AudienceMetadata
 */
export interface InlineResponse2001AudienceMetadata {
    /**
     * 
     * @type {MetadataType}
     * @memberof InlineResponse2001AudienceMetadata
     */
    type?: MetadataType;
    /**
     * The user-defined audience identifier.
     * @type {string}
     * @memberof InlineResponse2001AudienceMetadata
     */
    externalAudienceId?: string;
    /**
     * Time-to-live (ttl), in seconds. The amount of time the record is associated with the audience.
     * @type {number}
     * @memberof InlineResponse2001AudienceMetadata
     */
    ttl?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof InlineResponse2001AudienceMetadata
     */
    audienceFees?: Array<object>;
    /**
     * 
     * @type {InlineResponse2001AudienceMetadataAudienceSize}
     * @memberof InlineResponse2001AudienceMetadata
     */
    audienceSize?: InlineResponse2001AudienceMetadataAudienceSize;
}
/**
 * Information about the size of the audience.
 * @export
 * @interface InlineResponse2001AudienceMetadataAudienceSize
 */
export interface InlineResponse2001AudienceMetadataAudienceSize {
    /**
     * The number of received records.
     * @type {number}
     * @memberof InlineResponse2001AudienceMetadataAudienceSize
     */
    receivedRecordSize?: number;
    /**
     * The number of matched records.
     * @type {number}
     * @memberof InlineResponse2001AudienceMetadataAudienceSize
     */
    matchedRecordSize?: number;
    /**
     * The match rate.
     * @type {number}
     * @memberof InlineResponse2001AudienceMetadataAudienceSize
     */
    matchRate?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * A unique identifier representing the workflow of the submitted request.
     * @type {string}
     * @memberof InlineResponse2002
     */
    jobId?: string;
    /**
     * A unique identifier representing the request.
     * @type {string}
     * @memberof InlineResponse2002
     */
    requestId?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200Audience
 */
export interface InlineResponse200Audience {
    /**
     * The
     * @type {number}
     * @memberof InlineResponse200Audience
     */
    id?: number;
    /**
     * The audience name. Must be an alphanumeric string between 10 to 128 characters in length.
     * @type {string}
     * @memberof InlineResponse200Audience
     */
    name?: string;
    /**
     * The audience description. Must be an alphanumeric, non-null string between 0 to 1000 characters in length.
     * @type {string}
     * @memberof InlineResponse200Audience
     */
    description?: string;
    /**
     * The advertiser identifier.
     * @type {number}
     * @memberof InlineResponse200Audience
     */
    advertiserId?: number;
    /**
     * 
     * @type {InlineResponse200AudienceMetadata}
     * @memberof InlineResponse200Audience
     */
    metadata?: InlineResponse200AudienceMetadata;
}
/**
 * 
 * @export
 * @interface InlineResponse200AudienceMetadata
 */
export interface InlineResponse200AudienceMetadata {
    /**
     * 
     * @type {MetadataType}
     * @memberof InlineResponse200AudienceMetadata
     */
    type?: MetadataType;
    /**
     * The user-defined audience identifier.
     * @type {string}
     * @memberof InlineResponse200AudienceMetadata
     */
    externalAudienceId?: string;
    /**
     * Time-to-live (ttl), in seconds. The amount of time the record is associated with the audience.
     * @type {number}
     * @memberof InlineResponse200AudienceMetadata
     */
    ttl?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof InlineResponse200AudienceMetadata
     */
    audienceFees?: Array<object>;
}
/**
 * 
 * @export
 * @interface InlineResponse202
 */
export interface InlineResponse202 {
    /**
     * A unique identifier representing the request.
     * @type {string}
     * @memberof InlineResponse202
     */
    requestId?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse400
 */
export interface InlineResponse400 {
    /**
     * The request identifier.
     * @type {string}
     * @memberof InlineResponse400
     */
    requestId?: string;
    /**
     * 
     * @type {InlineResponse400Error}
     * @memberof InlineResponse400
     */
    error?: InlineResponse400Error;
}
/**
 * 
 * @export
 * @interface InlineResponse4001
 */
export interface InlineResponse4001 {
    /**
     * Identifier associated with the request.
     * @type {string}
     * @memberof InlineResponse4001
     */
    requestId?: string;
    /**
     * 
     * @type {InlineResponse4001Error}
     * @memberof InlineResponse4001
     */
    error?: InlineResponse4001Error;
}
/**
 * Detailed error messages associated with the request.
 * @export
 * @interface InlineResponse4001Error
 */
export interface InlineResponse4001Error {
    /**
     * HTTP status code associated with the response.
     * @type {string}
     * @memberof InlineResponse4001Error
     */
    httpStatusCode?: string;
    /**
     * Description of the error.
     * @type {string}
     * @memberof InlineResponse4001Error
     */
    description?: string;
    /**
     * An array of property objects that include more information about the request.
     * @type {Array<InlineResponse4001ErrorErrors>}
     * @memberof InlineResponse4001Error
     */
    errors?: Array<InlineResponse4001ErrorErrors>;
}
/**
 * 
 * @export
 * @interface InlineResponse4001ErrorErrors
 */
export interface InlineResponse4001ErrorErrors {
    /**
     * Type of error.
     * @type {string}
     * @memberof InlineResponse4001ErrorErrors
     */
    errorType?: string;
    /**
     * Error message
     * @type {string}
     * @memberof InlineResponse4001ErrorErrors
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse400Error
 */
export interface InlineResponse400Error {
    /**
     * The HTTP status code.
     * @type {string}
     * @memberof InlineResponse400Error
     */
    httpStatusCode?: string;
    /**
     * A human-readable description of the error.
     * @type {string}
     * @memberof InlineResponse400Error
     */
    description?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof InlineResponse400Error
     */
    errors?: Array<object>;
}
/**
 * 
 * @export
 * @interface InlineResponse413
 */
export interface InlineResponse413 {
    /**
     * Identifier associated with the request.
     * @type {string}
     * @memberof InlineResponse413
     */
    requestId?: string;
    /**
     * 
     * @type {InlineResponse413Error}
     * @memberof InlineResponse413
     */
    error?: InlineResponse413Error;
}
/**
 * Detailed error messages associated with the request.
 * @export
 * @interface InlineResponse413Error
 */
export interface InlineResponse413Error {
    /**
     * HTTP status code associated with the response.
     * @type {string}
     * @memberof InlineResponse413Error
     */
    httpStatusCode?: string;
    /**
     * Description of the error.
     * @type {string}
     * @memberof InlineResponse413Error
     */
    description?: string;
    /**
     * An array of property objects that include more information about the request.
     * @type {Array<InlineResponse413ErrorErrors>}
     * @memberof InlineResponse413Error
     */
    errors?: Array<InlineResponse413ErrorErrors>;
}
/**
 * 
 * @export
 * @interface InlineResponse413ErrorErrors
 */
export interface InlineResponse413ErrorErrors {
    /**
     * Type of error.
     * @type {string}
     * @memberof InlineResponse413ErrorErrors
     */
    errorType?: string;
    /**
     * Error message
     * @type {string}
     * @memberof InlineResponse413ErrorErrors
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse429
 */
export interface InlineResponse429 {
    /**
     * Identifier associated with the request.
     * @type {string}
     * @memberof InlineResponse429
     */
    requestId?: string;
    /**
     * 
     * @type {InlineResponse429Error}
     * @memberof InlineResponse429
     */
    error?: InlineResponse429Error;
}
/**
 * Detailed error messages associated with the request.
 * @export
 * @interface InlineResponse429Error
 */
export interface InlineResponse429Error {
    /**
     * HTTP status code associated with the response.
     * @type {string}
     * @memberof InlineResponse429Error
     */
    httpStatusCode?: string;
    /**
     * Description of the error.
     * @type {string}
     * @memberof InlineResponse429Error
     */
    description?: string;
    /**
     * An array of property objects that include more information about the request.
     * @type {Array<InlineResponse429ErrorErrors>}
     * @memberof InlineResponse429Error
     */
    errors?: Array<InlineResponse429ErrorErrors>;
}
/**
 * 
 * @export
 * @interface InlineResponse429ErrorErrors
 */
export interface InlineResponse429ErrorErrors {
    /**
     * Type of error.
     * @type {string}
     * @memberof InlineResponse429ErrorErrors
     */
    errorType?: string;
    /**
     * Error message
     * @type {string}
     * @memberof InlineResponse429ErrorErrors
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse500
 */
export interface InlineResponse500 {
    /**
     * Identifier associated with the request.
     * @type {string}
     * @memberof InlineResponse500
     */
    requestId?: string;
    /**
     * 
     * @type {InlineResponse500Error}
     * @memberof InlineResponse500
     */
    error?: InlineResponse500Error;
}
/**
 * Detailed error messages associated with the request.
 * @export
 * @interface InlineResponse500Error
 */
export interface InlineResponse500Error {
    /**
     * HTTP status code associated with the response.
     * @type {string}
     * @memberof InlineResponse500Error
     */
    httpStatusCode?: string;
    /**
     * Description of the error.
     * @type {string}
     * @memberof InlineResponse500Error
     */
    description?: string;
    /**
     * An array of property objects that include more information about the request.
     * @type {Array<InlineResponse500ErrorErrors>}
     * @memberof InlineResponse500Error
     */
    errors?: Array<InlineResponse500ErrorErrors>;
}
/**
 * 
 * @export
 * @interface InlineResponse500ErrorErrors
 */
export interface InlineResponse500ErrorErrors {
    /**
     * Type of error.
     * @type {string}
     * @memberof InlineResponse500ErrorErrors
     */
    errorType?: string;
    /**
     * Error message
     * @type {string}
     * @memberof InlineResponse500ErrorErrors
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse503
 */
export interface InlineResponse503 {
    /**
     * Identifier associated with the request.
     * @type {string}
     * @memberof InlineResponse503
     */
    requestId?: string;
    /**
     * 
     * @type {InlineResponse503Error}
     * @memberof InlineResponse503
     */
    error?: InlineResponse503Error;
}
/**
 * Detailed error messages associated with the request.
 * @export
 * @interface InlineResponse503Error
 */
export interface InlineResponse503Error {
    /**
     * HTTP status code associated with the response.
     * @type {string}
     * @memberof InlineResponse503Error
     */
    httpStatusCode?: string;
    /**
     * Description of the error.
     * @type {string}
     * @memberof InlineResponse503Error
     */
    description?: string;
    /**
     * An array of property objects that include more information about the request.
     * @type {Array<InlineResponse503ErrorErrors>}
     * @memberof InlineResponse503Error
     */
    errors?: Array<InlineResponse503ErrorErrors>;
}
/**
 * 
 * @export
 * @interface InlineResponse503ErrorErrors
 */
export interface InlineResponse503ErrorErrors {
    /**
     * Type of error.
     * @type {string}
     * @memberof InlineResponse503ErrorErrors
     */
    errorType?: string;
    /**
     * Error message
     * @type {string}
     * @memberof InlineResponse503ErrorErrors
     */
    message?: string;
}
/**
 * The audience metadata type. Only \'DATA_PROVIDER\' is currently supported.
 * @export
 * @enum {string}
 */

export enum MetadataType {
    DataProvider = 'DATA_PROVIDER'
}

/**
 * 
 * @export
 * @interface V2DpAudiencePatches
 */
export interface V2DpAudiencePatches {
    /**
     * Specifies the type of operation. Valid operations are `add` or `remove`.
     * @type {string}
     * @memberof V2DpAudiencePatches
     */
    op?: V2DpAudiencePatchesOpEnum;
    /**
     * A formatted string that specifies the URL of the record. The format of the string is `/<recordIdType>-<recordIdValue>/audiences`, where \'recordIdType\' specifies the record\'s origin and \'recordIdValue\' specifies the record\'s Id. Valid \'recordIdType\' values are `COOKIE`, a cookie Id sent from a data provider to Amazon by a cookie sync; `MAID`, a mobile advertising identifier; `EXTERNAL_USER_ID`, an external id defined by data providers.
     * @type {string}
     * @memberof V2DpAudiencePatches
     */
    path?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof V2DpAudiencePatches
     */
    value?: Array<number>;
}

/**
    * @export
    * @enum {string}
    */
export enum V2DpAudiencePatchesOpEnum {
    Add = 'add',
    Remove = 'remove'
}

/**
 * 
 * @export
 * @interface V2DpAudiencemetadataAudienceIdMetadata
 */
export interface V2DpAudiencemetadataAudienceIdMetadata {
    /**
     * Time-to-live (ttl), in seconds. The amount of time the record is associated with the audience.
     * @type {number}
     * @memberof V2DpAudiencemetadataAudienceIdMetadata
     */
    ttl?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof V2DpAudiencemetadataAudienceIdMetadata
     */
    audienceFees?: Array<object>;
}
/**
 * 
 * @export
 * @interface V2DpAudiencemetadataMetadata
 */
export interface V2DpAudiencemetadataMetadata {
    /**
     * 
     * @type {MetadataType}
     * @memberof V2DpAudiencemetadataMetadata
     */
    type: MetadataType;
    /**
     * The user-defined audience identifier.
     * @type {string}
     * @memberof V2DpAudiencemetadataMetadata
     */
    externalAudienceId: string;
    /**
     * Time-to-live (ttl), in seconds. The amount of time the record is associated with the audience.
     * @type {number}
     * @memberof V2DpAudiencemetadataMetadata
     */
    ttl?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof V2DpAudiencemetadataMetadata
     */
    audienceFees?: Array<object>;
}
/**
 * 
 * @export
 * @interface V2DpUsersUserId
 */
export interface V2DpUsersUserId {
    /**
     * Specifies the type of the user identifier.
     * @type {string}
     * @memberof V2DpUsersUserId
     */
    idType?: V2DpUsersUserIdIdTypeEnum;
    /**
     * The user identifer.
     * @type {string}
     * @memberof V2DpUsersUserId
     */
    id?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum V2DpUsersUserIdIdTypeEnum {
    Cookie = 'COOKIE',
    Maid = 'MAID',
    ExternalUserId = 'EXTERNAL_USER_ID'
}

/**
 * 
 * @export
 * @interface V2DpUsersUsers
 */
export interface V2DpUsersUsers {
    /**
     * 
     * @type {V2DpUsersUserId}
     * @memberof V2DpUsersUsers
     */
    userId?: V2DpUsersUserId;
    /**
     * The advertiser identifier. If present, the user data for the specified advertiser is deleted. Otherwise, all data about this user sourced from this client is deleted.
     * @type {string}
     * @memberof V2DpUsersUsers
     */
    advertiserId?: string;
    /**
     * User consent time in epoch milliseconds
     * @type {number}
     * @memberof V2DpUsersUsers
     */
    consentTime?: number;
}

/**
 * AddOrRemoveRecordsApi - axios parameter creator
 * @export
 */
export const AddOrRemoveRecordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Associates or disassociates a record with an audience. Note that the API call rate is limited to 100 transactions per second (TPS). Calls exceeding this rate are throttled. Payload size is limited to 1MB. Calls with a payload larger than 1MB receive a 413 response.
         * @param {string} authorization A valid access token.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} host The Amazon Ads API endpoint.
         * @param {string} contentType The &#x60;Content-Type&#x60; is application/json.
         * @param {number} audienceId The audience identifier.
         * @param {InlineObject2} inlineObject2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DpAudiencePatch: async (authorization: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientId: string, host: string, contentType: string, audienceId: number, inlineObject2: InlineObject2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2DpAudiencePatch', 'authorization', authorization)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('v2DpAudiencePatch', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('v2DpAudiencePatch', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'host' is not null or undefined
            assertParamExists('v2DpAudiencePatch', 'host', host)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('v2DpAudiencePatch', 'contentType', contentType)
            // verify required parameter 'audienceId' is not null or undefined
            assertParamExists('v2DpAudiencePatch', 'audienceId', audienceId)
            // verify required parameter 'inlineObject2' is not null or undefined
            assertParamExists('v2DpAudiencePatch', 'inlineObject2', inlineObject2)
            const localVarPath = `/v2/dp/audience`
                .replace(`{${"audienceId"}}`, encodeURIComponent(String(audienceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (host !== undefined && host !== null) {
                localVarHeaderParameter['Host'] = String(host);
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddOrRemoveRecordsApi - functional programming interface
 * @export
 */
export const AddOrRemoveRecordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddOrRemoveRecordsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Associates or disassociates a record with an audience. Note that the API call rate is limited to 100 transactions per second (TPS). Calls exceeding this rate are throttled. Payload size is limited to 1MB. Calls with a payload larger than 1MB receive a 413 response.
         * @param {string} authorization A valid access token.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} host The Amazon Ads API endpoint.
         * @param {string} contentType The &#x60;Content-Type&#x60; is application/json.
         * @param {number} audienceId The audience identifier.
         * @param {InlineObject2} inlineObject2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2DpAudiencePatch(authorization: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientId: string, host: string, contentType: string, audienceId: number, inlineObject2: InlineObject2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2DpAudiencePatch(authorization, amazonAdvertisingAPIScope, amazonAdvertisingAPIClientId, host, contentType, audienceId, inlineObject2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddOrRemoveRecordsApi - factory interface
 * @export
 */
export const AddOrRemoveRecordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddOrRemoveRecordsApiFp(configuration)
    return {
        /**
         * 
         * @summary Associates or disassociates a record with an audience. Note that the API call rate is limited to 100 transactions per second (TPS). Calls exceeding this rate are throttled. Payload size is limited to 1MB. Calls with a payload larger than 1MB receive a 413 response.
         * @param {string} authorization A valid access token.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} host The Amazon Ads API endpoint.
         * @param {string} contentType The &#x60;Content-Type&#x60; is application/json.
         * @param {number} audienceId The audience identifier.
         * @param {InlineObject2} inlineObject2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DpAudiencePatch(authorization: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientId: string, host: string, contentType: string, audienceId: number, inlineObject2: InlineObject2, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.v2DpAudiencePatch(authorization, amazonAdvertisingAPIScope, amazonAdvertisingAPIClientId, host, contentType, audienceId, inlineObject2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v2DpAudiencePatch operation in AddOrRemoveRecordsApi.
 * @export
 * @interface AddOrRemoveRecordsApiV2DpAudiencePatchRequest
 */
export interface AddOrRemoveRecordsApiV2DpAudiencePatchRequest {
    /**
     * A valid access token.
     * @type {string}
     * @memberof AddOrRemoveRecordsApiV2DpAudiencePatch
     */
    readonly authorization: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AddOrRemoveRecordsApiV2DpAudiencePatch
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AddOrRemoveRecordsApiV2DpAudiencePatch
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The Amazon Ads API endpoint.
     * @type {string}
     * @memberof AddOrRemoveRecordsApiV2DpAudiencePatch
     */
    readonly host: string

    /**
     * The &#x60;Content-Type&#x60; is application/json.
     * @type {string}
     * @memberof AddOrRemoveRecordsApiV2DpAudiencePatch
     */
    readonly contentType: string

    /**
     * The audience identifier.
     * @type {number}
     * @memberof AddOrRemoveRecordsApiV2DpAudiencePatch
     */
    readonly audienceId: number

    /**
     * 
     * @type {InlineObject2}
     * @memberof AddOrRemoveRecordsApiV2DpAudiencePatch
     */
    readonly inlineObject2: InlineObject2
}

/**
 * AddOrRemoveRecordsApi - object-oriented interface
 * @export
 * @class AddOrRemoveRecordsApi
 * @extends {BaseAPI}
 */
export class AddOrRemoveRecordsApi extends BaseAPI {
    /**
     * 
     * @summary Associates or disassociates a record with an audience. Note that the API call rate is limited to 100 transactions per second (TPS). Calls exceeding this rate are throttled. Payload size is limited to 1MB. Calls with a payload larger than 1MB receive a 413 response.
     * @param {AddOrRemoveRecordsApiV2DpAudiencePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddOrRemoveRecordsApi
     */
    public v2DpAudiencePatch(requestParameters: AddOrRemoveRecordsApiV2DpAudiencePatchRequest, options?: any) {
        return AddOrRemoveRecordsApiFp(this.configuration).v2DpAudiencePatch(requestParameters.authorization, requestParameters.amazonAdvertisingAPIScope, requestParameters.amazonAdvertisingAPIClientId, requestParameters.host, requestParameters.contentType, requestParameters.audienceId, requestParameters.inlineObject2, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MetadataApi - axios parameter creator
 * @export
 */
export const MetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets metadata for an audience specified by identifier. Note that the API call rate is limited to 1 transaction per second (TPS). Calls exceeding this rate are throttled.
         * @param {string} authorization A valid access token.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} host The Amazon Ads API endpoint.
         * @param {string} contentType The &#x60;Content-Type&#x60; is application/json.
         * @param {number} audienceId The audience identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DpAudiencemetadataAudienceIdGet: async (authorization: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientId: string, host: string, contentType: string, audienceId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2DpAudiencemetadataAudienceIdGet', 'authorization', authorization)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('v2DpAudiencemetadataAudienceIdGet', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('v2DpAudiencemetadataAudienceIdGet', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'host' is not null or undefined
            assertParamExists('v2DpAudiencemetadataAudienceIdGet', 'host', host)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('v2DpAudiencemetadataAudienceIdGet', 'contentType', contentType)
            // verify required parameter 'audienceId' is not null or undefined
            assertParamExists('v2DpAudiencemetadataAudienceIdGet', 'audienceId', audienceId)
            const localVarPath = `/v2/dp/audiencemetadata/{audienceId}`
                .replace(`{${"audienceId"}}`, encodeURIComponent(String(audienceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (host !== undefined && host !== null) {
                localVarHeaderParameter['Host'] = String(host);
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates metadata of an existing audience specified by identifier. Note that the API call rate is limited to 1 transaction per second (TPS). Calls exceeding this rate are throttled.
         * @param {string} authorization A valid access token.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} host The Amazon Ads API endpoint.
         * @param {string} contentType The &#x60;Content-Type&#x60; is application/json.
         * @param {number} audienceId The audience identifier.
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DpAudiencemetadataAudienceIdPut: async (authorization: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientId: string, host: string, contentType: string, audienceId: number, inlineObject1: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2DpAudiencemetadataAudienceIdPut', 'authorization', authorization)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('v2DpAudiencemetadataAudienceIdPut', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('v2DpAudiencemetadataAudienceIdPut', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'host' is not null or undefined
            assertParamExists('v2DpAudiencemetadataAudienceIdPut', 'host', host)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('v2DpAudiencemetadataAudienceIdPut', 'contentType', contentType)
            // verify required parameter 'audienceId' is not null or undefined
            assertParamExists('v2DpAudiencemetadataAudienceIdPut', 'audienceId', audienceId)
            // verify required parameter 'inlineObject1' is not null or undefined
            assertParamExists('v2DpAudiencemetadataAudienceIdPut', 'inlineObject1', inlineObject1)
            const localVarPath = `/v2/dp/audiencemetadata/{audienceId}`
                .replace(`{${"audienceId"}}`, encodeURIComponent(String(audienceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (host !== undefined && host !== null) {
                localVarHeaderParameter['Host'] = String(host);
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new data provider audience. Note that the API call rate is limited to 1 transaction per second (TPS). Calls exceeding this rate are throttled.
         * @param {string} authorization A valid access token.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} host The Amazon Ads API endpoint.
         * @param {string} contentType The &#x60;Content-Type&#x60; is application/json.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DpAudiencemetadataPost: async (authorization: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientId: string, host: string, contentType: string, inlineObject: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2DpAudiencemetadataPost', 'authorization', authorization)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('v2DpAudiencemetadataPost', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('v2DpAudiencemetadataPost', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'host' is not null or undefined
            assertParamExists('v2DpAudiencemetadataPost', 'host', host)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('v2DpAudiencemetadataPost', 'contentType', contentType)
            // verify required parameter 'inlineObject' is not null or undefined
            assertParamExists('v2DpAudiencemetadataPost', 'inlineObject', inlineObject)
            const localVarPath = `/v2/dp/audiencemetadata/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (host !== undefined && host !== null) {
                localVarHeaderParameter['Host'] = String(host);
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetadataApi - functional programming interface
 * @export
 */
export const MetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets metadata for an audience specified by identifier. Note that the API call rate is limited to 1 transaction per second (TPS). Calls exceeding this rate are throttled.
         * @param {string} authorization A valid access token.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} host The Amazon Ads API endpoint.
         * @param {string} contentType The &#x60;Content-Type&#x60; is application/json.
         * @param {number} audienceId The audience identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2DpAudiencemetadataAudienceIdGet(authorization: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientId: string, host: string, contentType: string, audienceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2DpAudiencemetadataAudienceIdGet(authorization, amazonAdvertisingAPIScope, amazonAdvertisingAPIClientId, host, contentType, audienceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates metadata of an existing audience specified by identifier. Note that the API call rate is limited to 1 transaction per second (TPS). Calls exceeding this rate are throttled.
         * @param {string} authorization A valid access token.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} host The Amazon Ads API endpoint.
         * @param {string} contentType The &#x60;Content-Type&#x60; is application/json.
         * @param {number} audienceId The audience identifier.
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2DpAudiencemetadataAudienceIdPut(authorization: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientId: string, host: string, contentType: string, audienceId: number, inlineObject1: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2DpAudiencemetadataAudienceIdPut(authorization, amazonAdvertisingAPIScope, amazonAdvertisingAPIClientId, host, contentType, audienceId, inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new data provider audience. Note that the API call rate is limited to 1 transaction per second (TPS). Calls exceeding this rate are throttled.
         * @param {string} authorization A valid access token.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} host The Amazon Ads API endpoint.
         * @param {string} contentType The &#x60;Content-Type&#x60; is application/json.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2DpAudiencemetadataPost(authorization: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientId: string, host: string, contentType: string, inlineObject: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2DpAudiencemetadataPost(authorization, amazonAdvertisingAPIScope, amazonAdvertisingAPIClientId, host, contentType, inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MetadataApi - factory interface
 * @export
 */
export const MetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetadataApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets metadata for an audience specified by identifier. Note that the API call rate is limited to 1 transaction per second (TPS). Calls exceeding this rate are throttled.
         * @param {string} authorization A valid access token.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} host The Amazon Ads API endpoint.
         * @param {string} contentType The &#x60;Content-Type&#x60; is application/json.
         * @param {number} audienceId The audience identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DpAudiencemetadataAudienceIdGet(authorization: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientId: string, host: string, contentType: string, audienceId: number, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.v2DpAudiencemetadataAudienceIdGet(authorization, amazonAdvertisingAPIScope, amazonAdvertisingAPIClientId, host, contentType, audienceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates metadata of an existing audience specified by identifier. Note that the API call rate is limited to 1 transaction per second (TPS). Calls exceeding this rate are throttled.
         * @param {string} authorization A valid access token.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} host The Amazon Ads API endpoint.
         * @param {string} contentType The &#x60;Content-Type&#x60; is application/json.
         * @param {number} audienceId The audience identifier.
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DpAudiencemetadataAudienceIdPut(authorization: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientId: string, host: string, contentType: string, audienceId: number, inlineObject1: InlineObject1, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.v2DpAudiencemetadataAudienceIdPut(authorization, amazonAdvertisingAPIScope, amazonAdvertisingAPIClientId, host, contentType, audienceId, inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new data provider audience. Note that the API call rate is limited to 1 transaction per second (TPS). Calls exceeding this rate are throttled.
         * @param {string} authorization A valid access token.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} host The Amazon Ads API endpoint.
         * @param {string} contentType The &#x60;Content-Type&#x60; is application/json.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DpAudiencemetadataPost(authorization: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientId: string, host: string, contentType: string, inlineObject: InlineObject, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.v2DpAudiencemetadataPost(authorization, amazonAdvertisingAPIScope, amazonAdvertisingAPIClientId, host, contentType, inlineObject, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v2DpAudiencemetadataAudienceIdGet operation in MetadataApi.
 * @export
 * @interface MetadataApiV2DpAudiencemetadataAudienceIdGetRequest
 */
export interface MetadataApiV2DpAudiencemetadataAudienceIdGetRequest {
    /**
     * A valid access token.
     * @type {string}
     * @memberof MetadataApiV2DpAudiencemetadataAudienceIdGet
     */
    readonly authorization: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof MetadataApiV2DpAudiencemetadataAudienceIdGet
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MetadataApiV2DpAudiencemetadataAudienceIdGet
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The Amazon Ads API endpoint.
     * @type {string}
     * @memberof MetadataApiV2DpAudiencemetadataAudienceIdGet
     */
    readonly host: string

    /**
     * The &#x60;Content-Type&#x60; is application/json.
     * @type {string}
     * @memberof MetadataApiV2DpAudiencemetadataAudienceIdGet
     */
    readonly contentType: string

    /**
     * The audience identifier.
     * @type {number}
     * @memberof MetadataApiV2DpAudiencemetadataAudienceIdGet
     */
    readonly audienceId: number
}

/**
 * Request parameters for v2DpAudiencemetadataAudienceIdPut operation in MetadataApi.
 * @export
 * @interface MetadataApiV2DpAudiencemetadataAudienceIdPutRequest
 */
export interface MetadataApiV2DpAudiencemetadataAudienceIdPutRequest {
    /**
     * A valid access token.
     * @type {string}
     * @memberof MetadataApiV2DpAudiencemetadataAudienceIdPut
     */
    readonly authorization: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof MetadataApiV2DpAudiencemetadataAudienceIdPut
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MetadataApiV2DpAudiencemetadataAudienceIdPut
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The Amazon Ads API endpoint.
     * @type {string}
     * @memberof MetadataApiV2DpAudiencemetadataAudienceIdPut
     */
    readonly host: string

    /**
     * The &#x60;Content-Type&#x60; is application/json.
     * @type {string}
     * @memberof MetadataApiV2DpAudiencemetadataAudienceIdPut
     */
    readonly contentType: string

    /**
     * The audience identifier.
     * @type {number}
     * @memberof MetadataApiV2DpAudiencemetadataAudienceIdPut
     */
    readonly audienceId: number

    /**
     * 
     * @type {InlineObject1}
     * @memberof MetadataApiV2DpAudiencemetadataAudienceIdPut
     */
    readonly inlineObject1: InlineObject1
}

/**
 * Request parameters for v2DpAudiencemetadataPost operation in MetadataApi.
 * @export
 * @interface MetadataApiV2DpAudiencemetadataPostRequest
 */
export interface MetadataApiV2DpAudiencemetadataPostRequest {
    /**
     * A valid access token.
     * @type {string}
     * @memberof MetadataApiV2DpAudiencemetadataPost
     */
    readonly authorization: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof MetadataApiV2DpAudiencemetadataPost
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MetadataApiV2DpAudiencemetadataPost
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The Amazon Ads API endpoint.
     * @type {string}
     * @memberof MetadataApiV2DpAudiencemetadataPost
     */
    readonly host: string

    /**
     * The &#x60;Content-Type&#x60; is application/json.
     * @type {string}
     * @memberof MetadataApiV2DpAudiencemetadataPost
     */
    readonly contentType: string

    /**
     * 
     * @type {InlineObject}
     * @memberof MetadataApiV2DpAudiencemetadataPost
     */
    readonly inlineObject: InlineObject
}

/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
export class MetadataApi extends BaseAPI {
    /**
     * 
     * @summary Gets metadata for an audience specified by identifier. Note that the API call rate is limited to 1 transaction per second (TPS). Calls exceeding this rate are throttled.
     * @param {MetadataApiV2DpAudiencemetadataAudienceIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public v2DpAudiencemetadataAudienceIdGet(requestParameters: MetadataApiV2DpAudiencemetadataAudienceIdGetRequest, options?: any) {
        return MetadataApiFp(this.configuration).v2DpAudiencemetadataAudienceIdGet(requestParameters.authorization, requestParameters.amazonAdvertisingAPIScope, requestParameters.amazonAdvertisingAPIClientId, requestParameters.host, requestParameters.contentType, requestParameters.audienceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates metadata of an existing audience specified by identifier. Note that the API call rate is limited to 1 transaction per second (TPS). Calls exceeding this rate are throttled.
     * @param {MetadataApiV2DpAudiencemetadataAudienceIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public v2DpAudiencemetadataAudienceIdPut(requestParameters: MetadataApiV2DpAudiencemetadataAudienceIdPutRequest, options?: any) {
        return MetadataApiFp(this.configuration).v2DpAudiencemetadataAudienceIdPut(requestParameters.authorization, requestParameters.amazonAdvertisingAPIScope, requestParameters.amazonAdvertisingAPIClientId, requestParameters.host, requestParameters.contentType, requestParameters.audienceId, requestParameters.inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new data provider audience. Note that the API call rate is limited to 1 transaction per second (TPS). Calls exceeding this rate are throttled.
     * @param {MetadataApiV2DpAudiencemetadataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    public v2DpAudiencemetadataPost(requestParameters: MetadataApiV2DpAudiencemetadataPostRequest, options?: any) {
        return MetadataApiFp(this.configuration).v2DpAudiencemetadataPost(requestParameters.authorization, requestParameters.amazonAdvertisingAPIScope, requestParameters.amazonAdvertisingAPIClientId, requestParameters.host, requestParameters.contentType, requestParameters.inlineObject, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserDeletionApi - axios parameter creator
 * @export
 */
export const UserDeletionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes user data sourced from data providers. Deletes users scoped either to an advertiser or for the data provider. The SLA for data deletion is 30 days.
         * @summary Deletes user data originally sourced from the client. The API call rate is limited to 1 transactions per second (TPS). Calls exceeding this rate are throttled. Payload size is limited to 1000 users or 1MB. Calls with a more than 1000 users or 1MB will receive a 413 response.
         * @param {string} authorization A valid access token. 
         * @param {string} amazonAdvertisingAPIScope The profile identifier.
         * @param {string} amazonAdvertisingAPIClientID The client identifier.
         * @param {string} host A valid Amazon Ads API endpoint. 
         * @param {string} contentType The Content-Type is &#x60;application/json&#x60;.
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DpUsersDelete: async (authorization: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientID: string, host: string, contentType: string, inlineObject3: InlineObject3, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2DpUsersDelete', 'authorization', authorization)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('v2DpUsersDelete', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'amazonAdvertisingAPIClientID' is not null or undefined
            assertParamExists('v2DpUsersDelete', 'amazonAdvertisingAPIClientID', amazonAdvertisingAPIClientID)
            // verify required parameter 'host' is not null or undefined
            assertParamExists('v2DpUsersDelete', 'host', host)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('v2DpUsersDelete', 'contentType', contentType)
            // verify required parameter 'inlineObject3' is not null or undefined
            assertParamExists('v2DpUsersDelete', 'inlineObject3', inlineObject3)
            const localVarPath = `/v2/dp/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }

            if (amazonAdvertisingAPIClientID !== undefined && amazonAdvertisingAPIClientID !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientID'] = String(amazonAdvertisingAPIClientID);
            }

            if (host !== undefined && host !== null) {
                localVarHeaderParameter['Host'] = String(host);
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserDeletionApi - functional programming interface
 * @export
 */
export const UserDeletionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserDeletionApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes user data sourced from data providers. Deletes users scoped either to an advertiser or for the data provider. The SLA for data deletion is 30 days.
         * @summary Deletes user data originally sourced from the client. The API call rate is limited to 1 transactions per second (TPS). Calls exceeding this rate are throttled. Payload size is limited to 1000 users or 1MB. Calls with a more than 1000 users or 1MB will receive a 413 response.
         * @param {string} authorization A valid access token. 
         * @param {string} amazonAdvertisingAPIScope The profile identifier.
         * @param {string} amazonAdvertisingAPIClientID The client identifier.
         * @param {string} host A valid Amazon Ads API endpoint. 
         * @param {string} contentType The Content-Type is &#x60;application/json&#x60;.
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2DpUsersDelete(authorization: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientID: string, host: string, contentType: string, inlineObject3: InlineObject3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse202>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2DpUsersDelete(authorization, amazonAdvertisingAPIScope, amazonAdvertisingAPIClientID, host, contentType, inlineObject3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserDeletionApi - factory interface
 * @export
 */
export const UserDeletionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserDeletionApiFp(configuration)
    return {
        /**
         * Deletes user data sourced from data providers. Deletes users scoped either to an advertiser or for the data provider. The SLA for data deletion is 30 days.
         * @summary Deletes user data originally sourced from the client. The API call rate is limited to 1 transactions per second (TPS). Calls exceeding this rate are throttled. Payload size is limited to 1000 users or 1MB. Calls with a more than 1000 users or 1MB will receive a 413 response.
         * @param {string} authorization A valid access token. 
         * @param {string} amazonAdvertisingAPIScope The profile identifier.
         * @param {string} amazonAdvertisingAPIClientID The client identifier.
         * @param {string} host A valid Amazon Ads API endpoint. 
         * @param {string} contentType The Content-Type is &#x60;application/json&#x60;.
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2DpUsersDelete(authorization: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientID: string, host: string, contentType: string, inlineObject3: InlineObject3, options?: any): AxiosPromise<InlineResponse202> {
            return localVarFp.v2DpUsersDelete(authorization, amazonAdvertisingAPIScope, amazonAdvertisingAPIClientID, host, contentType, inlineObject3, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v2DpUsersDelete operation in UserDeletionApi.
 * @export
 * @interface UserDeletionApiV2DpUsersDeleteRequest
 */
export interface UserDeletionApiV2DpUsersDeleteRequest {
    /**
     * A valid access token. 
     * @type {string}
     * @memberof UserDeletionApiV2DpUsersDelete
     */
    readonly authorization: string

    /**
     * The profile identifier.
     * @type {string}
     * @memberof UserDeletionApiV2DpUsersDelete
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The client identifier.
     * @type {string}
     * @memberof UserDeletionApiV2DpUsersDelete
     */
    readonly amazonAdvertisingAPIClientID: string

    /**
     * A valid Amazon Ads API endpoint. 
     * @type {string}
     * @memberof UserDeletionApiV2DpUsersDelete
     */
    readonly host: string

    /**
     * The Content-Type is &#x60;application/json&#x60;.
     * @type {string}
     * @memberof UserDeletionApiV2DpUsersDelete
     */
    readonly contentType: string

    /**
     * 
     * @type {InlineObject3}
     * @memberof UserDeletionApiV2DpUsersDelete
     */
    readonly inlineObject3: InlineObject3
}

/**
 * UserDeletionApi - object-oriented interface
 * @export
 * @class UserDeletionApi
 * @extends {BaseAPI}
 */
export class UserDeletionApi extends BaseAPI {
    /**
     * Deletes user data sourced from data providers. Deletes users scoped either to an advertiser or for the data provider. The SLA for data deletion is 30 days.
     * @summary Deletes user data originally sourced from the client. The API call rate is limited to 1 transactions per second (TPS). Calls exceeding this rate are throttled. Payload size is limited to 1000 users or 1MB. Calls with a more than 1000 users or 1MB will receive a 413 response.
     * @param {UserDeletionApiV2DpUsersDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDeletionApi
     */
    public v2DpUsersDelete(requestParameters: UserDeletionApiV2DpUsersDeleteRequest, options?: any) {
        return UserDeletionApiFp(this.configuration).v2DpUsersDelete(requestParameters.authorization, requestParameters.amazonAdvertisingAPIScope, requestParameters.amazonAdvertisingAPIClientID, requestParameters.host, requestParameters.contentType, requestParameters.inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }
}


