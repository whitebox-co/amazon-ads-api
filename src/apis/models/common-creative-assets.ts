/* tslint:disable */
/* eslint-disable */
/**
 * Creative Assets
 * # Overview:  Advertisers can use creative assets to store, organize and reuse brand content, such as logos, images, etc. Stored content can be used for Amazon Ads and on Amazon shopping pages. Creative assets enables brands to provide a consistent shopping experience by easily applying brand content across Amazon.       # Workflow      **Asset Upload and Registration**      *Step 1* - **Get Upload URL** - This step is creating a temporary upload location to which you will be uploading your asset to in the following step.    `Request (POST) - /assets/upload` (ensure to include the file name in the body including the file extension as documented in the assets/upload section below)      **Response** - `uploadURL` - This is the url location to which you will be uploading your asset in Step 2      *Step 2* - **Upload File** -      `Request (PUT) <uploadURL>`      **Response** - `200 Success` Once your asset is successfully uploaded to the uploadURL, you can proceed to register this asset.      *Step 3* - **Register Asset** -    `Request (POST) - /assets/register`     **Example Request Body**          ```     {            \"url\": \"uploadUrl\"      \"name\": \"assetName\"      \"asinList\": [        \"BXXXXXXXX\"      ],      \"assetType\": \"IMAGE\",      \"assetSubTypeList\": [        \"LOGO\"      ],      \"versionInfo\": {        \"linkedAssetId\": \"xxxx.xxxxxxxxx.xxxxxxx.xxxxxxxxxxxxxxx\",        \"versionNotes\": \"This version is for Team A\"        },      \"tags\": [        \"Awareness\",        \"Spring\"      ]      \"associatedSubEntityList\": [           {            \"brandEntityId\": \"string\" //required for sellers          }       ]    }        ```    Response - `assetId + version` These can be used on GET assets and is the identifier of the asset you uploaded to Creative Assets. 
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export enum APPROVEDADPOLICY {
    Store4VSpotlight = 'STORE4V_SPOTLIGHT',
    StoresModeration = 'STORES_MODERATION',
    Hsa4VProducts = 'HSA4V_PRODUCTS',
    AdPost = 'AD_POST'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum ASSETEXTENSION {
    Jpg = 'JPG',
    Jpeg = 'JPEG',
    Png = 'PNG'
}

/**
 * STORE4V_SPOTLIGHT = Store Spotlight STORES_MODERATION = Stores HSA4V_Products = Sponsored Brands AD_POST = Posts 
 * @export
 * @enum {string}
 */

export enum ASSETSUBTYPE {
    AuthorImage = 'AUTHOR_IMAGE',
    LifestyleImage = 'LIFESTYLE_IMAGE',
    ProductImage = 'PRODUCT_IMAGE',
    OtherImage = 'OTHER_IMAGE',
    Logo = 'LOGO'
}

/**
 * Asset types available are only the following:
 * @export
 * @enum {string}
 */

export enum ASSETTYPE {
    Image = 'IMAGE'
}

/**
 * 
 * @export
 * @interface CaAdPolicyModerationResult
 */
export interface CaAdPolicyModerationResult {
    /**
     * 
     * @type {string}
     * @memberof CaAdPolicyModerationResult
     */
    marketplaceId?: string;
    /**
     * 
     * @type {string}
     * @memberof CaAdPolicyModerationResult
     */
    policyName?: string;
    /**
     * 
     * @type {CaModerationStatus}
     * @memberof CaAdPolicyModerationResult
     */
    moderationStatus?: CaModerationStatus;
    /**
     * 
     * @type {string}
     * @memberof CaAdPolicyModerationResult
     */
    locale?: string;
}
/**
 * 
 * @export
 * @interface CaAsset
 */
export interface CaAsset {
    /**
     * A hashmap of key-value pairs, this is the most accurate way of defining a map in swagger 2.0
     * @type {object}
     * @memberof CaAsset
     */
    moderationPolicyMap?: object;
    /**
     * 
     * @type {string}
     * @memberof CaAsset
     */
    lastUpdatedBy?: string;
    /**
     * 
     * @type {number}
     * @memberof CaAsset
     */
    creationTime?: number;
    /**
     * List of spec programs for which asset spec check is approved
     * @type {Array<CaSpecificationProgram>}
     * @memberof CaAsset
     */
    specCheckApprovedPrograms?: Array<CaSpecificationProgram>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CaAsset
     */
    associatedAccountIds?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CaAsset
     */
    marketplaces?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CaAsset
     */
    version?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CaAsset
     */
    tags?: Array<string>;
    /**
     * 
     * @type {CaAssetType}
     * @memberof CaAsset
     */
    assetType?: CaAssetType;
    /**
     * 
     * @type {CaFileMetadata}
     * @memberof CaAsset
     */
    fileMetadata?: CaFileMetadata;
    /**
     * 
     * @type {Array<string>}
     * @memberof CaAsset
     */
    collections?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CaAsset
     */
    createdBy?: string;
    /**
     * 
     * @type {string}
     * @memberof CaAsset
     */
    assetId?: string;
    /**
     * 
     * @type {CaStorageLocationUrls}
     * @memberof CaAsset
     */
    storageLocationUrls?: CaStorageLocationUrls;
    /**
     * 
     * @type {string}
     * @memberof CaAsset
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof CaAsset
     */
    lastUpdatedTime?: number;
    /**
     * A hashmap of key-value pairs, this is the most accurate way of defining a map in swagger 2.0
     * @type {object}
     * @memberof CaAsset
     */
    associatedContexts?: object;
    /**
     * 
     * @type {Array<CaAssetSubType>}
     * @memberof CaAsset
     */
    assetSubTypes?: Array<CaAssetSubType>;
    /**
     * 
     * @type {CaAssetStatus}
     * @memberof CaAsset
     */
    status?: CaAssetStatus;
}
/**
 * Structure containing processed transcode files for an asset  defaultUrl: This is the location of the original source.  processedFiles: List of processed files with metadata.
 * @export
 * @interface CaAssetFiles
 */
export interface CaAssetFiles {
    /**
     * 
     * @type {Array<CaProcessedFile>}
     * @memberof CaAssetFiles
     */
    processedFiles?: Array<CaProcessedFile>;
    /**
     * 
     * @type {string}
     * @memberof CaAssetFiles
     */
    defaultUrl?: string;
}
/**
 * 
 * @export
 * @interface CaAssetGlobal
 */
export interface CaAssetGlobal {
    /**
     * The asset identifier.
     * @type {string}
     * @memberof CaAssetGlobal
     */
    assetId?: string;
    /**
     * 
     * @type {CaAssetType}
     * @memberof CaAssetGlobal
     */
    assetType?: CaAssetType;
    /**
     * The list of advertiser accounts the asset can be shared with. All the accounts within this list will be able to search this asset. Additional validation of checking that the accounts are associated will be done as part of this call.
     * @type {Array<string>}
     * @memberof CaAssetGlobal
     */
    accountIds?: Array<string>;
    /**
     * The list of marketplace Ids.
     * @type {Array<string>}
     * @memberof CaAssetGlobal
     */
    marketplaceId?: Array<string>;
}
/**
 * 
 * @export
 * @interface CaAssetIdentifier
 */
export interface CaAssetIdentifier {
    /**
     * The asset identifier.
     * @type {string}
     * @memberof CaAssetIdentifier
     */
    assetId?: string;
    /**
     * The version of the asset.
     * @type {string}
     * @memberof CaAssetIdentifier
     */
    version?: string;
}
/**
 * 
 * @export
 * @interface CaAssetSortCriteria
 */
export interface CaAssetSortCriteria {
    /**
     * 
     * @type {string}
     * @memberof CaAssetSortCriteria
     */
    field?: CaAssetSortCriteriaFieldEnum;
    /**
     * 
     * @type {string}
     * @memberof CaAssetSortCriteria
     */
    order?: CaAssetSortCriteriaOrderEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CaAssetSortCriteriaFieldEnum {
    CreatedTime = 'CREATED_TIME',
    Size = 'SIZE',
    Name = 'NAME',
    ImageHeight = 'IMAGE_HEIGHT',
    ImageWidth = 'IMAGE_WIDTH',
    Extension = 'EXTENSION'
}
/**
    * @export
    * @enum {string}
    */
export enum CaAssetSortCriteriaOrderEnum {
    Asc = 'ASC',
    Desc = 'DESC'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum CaAssetStatus {
    Active = 'ACTIVE',
    Archived = 'ARCHIVED'
}

/**
 * 1. For assetType `IMAGE` acceptable assetSubTypes are `LOGO`, `PRODUCT_IMAGE`, `AUTHOR_IMAGE`, `LIFESTYLE_IMAGE`, `OTHER_IMAGE`
 * @export
 * @enum {string}
 */

export enum CaAssetSubType {
    Logo = 'LOGO',
    ProductImage = 'PRODUCT_IMAGE',
    AuthorImage = 'AUTHOR_IMAGE',
    LifestyleImage = 'LIFESTYLE_IMAGE',
    OtherImage = 'OTHER_IMAGE'
}

/**
 * The asset type you are registering [`IMAGE`]
 * @export
 * @enum {string}
 */

export enum CaAssetType {
    Image = 'IMAGE'
}

/**
 * 
 * @export
 * @interface CaAssetVersion
 */
export interface CaAssetVersion {
    /**
     * 
     * @type {string}
     * @memberof CaAssetVersion
     */
    lastUpdatedBy?: string;
    /**
     * 
     * @type {number}
     * @memberof CaAssetVersion
     */
    creationTime?: number;
    /**
     * List of spec programs for which asset spec check is approved
     * @type {Array<CaSpecificationProgram>}
     * @memberof CaAssetVersion
     */
    specCheckApprovedPrograms?: Array<CaSpecificationProgram>;
    /**
     * 
     * @type {CaAssetIdentifier}
     * @memberof CaAssetVersion
     */
    assetIdentifier?: CaAssetIdentifier;
    /**
     * 
     * @type {CaAssetFiles}
     * @memberof CaAssetVersion
     */
    assetFiles?: CaAssetFiles;
    /**
     * Include key-value pairs related to the asset. For DSP use \"dspAdvertiserId\" = \"ID\". Include program as AMAZON_DSP.
     * @type {{ [key: string]: string; }}
     * @memberof CaAssetVersion
     */
    otherMetadata?: { [key: string]: string; };
    /**
     * The URL of the asset.
     * @type {string}
     * @memberof CaAssetVersion
     */
    url?: string;
    /**
     * 
     * @type {Array<CaAssetSubType>}
     * @memberof CaAssetVersion
     */
    assetSubTypes?: Array<CaAssetSubType>;
    /**
     * 
     * @type {CaFileMetadata}
     * @memberof CaAssetVersion
     */
    fileMetadata?: CaFileMetadata;
    /**
     * 
     * @type {string}
     * @memberof CaAssetVersion
     */
    createdBy?: string;
    /**
     * The fileName of the asset.
     * @type {string}
     * @memberof CaAssetVersion
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof CaAssetVersion
     */
    lastUpdatedTime?: number;
    /**
     * The URL of the asset
     * @type {string}
     * @memberof CaAssetVersion
     */
    versionNotes?: string;
    /**
     * 
     * @type {CaAssetStatus}
     * @memberof CaAssetVersion
     */
    assetStatus?: CaAssetStatus;
    /**
     * Specification Checks for all programs
     * @type {Array<CaProgramSpecifications>}
     * @memberof CaAssetVersion
     */
    failedSpecChecks?: Array<CaProgramSpecifications>;
    /**
     * 
     * @type {CaStorageLocationUrls}
     * @memberof CaAssetVersion
     */
    storageLocationUrls?: CaStorageLocationUrls;
    /**
     * 
     * @type {Array<CaModerationContent>}
     * @memberof CaAssetVersion
     */
    moderationContentList?: Array<CaModerationContent>;
}
/**
 * 
 * @export
 * @interface CaAssociatedProgram
 */
export interface CaAssociatedProgram {
    /**
     * Include key-value pairs related to the asset. For DSP use \"dspAdvertiserId\" = \"ID\". Include program as AMAZON_DSP.
     * @type {{ [key: string]: string; }}
     * @memberof CaAssociatedProgram
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {CaProgram}
     * @memberof CaAssociatedProgram
     */
    programName?: CaProgram;
}
/**
 * 
 * @export
 * @interface CaAssociatedSubEntity
 */
export interface CaAssociatedSubEntity {
    /**
     * The entity id of brand, which can be retrieved using GET /brands.
     * @type {string}
     * @memberof CaAssociatedSubEntity
     */
    brandEntityId?: string;
}
/**
 * Structure containing metadata of Video Stream.  profile: This is the profile of the stream.  duration: This is the duration of the stream in secs.  codecName: This tells the codec of the media stream.  codecType: This is the codec type of stream.  bitRate: This tells the bit rate of the stream.  channelLayout: This tells the channel of the stream  sampleRate: This is the sample rate of the stream
 * @export
 * @interface CaAudioStreamMetadata
 */
export interface CaAudioStreamMetadata {
    /**
     * 
     * @type {number}
     * @memberof CaAudioStreamMetadata
     */
    duration?: number;
    /**
     * 
     * @type {string}
     * @memberof CaAudioStreamMetadata
     */
    channelLayout?: string;
    /**
     * 
     * @type {number}
     * @memberof CaAudioStreamMetadata
     */
    bitRate?: number;
    /**
     * 
     * @type {string}
     * @memberof CaAudioStreamMetadata
     */
    profile?: string;
    /**
     * 
     * @type {string}
     * @memberof CaAudioStreamMetadata
     */
    codecName?: string;
    /**
     * 
     * @type {string}
     * @memberof CaAudioStreamMetadata
     */
    codecType?: string;
    /**
     * 
     * @type {number}
     * @memberof CaAudioStreamMetadata
     */
    sampleRate?: number;
}
/**
 * 400 bad request
 * @export
 * @interface CaBadRequest
 */
export interface CaBadRequest {
    /**
     * 
     * @type {string}
     * @memberof CaBadRequest
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface CaFileMetadata
 */
export interface CaFileMetadata {
    /**
     * 
     * @type {number}
     * @memberof CaFileMetadata
     */
    duration?: number;
    /**
     * The extension of the file name.
     * @type {string}
     * @memberof CaFileMetadata
     */
    extension?: string;
    /**
     * The asset size in bytes.
     * @type {number}
     * @memberof CaFileMetadata
     */
    fileSize?: number;
    /**
     * 
     * @type {number}
     * @memberof CaFileMetadata
     */
    resolutionHeight?: number;
    /**
     * The width of the asset in pixels.
     * @type {number}
     * @memberof CaFileMetadata
     */
    width?: number;
    /**
     * The aspect ration of the asset.
     * @type {string}
     * @memberof CaFileMetadata
     */
    aspectRatio?: string;
    /**
     * 
     * @type {number}
     * @memberof CaFileMetadata
     */
    resolutionWidth?: number;
    /**
     * The content type of the asset.
     * @type {string}
     * @memberof CaFileMetadata
     */
    contentType?: CaFileMetadataContentTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CaFileMetadata
     */
    audioSampleRate?: number;
    /**
     * The height of the asset in pixels.
     * @type {number}
     * @memberof CaFileMetadata
     */
    height?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum CaFileMetadataContentTypeEnum {
    Jpeg = 'jpeg',
    Jpg = 'jpg',
    Png = 'png',
    Mp4 = 'mp4',
    ImageJpg = 'image/jpg',
    ImageJpeg = 'image/jpeg',
    ImagePng = 'image/png'
}

/**
 * **Optional** this is used to filter results, we support two types of filters, valueFilter and rangeFilter
 * @export
 * @interface CaFilterCriteria
 */
export interface CaFilterCriteria {
    /**
     * 
     * @type {Array<CaValueFilter>}
     * @memberof CaFilterCriteria
     */
    valueFilters?: Array<CaValueFilter>;
    /**
     * 
     * @type {Array<CaRangeFilter>}
     * @memberof CaFilterCriteria
     */
    rangeFilters?: Array<CaRangeFilter>;
}
/**
 * 403 forbidden request
 * @export
 * @interface CaForbiddenRequest
 */
export interface CaForbiddenRequest {
    /**
     * 
     * @type {string}
     * @memberof CaForbiddenRequest
     */
    message?: string;
}
/**
 * 500 internal server error
 * @export
 * @interface CaInternalError
 */
export interface CaInternalError {
    /**
     * 
     * @type {string}
     * @memberof CaInternalError
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface CaModerationContent
 */
export interface CaModerationContent {
    /**
     * 
     * @type {CaAssetSubType}
     * @memberof CaModerationContent
     */
    assetSubType?: CaAssetSubType;
    /**
     * 
     * @type {Array<CaAdPolicyModerationResult>}
     * @memberof CaModerationContent
     */
    adPolicyModerationResultList?: Array<CaAdPolicyModerationResult>;
    /**
     * 
     * @type {CaModerationContentStatus}
     * @memberof CaModerationContent
     */
    moderationContentStatus?: CaModerationContentStatus;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum CaModerationContentStatus {
    InProgress = 'IN_PROGRESS',
    Completed = 'COMPLETED',
    Failed = 'FAILED'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum CaModerationStatus {
    Rejected = 'REJECTED',
    Approved = 'APPROVED',
    Pending = 'PENDING'
}

/**
 * used for pagination  when searching for the first page, no need to put anything, otherwise, use the token returned from previous search call 
 * @export
 * @interface CaPageCriteria
 */
export interface CaPageCriteria {
    /**
     * 
     * @type {CaPageIdentifier}
     * @memberof CaPageCriteria
     */
    identifier?: CaPageIdentifier;
    /**
     * 
     * @type {number}
     * @memberof CaPageCriteria
     */
    size?: number;
}
/**
 * 
 * @export
 * @interface CaPageIdentifier
 */
export interface CaPageIdentifier {
    /**
     * 
     * @type {number}
     * @memberof CaPageIdentifier
     */
    pageNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof CaPageIdentifier
     */
    token?: string;
}
/**
 * Structure containing url, program, profile and metadata of processed output  program: This is the program for which this transcoding is done.  profile: This is the profile/outformat of the processed file.  url: This is the location of the processed file.  fileMetadata: This contains the metadata of file.
 * @export
 * @interface CaProcessedFile
 */
export interface CaProcessedFile {
    /**
     * 
     * @type {CaProcessedFileMetadata}
     * @memberof CaProcessedFile
     */
    fileMetadata?: CaProcessedFileMetadata;
    /**
     * 
     * @type {CaProcessedUrlType}
     * @memberof CaProcessedFile
     */
    profile?: CaProcessedUrlType;
    /**
     * 
     * @type {Array<CaProgram>}
     * @memberof CaProcessedFile
     */
    programs?: Array<CaProgram>;
    /**
     * 
     * @type {string}
     * @memberof CaProcessedFile
     */
    url?: string;
}
/**
 * Structure containing metadata of processed file.  contentHash: This is the location of the original source.  contentType: This is the location of the original source.  videoStreams: This contains the metadata of Video streams.  audioStreams: This contains the metadata of Audio streams.
 * @export
 * @interface CaProcessedFileMetadata
 */
export interface CaProcessedFileMetadata {
    /**
     * 
     * @type {Array<CaVideoStreamMetadata>}
     * @memberof CaProcessedFileMetadata
     */
    videoStreams?: Array<CaVideoStreamMetadata>;
    /**
     * 
     * @type {Array<CaAudioStreamMetadata>}
     * @memberof CaProcessedFileMetadata
     */
    audioStreams?: Array<CaAudioStreamMetadata>;
    /**
     * 
     * @type {string}
     * @memberof CaProcessedFileMetadata
     */
    contentType?: string;
    /**
     * 
     * @type {string}
     * @memberof CaProcessedFileMetadata
     */
    contentHash?: string;
}
/**
 * Enum containing different type of processed urls  1. `MODERATION`: This is an internal url that will be used to moderate the asset.  2. `VIDEO_DEFAULT_OPTIMIZED`: This is the default processed url for video asset type for optimized rendering. 3. This is the url for image asset type to support thumbnail rendering of max side 500px.  4. `PRODUCT_VIDEO_OPTIMIZED`: This is the processed url for video that can be used for product. 5. `VIDEO_TILE_FULL_WIDTH`: This is the processed url for video that can be used for video tile full width. 6. `VIDEO_TILE_LARGE`: This is the processed url for video that can be used for video tile large. 7. `VIDEO_TILE_MEDIUM`: This is the processed url for video that can be used for video tile medium. 8. `BACKGROUND_VIDEO_TILE_FULL_WIDTH`: This is the processed url for video that can be used for background video tile full width. 9. `BACKGROUND_VIDEO_TILE_LARGE`: This is the processed url for video that can be used for background video tile large. 10. `BACKGROUND_VIDEO_TILE_MEDIUM`: This is the processed url for video that can be used for background video tile medium. 11. `INTRO_SPLASH`: This is the processed url for video that can be used for intro splash.
 * @export
 * @enum {string}
 */

export enum CaProcessedUrlType {
    Moderation = 'MODERATION',
    VideoDefaultOptimized = 'VIDEO_DEFAULT_OPTIMIZED',
    ImageThumbnail500 = 'IMAGE_THUMBNAIL_500',
    ProductVideoOptimized = 'PRODUCT_VIDEO_OPTIMIZED',
    VideoTileFullWidth = 'VIDEO_TILE_FULL_WIDTH',
    VideoTileLarge = 'VIDEO_TILE_LARGE',
    VideoTileMedium = 'VIDEO_TILE_MEDIUM',
    BackgroundVideoTileFullWidth = 'BACKGROUND_VIDEO_TILE_FULL_WIDTH',
    BackgroundVideoTileLarge = 'BACKGROUND_VIDEO_TILE_LARGE',
    BackgroundVideoTileMedium = 'BACKGROUND_VIDEO_TILE_MEDIUM',
    IntroSplash = 'INTRO_SPLASH'
}

/**
 * Use this field to specify which program you are uploading an asset for. Currently, the accepted value here on registration is to associate an asset with a DSP advertiser.
 * @export
 * @enum {string}
 */

export enum CaProgram {
    AmazonDsp = 'AMAZON_DSP'
}

/**
 * Specification Check for program, This contains program name and specifications
 * @export
 * @interface CaProgramSpecifications
 */
export interface CaProgramSpecifications {
    /**
     * 
     * @type {CaSpecificationProgram}
     * @memberof CaProgramSpecifications
     */
    specProgramName?: CaSpecificationProgram;
    /**
     * List of specifications
     * @type {Array<CaSpecification>}
     * @memberof CaProgramSpecifications
     */
    specifications?: Array<CaSpecification>;
}
/**
 * 
 * @export
 * @interface CaRange
 */
export interface CaRange {
    /**
     * 
     * @type {string}
     * @memberof CaRange
     */
    start?: string;
    /**
     * 
     * @type {string}
     * @memberof CaRange
     */
    end?: string;
}
/**
 * Filter assets which have certain ranges of asset attributes.  For example, filter assets which have file size in the range of [10,20] or [40,50]. 
 * @export
 * @interface CaRangeFilter
 */
export interface CaRangeFilter {
    /**
     * 
     * @type {CaValueRangeFilterOptions}
     * @memberof CaRangeFilter
     */
    rangeField?: CaValueRangeFilterOptions;
    /**
     * 
     * @type {Array<CaRange>}
     * @memberof CaRangeFilter
     */
    range?: Array<CaRange>;
}
/**
 * This is used on registration of an asset, to associate DSP assets to a specific advertiser. This is **required** for assets being uploaded for use in DSP.
 * @export
 * @interface CaRegistrationContext
 */
export interface CaRegistrationContext {
    /**
     * 
     * @type {Array<CaAssociatedProgram>}
     * @memberof CaRegistrationContext
     */
    associatedPrograms?: Array<CaAssociatedProgram>;
}
/**
 * 404 requested resource not found
 * @export
 * @interface CaResourceNotFound
 */
export interface CaResourceNotFound {
    /**
     * 
     * @type {string}
     * @memberof CaResourceNotFound
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface CaSearchRequestCommon
 */
export interface CaSearchRequestCommon {
    /**
     * The text used for searching assets, it matches asset name, asset name prefix, tags and ASINs associated with the assets
     * @type {string}
     * @memberof CaSearchRequestCommon
     */
    text?: string;
    /**
     * 
     * @type {CaFilterCriteria}
     * @memberof CaSearchRequestCommon
     */
    filterCriteria?: CaFilterCriteria;
    /**
     * 
     * @type {CaAssetSortCriteria}
     * @memberof CaSearchRequestCommon
     */
    sortCriteria?: CaAssetSortCriteria;
    /**
     * 
     * @type {CaPageCriteria}
     * @memberof CaSearchRequestCommon
     */
    pageCriteria?: CaPageCriteria;
}
/**
 * Structure containing specification  stringId: This is the translated string Id, client will be retrieving the translation corresponding to this string.  failureReason: This specifies the failure reason of specification.   arguments: Arguments required for translation string.  isPassed: Whether spec got passed or failed.  actualValue: If spec got failed then this attribute represent the actual value of the spec parameter in the file.
 * @export
 * @interface CaSpecification
 */
export interface CaSpecification {
    /**
     * 
     * @type {string}
     * @memberof CaSpecification
     */
    stringId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CaSpecification
     */
    isPassed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CaSpecification
     */
    failureReason?: string;
    /**
     * 
     * @type {string}
     * @memberof CaSpecification
     */
    actualValue?: string;
    /**
     * List of arguments for translation string
     * @type {Array<string>}
     * @memberof CaSpecification
     */
    arguments?: Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum CaSpecificationProgram {
    SponsoredBrandsVideo = 'SPONSORED_BRANDS_VIDEO',
    StoresVideoTileFullWidth = 'STORES_VIDEO_TILE_FULL_WIDTH',
    StoresVideoTileLarge = 'STORES_VIDEO_TILE_LARGE',
    StoresVideoTileMedium = 'STORES_VIDEO_TILE_MEDIUM',
    StoresBackgroundVideoTileFullWidth = 'STORES_BACKGROUND_VIDEO_TILE_FULL_WIDTH',
    StoresBackgroundVideoTileLarge = 'STORES_BACKGROUND_VIDEO_TILE_LARGE',
    StoresBackgroundVideoTileMedium = 'STORES_BACKGROUND_VIDEO_TILE_MEDIUM',
    StoresIntroSplash = 'STORES_INTRO_SPLASH',
    DemandSidePlatformOtt = 'DEMAND_SIDE_PLATFORM_OTT',
    DemandSidePlatformOlv = 'DEMAND_SIDE_PLATFORM_OLV'
}

/**
 * 
 * @export
 * @interface CaStorageLocationUrls
 */
export interface CaStorageLocationUrls {
    /**
     * Map containing processed urls of the asset. Key is the processed type and value is the url
     * @type {{ [key: string]: object; }}
     * @memberof CaStorageLocationUrls
     */
    processedUrls?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof CaStorageLocationUrls
     */
    defaultUrl?: string;
}
/**
 * 401 unauthorized request
 * @export
 * @interface CaUnauthorizedRequest
 */
export interface CaUnauthorizedRequest {
    /**
     * 
     * @type {string}
     * @memberof CaUnauthorizedRequest
     */
    message?: string;
}
/**
 * Filter for certain values of asset attributes
 * @export
 * @interface CaValueFilter
 */
export interface CaValueFilter {
    /**
     * 
     * @type {Array<string>}
     * @memberof CaValueFilter
     */
    values?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CaValueFilter
     */
    valueField?: CaValueFilterValueFieldEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CaValueFilterValueFieldEnum {
    Tag = 'TAG',
    Asin = 'ASIN',
    CampaignName = 'CAMPAIGN_NAME',
    CampaignId = 'CAMPAIGN_ID',
    Program = 'PROGRAM',
    AssetType = 'ASSET_TYPE',
    AssetSubType = 'ASSET_SUB_TYPE',
    ApprovedAdPolicy = 'APPROVED_AD_POLICY',
    AssetExtension = 'ASSET_EXTENSION'
}

/**
 * 
 * @export
 * @interface CaValueFilterOptions
 */
export interface CaValueFilterOptions {
}
/**
 * 
 * @export
 * @interface CaValueRangeFilterOptions
 */
export interface CaValueRangeFilterOptions {
}
/**
 * 
 * @export
 * @interface CaVersionInfo
 */
export interface CaVersionInfo {
    /**
     * The registering asset will be created as a new version of this linkedAssetId.
     * @type {string}
     * @memberof CaVersionInfo
     */
    linkedAssetId?: string;
    /**
     * The version notes that client can associate to the asset.Versioning enables users to update an old asset, so that you can ensure the latest asset is being used. You can upload a new version of an existing asset along with version notes. Any tags/ASINs from previous version, will be retained on the new version too.
     * @type {string}
     * @memberof CaVersionInfo
     */
    versionNotes?: string;
}
/**
 * Structure containing metadata of Video Stream.  profile: This is the profile of the stream.  width: This is the resolution width of stream.  height: This is the resolution height of stream.  duration: This is the duration of the stream in secs.  codecName: This tells the codec of the media stream.  codecType: This is the codec type of stream.  displayAspectRatio: This tells the aspect ratio of the stream.  bitRate: This tells the bit rate of the stream.  frameRate: This is the frame rate of video stream per sec.
 * @export
 * @interface CaVideoStreamMetadata
 */
export interface CaVideoStreamMetadata {
    /**
     * 
     * @type {number}
     * @memberof CaVideoStreamMetadata
     */
    duration?: number;
    /**
     * 
     * @type {number}
     * @memberof CaVideoStreamMetadata
     */
    frameRate?: number;
    /**
     * 
     * @type {number}
     * @memberof CaVideoStreamMetadata
     */
    bitRate?: number;
    /**
     * 
     * @type {string}
     * @memberof CaVideoStreamMetadata
     */
    profile?: string;
    /**
     * 
     * @type {number}
     * @memberof CaVideoStreamMetadata
     */
    width?: number;
    /**
     * 
     * @type {string}
     * @memberof CaVideoStreamMetadata
     */
    codecName?: string;
    /**
     * 
     * @type {string}
     * @memberof CaVideoStreamMetadata
     */
    codecType?: string;
    /**
     * 
     * @type {number}
     * @memberof CaVideoStreamMetadata
     */
    height?: number;
    /**
     * 
     * @type {string}
     * @memberof CaVideoStreamMetadata
     */
    displayAspectRatio?: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * The url to upload the asset. The url expires in 15 minutes.
     * @type {string}
     * @memberof InlineObject
     */
    url?: string;
    /**
     * The name to be given to the asset being registered.
     * @type {string}
     * @memberof InlineObject
     */
    name?: string;
    /**
     * Tagging assets with ASIN, promotes asset discoverability downstream. If ASIN is provided at the time of upload/during asset registration, it is applied as a tag on that asset. This allows for that asset to be searchable using that ASIN#. For e.g., An advertiser may want to search for assets tagged with ASIN BC10001, so they can create a store spotlight ad with product images for that ASIN.
     * @type {Array<string>}
     * @memberof InlineObject
     */
    asinList?: Array<string>;
    /**
     * 
     * @type {CaAssetType}
     * @memberof InlineObject
     */
    assetType?: CaAssetType;
    /**
     * 
     * @type {Array<CaAssetSubType>}
     * @memberof InlineObject
     */
    assetSubTypeList?: Array<CaAssetSubType>;
    /**
     * 
     * @type {CaVersionInfo}
     * @memberof InlineObject
     */
    versionInfo?: CaVersionInfo;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineObject
     */
    tags?: Array<string>;
    /**
     * 
     * @type {CaRegistrationContext}
     * @memberof InlineObject
     */
    registrationContext?: CaRegistrationContext;
    /**
     * This field is required for sellers, but not required for vendors. The brandEntityId is required for sellers uploading assets for use in Sponsored Brands. As a best practice, ensure to include brandEntityId when uploading assets for sellers.
     * @type {Array<CaAssociatedSubEntity>}
     * @memberof InlineObject
     */
    associatedSubEntityList?: Array<CaAssociatedSubEntity>;
    /**
     * Select true if you want to set an asset to a specific assetSubType, if this is not included the system may reclassify your asset based on specifications.
     * @type {boolean}
     * @memberof InlineObject
     */
    skipAssetSubTypesDetection?: boolean;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * The fileName of the asset.
     * @type {string}
     * @memberof InlineObject1
     */
    fileName?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * The asset version list.
     * @type {Array<CaAssetVersion>}
     * @memberof InlineResponse200
     */
    assetVersionList?: Array<CaAssetVersion>;
    /**
     * 
     * @type {CaAssetGlobal}
     * @memberof InlineResponse200
     */
    assetGlobal?: CaAssetGlobal;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * The asset identifier.
     * @type {string}
     * @memberof InlineResponse2001
     */
    assetId?: string;
    /**
     * The version of the asset.
     * @type {string}
     * @memberof InlineResponse2001
     */
    versionId?: string;
    /**
     * Specification Checks for all programs
     * @type {Array<CaProgramSpecifications>}
     * @memberof InlineResponse2001
     */
    failedSpecChecks?: Array<CaProgramSpecifications>;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * The url to upload the asset. The url expires in 15 minutes.
     * @type {string}
     * @memberof InlineResponse2002
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003
     */
    totalRecords?: number;
    /**
     * 
     * @type {Array<CaAsset>}
     * @memberof InlineResponse2003
     */
    assetList?: Array<CaAsset>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003
     */
    token?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum PROGRAM {
    APlus = 'A_PLUS'
}


/**
 * CreativeAssetsApi - axios parameter creator
 * @export
 */
export const CreativeAssetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves an asset along with the metadata
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} assetId The assetId
         * @param {string} [version] The versionId of the asset, if not included all versions will return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsset: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, assetId: string, version?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAsset', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAsset', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('getAsset', 'assetId', assetId)
            const localVarPath = `/assets/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (assetId !== undefined) {
                localVarQueryParameter['assetId'] = assetId;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an ephemeral resource (upload location) to upload Assets to Creative Assets tool. The upload location is short lived and expires in 15 minutes.The upload location only supports PUT HTTP Method to upload the asset content. If the upload location expires, API user will get `403` Forbidden response. * All ad specs - sizes and policies can be found [here](https://advertising.amazon.com/resources/ad-specs/?ref_=a20m_us_hnav_spcs)  * Program specific links 1. **Stores** - [here](https://advertising.amazon.com/resources/ad-specs/stores?ref_=a20m_us_spcs_stcrgd) 2. **SB/SBV/sponsored ads** - [here](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies?ref_=a20m_us_spcs_sbv_spcs_spadcap)
         * @summary Creates an upload location to upload an asset.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadLocation: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject1: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getUploadLocation', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getUploadLocation', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'inlineObject1' is not null or undefined
            assertParamExists('getUploadLocation', 'inlineObject1', inlineObject1)
            const localVarPath = `/assets/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The API should be called once the asset is uploaded to the location provided by the /asset/upload API endpoint.
         * @summary Registers an uploaded asset with the creative assets library with optional contextual and tagging information.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAsset: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('registerAsset', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('registerAsset', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'inlineObject' is not null or undefined
            assertParamExists('registerAsset', 'inlineObject', inlineObject)
            const localVarPath = `/assets/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search the creative asset library.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {CaSearchRequestCommon} caSearchRequestCommon text - optional, this field matches asset name, asset name prefix, tags and ASINs associated with the assets  filterCriteria - optional, this is used to filter results  sortCriteria - optional, this is used to get sorted results  pageCriteria - optional, this is used for pagination 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAssets: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, caSearchRequestCommon: CaSearchRequestCommon, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('searchAssets', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('searchAssets', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'caSearchRequestCommon' is not null or undefined
            assertParamExists('searchAssets', 'caSearchRequestCommon', caSearchRequestCommon)
            const localVarPath = `/assets/search/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(caSearchRequestCommon, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreativeAssetsApi - functional programming interface
 * @export
 */
export const CreativeAssetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreativeAssetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves an asset along with the metadata
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} assetId The assetId
         * @param {string} [version] The versionId of the asset, if not included all versions will return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAsset(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, assetId: string, version?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAsset(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, assetId, version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates an ephemeral resource (upload location) to upload Assets to Creative Assets tool. The upload location is short lived and expires in 15 minutes.The upload location only supports PUT HTTP Method to upload the asset content. If the upload location expires, API user will get `403` Forbidden response. * All ad specs - sizes and policies can be found [here](https://advertising.amazon.com/resources/ad-specs/?ref_=a20m_us_hnav_spcs)  * Program specific links 1. **Stores** - [here](https://advertising.amazon.com/resources/ad-specs/stores?ref_=a20m_us_spcs_stcrgd) 2. **SB/SBV/sponsored ads** - [here](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies?ref_=a20m_us_spcs_sbv_spcs_spadcap)
         * @summary Creates an upload location to upload an asset.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUploadLocation(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject1: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUploadLocation(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The API should be called once the asset is uploaded to the location provided by the /asset/upload API endpoint.
         * @summary Registers an uploaded asset with the creative assets library with optional contextual and tagging information.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerAsset(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerAsset(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search the creative asset library.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {CaSearchRequestCommon} caSearchRequestCommon text - optional, this field matches asset name, asset name prefix, tags and ASINs associated with the assets  filterCriteria - optional, this is used to filter results  sortCriteria - optional, this is used to get sorted results  pageCriteria - optional, this is used for pagination 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAssets(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, caSearchRequestCommon: CaSearchRequestCommon, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchAssets(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, caSearchRequestCommon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreativeAssetsApi - factory interface
 * @export
 */
export const CreativeAssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreativeAssetsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves an asset along with the metadata
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} assetId The assetId
         * @param {string} [version] The versionId of the asset, if not included all versions will return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsset(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, assetId: string, version?: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getAsset(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, assetId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an ephemeral resource (upload location) to upload Assets to Creative Assets tool. The upload location is short lived and expires in 15 minutes.The upload location only supports PUT HTTP Method to upload the asset content. If the upload location expires, API user will get `403` Forbidden response. * All ad specs - sizes and policies can be found [here](https://advertising.amazon.com/resources/ad-specs/?ref_=a20m_us_hnav_spcs)  * Program specific links 1. **Stores** - [here](https://advertising.amazon.com/resources/ad-specs/stores?ref_=a20m_us_spcs_stcrgd) 2. **SB/SBV/sponsored ads** - [here](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies?ref_=a20m_us_spcs_sbv_spcs_spadcap)
         * @summary Creates an upload location to upload an asset.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadLocation(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject1: InlineObject1, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getUploadLocation(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * The API should be called once the asset is uploaded to the location provided by the /asset/upload API endpoint.
         * @summary Registers an uploaded asset with the creative assets library with optional contextual and tagging information.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAsset(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject: InlineObject, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.registerAsset(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search the creative asset library.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {CaSearchRequestCommon} caSearchRequestCommon text - optional, this field matches asset name, asset name prefix, tags and ASINs associated with the assets  filterCriteria - optional, this is used to filter results  sortCriteria - optional, this is used to get sorted results  pageCriteria - optional, this is used for pagination 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAssets(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, caSearchRequestCommon: CaSearchRequestCommon, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.searchAssets(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, caSearchRequestCommon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAsset operation in CreativeAssetsApi.
 * @export
 * @interface CreativeAssetsApiGetAssetRequest
 */
export interface CreativeAssetsApiGetAssetRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CreativeAssetsApiGetAsset
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CreativeAssetsApiGetAsset
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The assetId
     * @type {string}
     * @memberof CreativeAssetsApiGetAsset
     */
    readonly assetId: string

    /**
     * The versionId of the asset, if not included all versions will return.
     * @type {string}
     * @memberof CreativeAssetsApiGetAsset
     */
    readonly version?: string
}

/**
 * Request parameters for getUploadLocation operation in CreativeAssetsApi.
 * @export
 * @interface CreativeAssetsApiGetUploadLocationRequest
 */
export interface CreativeAssetsApiGetUploadLocationRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CreativeAssetsApiGetUploadLocation
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CreativeAssetsApiGetUploadLocation
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {InlineObject1}
     * @memberof CreativeAssetsApiGetUploadLocation
     */
    readonly inlineObject1: InlineObject1
}

/**
 * Request parameters for registerAsset operation in CreativeAssetsApi.
 * @export
 * @interface CreativeAssetsApiRegisterAssetRequest
 */
export interface CreativeAssetsApiRegisterAssetRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CreativeAssetsApiRegisterAsset
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CreativeAssetsApiRegisterAsset
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {InlineObject}
     * @memberof CreativeAssetsApiRegisterAsset
     */
    readonly inlineObject: InlineObject
}

/**
 * Request parameters for searchAssets operation in CreativeAssetsApi.
 * @export
 * @interface CreativeAssetsApiSearchAssetsRequest
 */
export interface CreativeAssetsApiSearchAssetsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CreativeAssetsApiSearchAssets
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CreativeAssetsApiSearchAssets
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * text - optional, this field matches asset name, asset name prefix, tags and ASINs associated with the assets  filterCriteria - optional, this is used to filter results  sortCriteria - optional, this is used to get sorted results  pageCriteria - optional, this is used for pagination 
     * @type {CaSearchRequestCommon}
     * @memberof CreativeAssetsApiSearchAssets
     */
    readonly caSearchRequestCommon: CaSearchRequestCommon
}

/**
 * CreativeAssetsApi - object-oriented interface
 * @export
 * @class CreativeAssetsApi
 * @extends {BaseAPI}
 */
export class CreativeAssetsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves an asset along with the metadata
     * @param {CreativeAssetsApiGetAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativeAssetsApi
     */
    public getAsset(requestParameters: CreativeAssetsApiGetAssetRequest, options?: any) {
        return CreativeAssetsApiFp(this.configuration).getAsset(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.assetId, requestParameters.version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates an ephemeral resource (upload location) to upload Assets to Creative Assets tool. The upload location is short lived and expires in 15 minutes.The upload location only supports PUT HTTP Method to upload the asset content. If the upload location expires, API user will get `403` Forbidden response. * All ad specs - sizes and policies can be found [here](https://advertising.amazon.com/resources/ad-specs/?ref_=a20m_us_hnav_spcs)  * Program specific links 1. **Stores** - [here](https://advertising.amazon.com/resources/ad-specs/stores?ref_=a20m_us_spcs_stcrgd) 2. **SB/SBV/sponsored ads** - [here](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies?ref_=a20m_us_spcs_sbv_spcs_spadcap)
     * @summary Creates an upload location to upload an asset.
     * @param {CreativeAssetsApiGetUploadLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativeAssetsApi
     */
    public getUploadLocation(requestParameters: CreativeAssetsApiGetUploadLocationRequest, options?: any) {
        return CreativeAssetsApiFp(this.configuration).getUploadLocation(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The API should be called once the asset is uploaded to the location provided by the /asset/upload API endpoint.
     * @summary Registers an uploaded asset with the creative assets library with optional contextual and tagging information.
     * @param {CreativeAssetsApiRegisterAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativeAssetsApi
     */
    public registerAsset(requestParameters: CreativeAssetsApiRegisterAssetRequest, options?: any) {
        return CreativeAssetsApiFp(this.configuration).registerAsset(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search the creative asset library.
     * @param {CreativeAssetsApiSearchAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativeAssetsApi
     */
    public searchAssets(requestParameters: CreativeAssetsApiSearchAssetsRequest, options?: any) {
        return CreativeAssetsApiFp(this.configuration).searchAssets(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.caSearchRequestCommon, options).then((request) => request(this.axios, this.basePath));
    }
}


