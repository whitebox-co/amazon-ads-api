/* tslint:disable */
/* eslint-disable */
/**
 * Amazon Ads API - Sponsored Products
 * Use the Amazon Ads API for Sponsored Products for campaign, ad group, keyword, negative keyword, and product ad management operations. For more information about Sponsored Products, see the [Sponsored Products Support Center](https://advertising.amazon.com/help?entityId=ENTITY3CWETCZD9HEG2#GWGFKPEWVWG2CLUJ). For onboarding information, see the [account setup](setting-up/account-setup) topic.<br/><br/> 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AdGroup
 */
export interface AdGroup {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroup
     */
    adGroupId?: number;
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof AdGroup
     */
    name?: string;
    /**
     * The identifier of the campaign that the ad group is associated with.
     * @type {number}
     * @memberof AdGroup
     */
    campaignId?: number;
    /**
     * The bid value used when no bid is specified for keywords in the ad group.
     * @type {number}
     * @memberof AdGroup
     */
    defaultBid?: number;
    /**
     * 
     * @type {State}
     * @memberof AdGroup
     */
    state?: State;
}
/**
 * 
 * @export
 * @interface AdGroupBidRecommendationsResponse
 */
export interface AdGroupBidRecommendationsResponse {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroupBidRecommendationsResponse
     */
    adGroupId?: number;
    /**
     * 
     * @type {SuggestedBid}
     * @memberof AdGroupBidRecommendationsResponse
     */
    suggestedBid?: SuggestedBid;
}
/**
 * 
 * @export
 * @interface AdGroupEx
 */
export interface AdGroupEx {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroupEx
     */
    adGroupId?: number;
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof AdGroupEx
     */
    name?: string;
    /**
     * The identifier of the campaign that the ad group is associated with.
     * @type {number}
     * @memberof AdGroupEx
     */
    campaignId?: number;
    /**
     * The bid value used when no bid is specified for keywords in the ad group.
     * @type {number}
     * @memberof AdGroupEx
     */
    defaultBid?: number;
    /**
     * 
     * @type {State}
     * @memberof AdGroupEx
     */
    state?: State;
    /**
     * The creation date of the ad group in epoch time.
     * @type {number}
     * @memberof AdGroupEx
     */
    creationDate?: number;
    /**
     * The date that any value associated with the ad group was last changed, in epoch time.
     * @type {number}
     * @memberof AdGroupEx
     */
    lastUpdatedDate?: number;
    /**
     * The computed status. See developer notes for more information.
     * @type {string}
     * @memberof AdGroupEx
     */
    servingStatus?: AdGroupExServingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AdGroupExServingStatusEnum {
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupStatusEnabled = 'AD_GROUP_STATUS_ENABLED',
    AdPolicingSuspended = 'AD_POLICING_SUSPENDED',
    AdGroupIncomplete = 'AD_GROUP_INCOMPLETE',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    CampaignIncomplete = 'CAMPAIGN_INCOMPLETE',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    PendingStartDate = 'PENDING_START_DATE'
}

/**
 * 
 * @export
 * @interface AdGroupResponse
 */
export interface AdGroupResponse {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroupResponse
     */
    adGroupId?: number;
    /**
     * An enumerated success or error code for machine use.
     * @type {string}
     * @memberof AdGroupResponse
     */
    code?: string;
    /**
     * A human-readable description of the code.
     * @type {string}
     * @memberof AdGroupResponse
     */
    details?: string;
    /**
     * A human-readable description of the code.
     * @type {string}
     * @memberof AdGroupResponse
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface AdGroupSuggestedKeywordsResponse
 */
export interface AdGroupSuggestedKeywordsResponse {
    /**
     * The ad group identifier.
     * @type {number}
     * @memberof AdGroupSuggestedKeywordsResponse
     */
    adGroupId?: number;
    /**
     * An array of suggested keywords.
     * @type {Array<string>}
     * @memberof AdGroupSuggestedKeywordsResponse
     */
    suggestededKeywords?: Array<string>;
}
/**
 * 
 * @export
 * @interface AdGroupSuggestedKeywordsResponseEx
 */
export interface AdGroupSuggestedKeywordsResponseEx {
    /**
     * The ad group identifier.
     * @type {number}
     * @memberof AdGroupSuggestedKeywordsResponseEx
     */
    adGroupId?: number;
    /**
     * The campaign identifier.
     * @type {number}
     * @memberof AdGroupSuggestedKeywordsResponseEx
     */
    campaignId?: number;
    /**
     * The suggested keyword.
     * @type {string}
     * @memberof AdGroupSuggestedKeywordsResponseEx
     */
    keywordText?: string;
    /**
     * 
     * @type {MatchType}
     * @memberof AdGroupSuggestedKeywordsResponseEx
     */
    matchType?: MatchType;
    /**
     * The state of the ad for which the keyword is suggested.
     * @type {string}
     * @memberof AdGroupSuggestedKeywordsResponseEx
     */
    state?: AdGroupSuggestedKeywordsResponseExStateEnum;
    /**
     * The suggested bid for the suggested keyword. Note that this field will not be included in the response if the `suggestBids` query parameter is set to `no` in the request.
     * @type {number}
     * @memberof AdGroupSuggestedKeywordsResponseEx
     */
    bid?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum AdGroupSuggestedKeywordsResponseExStateEnum {
    Enabled = 'enabled',
    Paused = 'paused'
}

/**
 * 
 * @export
 * @interface BidRecommendationRequest
 */
export interface BidRecommendationRequest {
    /**
     * The identifier of the ad group that is associated with the targeting expression used to generate the bid recommendation.
     * @type {number}
     * @memberof BidRecommendationRequest
     */
    adGroupId?: number;
    /**
     * 
     * @type {TargetingExpression}
     * @memberof BidRecommendationRequest
     */
    expressions?: TargetingExpression;
}
/**
 * 
 * @export
 * @interface BidRecommendationsForTargetsResponse
 */
export interface BidRecommendationsForTargetsResponse {
    /**
     * The identifier of the ad group that the recommended bid are associated with.
     * @type {number}
     * @memberof BidRecommendationsForTargetsResponse
     */
    adGroupId?: number;
    /**
     * An array of recommendation objects.
     * @type {Array<BidRecommendationsForTargetsResponseRecommendations>}
     * @memberof BidRecommendationsForTargetsResponse
     */
    recommendations?: Array<BidRecommendationsForTargetsResponseRecommendations>;
}
/**
 * 
 * @export
 * @interface BidRecommendationsForTargetsResponseRecommendations
 */
export interface BidRecommendationsForTargetsResponseRecommendations {
    /**
     * 
     * @type {SuggestedBid}
     * @memberof BidRecommendationsForTargetsResponseRecommendations
     */
    suggestedBid?: SuggestedBid;
    /**
     * 
     * @type {TargetingExpression}
     * @memberof BidRecommendationsForTargetsResponseRecommendations
     */
    expressions?: TargetingExpression;
}
/**
 * 
 * @export
 * @interface BidRecommendationsResponse
 */
export interface BidRecommendationsResponse {
    /**
     * The identifier of the ad group that the recommendations are associated with.
     * @type {string}
     * @memberof BidRecommendationsResponse
     */
    adGroupId?: string;
    /**
     * An array of bid recommendation objects.
     * @type {Array<object>}
     * @memberof BidRecommendationsResponse
     */
    recommendations?: Array<object>;
}
/**
 * Specifies bidding controls.
 * @export
 * @interface Bidding
 */
export interface Bidding {
    /**
     * The bidding strategy. | Value | Strategy name | Description | |----------------|---------------|-------------| | `legacyForSales` | Dynamic bids - down only | Lowers your bids in real time when your ad may be less likely to convert to a sale. Campaigns created before the release of the bidding controls feature used this setting by default. | | `autoForSales` | Dynamic bids - up and down | Increases or decreases your bids in real time by a maximum of 100%. With this setting bids increase when your ad is more likely to convert to a sale, and bids decrease when less likely to convert to a sale. | | `manual` | Fixed bid | Uses your exact bid and any placement adjustments you set, and is not subject to dynamic bidding. |
     * @type {string}
     * @memberof Bidding
     */
    strategy?: BiddingStrategyEnum;
    /**
     * 
     * @type {Array<BiddingAdjustments>}
     * @memberof Bidding
     */
    adjustments?: Array<BiddingAdjustments>;
}

/**
    * @export
    * @enum {string}
    */
export enum BiddingStrategyEnum {
    LegacyForSales = 'legacyForSales',
    AutoForSales = 'autoForSales',
    Manual = 'manual'
}

/**
 * 
 * @export
 * @interface BiddingAdjustments
 */
export interface BiddingAdjustments {
    /**
     * You can enable controls to adjust your bid based on the placement location. Specify a location where you want to use bid controls. The percentage value set is the percentage of the original bid for which you want to have your bid adjustment increased. For example, a 50% adjustment on a $1.00 bid would increase the bid to $1.50 for the opportunity to win a specified placement. | Predicate |  Placement | |-----------|------------| | `placementTop` | Top of search (first page) | | `placementProductPage` | Product pages |
     * @type {string}
     * @memberof BiddingAdjustments
     */
    predicate?: BiddingAdjustmentsPredicateEnum;
    /**
     * The bid adjustment percentage value.
     * @type {number}
     * @memberof BiddingAdjustments
     */
    percentage?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum BiddingAdjustmentsPredicateEnum {
    PlacementTop = 'placementTop',
    PlacementProductPage = 'placementProductPage'
}

/**
 * 
 * @export
 * @interface BrandResponse
 */
export interface BrandResponse {
    /**
     * The brand identifier.
     * @type {number}
     * @memberof BrandResponse
     */
    id?: number;
    /**
     * The brand name.
     * @type {string}
     * @memberof BrandResponse
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface Campaign
 */
export interface Campaign {
    /**
     * The identifier of an existing portfolio to which the campaign is associated.
     * @type {number}
     * @memberof Campaign
     */
    portfolioId?: number;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof Campaign
     */
    campaignId?: number;
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof Campaign
     */
    name?: string;
    /**
     * A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
     * @type {{ [key: string]: string; }}
     * @memberof Campaign
     */
    tags?: { [key: string]: string; };
    /**
     * The advertising product managed by this campaign.
     * @type {string}
     * @memberof Campaign
     */
    campaignType?: CampaignCampaignTypeEnum;
    /**
     * The type of targeting of the campaign.
     * @type {string}
     * @memberof Campaign
     */
    targetingType?: CampaignTargetingTypeEnum;
    /**
     * 
     * @type {State}
     * @memberof Campaign
     */
    state?: State;
    /**
     * The daily budget of the campaign.
     * @type {number}
     * @memberof Campaign
     */
    dailyBudget?: number;
    /**
     * The starting date of the campaign. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof Campaign
     */
    startDate?: string;
    /**
     * The ending date of the campaign to stop running. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof Campaign
     */
    endDate?: string;
    /**
     * If set to true, Amazon increases the default bid for ads that are eligible to appear in this placement. See developer notes for more information.
     * @type {boolean}
     * @memberof Campaign
     */
    premiumBidAdjustment?: boolean;
    /**
     * 
     * @type {Bidding}
     * @memberof Campaign
     */
    bidding?: Bidding;
}

/**
    * @export
    * @enum {string}
    */
export enum CampaignCampaignTypeEnum {
    SponsoredProducts = 'sponsoredProducts'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignTargetingTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface CampaignEx
 */
export interface CampaignEx {
    /**
     * The identifier of an existing portfolio to which the campaign is associated.
     * @type {number}
     * @memberof CampaignEx
     */
    portfolioId?: number;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CampaignEx
     */
    campaignId?: number;
    /**
     * A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
     * @type {{ [key: string]: string; }}
     * @memberof CampaignEx
     */
    tags?: { [key: string]: string; };
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof CampaignEx
     */
    name?: string;
    /**
     * The advertising product managed by this campaign.
     * @type {string}
     * @memberof CampaignEx
     */
    campaignType?: CampaignExCampaignTypeEnum;
    /**
     * The type of targeting of the campaign.
     * @type {string}
     * @memberof CampaignEx
     */
    targetingType?: CampaignExTargetingTypeEnum;
    /**
     * 
     * @type {State}
     * @memberof CampaignEx
     */
    state?: State;
    /**
     * The daily budget of the campaign.
     * @type {number}
     * @memberof CampaignEx
     */
    dailyBudget?: number;
    /**
     * The starting date of the campaign. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof CampaignEx
     */
    startDate?: string;
    /**
     * The ending date of the campaign to stop running. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof CampaignEx
     */
    endDate?: string;
    /**
     * If set to true, Amazon increases the default bid for ads that are eligible to appear in this placement. See developer notes for more information.
     * @type {boolean}
     * @memberof CampaignEx
     */
    premiumBidAdjustment?: boolean;
    /**
     * 
     * @type {Bidding}
     * @memberof CampaignEx
     */
    bidding?: Bidding;
    /**
     * The creation date of the campaign, in epoch time.
     * @type {number}
     * @memberof CampaignEx
     */
    creationDate?: number;
    /**
     * The date that any value associated with the campaign was last changed, in epoch time.
     * @type {number}
     * @memberof CampaignEx
     */
    lastUpdatedDate?: number;
    /**
     * The computed status of the campaign. See developer notes for more information.
     * @type {string}
     * @memberof CampaignEx
     */
    servingStatus?: CampaignExServingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CampaignExCampaignTypeEnum {
    SponsoredProducts = 'sponsoredProducts'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignExTargetingTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignExServingStatusEnum {
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignStatusEnabled = 'CAMPAIGN_STATUS_ENABLED',
    AdvertiserPaymentFailed = 'ADVERTISER_PAYMENT_FAILED',
    AdvertiserPaymentFailure = 'ADVERTISER_PAYMENT_FAILURE',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    PendingStartDate = 'PENDING_START_DATE',
    CampaignIncomplete = 'CAMPAIGN_INCOMPLETE',
    Ended = 'ENDED'
}

/**
 * 
 * @export
 * @interface CampaignNegativeKeyword
 */
export interface CampaignNegativeKeyword {
    /**
     * The identifier of the campaign negative keyword.
     * @type {number}
     * @memberof CampaignNegativeKeyword
     */
    keywordId?: number;
    /**
     * The identifer of the campaign to which the campaign negative keyword is associated.
     * @type {number}
     * @memberof CampaignNegativeKeyword
     */
    campaignId?: number;
    /**
     * The campaign negative keyword state.
     * @type {string}
     * @memberof CampaignNegativeKeyword
     */
    state?: CampaignNegativeKeywordStateEnum;
    /**
     * The text of the expression to match against a search query.
     * @type {string}
     * @memberof CampaignNegativeKeyword
     */
    keywordText?: string;
    /**
     * 
     * @type {NegativeMatchType}
     * @memberof CampaignNegativeKeyword
     */
    matchType?: NegativeMatchType;
}

/**
    * @export
    * @enum {string}
    */
export enum CampaignNegativeKeywordStateEnum {
    Enabled = 'enabled'
}

/**
 * 
 * @export
 * @interface CampaignNegativeKeywordEx
 */
export interface CampaignNegativeKeywordEx {
    /**
     * The identifier of the campaign negative keyword.
     * @type {number}
     * @memberof CampaignNegativeKeywordEx
     */
    keywordId?: number;
    /**
     * The identifer of the campaign to which the campaign negative keyword is associated.
     * @type {number}
     * @memberof CampaignNegativeKeywordEx
     */
    campaignId?: number;
    /**
     * The campaign negative keyword state.
     * @type {string}
     * @memberof CampaignNegativeKeywordEx
     */
    state?: CampaignNegativeKeywordExStateEnum;
    /**
     * The text of the expression to match against a search query.
     * @type {string}
     * @memberof CampaignNegativeKeywordEx
     */
    keywordText?: string;
    /**
     * 
     * @type {NegativeMatchType}
     * @memberof CampaignNegativeKeywordEx
     */
    matchType?: NegativeMatchType;
    /**
     * Creation date in epoch time.
     * @type {number}
     * @memberof CampaignNegativeKeywordEx
     */
    creationDate?: number;
    /**
     * Date of last update in epoch time.
     * @type {number}
     * @memberof CampaignNegativeKeywordEx
     */
    lastUpdatedDate?: number;
    /**
     * The serving status of the campaign negative keyword. See the **computed status** section of the [developer notes](https://advertising.amazon.com/API/docs/en-us/get-started/developer-notes) for definitions.
     * @type {string}
     * @memberof CampaignNegativeKeywordEx
     */
    servingStatus?: CampaignNegativeKeywordExServingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CampaignNegativeKeywordExStateEnum {
    Enabled = 'enabled'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignNegativeKeywordExServingStatusEnum {
    TargetingClauseStatusLive = 'TARGETING_CLAUSE_STATUS_LIVE',
    PendingStartDate = 'PENDING_START_DATE'
}

/**
 * 
 * @export
 * @interface CampaignNegativeKeywordResponse
 */
export interface CampaignNegativeKeywordResponse {
    /**
     * The identifier of the campaign negative keyword.
     * @type {number}
     * @memberof CampaignNegativeKeywordResponse
     */
    keywordId?: number;
    /**
     * An enumerated success or error code for machine use.
     * @type {string}
     * @memberof CampaignNegativeKeywordResponse
     */
    code?: string;
    /**
     * A human-readable description of the code.
     * @type {string}
     * @memberof CampaignNegativeKeywordResponse
     */
    details?: string;
    /**
     * A human-readable description of the code.
     * @type {string}
     * @memberof CampaignNegativeKeywordResponse
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface CampaignResponse
 */
export interface CampaignResponse {
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CampaignResponse
     */
    campaignId?: number;
    /**
     * An enumerated success or error code for machine use.
     * @type {string}
     * @memberof CampaignResponse
     */
    code?: string;
    /**
     * A human-readable description of the code.
     * @type {string}
     * @memberof CampaignResponse
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface CategoryResponse
 */
export interface CategoryResponse {
    /**
     * The category identifier.
     * @type {number}
     * @memberof CategoryResponse
     */
    id?: number;
    /**
     * The category name.
     * @type {string}
     * @memberof CategoryResponse
     */
    name?: string;
    /**
     * If set to `true`, indicates this category can be targeted in a targeting expression. Otherwise, set to false.
     * @type {string}
     * @memberof CategoryResponse
     */
    isTargetable?: CategoryResponseIsTargetableEnum;
    /**
     * The path of this category within the category catalog.
     * @type {string}
     * @memberof CategoryResponse
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CategoryResponseIsTargetableEnum {
    True = 'true',
    False = 'false'
}

/**
 * 
 * @export
 * @interface CreateAdGroup
 */
export interface CreateAdGroup {
    /**
     * A name for the ad group.
     * @type {string}
     * @memberof CreateAdGroup
     */
    name?: string;
    /**
     * An existing campaign to which the ad group is associated.
     * @type {number}
     * @memberof CreateAdGroup
     */
    campaignId?: number;
    /**
     * A bid value for use when no bid is specified for keywords in the ad group.
     * @type {number}
     * @memberof CreateAdGroup
     */
    defaultBid?: number;
    /**
     * 
     * @type {State}
     * @memberof CreateAdGroup
     */
    state?: State;
}
/**
 * 
 * @export
 * @interface CreateCampaign
 */
export interface CreateCampaign {
    /**
     * The identifier of an existing portfolio to which the campaign is associated.
     * @type {number}
     * @memberof CreateCampaign
     */
    portfolioId?: number;
    /**
     * A name for the campaign.
     * @type {string}
     * @memberof CreateCampaign
     */
    name?: string;
    /**
     * A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
     * @type {{ [key: string]: string; }}
     * @memberof CreateCampaign
     */
    tags?: { [key: string]: string; };
    /**
     * The advertising product managed by this campaign.
     * @type {string}
     * @memberof CreateCampaign
     */
    campaignType?: CreateCampaignCampaignTypeEnum;
    /**
     * The type of targeting for the campaign.
     * @type {string}
     * @memberof CreateCampaign
     */
    targetingType?: CreateCampaignTargetingTypeEnum;
    /**
     * 
     * @type {State}
     * @memberof CreateCampaign
     */
    state?: State;
    /**
     * A daily budget for the campaign.
     * @type {number}
     * @memberof CreateCampaign
     */
    dailyBudget?: number;
    /**
     * A starting date for the campaign to go live. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof CreateCampaign
     */
    startDate?: string;
    /**
     * An ending date for the campaign to stop running. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof CreateCampaign
     */
    endDate?: string | null;
    /**
     * If set to true, Amazon increases the default bid for ads that are eligible to appear in this placement. See developer notes for more information.
     * @type {boolean}
     * @memberof CreateCampaign
     */
    premiumBidAdjustment?: boolean;
    /**
     * 
     * @type {Bidding}
     * @memberof CreateCampaign
     */
    bidding?: Bidding;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateCampaignCampaignTypeEnum {
    SponsoredProducts = 'sponsoredProducts'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateCampaignTargetingTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface CreateCampaignNegativeKeyword
 */
export interface CreateCampaignNegativeKeyword {
    /**
     * The identifer of the campaign to which the campaign negative keyword is associated.
     * @type {number}
     * @memberof CreateCampaignNegativeKeyword
     */
    campaignId?: number;
    /**
     * The campaign negative keyword state.
     * @type {string}
     * @memberof CreateCampaignNegativeKeyword
     */
    state?: CreateCampaignNegativeKeywordStateEnum;
    /**
     * The text of the expression to match against a search query.
     * @type {string}
     * @memberof CreateCampaignNegativeKeyword
     */
    keywordText?: string;
    /**
     * 
     * @type {NegativeMatchType}
     * @memberof CreateCampaignNegativeKeyword
     */
    matchType?: NegativeMatchType;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateCampaignNegativeKeywordStateEnum {
    Enabled = 'enabled'
}

/**
 * 
 * @export
 * @interface CreateKeyword
 */
export interface CreateKeyword {
    /**
     * The identifer of the campaign to which the keyword is associated.
     * @type {number}
     * @memberof CreateKeyword
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this keyword is associated.
     * @type {number}
     * @memberof CreateKeyword
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof CreateKeyword
     */
    state?: State;
    /**
     * The keyword text.
     * @type {string}
     * @memberof CreateKeyword
     */
    keywordText?: string;
    /**
     * The unlocalized keyword text in the preferred locale of the advertiser.
     * @type {string}
     * @memberof CreateKeyword
     */
    nativeLanguageKeyword?: string;
    /**
     * The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.
     * @type {string}
     * @memberof CreateKeyword
     */
    nativeLanguageLocale?: string;
    /**
     * 
     * @type {MatchType}
     * @memberof CreateKeyword
     */
    matchType?: MatchType;
    /**
     * Bid associated with this keyword. Applicable to biddable match types only.
     * @type {number}
     * @memberof CreateKeyword
     */
    bid?: number | null;
}
/**
 * 
 * @export
 * @interface CreateNegativeKeyword
 */
export interface CreateNegativeKeyword {
    /**
     * The identifier of the campaign to which the negative keyword is associated.
     * @type {number}
     * @memberof CreateNegativeKeyword
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which the negative keyword is associated.
     * @type {number}
     * @memberof CreateNegativeKeyword
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof CreateNegativeKeyword
     */
    state?: State;
    /**
     * The text of the expression to match against a search query.
     * @type {string}
     * @memberof CreateNegativeKeyword
     */
    keywordText?: string;
    /**
     * 
     * @type {NegativeMatchType}
     * @memberof CreateNegativeKeyword
     */
    matchType?: NegativeMatchType;
}
/**
 * 
 * @export
 * @interface CreateNegativeTargetingClause
 */
export interface CreateNegativeTargetingClause {
    /**
     * The identifier of the campaign to which this negative target is associated.
     * @type {number}
     * @memberof CreateNegativeTargetingClause
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this negative target is associated.
     * @type {number}
     * @memberof CreateNegativeTargetingClause
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof CreateNegativeTargetingClause
     */
    state?: State;
    /**
     * The negative targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof CreateNegativeTargetingClause
     */
    expression?: Array<TargetingExpressionPredicate>;
    /**
     * 
     * @type {ExpressionType}
     * @memberof CreateNegativeTargetingClause
     */
    expressionType?: ExpressionType;
}
/**
 * 
 * @export
 * @interface CreateProductAd
 */
export interface CreateProductAd {
    /**
     * The campaign identifier.
     * @type {number}
     * @memberof CreateProductAd
     */
    campaignId?: number;
    /**
     * The ad group identifier.
     * @type {number}
     * @memberof CreateProductAd
     */
    adGroupId?: number;
    /**
     * The SKU associated with the product. Defined for seller accounts only.
     * @type {string}
     * @memberof CreateProductAd
     */
    sku?: string;
    /**
     * The ASIN associated with the product. Defined for vendors only.
     * @type {string}
     * @memberof CreateProductAd
     */
    asin?: string;
    /**
     * 
     * @type {State}
     * @memberof CreateProductAd
     */
    state?: State;
}
/**
 * 
 * @export
 * @interface CreateTargetingClause
 */
export interface CreateTargetingClause {
    /**
     * The identifier of the campaign to which this target is associated.
     * @type {number}
     * @memberof CreateTargetingClause
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this target is associated.
     * @type {number}
     * @memberof CreateTargetingClause
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof CreateTargetingClause
     */
    state?: State;
    /**
     * The targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof CreateTargetingClause
     */
    expression?: Array<TargetingExpressionPredicate>;
    /**
     * The resolved targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof CreateTargetingClause
     */
    resolvedExpression?: Array<TargetingExpressionPredicate>;
    /**
     * 
     * @type {ExpressionType}
     * @memberof CreateTargetingClause
     */
    expressionType?: ExpressionType;
    /**
     * The bid for ads sourced using the target. Targets that do not have bid values in listTargetingClauses will inherit the defaultBid from the adGroup level. This table details the maximum allowable bid (in local currency) for keywords by marketplace: | Marketplace | Currency | Min / Max bid for SP | | --- | --- | --- | | US | USD | 0.02 / 1000 | | CA | CAD | 0.02 / 1000 | | UK | GBP | 0.02 / 1000 | | DE | EUR | 0.02 / 1000 | | FR | EUR | 0.02 / 1000 | | ES | EUR | 0.02 / 1000 | | IT | EUR | 0.02 / 1000 | | JP | JPY | 2.0 / 100000 | | AU | AUD | 0.10 / 1410 | | AE | AED | 0.24 / 184.0 |
     * @type {number}
     * @memberof CreateTargetingClause
     */
    bid?: number | null;
}
/**
 * The type of expression.
 * @export
 * @enum {string}
 */

export enum ExpressionType {
    Auto = 'auto',
    Manual = 'manual'
}

/**
 * 
 * @export
 * @interface GetAsinSuggestedKeywordsResponse
 */
export interface GetAsinSuggestedKeywordsResponse {
    /**
     * The ASIN for which keywords are suggested.
     * @type {string}
     * @memberof GetAsinSuggestedKeywordsResponse
     */
    asin?: string;
    /**
     * The list of suggested keywords.
     * @type {Array<GetAsinSuggestedKeywordsResponseSuggestedKeywords>}
     * @memberof GetAsinSuggestedKeywordsResponse
     */
    suggestedKeywords?: Array<GetAsinSuggestedKeywordsResponseSuggestedKeywords>;
}
/**
 * 
 * @export
 * @interface GetAsinSuggestedKeywordsResponseSuggestedKeywords
 */
export interface GetAsinSuggestedKeywordsResponseSuggestedKeywords {
    /**
     * The text of the suggested keyword.
     * @type {string}
     * @memberof GetAsinSuggestedKeywordsResponseSuggestedKeywords
     */
    keywordText?: string;
    /**
     * 
     * @type {MatchType}
     * @memberof GetAsinSuggestedKeywordsResponseSuggestedKeywords
     */
    matchType?: MatchType;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * A list of ASINs.
     * @type {Array<string>}
     * @memberof InlineObject
     */
    asins?: Array<string>;
    /**
     * The maximum number of suggested keywords in the response.
     * @type {number}
     * @memberof InlineObject
     */
    maxNumSuggestions?: number;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * The ad group identifier.
     * @type {number}
     * @memberof InlineObject1
     */
    adGroupId?: number;
    /**
     * The list of targeting expressions.
     * @type {Array<Array<TargetingExpressionPredicate>>}
     * @memberof InlineObject1
     */
    expressions?: Array<Array<TargetingExpressionPredicate>>;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * The number or recommendations returned in a single page.
     * @type {number}
     * @memberof InlineObject2
     */
    pageSize?: number;
    /**
     * The page number in the result set to return.
     * @type {number}
     * @memberof InlineObject2
     */
    pageNumber?: number;
    /**
     * A list of ASINs.
     * @type {Array<string>}
     * @memberof InlineObject2
     */
    asins?: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * The ad group identifier.
     * @type {number}
     * @memberof InlineResponse200
     */
    adGroupId?: number;
    /**
     * The list of recommended bids with associated targeting expressions.
     * @type {Array<InlineResponse200Recommendations>}
     * @memberof InlineResponse200
     */
    recommendations?: Array<InlineResponse200Recommendations>;
}
/**
 * 
 * @export
 * @interface InlineResponse200Recommendations
 */
export interface InlineResponse200Recommendations {
    /**
     * 
     * @type {SuggestedBid}
     * @memberof InlineResponse200Recommendations
     */
    suggestedBid?: SuggestedBid;
    /**
     * 
     * @type {TargetingExpressionPredicate}
     * @memberof InlineResponse200Recommendations
     */
    expression?: TargetingExpressionPredicate;
    /**
     * The response code.
     * @type {string}
     * @memberof InlineResponse200Recommendations
     */
    code?: InlineResponse200RecommendationsCodeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200RecommendationsCodeEnum {
    Success = 'SUCCESS',
    InvalidArgument = 'INVALID_ARGUMENT',
    NotFound = 'NOT_FOUND',
    InternalError = 'INTERNAL_ERROR',
    ServerIsBusy = 'SERVER_IS_BUSY',
    Unauthorized = 'UNAUTHORIZED'
}

/**
 * 
 * @export
 * @interface Keyword
 */
export interface Keyword {
    /**
     * The identifier of the keyword.
     * @type {number}
     * @memberof Keyword
     */
    keywordId?: number;
    /**
     * The identifer of the campaign to which the keyword is associated.
     * @type {number}
     * @memberof Keyword
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this keyword is associated.
     * @type {number}
     * @memberof Keyword
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof Keyword
     */
    state?: State;
    /**
     * The keyword text.
     * @type {string}
     * @memberof Keyword
     */
    keywordText?: string;
    /**
     * The unlocalized keyword text in the preferred locale of the advertiser.
     * @type {string}
     * @memberof Keyword
     */
    nativeLanguageKeyword?: string;
    /**
     * 
     * @type {MatchType}
     * @memberof Keyword
     */
    matchType?: MatchType;
    /**
     * Bid associated with this keyword. Applicable to biddable match types only.
     * @type {number}
     * @memberof Keyword
     */
    bid?: number;
}
/**
 * 
 * @export
 * @interface KeywordBidRecommendationsData
 */
export interface KeywordBidRecommendationsData {
    /**
     * The identifier of the ad group that the keywords are associated with.
     * @type {number}
     * @memberof KeywordBidRecommendationsData
     */
    adGroupId?: number;
    /**
     * An array of keyword data objects.
     * @type {Array<KeywordBidRecommendationsDataKeywords>}
     * @memberof KeywordBidRecommendationsData
     */
    keywords?: Array<KeywordBidRecommendationsDataKeywords>;
}
/**
 * 
 * @export
 * @interface KeywordBidRecommendationsDataKeywords
 */
export interface KeywordBidRecommendationsDataKeywords {
    /**
     * The keyword text.
     * @type {string}
     * @memberof KeywordBidRecommendationsDataKeywords
     */
    keyword?: string;
    /**
     * 
     * @type {MatchType}
     * @memberof KeywordBidRecommendationsDataKeywords
     */
    matchType?: MatchType;
}
/**
 * 
 * @export
 * @interface KeywordBidRecommendationsResponse
 */
export interface KeywordBidRecommendationsResponse {
    /**
     * The identifier of the keyword that the bid is associated with.
     * @type {number}
     * @memberof KeywordBidRecommendationsResponse
     */
    keywordId?: number;
    /**
     * The identifier of the ad group that the bid is associated with.
     * @type {number}
     * @memberof KeywordBidRecommendationsResponse
     */
    adGroupId?: number;
    /**
     * 
     * @type {SuggestedBid}
     * @memberof KeywordBidRecommendationsResponse
     */
    suggestedBid?: SuggestedBid;
}
/**
 * 
 * @export
 * @interface KeywordEx
 */
export interface KeywordEx {
    /**
     * The identifier of the keyword.
     * @type {number}
     * @memberof KeywordEx
     */
    keywordId?: number;
    /**
     * The identifer of the campaign to which the keyword is associated.
     * @type {number}
     * @memberof KeywordEx
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this keyword is associated.
     * @type {number}
     * @memberof KeywordEx
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof KeywordEx
     */
    state?: State;
    /**
     * The text of the expression to match against a search query.
     * @type {string}
     * @memberof KeywordEx
     */
    keywordText?: string;
    /**
     * The unlocalized keyword text in the preferred locale of the advertiser.
     * @type {string}
     * @memberof KeywordEx
     */
    nativeLanguageKeyword?: string;
    /**
     * 
     * @type {MatchType}
     * @memberof KeywordEx
     */
    matchType?: MatchType;
    /**
     * Bid associated with this keyword. This table details the maximum allowable bid (in local currency) for keywords by marketplace: | Marketplace | Currency | Min / Max bid for SP | | --- | --- | --- | | US | USD | 0.02 / 1000 | | CA | CAD | 0.02 / 1000 | | UK | GBP | 0.02 / 1000 | | DE | EUR | 0.02 / 1000 | | FR | EUR | 0.02 / 1000 | | ES | EUR | 0.02 / 1000 | | IT | EUR | 0.02 / 1000 | | JP | JPY | 2.0 / 100000 | | AU | AUD | 0.10 / 1410 | | AE | AED | 0.24 / 184.0 |
     * @type {number}
     * @memberof KeywordEx
     */
    bid?: number;
    /**
     * Creation date in epoch time.
     * @type {number}
     * @memberof KeywordEx
     */
    creationDate?: number;
    /**
     * Date of last update in epoch time.
     * @type {number}
     * @memberof KeywordEx
     */
    lastUpdatedDate?: number;
    /**
     * The serving status of the keyword. See the **computed status** section of the [developer notes](https://advertising.amazon.com/API/docs/en-us/get-started/developer-notes) for definitions.
     * @type {string}
     * @memberof KeywordEx
     */
    servingStatus?: KeywordExServingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum KeywordExServingStatusEnum {
    TargetingClauseArchived = 'TARGETING_CLAUSE_ARCHIVED',
    TargetingClausePaused = 'TARGETING_CLAUSE_PAUSED',
    TargetingClauseStatusLive = 'TARGETING_CLAUSE_STATUS_LIVE',
    TargetingClausePolicingSuspended = 'TARGETING_CLAUSE_POLICING_SUSPENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    PendingStartDate = 'PENDING_START_DATE'
}

/**
 * 
 * @export
 * @interface KeywordResponse
 */
export interface KeywordResponse {
    /**
     * The identifer of the keyword.
     * @type {number}
     * @memberof KeywordResponse
     */
    keywordId?: number;
    /**
     * The success or error code for the operation.
     * @type {string}
     * @memberof KeywordResponse
     */
    code?: string;
    /**
     * The human-readable description of the error.
     * @type {string}
     * @memberof KeywordResponse
     */
    details?: string;
    /**
     * The human-readable description of the error.
     * @type {string}
     * @memberof KeywordResponse
     */
    description?: string;
}
/**
 * The type of match. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
 * @export
 * @enum {string}
 */

export enum MatchType {
    Exact = 'exact',
    Phrase = 'phrase',
    Broad = 'broad'
}

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An enumerated error for machine use.
     * @type {string}
     * @memberof ModelError
     */
    code?: string;
    /**
     * A human-readable description of the error.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface NegativeKeyword
 */
export interface NegativeKeyword {
    /**
     * The identifier of the negative keyword.
     * @type {number}
     * @memberof NegativeKeyword
     */
    keywordId?: number;
    /**
     * The identifer of the campaign to which the negative keyword is associated.
     * @type {number}
     * @memberof NegativeKeyword
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which the negative keyword is associated.
     * @type {number}
     * @memberof NegativeKeyword
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof NegativeKeyword
     */
    state?: State;
    /**
     * The text of the expression to match against a search query.
     * @type {string}
     * @memberof NegativeKeyword
     */
    keywordText?: string;
    /**
     * 
     * @type {NegativeMatchType}
     * @memberof NegativeKeyword
     */
    matchType?: NegativeMatchType;
}
/**
 * 
 * @export
 * @interface NegativeKeywordEx
 */
export interface NegativeKeywordEx {
    /**
     * The identifier of the keyword.
     * @type {number}
     * @memberof NegativeKeywordEx
     */
    keywordId?: number;
    /**
     * The identifer of the campaign to which the keyword is associated.
     * @type {number}
     * @memberof NegativeKeywordEx
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this keyword is associated.
     * @type {number}
     * @memberof NegativeKeywordEx
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof NegativeKeywordEx
     */
    state?: State;
    /**
     * The text of the expression to match against a search query.
     * @type {string}
     * @memberof NegativeKeywordEx
     */
    keywordText?: string;
    /**
     * 
     * @type {NegativeMatchType}
     * @memberof NegativeKeywordEx
     */
    matchType?: NegativeMatchType;
    /**
     * Creation date in epoch time.
     * @type {number}
     * @memberof NegativeKeywordEx
     */
    creationDate?: number;
    /**
     * Date of last update in epoch time.
     * @type {number}
     * @memberof NegativeKeywordEx
     */
    lastUpdatedDate?: number;
    /**
     * The serving status of the keyword. See the **computed status** section of the [developer notes](https://advertising.amazon.com/API/docs/en-us/get-started/developer-notes) for definitions.
     * @type {string}
     * @memberof NegativeKeywordEx
     */
    servingStatus?: NegativeKeywordExServingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum NegativeKeywordExServingStatusEnum {
    TargetingClauseArchived = 'TARGETING_CLAUSE_ARCHIVED',
    TargetingClausePaused = 'TARGETING_CLAUSE_PAUSED',
    TargetingClauseStatusLive = 'TARGETING_CLAUSE_STATUS_LIVE',
    TargetingClausePolicingSuspended = 'TARGETING_CLAUSE_POLICING_SUSPENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    PendingStartDate = 'PENDING_START_DATE'
}

/**
 * 
 * @export
 * @interface NegativeKeywordResponse
 */
export interface NegativeKeywordResponse {
    /**
     * The identifier of the keyword.
     * @type {number}
     * @memberof NegativeKeywordResponse
     */
    keywordId?: number;
    /**
     * The success or error code for the operation.
     * @type {string}
     * @memberof NegativeKeywordResponse
     */
    code?: string;
    /**
     * The human-readable description of the error.
     * @type {string}
     * @memberof NegativeKeywordResponse
     */
    details?: string;
    /**
     * The human-readable description of the error.
     * @type {string}
     * @memberof NegativeKeywordResponse
     */
    description?: string;
}
/**
 * The type of match. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
 * @export
 * @enum {string}
 */

export enum NegativeMatchType {
    NegativeExact = 'negativeExact',
    NegativePhrase = 'negativePhrase'
}

/**
 * 
 * @export
 * @interface NegativeTargetingClause
 */
export interface NegativeTargetingClause {
    /**
     * The negative target identifier.
     * @type {number}
     * @memberof NegativeTargetingClause
     */
    targetId?: number;
    /**
     * The identifier of the campaign to which this negative target is associated.
     * @type {number}
     * @memberof NegativeTargetingClause
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this negative target is associated.
     * @type {number}
     * @memberof NegativeTargetingClause
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof NegativeTargetingClause
     */
    state?: State;
    /**
     * The negative targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof NegativeTargetingClause
     */
    expression?: Array<TargetingExpressionPredicate>;
    /**
     * The resolved targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof NegativeTargetingClause
     */
    resolvedExpression?: Array<TargetingExpressionPredicate>;
    /**
     * 
     * @type {ExpressionType}
     * @memberof NegativeTargetingClause
     */
    expressionType?: ExpressionType;
}
/**
 * 
 * @export
 * @interface NegativeTargetingClauseEx
 */
export interface NegativeTargetingClauseEx {
    /**
     * The negative target identifier.
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    targetId?: number;
    /**
     * The identifier of the campaign to which this negative target is associated.
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this negative target is associated.
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof NegativeTargetingClauseEx
     */
    state?: State;
    /**
     * The negative targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof NegativeTargetingClauseEx
     */
    expression?: Array<TargetingExpressionPredicate>;
    /**
     * The resolved targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof NegativeTargetingClauseEx
     */
    resolvedExpression?: Array<TargetingExpressionPredicate>;
    /**
     * 
     * @type {ExpressionType}
     * @memberof NegativeTargetingClauseEx
     */
    expressionType?: ExpressionType;
    /**
     * The epoch time that the negative targeting clause was created.
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    creationDate?: number;
    /**
     * The epoch time that the negative targeting clause was updated.
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    lastUpdatedDate?: number;
    /**
     * The computed status of the negative targeting clause. See the [developer notes](https://advertising.amazon.com/API/docs/en-us/get-started/developer-notes) for more information.
     * @type {string}
     * @memberof NegativeTargetingClauseEx
     */
    servingStatus?: NegativeTargetingClauseExServingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseExServingStatusEnum {
    TargetingClauseArchived = 'TARGETING_CLAUSE_ARCHIVED',
    TargetingClausePaused = 'TARGETING_CLAUSE_PAUSED',
    TargetingClauseStatusLive = 'TARGETING_CLAUSE_STATUS_LIVE',
    TargetingClausePolicingSuspended = 'TARGETING_CLAUSE_POLICING_SUSPENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    PendingStartDate = 'PENDING_START_DATE'
}

/**
 * 
 * @export
 * @interface NegativeTargetingClauseResponse
 */
export interface NegativeTargetingClauseResponse {
    /**
     * The negative target identifier.
     * @type {number}
     * @memberof NegativeTargetingClauseResponse
     */
    targetId?: number;
    /**
     * An enumerated response code.
     * @type {string}
     * @memberof NegativeTargetingClauseResponse
     */
    code?: string;
    /**
     * A human-readable description of the value in the `code` field.
     * @type {string}
     * @memberof NegativeTargetingClauseResponse
     */
    details?: string;
    /**
     * A human-readable description of the value in the `code` field.
     * @type {string}
     * @memberof NegativeTargetingClauseResponse
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface ProductAd
 */
export interface ProductAd {
    /**
     * The product ad identifier.
     * @type {number}
     * @memberof ProductAd
     */
    adId?: number;
    /**
     * The campaign identifier.
     * @type {number}
     * @memberof ProductAd
     */
    campaignId?: number;
    /**
     * The ad group identifier.
     * @type {number}
     * @memberof ProductAd
     */
    adGroupId?: number;
    /**
     * The SKU associated with the product. Defined for seller accounts only.
     * @type {string}
     * @memberof ProductAd
     */
    sku?: string;
    /**
     * The ASIN associated with the product. Defined for vendors only.
     * @type {string}
     * @memberof ProductAd
     */
    asin?: string;
    /**
     * 
     * @type {State}
     * @memberof ProductAd
     */
    state?: State;
}
/**
 * 
 * @export
 * @interface ProductAdEx
 */
export interface ProductAdEx {
    /**
     * The product ad identifier.
     * @type {number}
     * @memberof ProductAdEx
     */
    adId?: number;
    /**
     * The campaign identifier.
     * @type {number}
     * @memberof ProductAdEx
     */
    campaignId?: number;
    /**
     * The ad group identifier.
     * @type {number}
     * @memberof ProductAdEx
     */
    adGroupId?: number;
    /**
     * The SKU associated with the product. Defined for seller accounts only.
     * @type {string}
     * @memberof ProductAdEx
     */
    sku?: string;
    /**
     * The ASIN associated with the product. Defined for vendors only.
     * @type {string}
     * @memberof ProductAdEx
     */
    asin?: string;
    /**
     * 
     * @type {State}
     * @memberof ProductAdEx
     */
    state?: State;
    /**
     * The epoch date the product ad was created.
     * @type {number}
     * @memberof ProductAdEx
     */
    creationDate?: number;
    /**
     * The epoch date the product ad was last updated.
     * @type {number}
     * @memberof ProductAdEx
     */
    lastUpdatedDate?: number;
    /**
     * The computed status of the product ad. See the [developer notes](https://advertising.amazon.com/API/docs/en-us/get-started/developer-notes) for more information.
     * @type {string}
     * @memberof ProductAdEx
     */
    servingStatus?: ProductAdExServingStatusEnum;
    /**
     * Details of serving status. Only statuses related to moderation according to the ad policy are currently included.
     * @type {Array<ProductAdExServingStatusDetails>}
     * @memberof ProductAdEx
     */
    servingStatusDetails?: Array<ProductAdExServingStatusDetails>;
}

/**
    * @export
    * @enum {string}
    */
export enum ProductAdExServingStatusEnum {
    AdArchived = 'AD_ARCHIVED',
    AdPaused = 'AD_PAUSED',
    AdStatusLive = 'AD_STATUS_LIVE',
    AdPolicingSuspended = 'AD_POLICING_SUSPENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    MissingDecoration = 'MISSING_DECORATION',
    PendingStartDate = 'PENDING_START_DATE'
}

/**
 * 
 * @export
 * @interface ProductAdExServingStatusDetails
 */
export interface ProductAdExServingStatusDetails {
    /**
     * The status identifier.
     * @type {string}
     * @memberof ProductAdExServingStatusDetails
     */
    name?: string;
    /**
     * An enumerated advertising eligibility severity status. If set to `INELIGIBLE`, the product cannot be included in an advertisement. If set to `ELIGIBLE_WITH_WARNING`, the product may not receive impressions when included in an advertisement.
     * @type {string}
     * @memberof ProductAdExServingStatusDetails
     */
    severity?: string;
    /**
     * A human-readable description of the status identifier specified in the `name` field.
     * @type {string}
     * @memberof ProductAdExServingStatusDetails
     */
    message?: string;
    /**
     * A URL with additional information about the status identifier. May not be present for all status identifiers.
     * @type {string}
     * @memberof ProductAdExServingStatusDetails
     */
    helpUrl?: string;
}
/**
 * 
 * @export
 * @interface ProductAdResponse
 */
export interface ProductAdResponse {
    /**
     * The product ad identifier.
     * @type {number}
     * @memberof ProductAdResponse
     */
    adId?: number;
    /**
     * The enumerated success or error code.
     * @type {string}
     * @memberof ProductAdResponse
     */
    code?: string;
    /**
     * A human-readable description of the code.
     * @type {string}
     * @memberof ProductAdResponse
     */
    details?: string;
    /**
     * A human-readable description of the code.
     * @type {string}
     * @memberof ProductAdResponse
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface ProductRecommendationsResponse
 */
export interface ProductRecommendationsResponse {
    /**
     * The total number of recommendations in the response.
     * @type {number}
     * @memberof ProductRecommendationsResponse
     */
    totalResultCount?: number;
    /**
     * 
     * @type {Array<ProductRecommendationsResponseRecommendedProducts>}
     * @memberof ProductRecommendationsResponse
     */
    recommendedProducts?: Array<ProductRecommendationsResponseRecommendedProducts>;
}
/**
 * 
 * @export
 * @interface ProductRecommendationsResponseRecommendedProducts
 */
export interface ProductRecommendationsResponseRecommendedProducts {
    /**
     * The recommended ASIN for targeting.
     * @type {string}
     * @memberof ProductRecommendationsResponseRecommendedProducts
     */
    recommendedTargetAsin?: string;
}
/**
 * 
 * @export
 * @interface RefinementsResponse
 */
export interface RefinementsResponse {
    /**
     * The category identifier.
     * @type {number}
     * @memberof RefinementsResponse
     */
    categoryId?: number;
    /**
     * The brands found in this category.
     * @type {Array<RefinementsResponseBrands>}
     * @memberof RefinementsResponse
     */
    brands?: Array<RefinementsResponseBrands>;
}
/**
 * 
 * @export
 * @interface RefinementsResponseBrands
 */
export interface RefinementsResponseBrands {
    /**
     * The brand identifier. Note that this is not the same identifier returned from the [getBrands](sponsored-brands/3-0/openapi#/Brands/getBrands) operation.
     * @type {number}
     * @memberof RefinementsResponseBrands
     */
    id?: number;
    /**
     * The brand name.
     * @type {string}
     * @memberof RefinementsResponseBrands
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * Filters the response to include reports with `state` set to one of the values in the comma-delimited list. Note that this filter is only valid for reports of the following **type** and `segment`: |  report type | segment | |-------------|---------| | campaigns | query | | adGroup | query or placement | | keyword | placement | | targets | placement | | productAd | query or placement | Asins and targets report types are **not supported**.
     * @type {string}
     * @memberof Report
     */
    stateFilter?: ReportStateFilterEnum;
    /**
     * The type of campaign. Only required for asins report - don\'t use with other report types.
     * @type {string}
     * @memberof Report
     */
    campaignType?: ReportCampaignTypeEnum;
    /**
     * Dimension on which the report is segmented. Note that Search-terms report for auto-targeted campaigns created before 11/14/2018 can be accessed from the `/v2/sp/keywords/report` resource. Search-terms report for auto-targeted campaigns generated on-and-after 11/14/2018 can be accessed from the  `/v2/sp/targets/report` resource. Also, keyword search terms reports only return search terms that have generated at least one click or one sale. | Dimension | Description | |-----------|-------------| | query | The optional dimension on which to segment a keyword report. This is also referred to as the search terms report. Only works for keywords reports.| | placement | The optional dimension on which to segment a campaigns report. Placement refers to the location on a page where your ad appears. Only works for campaigns reports. |
     * @type {string}
     * @memberof Report
     */
    segment?: ReportSegmentEnum;
    /**
     * The date for which to retrieve the performance report in YYYYMMDD format. The time zone is specified by the profile used to request the report. If this date is today, then the performance report may contain partial information. Reports are not available for data older than 60 days. For details on data latency, see the Service Guarantees in the [developer notes](https://advertising.amazon.com/API/docs/en-us/get-started/developer-notes) section.
     * @type {string}
     * @memberof Report
     */
    reportDate?: string;
    /**
     * A comma-separated list of the metrics to be included in the report.  The following tables summarize report metrics which can be requested via the reports interface. Different report types can use different metrics. Note that ASIN reports only return data for either keywords or targets, but not both. |Report Type | Metric | Details | | --- | --- | --- | | campaigns | bidPlus | A dimensional metric. See the [premium bid adjustment](get-started/developer-notes) section in the developer notes. | | campaigns | `campaignName` | Unique name of the campaign | | campaigns | `campaignId` | Unique numerical ID of the campaign | | campaigns | `campaignStatus` | Status of the campaign | | campaigns | `campaignBudget` | Total budget allotted to the campaign | | campaigns | `campaignRuleBasedBudget` | The value of the rule-based budget. | | campaigns | `applicableBudgetRuleId` | The identifier of the active rule. | | campaigns | `applicableBudgetRuleName` | The name of the active rule. | | campaigns | `impressions` | Total ad impressions. | | campaigns | `clicks` | Total ad clicks. | | campaigns | `cost` | Total cost of all clicks. Can be divided by clicks to obtain average CPC. | | campaigns | `attributedConversions1d` | Number of attributed conversion events occurring within 1 day of click on ad. | | campaigns | `attributedConversions7d` | Number of attributed conversion events occurring within 7 days of click on ad. | | campaigns | `attributedConversions14d` | Number of attributed conversion events occurring within 14 days of click on ad. | | campaigns | `attributedConversions30d` | Number of attributed conversion events occurring within 30 days of click on ad. | | campaigns | `attributedConversions1dSameSKU` | Number of attributed conversion events occurring within 1 day of click on ad where the purchased SKU was the same as the one advertised. | | campaigns | `attributedConversions7dSameSKU` | Number of attributed conversion events occurring within 7 days of click on ad where the purchased SKU was the same as the one advertised. | | campaigns | `attributedConversions14dSameSKU` | Number of attributed conversion events occurring within 14 days of click on ad where the purchased SKU was the same as the one advertised. | | campaigns | `attributedConversions30dSameSKU` | Number of attributed conversion events occurring within 30 days of click on ad where the purchased SKU was the same as the one advertised. | | campaigns | `attributedUnitsOrdered1d` | Number of attributed units ordered within 1 day of click on ad. | | campaigns | `attributedUnitsOrdered7d` | Number of attributed units ordered within 7 days of click on ad. | | campaigns | `attributedUnitsOrdered14d` | Number of attributed units ordered within 14 days of click on ad. | | campaigns | `attributedUnitsOrdered30d` | Number of attributed units ordered within 30 days of click on ad. | | campaigns | `attributedSales1d` | Number of attributed sales occurring within 1 day of click on ad. | | campaigns | `attributedSales7d` | Number of attributed sales occurring within 7 days of click on ad. | | campaigns | `attributedSales14d` | Number of attributed sales occurring within 14 days of click on ad. | | campaigns | `attributedSales30d` | Number of attributed sales occurring within 30 days of click on ad. | | campaigns | `attributedSales1dSameSKU` | Aggregate value of attributed sales occurring within 1 day of click on ad where the purchased SKU was the same as the one advertised. | | campaigns | `attributedSales7dSameSKU` | Aggregate value of attributed sales occurring within 7 days of click on ad where the purchased SKU was the same as the one advertised. | | campaigns | `attributedSales14dSameSKU` | Aggregate value of attributed sales occurring within 14 days of click on ad where the purchased SKU was the same as the one advertised. | | campaigns | `attributedSales30dSameSKU` | Aggregate value of attributed sales occurring within 30 days of click on ad where the purchased SKU was the same as the one advertised. | | campaigns | `attributedUnitsOrdered1dSameSKU` | Number of attributed units ordered within 1 day of click on ad where the purchased SKU was the same as the one advertised. | | campaigns | `attributedUnitsOrdered7dSameSKU` | Number of attributed units ordered within 7 days of click on ad where the purchased SKU was the same as the one advertised. | | campaigns | `attributedUnitsOrdered14dSameSKU` | Number of attributed units ordered within 14 days of click on ad where the purchased SKU was the same as the one advertised. | | campaigns | `attributedUnitsOrdered30dSameSKU` | Number of attributed units ordered within 30 days of click on ad where the purchased SKU was the same as the one advertised. | | campaigns | `attributedKindleEditionNormalizedPagesRead14d` | Number of attributed kindle edition normalized pages read within 14 days of click on ad. | | campaigns | `attributedKindleEditionNormalizedPagesRoyalties14d` | The estimated Royalties of attributed estimated kindle edition normalized pages with in 14 days of click on ad.| |          |                           |               | | adGroups | `campaignName` | Unique name of the campaign | | adGroups | `campaignId` | Unique numerical ID of the campaign | | adGroups | `adGroupName` | Unique name of the ad group | | adGroups | `adGroupId` | Unique numerical ID of the ad group | | adGroups | `impressions` | Total ad impressions. | | adGroups | `clicks` | Total ad clicks. | | adGroups | `cost` | Total cost of all clicks. Can be divided by clicks to obtain average CPC. |        |          |                           |               | | adGroups | `attributedConversions1d` | Number of attributed conversion events occurring within 1 day of click on ad. | | adGroups | `attributedConversions7d` | Number of attributed conversion events occurring within 7 days of click on ad. | | adGroups | `attributedConversions14d` | Number of attributed conversion events occurring within 14 days of click on ad. | | adGroups | `attributedConversions30d` | Number of attributed conversion events occurring within 30 days of click on ad. | | adGroups | `attributedConversions1dSameSKU` | Number of attributed conversion events occurring within 1 day of click on ad where the purchased SKU was the same as the one advertised. | | adGroups | `attributedConversions7dSameSKU` | Number of attributed conversion events occurring within 7 days of click on ad where the purchased SKU was the same as the one advertised. | | adGroups | `attributedConversions14dSameSKU` | Number of attributed conversion events occurring within 14 days of click on ad where the purchased SKU was the same as the one advertised. | | adGroups | `attributedConversions30dSameSKU` | Number of attributed conversion events occurring within 30 days of click on ad where the purchased SKU was the same as the one advertised. | | adGroups | `attributedUnitsOrdered1d` | Number of attributed units ordered within 1 day of click on ad. | | adGroups | `attributedUnitsOrdered7d` | Number of attributed units ordered within 7 days of click on ad. | | adGroups | `attributedUnitsOrdered14d` | Number of attributed units ordered within 14 days of click on ad. | | adGroups | `attributedUnitsOrdered30d` | Number of attributed units ordered within 30 days of click on ad. | | adGroups | `attributedSales1d` | Number of attributed sales occurring within 1 day of click on ad. | | adGroups | `attributedSales7d` | Number of attributed sales occurring within 7 days of click on ad. | | adGroups | `attributedSales14d` | Number of attributed sales occurring within 14 days of click on ad. | | adGroups | `attributedSales30d` | Number of attributed sales occurring within 30 days of click on ad. | | adGroups | `attributedSales1dSameSKU` | Aggregate value of attributed sales occurring within 1 day of click on ad where the purchased SKU was the same as the one advertised. | | adGroups | `attributedSales7dSameSKU` | Aggregate value of attributed sales occurring within 7 days of click on ad where the purchased SKU was the same as the one advertised. | | adGroups | `attributedSales14dSameSKU` | Aggregate value of attributed sales occurring within 14 days of click on ad where the purchased SKU was the same as the one advertised. | | adGroups | `attributedSales30dSameSKU` | Aggregate value of attributed sales occurring within 30 days of click on ad where the purchased SKU was the same as the one advertised. | | adGroups | `attributedUnitsOrdered1dSameSKU` | Number of attributed units ordered within 1 day of click on ad where the purchased SKU was the same as the one advertised. | | adGroups | `attributedUnitsOrdered7dSameSKU` | Number of attributed units ordered within 7 days of click on ad where the purchased SKU was the same as the one advertised. | | adGroups | `attributedUnitsOrdered14dSameSKU` | Number of attributed units ordered within 14 days of click on ad where the purchased SKU was the same as the one advertised. | | adGroups | `attributedUnitsOrdered30dSameSKU` | Number of attributed units ordered within 30 days of click on ad where the purchased SKU was the same as the one advertised. | | adGroups | `attributedKindleEditionNormalizedPagesRead14d` | Number of attributed kindle edition normalized pages read within 14 days of click on ad. | | adGroups | `attributedKindleEditionNormalizedPagesRoyalties14d` | The estimated Royalties of attributed estimated kindle edition normalized pages with in 14 days of click on ad.|         |           |              |              |  | keywords | `campaignName` | Unique name of the campaign | | keywords | `campaignId` | Unique numerical ID of the campaign | | keywords | `adGroupName` | Unique name of the ad group | | keywords | `adGroupId` | Unique numerical ID of the ad group | | keywords | `keywordId` | ID of the keyword used in bid | | keywords | `keywordText` | Text of the keyword or phrase used in bid | | keywords | `matchType` | Type of matching for the keyword or phrase used in bid. Must be one of: broad, phrase, or exact | | keywords | `impressions` | Total ad impressions. | | keywords | `clicks` | Total ad clicks. | | keywords | `cost` | Total cost of all clicks. Can be divided by clicks to obtain average CPC. | | keywords | `attributedConversions1d` | Number of attributed conversion events occurring within 1 day of click on ad. | | keywords | `attributedConversions7d` | Number of attributed conversion events occurring within 7 days of click on ad. | | keywords | `attributedConversions14d` | Number of attributed conversion events occurring within 14 days of click on ad. | | keywords | `attributedConversions30d` | Number of attributed conversion events occurring within 30 days of click on ad. | | keywords | `attributedConversions1dSameSKU` | Number of attributed conversion events occurring within 1 day of click on ad where the purchased SKU was the same as the one advertised. | | keywords | `attributedConversions7dSameSKU` | Number of attributed conversion events occurring within 7 days of click on ad where the purchased SKU was the same as the one advertised. | | keywords | `attributedConversions14dSameSKU` | Number of attributed conversion events occurring within 14 days of click on ad where the purchased SKU was the same as the one advertised. | | keywords | `attributedConversions30dSameSKU` | Number of attributed conversion events occurring within 30 days of click on ad where the purchased SKU was the same as the one advertised. | | keywords | `attributedUnitsOrdered1d` | Number of attributed units ordered within 1 day of click on ad. | | keywords | `attributedUnitsOrdered7d` | Number of attributed units ordered within 7 days of click on ad. | | keywords | `attributedUnitsOrdered14d` | Number of attributed units ordered within 14 days of click on ad. | | keywords | `attributedUnitsOrdered30d` | Number of attributed units ordered within 30 days of click on ad. | | keywords | `attributedSales1d` | Number of attributed sales occurring within 1 day of click on ad. | | keywords | `attributedSales7d` | Number of attributed sales occurring within 7 days of click on ad. | | keywords | `attributedSales14d` | Number of attributed sales occurring within 14 days of click on ad. | | keywords | `attributedSales30d` | Number of attributed sales occurring within 30 days of click on ad. | | keywords | `attributedSales1dSameSKU` | Aggregate value of attributed sales occurring within 1 day of click on ad where the purchased SKU was the same as the one advertised. | | keywords | `attributedSales7dSameSKU` | Aggregate value of attributed sales occurring within 7 days of click on ad where the purchased SKU was the same as the one advertised. | | keywords | `attributedSales14dSameSKU` | Aggregate value of attributed sales occurring within 14 days of click on ad where the purchased SKU was the same as the one advertised. | | keywords | `attributedSales30dSameSKU` | Aggregate value of attributed sales occurring within 30 days of click on ad where the purchased SKU was the same as the one advertised. | | keywords | `attributedUnitsOrdered1dSameSKU` | Number of attributed units ordered within 1 day of click on ad where the purchased SKU was the same as the one advertised. | | keywords | `attributedUnitsOrdered7dSameSKU` | Number of attributed units ordered within 7 day of click on ad where the purchased SKU was the same as the one advertised. | | keywords | `attributedUnitsOrdered14dSameSKU` | Number of attributed units ordered within 14 day of click on ad where the purchased SKU was the same as the one advertised. | | keywords | `attributedUnitsOrdered30dSameSKU` | Number of attributed units ordered within 30 day of click on ad where the purchased SKU was the same as the one advertised. | | keywords | `attributedKindleEditionNormalizedPagesRead14d` | Number of attributed kindle edition normalized pages read within 14 days of click on ad. | | keywords | `attributedKindleEditionNormalizedPagesRoyalties14d` | The estimated Royalties of attributed estimated kindle edition normalized pages with in 14 days of click on ad.|         |                |             |               |  | productAds | `campaignName` | Unique name of the campaign | | productAds | `campaignId` | Unique numerical ID of the campaign | | productAds | `adGroupName` | Unique name of the ad group | | productAds | `adGroupId` | Unique numerical ID of the ad group | | productAds | `impressions` | Total ad impressions. | | productAds | `clicks` | Total ad clicks. | | productAds | `cost` | Total cost of all clicks. Can be divided by clicks to obtain average CPC. | | productAds | `currency` | A dimensional metric | | productAds | `asin` | The ASIN that is being advertised. | | productAds | `sku` | The SKU that is being advertised. Not available for vendors. | | productAds | `attributedConversions1d` | Number of attributed conversion events occurring within 1 day of click on ad. | | productAds | `attributedConversions7d` | Number of attributed conversion events occurring within 7 days of click on ad. | | productAds | `attributedConversions14d` | Number of attributed conversion events occurring within 14 days of click on ad. | | productAds | `attributedConversions30d` | Number of attributed conversion events occurring within 30 days of click on ad. | | productAds | `attributedConversions1dSameSKU` | Number of attributed conversion events occurring within 1 day of click on ad where the purchased SKU was the same as the one advertised. | | productAds | `attributedConversions7dSameSKU` | Number of attributed conversion events occurring within 7 days of click on ad where the purchased SKU was the same as the one advertised. | | productAds | `attributedConversions14dSameSKU` | Number of attributed conversion events occurring within 14 days of click on ad where the purchased SKU was the same as the one advertised. | | productAds | `attributedConversions30dSameSKU` | Number of attributed conversion events occurring within 30 days of click on ad where the purchased SKU was the same as the one advertised. | | productAds | `attributedUnitsOrdered1d` | Number of attributed units ordered within 1 day of click on ad. | | productAds | `attributedUnitsOrdered7d` | Number of attributed units ordered within 7 days of click on ad. | | productAds | `attributedUnitsOrdered14d` | Number of attributed units ordered within 14 days of click on ad. | | productAds | `attributedUnitsOrdered30d` | Number of attributed units ordered within 30 days of click on ad. | | productAds | `attributedSales1d` | Number of attributed sales occurring within 1 day of click on ad. | | productAds | `attributedSales7d` | Number of attributed sales occurring within 7 days of click on ad. | | productAds | `attributedSales14d` | Number of attributed sales occurring within 14 days of click on ad. | | productAds | `attributedSales30d` | Number of attributed sales occurring within 30 days of click on ad. | | productAds | `attributedSales1dSameSKU` | Aggregate value of attributed sales occurring within 1 day of click on ad where the purchased SKU was the same as the one advertised. | | productAds | `attributedSales7dSameSKU` | Aggregate value of attributed sales occurring within 7 days of click on ad where the purchased SKU was the same as the one advertised. | | productAds | `attributedSales14dSameSKU` | Aggregate value of attributed sales occurring within 14 days of click on ad where the purchased SKU was the same as the one advertised. | | productAds | `attributedSales30dSameSKU` | Aggregate value of attributed sales occurring within 30 days of click on ad where the purchased SKU was the same as the one advertised. | | productAds | `attributedUnitsOrdered1dSameSKU` | Number of attributed units ordered within 1 day of click on ad where the purchased SKU was the same as the one advertised. | | productAds | `attributedUnitsOrdered7dSameSKU` | Number of attributed units ordered within 7 days of click on ad where the purchased SKU was the same as the one advertised. | | productAds | `attributedUnitsOrdered14dSameSKU` | Number of attributed units ordered within 14 days of click on ad where the purchased SKU was the same as the one advertised. | | productAds | `attributedUnitsOrdered30dSameSKU` | Number of attributed units ordered within 30 days of click on ad where the purchased SKU was the same as the one advertised. | | productAds | `attributedKindleEditionNormalizedPagesRead14d` | Number of attributed kindle edition normalized pages read within 14 days of click on ad. | | productAds | `attributedKindleEditionNormalizedPagesRoyalties14d` | The estimated Royalties of attributed estimated kindle edition normalized pages with in 14 days of click on ad.|         |              |               |              | | asins | `campaignName` | Unique name of the campaign | | asins | `campaignId` | Unique numerical ID of the campaign | | asins | `adGroupName` | Unique name of the ad group | | asins | `adGroupId` | Unique numerical ID of the ad group | | asins | `keywordId` | Unique numerical ID of the keyword | | asins | `keywordText` | Keyword or phrase used in bid | | asins | `asin` | Unique ASIN advertised | | asins | `otherAsin` | A non-dimensional metric for ASINs other than the one advertised | | asins | `sku` | Unique SKU advertised. Not available for vendors. | | asins | `currency` | A dimensional metric | | asins | `matchType` | One of: broad, phrase, or exact | | asins | `attributedUnitsOrdered1d` | Number of ASIN (SKU) units sold. 1 day.| | asins | `attributedUnitsOrdered7d` | Number of ASIN (SKU) units sold. 7 days.| | asins | `attributedUnitsOrdered14d` | Number of ASIN (SKU) units sold. 14 days.| | asins | `attributedUnitsOrdered30d` | Number of ASIN (SKU) units sold. 30 days.| | asins | `attributedUnitsOrdered1dOtherSKU` | Number of other ASIN (SKU) units sold. 1 day. | | asins | `attributedUnitsOrdered7dOtherSKU` | Number of other ASIN (SKU) units sold. 7 days. | | asins | `attributedUnitsOrdered14dOtherSKU` | Number of other ASIN (SKU) units sold. 14 days. | | asins | `attributedUnitsOrdered30dOtherSKU` | Number of other ASIN (SKU) units sold. 30 days. | | asins | `attributedSales1dOtherSKU` | Sales for another ASIN (SKU). 1 day. | | asins | `attributedSales7dOtherSKU` | Sales for another ASIN (SKU). 7 days. | | asins | `attributedSales14dOtherSKU` | Sales for another ASIN (sku). 14 days. | | asins | `attributedSales30dOtherSKU` | Sales for another ASIN (sku). 30 days. | | asins | `targetId` | The target identifier. | | asins | `targetingText` | The targeting text. | | asins | `targetingType` | The targeting type. | | asins | `attributedKindleEditionNormalizedPagesRead14d` | Number of attributed kindle edition normalized pages read within 14 days of click on ad. | | asins | `attributedKindleEditionNormalizedPagesRoyalties14d` | The estimated Royalties of attributed estimated kindle edition normalized pages with in 14 days of click on ad.|         |                      |              |              | | targets | `campaignName` | Unique name of the campaign | | targets | `campaignId` | Unique numerical ID of the campaign | | targets | `adGroupName` | Unique name of the ad group | | targets | `adGroupId` | Unique numerical ID of the ad group | | targets | `targetId` | ID of the targeting expression used in a bid | | targets | `targetingExpression` | A string representation of your expression object in targeting clauses | | targets | `targetingText` | A resolved string representation of your expression object in targeting clauses | | targets | `targetingType` | Type of matching for the targeting expression used in bid. For manually created expressions this value is: `TARGETING_EXPRESSION`. For auto-targeting expressions this value is: `TARGETING_EXPRESSION_PREDEFINED` | | targets | `impressions` | Total ad impressions | | targets | `clicks` | Total ad clicks | | targets | `cost` | Total cost of all clicks. Can be divided by clicks to obtain average CPC | | targets | `attributedConversions1d` | Number of attributed conversion events occurring within 1 day of click on ad | | targets | `attributedConversions7d` | Number of attributed conversion events occurring within 7 days of click on ad | | targets | `attributedConversions14d` | Number of attributed conversion events occurring within 14 days of click on ad | | targets | `attributedConversions30d` | Number of attributed conversion events occurring within 30 days of click on ad | | targets | `attributedConversions1dSameSKU` | Number of attributed conversion events occurring within 1 day of click on ad where the purchased SKU was the same as the one advertised | | targets | `attributedConversions7dSameSKU` | Number of attributed conversion events occurring within 7 days of click on ad where the purchased SKU was the same as the one advertised | | targets | `attributedConversions14dSameSKU` | Number of attributed conversion events occurring within 14 days of click on ad where the purchased SKU was the same as the one advertised | | targets | `attributedConversions30dSameSKU` | Number of attributed conversion events occurring within 30 days of click on ad where the purchased SKU was the same as the one advertised | | targets | `attributedUnitsOrdered1d` | Number of attributed units ordered within 1 day of click on ad | | targets | `attributedUnitsOrdered7d` | Number of attributed units ordered within 7 days of click on ad | | targets | `attributedUnitsOrdered14d` | Number of attributed units ordered within 14 days of click on ad | | targets | `attributedUnitsOrdered30d` | Number of attributed units ordered within 30 days of click on ad | | targets | `attributedSales1d` | Number of attributed sales occurring within 1 day of click on ad | | targets | `attributedSales7d` | Number of attributed sales occurring within 7 days of click on ad | | targets | `attributedSales14d` | Number of attributed sales occurring within 14 days of click on ad | | targets | `attributedSales30d` | Number of attributed sales occurring within 30 days of click on ad | | targets | `attributedSales1dSameSKU` | Aggregate value of attributed sales occurring within 1 day of click on ad where the purchased SKU was the same as the one advertised | | targets | `attributedSales7dSameSKU` | Aggregate value of attributed sales occurring within 7 days of click on ad where the purchased SKU was the same as the one advertised | | targets | `attributedSales14dSameSKU` | Aggregate value of attributed sales occurring within 14 days of click on ad where the purchased SKU was the same as the one advertised | | targets | `attributedSales30dSameSKU` | Aggregate value of attributed sales occurring within 30 days of click on ad where the purchased SKU was the same as the one advertised | | targets | `attributedUnitsOrdered1dSameSKU` | Number of attributed units ordered within 1 day of click on ad where the purchased SKU was the same as the one advertised. | | targets | `attributedUnitsOrdered7dSameSKU` | Number of attributed units ordered within 7 days of click on ad where the purchased SKU was the same as the one advertised. | | targets | `attributedUnitsOrdered14dSameSKU` | Number of attributed units ordered within 14 days of click on ad where the purchased SKU was the same as the one advertised. | | targets | `attributedUnitsOrdered30dSameSKU` | Number of attributed units ordered within 30 days of click on ad where the purchased SKU was the same as the one advertised. | | targets | `attributedKindleEditionNormalizedPagesRead14d` | Number of attributed kindle edition normalized pages read within 14 days of click on ad. | | targets | `attributedKindleEditionNormalizedPagesRoyalties14d` | The estimated Royalties of attributed estimated kindle edition normalized pages with in 14 days of click on ad.|        
     * @type {string}
     * @memberof Report
     */
    metrics?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ReportStateFilterEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportCampaignTypeEnum {
    SponsoredProducts = 'sponsoredProducts'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportSegmentEnum {
    Query = 'query',
    Placement = 'placement'
}

/**
 * 
 * @export
 * @interface SnapshotRequest
 */
export interface SnapshotRequest {
    /**
     * 
     * @type {string}
     * @memberof SnapshotRequest
     */
    stateFilter?: SnapshotRequestStateFilterEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SnapshotRequestStateFilterEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived',
    EnabledPaused = 'enabled, paused',
    EnabledArchived = 'enabled, archived',
    PausedArchived = 'paused, archived',
    EnabledPausedArchived = 'enabled, paused, archived'
}

/**
 * 
 * @export
 * @interface SnapshotResponse
 */
export interface SnapshotResponse {
    /**
     * The snapshot identifier.
     * @type {string}
     * @memberof SnapshotResponse
     */
    snapshotId?: string;
    /**
     * The record type of the report.
     * @type {string}
     * @memberof SnapshotResponse
     */
    recordType?: SnapshotResponseRecordTypeEnum;
    /**
     * The generation status of the snapshot.
     * @type {string}
     * @memberof SnapshotResponse
     */
    status?: SnapshotResponseStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SnapshotResponseRecordTypeEnum {
    Campaigns = 'campaigns',
    AdGroups = 'adGroups',
    Keywords = 'keywords',
    NegativeKeywords = 'negativeKeywords',
    CampaignNegativeKeywords = 'campaignNegativeKeywords',
    ProductAds = 'productAds',
    Targets = 'targets',
    NegativeTargets = 'negativeTargets'
}
/**
    * @export
    * @enum {string}
    */
export enum SnapshotResponseStatusEnum {
    InProgress = 'IN_PROGRESS',
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * The current resource state.
 * @export
 * @enum {string}
 */

export enum State {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * Information about the recommended bid.
 * @export
 * @interface SuggestedBid
 */
export interface SuggestedBid {
    /**
     * The bid recommendation.
     * @type {number}
     * @memberof SuggestedBid
     */
    suggested?: number;
    /**
     * The lower bound bid recommendation.
     * @type {number}
     * @memberof SuggestedBid
     */
    rangeStart?: number;
    /**
     * The upper bound bid recommendation.
     * @type {number}
     * @memberof SuggestedBid
     */
    rangeEnd?: number;
}
/**
 * 
 * @export
 * @interface TargetingClause
 */
export interface TargetingClause {
    /**
     * The target identifier.
     * @type {number}
     * @memberof TargetingClause
     */
    targetId?: number;
    /**
     * The identifier of the campaign to which this target is associated.
     * @type {number}
     * @memberof TargetingClause
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this target is associated.
     * @type {number}
     * @memberof TargetingClause
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof TargetingClause
     */
    state?: State;
    /**
     * The targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof TargetingClause
     */
    expression?: Array<TargetingExpressionPredicate>;
    /**
     * The resolved targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof TargetingClause
     */
    resolvedExpression?: Array<TargetingExpressionPredicate>;
    /**
     * 
     * @type {ExpressionType}
     * @memberof TargetingClause
     */
    expressionType?: ExpressionType;
    /**
     * The bid for ads sourced using the target. Targets that do not have bid values in listTargetingClauses will inherit the defaultBid from the adGroup level. This table details the maximum allowable bid (in local currency) for keywords by marketplace: | Marketplace | Currency | Min / Max bid for SP | | --- | --- | --- | | US | USD | 0.02 / 1000 | | CA | CAD | 0.02 / 1000 | | UK | GBP | 0.02 / 1000 | | DE | EUR | 0.02 / 1000 | | FR | EUR | 0.02 / 1000 | | ES | EUR | 0.02 / 1000 | | IT | EUR | 0.02 / 1000 | | JP | JPY | 2.0 / 100000 | | AU | AUD | 0.10 / 1410 | | AE | AED | 0.24 / 184.0 |
     * @type {number}
     * @memberof TargetingClause
     */
    bid?: number | null;
}
/**
 * 
 * @export
 * @interface TargetingClauseEx
 */
export interface TargetingClauseEx {
    /**
     * The target identifier.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    targetId?: number;
    /**
     * The identifier of the campaign to which this target is associated.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this target is associated.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof TargetingClauseEx
     */
    state?: State;
    /**
     * The targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof TargetingClauseEx
     */
    expression?: Array<TargetingExpressionPredicate>;
    /**
     * The resolved targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof TargetingClauseEx
     */
    resolvedExpression?: Array<TargetingExpressionPredicate>;
    /**
     * 
     * @type {ExpressionType}
     * @memberof TargetingClauseEx
     */
    expressionType?: ExpressionType;
    /**
     * The bid for ads sourced using the target. Targets that do not have bid values in listTargetingClauses will inherit the defaultBid from the adGroup level. This table details the maximum allowable bid (in local currency) for keywords by marketplace: | Marketplace | Currency | Min / Max bid for SP | | --- | --- | --- | | US | USD | 0.02 / 1000 | | CA | CAD | 0.02 / 1000 | | UK | GBP | 0.02 / 1000 | | DE | EUR | 0.02 / 1000 | | FR | EUR | 0.02 / 1000 | | ES | EUR | 0.02 / 1000 | | IT | EUR | 0.02 / 1000 | | JP | JPY | 2.0 / 100000 | | AU | AUD | 0.10 / 1410 | | AE | AED | 0.24 / 184.0 |
     * @type {number}
     * @memberof TargetingClauseEx
     */
    bid?: number | null;
    /**
     * The epoch time that the targeting clause was created.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    creationDate?: number;
    /**
     * The epoch time that the targeting clause was updated.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    lastUpdatedDate?: number;
    /**
     * The computed status of the targeting clause. See the [developer notes](https://advertising.amazon.com/API/docs/en-us/get-started/developer-notes) for more information.
     * @type {string}
     * @memberof TargetingClauseEx
     */
    servingStatus?: TargetingClauseExServingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingClauseExServingStatusEnum {
    TargetingClauseArchived = 'TARGETING_CLAUSE_ARCHIVED',
    TargetingClausePaused = 'TARGETING_CLAUSE_PAUSED',
    TargetingClauseStatusLive = 'TARGETING_CLAUSE_STATUS_LIVE',
    TargetingClausePolicingSuspended = 'TARGETING_CLAUSE_POLICING_SUSPENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    PendingStartDate = 'PENDING_START_DATE'
}

/**
 * 
 * @export
 * @interface TargetingClauseResponse
 */
export interface TargetingClauseResponse {
    /**
     * The target identifier.
     * @type {number}
     * @memberof TargetingClauseResponse
     */
    targetId?: number;
    /**
     * An enumerated response code.
     * @type {string}
     * @memberof TargetingClauseResponse
     */
    code?: string;
    /**
     * A human-readable description of the value in the `code` field.
     * @type {string}
     * @memberof TargetingClauseResponse
     */
    details?: string;
    /**
     * A human-readable description of the value in the `code` field.
     * @type {string}
     * @memberof TargetingClauseResponse
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface TargetingExpression
 */
export interface TargetingExpression {
    /**
     * List of targeting expressions for which to generate bid recommendations.
     * @type {Array<TargetingExpressionExpressions>}
     * @memberof TargetingExpression
     */
    expressions?: Array<TargetingExpressionExpressions>;
}
/**
 * 
 * @export
 * @interface TargetingExpressionExpressions
 */
export interface TargetingExpressionExpressions {
    /**
     * The type.
     * @type {Array<string>}
     * @memberof TargetingExpressionExpressions
     */
    type?: Array<TargetingExpressionExpressionsTypeEnum>;
    /**
     * The expression value
     * @type {string}
     * @memberof TargetingExpressionExpressions
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingExpressionExpressionsTypeEnum {
    QueryBroadMatches = 'queryBroadMatches',
    QueryPhraseMatches = 'queryPhraseMatches',
    QueryExactMatches = 'queryExactMatches',
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinSameAs = 'asinSameAs',
    QueryBroadRelMatches = 'queryBroadRelMatches',
    QueryHighRelMatches = 'queryHighRelMatches',
    AsinSubstituteRelated = 'asinSubstituteRelated',
    AsinAccessoryRelated = 'asinAccessoryRelated'
}

/**
 * 
 * @export
 * @interface TargetingExpressionPredicate
 */
export interface TargetingExpressionPredicate {
    /**
     * The expression value
     * @type {string}
     * @memberof TargetingExpressionPredicate
     */
    value?: string;
    /**
     * The type of targeting expression. You can specify values for the following predicates: | Predicate | Description | | --- | --- | | `queryBroadMatches` |  | `asinCategorySameAs` | Negatively Target the same category as the category expressed. | | `asinBrandSameAs` | Target the brand that is the same as the brand expressed. | | `asinPriceLessThan` | Target a price that is less than the price expressed. | | `asinPriceBetween` | Target a price that is between the prices expressed. | | `asinPriceGreaterThan` | Target a price that is greater than the price expressed. | | `asinReviewRatingLessThan` | Target a review rating less than the review rating that is expressed. | | `asinReviewRatingBetween` | Target a review rating that is between the review ratings expressed. | | `asinReviewRatingGreaterThan` | Target a review rating that is greater than the review rating expressed. | | `asinSameAs` | Target an ASIN that is the same as the ASIN expressed. | | `asinIsPrimeShippingEligible` | Target products that are Prime Shipping Eligible. This refinement can be applied at a category or brand level only. | | `asinAgeRangeSameAs` | Target an age range that is in the expressed range. This refinement can be applied for toys and games categories only. | | `asinGenreSameAs` | Target products related to the expressed genre. This refinement can be applied for Books and eBooks categories only.   |
     * @type {string}
     * @memberof TargetingExpressionPredicate
     */
    type?: TargetingExpressionPredicateTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingExpressionPredicateTypeEnum {
    QueryBroadMatches = 'queryBroadMatches',
    QueryPhraseMatches = 'queryPhraseMatches',
    QueryExactMatches = 'queryExactMatches',
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinSameAs = 'asinSameAs',
    QueryBroadRelMatches = 'queryBroadRelMatches',
    QueryHighRelMatches = 'queryHighRelMatches',
    AsinSubstituteRelated = 'asinSubstituteRelated',
    AsinAccessoryRelated = 'asinAccessoryRelated',
    AsinAgeRangeSameAs = 'asinAgeRangeSameAs',
    AsinGenreSameAs = 'asinGenreSameAs',
    AsinIsPrimeShippingEligible = 'asinIsPrimeShippingEligible'
}

/**
 * 
 * @export
 * @interface UpdateAdGroup
 */
export interface UpdateAdGroup {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof UpdateAdGroup
     */
    adGroupId?: number;
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof UpdateAdGroup
     */
    name?: string;
    /**
     * The bid value used when no bid is specified for keywords in the ad group.
     * @type {number}
     * @memberof UpdateAdGroup
     */
    defaultBid?: number;
    /**
     * 
     * @type {State}
     * @memberof UpdateAdGroup
     */
    state?: State;
}
/**
 * 
 * @export
 * @interface UpdateCampaign
 */
export interface UpdateCampaign {
    /**
     * The identifier of an existing campaign to update.
     * @type {number}
     * @memberof UpdateCampaign
     */
    campaignId?: number;
    /**
     * The identifier of an existing portfolio to which the campaign is associated.
     * @type {number}
     * @memberof UpdateCampaign
     */
    portfolioId?: number;
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof UpdateCampaign
     */
    name?: string;
    /**
     * A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
     * @type {{ [key: string]: string; }}
     * @memberof UpdateCampaign
     */
    tags?: { [key: string]: string; };
    /**
     * 
     * @type {State}
     * @memberof UpdateCampaign
     */
    state?: State;
    /**
     * The daily budget of the campaign.
     * @type {number}
     * @memberof UpdateCampaign
     */
    dailyBudget?: number;
    /**
     * The starting date of the campaign. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof UpdateCampaign
     */
    startDate?: string;
    /**
     * The ending date of the campaign to stop running. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof UpdateCampaign
     */
    endDate?: string | null;
    /**
     * If set to true, Amazon increases the default bid for ads that are eligible to appear in this placement. See developer notes for more information.
     * @type {boolean}
     * @memberof UpdateCampaign
     */
    premiumBidAdjustment?: boolean;
    /**
     * 
     * @type {Bidding}
     * @memberof UpdateCampaign
     */
    bidding?: Bidding;
}
/**
 * 
 * @export
 * @interface UpdateCampaignNegativeKeyword
 */
export interface UpdateCampaignNegativeKeyword {
    /**
     * The identifier of the campaign negative keyword.
     * @type {number}
     * @memberof UpdateCampaignNegativeKeyword
     */
    keywordId?: number;
    /**
     * The campaign negative keyword state.
     * @type {string}
     * @memberof UpdateCampaignNegativeKeyword
     */
    state?: UpdateCampaignNegativeKeywordStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateCampaignNegativeKeywordStateEnum {
    Deleted = 'deleted'
}

/**
 * 
 * @export
 * @interface UpdateKeyword
 */
export interface UpdateKeyword {
    /**
     * The identifier of the keyword.
     * @type {number}
     * @memberof UpdateKeyword
     */
    keywordId?: number;
    /**
     * 
     * @type {State}
     * @memberof UpdateKeyword
     */
    state?: State;
    /**
     * Bid associated with this keyword. Applicable to biddable match types only.
     * @type {number}
     * @memberof UpdateKeyword
     */
    bid?: number | null;
}
/**
 * 
 * @export
 * @interface UpdateNegativeKeyword
 */
export interface UpdateNegativeKeyword {
    /**
     * The identifer of the keyword.
     * @type {number}
     * @memberof UpdateNegativeKeyword
     */
    keywordId?: number;
    /**
     * 
     * @type {State}
     * @memberof UpdateNegativeKeyword
     */
    state?: State;
}
/**
 * 
 * @export
 * @interface UpdateNegativeTargetingClause
 */
export interface UpdateNegativeTargetingClause {
    /**
     * The target identifier.
     * @type {number}
     * @memberof UpdateNegativeTargetingClause
     */
    targetId?: number;
    /**
     * 
     * @type {State}
     * @memberof UpdateNegativeTargetingClause
     */
    state?: State;
    /**
     * The targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof UpdateNegativeTargetingClause
     */
    expression?: Array<TargetingExpressionPredicate>;
    /**
     * 
     * @type {ExpressionType}
     * @memberof UpdateNegativeTargetingClause
     */
    expressionType?: ExpressionType;
}
/**
 * 
 * @export
 * @interface UpdateProductAd
 */
export interface UpdateProductAd {
    /**
     * The product ad identifier.
     * @type {number}
     * @memberof UpdateProductAd
     */
    adId?: number;
    /**
     * 
     * @type {State}
     * @memberof UpdateProductAd
     */
    state?: State;
}
/**
 * 
 * @export
 * @interface UpdateTargetingClause
 */
export interface UpdateTargetingClause {
    /**
     * The target identifier.
     * @type {number}
     * @memberof UpdateTargetingClause
     */
    targetId?: number;
    /**
     * 
     * @type {State}
     * @memberof UpdateTargetingClause
     */
    state?: State;
    /**
     * The targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof UpdateTargetingClause
     */
    expression?: Array<TargetingExpressionPredicate>;
    /**
     * The resolved targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof UpdateTargetingClause
     */
    resolvedExpression?: Array<TargetingExpressionPredicate>;
    /**
     * 
     * @type {ExpressionType}
     * @memberof UpdateTargetingClause
     */
    expressionType?: ExpressionType;
    /**
     * The bid for ads sourced using the target. Targets that do not have bid values in listTargetingClauses will inherit the defaultBid from the adGroup level. This table details the maximum allowable bid (in local currency) for keywords by marketplace: | Marketplace | Currency | Min / Max bid for SP | | --- | --- | --- | | US | USD | 0.02 / 1000 | | CA | CAD | 0.02 / 1000 | | UK | GBP | 0.02 / 1000 | | DE | EUR | 0.02 / 1000 | | FR | EUR | 0.02 / 1000 | | ES | EUR | 0.02 / 1000 | | IT | EUR | 0.02 / 1000 | | JP | JPY | 2.0 / 100000 | | AU | AUD | 0.10 / 1410 | | AE | AED | 0.24 / 184.0 |
     * @type {number}
     * @memberof UpdateTargetingClause
     */
    bid?: number | null;
}

/**
 * AdGroupsApi - axios parameter creator
 * @export
 */
export const AdGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sets the ad group status to `archived`. Archived entities cannot be made active again. See developer notes for more information.
         * @summary Archives an ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of an existing ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveAdGroup: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveAdGroup', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveAdGroup', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('archiveAdGroup', 'adGroupId', adGroupId)
            const localVarPath = `/v2/sp/adGroups/{adGroupId}`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates one or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateAdGroup>} [createAdGroup] An array of ad groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdGroups: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createAdGroup?: Array<CreateAdGroup>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createAdGroups', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createAdGroups', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/adGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAdGroup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets an ad group specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of an existing ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroup: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAdGroup', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAdGroup', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('getAdGroup', 'adGroupId', adGroupId)
            const localVarPath = `/v2/sp/adGroups/{adGroupId}`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets an ad group that has extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of an existing ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAdGroupEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAdGroupEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('getAdGroupEx', 'adGroupId', adGroupId)
            const localVarPath = `/v2/sp/adGroups/extended/{adGroupId}`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets one or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {string} [campaignType] Restricts results to ad groups within campaign types specified in comma-separated list.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [name] Restricts results to campaigns with the specified name.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroups: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, campaignType?: string, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAdGroups', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAdGroups', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/adGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (campaignType !== undefined) {
                localVarQueryParameter['campaignType'] = campaignType;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets ad groups that have extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {string} [campaignType] Restricts results to ad groups within campaign types specified in comma-separated list.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [name] Restricts results to campaigns with the specified name.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, campaignType?: string, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAdGroupsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAdGroupsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/adGroups/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (campaignType !== undefined) {
                localVarQueryParameter['campaignType'] = campaignType;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates one or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateAdGroup>} [updateAdGroup] An array of ad groups that have updated field values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdGroups: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateAdGroup?: Array<UpdateAdGroup>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateAdGroups', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateAdGroups', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/adGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAdGroup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdGroupsApi - functional programming interface
 * @export
 */
export const AdGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Sets the ad group status to `archived`. Archived entities cannot be made active again. See developer notes for more information.
         * @summary Archives an ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of an existing ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveAdGroup(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveAdGroup(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates one or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateAdGroup>} [createAdGroup] An array of ad groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createAdGroup?: Array<CreateAdGroup>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdGroupResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createAdGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets an ad group specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of an existing ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdGroup(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdGroup(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets an ad group that has extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of an existing ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdGroupEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdGroupEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdGroupEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets one or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {string} [campaignType] Restricts results to ad groups within campaign types specified in comma-separated list.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [name] Restricts results to campaigns with the specified name.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, campaignType?: string, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, campaignType, stateFilter, name, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets ad groups that have extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {string} [campaignType] Restricts results to ad groups within campaign types specified in comma-separated list.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [name] Restricts results to campaigns with the specified name.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdGroupsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, campaignType?: string, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdGroupEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdGroupsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, campaignType, stateFilter, name, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates one or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateAdGroup>} [updateAdGroup] An array of ad groups that have updated field values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateAdGroup?: Array<UpdateAdGroup>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdGroupResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateAdGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdGroupsApi - factory interface
 * @export
 */
export const AdGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdGroupsApiFp(configuration)
    return {
        /**
         * Sets the ad group status to `archived`. Archived entities cannot be made active again. See developer notes for more information.
         * @summary Archives an ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of an existing ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveAdGroup(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): AxiosPromise<AdGroupResponse> {
            return localVarFp.archiveAdGroup(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates one or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateAdGroup>} [createAdGroup] An array of ad groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createAdGroup?: Array<CreateAdGroup>, options?: any): AxiosPromise<Array<AdGroupResponse>> {
            return localVarFp.createAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createAdGroup, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets an ad group specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of an existing ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroup(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): AxiosPromise<AdGroup> {
            return localVarFp.getAdGroup(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets an ad group that has extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of an existing ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): AxiosPromise<AdGroupEx> {
            return localVarFp.getAdGroupEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets one or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {string} [campaignType] Restricts results to ad groups within campaign types specified in comma-separated list.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [name] Restricts results to campaigns with the specified name.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, campaignType?: string, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<AdGroup>> {
            return localVarFp.getAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, campaignType, stateFilter, name, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets ad groups that have extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {string} [campaignType] Restricts results to ad groups within campaign types specified in comma-separated list.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [name] Restricts results to campaigns with the specified name.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, campaignType?: string, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<AdGroupEx>> {
            return localVarFp.getAdGroupsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, campaignType, stateFilter, name, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates one or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateAdGroup>} [updateAdGroup] An array of ad groups that have updated field values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateAdGroup?: Array<UpdateAdGroup>, options?: any): AxiosPromise<Array<AdGroupResponse>> {
            return localVarFp.updateAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateAdGroup, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveAdGroup operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiArchiveAdGroupRequest
 */
export interface AdGroupsApiArchiveAdGroupRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof AdGroupsApiArchiveAdGroup
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiArchiveAdGroup
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing ad group.
     * @type {number}
     * @memberof AdGroupsApiArchiveAdGroup
     */
    readonly adGroupId: number
}

/**
 * Request parameters for createAdGroups operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiCreateAdGroupsRequest
 */
export interface AdGroupsApiCreateAdGroupsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof AdGroupsApiCreateAdGroups
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiCreateAdGroups
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of ad groups.
     * @type {Array<CreateAdGroup>}
     * @memberof AdGroupsApiCreateAdGroups
     */
    readonly createAdGroup?: Array<CreateAdGroup>
}

/**
 * Request parameters for getAdGroup operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiGetAdGroupRequest
 */
export interface AdGroupsApiGetAdGroupRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroup
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroup
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing ad group.
     * @type {number}
     * @memberof AdGroupsApiGetAdGroup
     */
    readonly adGroupId: number
}

/**
 * Request parameters for getAdGroupEx operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiGetAdGroupExRequest
 */
export interface AdGroupsApiGetAdGroupExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroupEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroupEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing ad group.
     * @type {number}
     * @memberof AdGroupsApiGetAdGroupEx
     */
    readonly adGroupId: number
}

/**
 * Request parameters for getAdGroups operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiGetAdGroupsRequest
 */
export interface AdGroupsApiGetAdGroupsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroups
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroups
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof AdGroupsApiGetAdGroups
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof AdGroupsApiGetAdGroups
     */
    readonly count?: number

    /**
     * Restricts results to ad groups within campaign types specified in comma-separated list.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroups
     */
    readonly campaignType?: string

    /**
     * Restricts results to resources with state within the specified comma-separated list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof AdGroupsApiGetAdGroups
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Restricts results to campaigns with the specified name.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroups
     */
    readonly name?: string

    /**
     * A comma-delimited list of campaign identifiers.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroups
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for getAdGroupsEx operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiGetAdGroupsExRequest
 */
export interface AdGroupsApiGetAdGroupsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroupsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroupsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof AdGroupsApiGetAdGroupsEx
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof AdGroupsApiGetAdGroupsEx
     */
    readonly count?: number

    /**
     * Restricts results to ad groups within campaign types specified in comma-separated list.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroupsEx
     */
    readonly campaignType?: string

    /**
     * Restricts results to resources with state within the specified comma-separated list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof AdGroupsApiGetAdGroupsEx
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Restricts results to campaigns with the specified name.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroupsEx
     */
    readonly name?: string

    /**
     * A comma-delimited list of campaign identifiers.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroupsEx
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for updateAdGroups operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiUpdateAdGroupsRequest
 */
export interface AdGroupsApiUpdateAdGroupsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof AdGroupsApiUpdateAdGroups
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiUpdateAdGroups
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of ad groups that have updated field values.
     * @type {Array<UpdateAdGroup>}
     * @memberof AdGroupsApiUpdateAdGroups
     */
    readonly updateAdGroup?: Array<UpdateAdGroup>
}

/**
 * AdGroupsApi - object-oriented interface
 * @export
 * @class AdGroupsApi
 * @extends {BaseAPI}
 */
export class AdGroupsApi extends BaseAPI {
    /**
     * Sets the ad group status to `archived`. Archived entities cannot be made active again. See developer notes for more information.
     * @summary Archives an ad group.
     * @param {AdGroupsApiArchiveAdGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public archiveAdGroup(requestParameters: AdGroupsApiArchiveAdGroupRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).archiveAdGroup(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates one or more ad groups.
     * @param {AdGroupsApiCreateAdGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public createAdGroups(requestParameters: AdGroupsApiCreateAdGroupsRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).createAdGroups(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createAdGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets an ad group specified by identifier.
     * @param {AdGroupsApiGetAdGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public getAdGroup(requestParameters: AdGroupsApiGetAdGroupRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).getAdGroup(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets an ad group that has extended data fields.
     * @param {AdGroupsApiGetAdGroupExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public getAdGroupEx(requestParameters: AdGroupsApiGetAdGroupExRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).getAdGroupEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets one or more ad groups.
     * @param {AdGroupsApiGetAdGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public getAdGroups(requestParameters: AdGroupsApiGetAdGroupsRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).getAdGroups(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.campaignType, requestParameters.stateFilter, requestParameters.name, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets ad groups that have extended data fields.
     * @param {AdGroupsApiGetAdGroupsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public getAdGroupsEx(requestParameters: AdGroupsApiGetAdGroupsExRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).getAdGroupsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.campaignType, requestParameters.stateFilter, requestParameters.name, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates one or more ad groups.
     * @param {AdGroupsApiUpdateAdGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public updateAdGroups(requestParameters: AdGroupsApiUpdateAdGroupsRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).updateAdGroups(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateAdGroup, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BidRecommendationsApi - axios parameter creator
 * @export
 */
export const BidRecommendationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets bid recommendations for keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {KeywordBidRecommendationsData} [keywordBidRecommendationsData] An array of keyword bid recommendation objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKeywordBidRecommendations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordBidRecommendationsData?: KeywordBidRecommendationsData, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createKeywordBidRecommendations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createKeywordBidRecommendations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/keywords/bidRecommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(keywordBidRecommendationsData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a bid recommendation for an ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of an existing ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupBidRecommendations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAdGroupBidRecommendations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAdGroupBidRecommendations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('getAdGroupBidRecommendations', 'adGroupId', adGroupId)
            const localVarPath = `/v2/sp/adGroups/{adGroupId}/bidRecommendations`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of bid recommendations for keyword, product, or auto targeting expressions.
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBidRecommendations: async (inlineObject1?: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/sp/targets/bidRecommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a bid recommendation for a keyword.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeywordBidRecommendations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getKeywordBidRecommendations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getKeywordBidRecommendations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'keywordId' is not null or undefined
            assertParamExists('getKeywordBidRecommendations', 'keywordId', keywordId)
            const localVarPath = `/v2/sp/keywords/{keywordId}/bidRecommendations`
                .replace(`{${"keywordId"}}`, encodeURIComponent(String(keywordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BidRecommendationsApi - functional programming interface
 * @export
 */
export const BidRecommendationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BidRecommendationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets bid recommendations for keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {KeywordBidRecommendationsData} [keywordBidRecommendationsData] An array of keyword bid recommendation objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createKeywordBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordBidRecommendationsData?: KeywordBidRecommendationsData, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BidRecommendationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createKeywordBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordBidRecommendationsData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a bid recommendation for an ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of an existing ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdGroupBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdGroupBidRecommendationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdGroupBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of bid recommendations for keyword, product, or auto targeting expressions.
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBidRecommendations(inlineObject1?: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBidRecommendations(inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a bid recommendation for a keyword.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKeywordBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeywordBidRecommendationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKeywordBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BidRecommendationsApi - factory interface
 * @export
 */
export const BidRecommendationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BidRecommendationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets bid recommendations for keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {KeywordBidRecommendationsData} [keywordBidRecommendationsData] An array of keyword bid recommendation objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKeywordBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordBidRecommendationsData?: KeywordBidRecommendationsData, options?: any): AxiosPromise<BidRecommendationsResponse> {
            return localVarFp.createKeywordBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordBidRecommendationsData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a bid recommendation for an ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of an existing ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): AxiosPromise<AdGroupBidRecommendationsResponse> {
            return localVarFp.getAdGroupBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of bid recommendations for keyword, product, or auto targeting expressions.
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBidRecommendations(inlineObject1?: InlineObject1, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getBidRecommendations(inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a bid recommendation for a keyword.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeywordBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): AxiosPromise<KeywordBidRecommendationsResponse> {
            return localVarFp.getKeywordBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createKeywordBidRecommendations operation in BidRecommendationsApi.
 * @export
 * @interface BidRecommendationsApiCreateKeywordBidRecommendationsRequest
 */
export interface BidRecommendationsApiCreateKeywordBidRecommendationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof BidRecommendationsApiCreateKeywordBidRecommendations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BidRecommendationsApiCreateKeywordBidRecommendations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of keyword bid recommendation objects.
     * @type {KeywordBidRecommendationsData}
     * @memberof BidRecommendationsApiCreateKeywordBidRecommendations
     */
    readonly keywordBidRecommendationsData?: KeywordBidRecommendationsData
}

/**
 * Request parameters for getAdGroupBidRecommendations operation in BidRecommendationsApi.
 * @export
 * @interface BidRecommendationsApiGetAdGroupBidRecommendationsRequest
 */
export interface BidRecommendationsApiGetAdGroupBidRecommendationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof BidRecommendationsApiGetAdGroupBidRecommendations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BidRecommendationsApiGetAdGroupBidRecommendations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing ad group.
     * @type {number}
     * @memberof BidRecommendationsApiGetAdGroupBidRecommendations
     */
    readonly adGroupId: number
}

/**
 * Request parameters for getBidRecommendations operation in BidRecommendationsApi.
 * @export
 * @interface BidRecommendationsApiGetBidRecommendationsRequest
 */
export interface BidRecommendationsApiGetBidRecommendationsRequest {
    /**
     * 
     * @type {InlineObject1}
     * @memberof BidRecommendationsApiGetBidRecommendations
     */
    readonly inlineObject1?: InlineObject1
}

/**
 * Request parameters for getKeywordBidRecommendations operation in BidRecommendationsApi.
 * @export
 * @interface BidRecommendationsApiGetKeywordBidRecommendationsRequest
 */
export interface BidRecommendationsApiGetKeywordBidRecommendationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof BidRecommendationsApiGetKeywordBidRecommendations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BidRecommendationsApiGetKeywordBidRecommendations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing keyword.
     * @type {number}
     * @memberof BidRecommendationsApiGetKeywordBidRecommendations
     */
    readonly keywordId: number
}

/**
 * BidRecommendationsApi - object-oriented interface
 * @export
 * @class BidRecommendationsApi
 * @extends {BaseAPI}
 */
export class BidRecommendationsApi extends BaseAPI {
    /**
     * 
     * @summary Gets bid recommendations for keywords.
     * @param {BidRecommendationsApiCreateKeywordBidRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidRecommendationsApi
     */
    public createKeywordBidRecommendations(requestParameters: BidRecommendationsApiCreateKeywordBidRecommendationsRequest, options?: any) {
        return BidRecommendationsApiFp(this.configuration).createKeywordBidRecommendations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.keywordBidRecommendationsData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a bid recommendation for an ad group.
     * @param {BidRecommendationsApiGetAdGroupBidRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidRecommendationsApi
     */
    public getAdGroupBidRecommendations(requestParameters: BidRecommendationsApiGetAdGroupBidRecommendationsRequest, options?: any) {
        return BidRecommendationsApiFp(this.configuration).getAdGroupBidRecommendations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of bid recommendations for keyword, product, or auto targeting expressions.
     * @param {BidRecommendationsApiGetBidRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidRecommendationsApi
     */
    public getBidRecommendations(requestParameters: BidRecommendationsApiGetBidRecommendationsRequest = {}, options?: any) {
        return BidRecommendationsApiFp(this.configuration).getBidRecommendations(requestParameters.inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a bid recommendation for a keyword.
     * @param {BidRecommendationsApiGetKeywordBidRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidRecommendationsApi
     */
    public getKeywordBidRecommendations(requestParameters: BidRecommendationsApiGetKeywordBidRecommendationsRequest, options?: any) {
        return BidRecommendationsApiFp(this.configuration).getKeywordBidRecommendations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.keywordId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CampaignNegativeKeywordsApi - axios parameter creator
 * @export
 */
export const CampaignNegativeKeywordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Set the status of the specified campaign negative keyword to `archived`. Note that once the status for a keyword is set to `archived` it cannot be changed.
         * @summary Archives a campaign negative keyword.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing campaign negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveCampaignNegativeKeyword: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveCampaignNegativeKeyword', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveCampaignNegativeKeyword', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'keywordId' is not null or undefined
            assertParamExists('archiveCampaignNegativeKeyword', 'keywordId', keywordId)
            const localVarPath = `/v2/sp/campaignNegativeKeywords/{keywordId}`
                .replace(`{${"keywordId"}}`, encodeURIComponent(String(keywordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates one or more campaign negative keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCampaignNegativeKeyword>} [createCampaignNegativeKeyword] An array of campaign negative keyword objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaignNegativeKeywords: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCampaignNegativeKeyword?: Array<CreateCampaignNegativeKeyword>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createCampaignNegativeKeywords', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createCampaignNegativeKeywords', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/campaignNegativeKeywords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCampaignNegativeKeyword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a campaign negative keyword specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing campaign negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignNegativeKeyword: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getCampaignNegativeKeyword', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getCampaignNegativeKeyword', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'keywordId' is not null or undefined
            assertParamExists('getCampaignNegativeKeyword', 'keywordId', keywordId)
            const localVarPath = `/v2/sp/campaignNegativeKeywords/{keywordId}`
                .replace(`{${"keywordId"}}`, encodeURIComponent(String(keywordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a campaign negative keyword that has extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing campaign negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignNegativeKeywordEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getCampaignNegativeKeywordEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getCampaignNegativeKeywordEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'keywordId' is not null or undefined
            assertParamExists('getCampaignNegativeKeywordEx', 'keywordId', keywordId)
            const localVarPath = `/v2/sp/campaignNegativeKeywords/extended/{keywordId}`
                .replace(`{${"keywordId"}}`, encodeURIComponent(String(keywordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of campaign negative keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'negativePhrase' | 'negativeExact'} [matchTypeFilter] Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to negative keywords that match the specified text.
         * @param {string} [campaignIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignNegativeKeywords: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'negativePhrase' | 'negativeExact', keywordText?: string, campaignIdFilter?: string, keywordIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listCampaignNegativeKeywords', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listCampaignNegativeKeywords', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/campaignNegativeKeywords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (matchTypeFilter !== undefined) {
                localVarQueryParameter['matchTypeFilter'] = matchTypeFilter;
            }

            if (keywordText !== undefined) {
                localVarQueryParameter['keywordText'] = keywordText;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (keywordIdFilter !== undefined) {
                localVarQueryParameter['keywordIdFilter'] = keywordIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of campaign negative keywords that have extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'negativePhrase' | 'negativeExact'} [matchTypeFilter] Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to negative keywords that match the specified text.
         * @param {string} [campaignIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignNegativeKeywordsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'negativePhrase' | 'negativeExact', keywordText?: string, campaignIdFilter?: string, keywordIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listCampaignNegativeKeywordsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listCampaignNegativeKeywordsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/campaignNegativeKeywords/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (matchTypeFilter !== undefined) {
                localVarQueryParameter['matchTypeFilter'] = matchTypeFilter;
            }

            if (keywordText !== undefined) {
                localVarQueryParameter['keywordText'] = keywordText;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (keywordIdFilter !== undefined) {
                localVarQueryParameter['keywordIdFilter'] = keywordIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates one or more campaign negative keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateCampaignNegativeKeyword>} [updateCampaignNegativeKeyword] An array of campaign negative keywords with updated values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaignNegativeKeywords: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateCampaignNegativeKeyword?: Array<UpdateCampaignNegativeKeyword>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateCampaignNegativeKeywords', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateCampaignNegativeKeywords', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/campaignNegativeKeywords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCampaignNegativeKeyword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignNegativeKeywordsApi - functional programming interface
 * @export
 */
export const CampaignNegativeKeywordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampaignNegativeKeywordsApiAxiosParamCreator(configuration)
    return {
        /**
         * Set the status of the specified campaign negative keyword to `archived`. Note that once the status for a keyword is set to `archived` it cannot be changed.
         * @summary Archives a campaign negative keyword.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing campaign negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveCampaignNegativeKeyword(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignNegativeKeywordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveCampaignNegativeKeyword(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates one or more campaign negative keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCampaignNegativeKeyword>} [createCampaignNegativeKeyword] An array of campaign negative keyword objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCampaignNegativeKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCampaignNegativeKeyword?: Array<CreateCampaignNegativeKeyword>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignNegativeKeywordResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCampaignNegativeKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createCampaignNegativeKeyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a campaign negative keyword specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing campaign negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignNegativeKeyword(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignNegativeKeyword>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignNegativeKeyword(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a campaign negative keyword that has extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing campaign negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignNegativeKeywordEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignNegativeKeywordEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignNegativeKeywordEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of campaign negative keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'negativePhrase' | 'negativeExact'} [matchTypeFilter] Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to negative keywords that match the specified text.
         * @param {string} [campaignIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaignNegativeKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'negativePhrase' | 'negativeExact', keywordText?: string, campaignIdFilter?: string, keywordIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignNegativeKeyword>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCampaignNegativeKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, matchTypeFilter, keywordText, campaignIdFilter, keywordIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of campaign negative keywords that have extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'negativePhrase' | 'negativeExact'} [matchTypeFilter] Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to negative keywords that match the specified text.
         * @param {string} [campaignIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaignNegativeKeywordsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'negativePhrase' | 'negativeExact', keywordText?: string, campaignIdFilter?: string, keywordIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignNegativeKeywordEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCampaignNegativeKeywordsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, matchTypeFilter, keywordText, campaignIdFilter, keywordIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates one or more campaign negative keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateCampaignNegativeKeyword>} [updateCampaignNegativeKeyword] An array of campaign negative keywords with updated values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCampaignNegativeKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateCampaignNegativeKeyword?: Array<UpdateCampaignNegativeKeyword>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignNegativeKeywordResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCampaignNegativeKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateCampaignNegativeKeyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CampaignNegativeKeywordsApi - factory interface
 * @export
 */
export const CampaignNegativeKeywordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampaignNegativeKeywordsApiFp(configuration)
    return {
        /**
         * Set the status of the specified campaign negative keyword to `archived`. Note that once the status for a keyword is set to `archived` it cannot be changed.
         * @summary Archives a campaign negative keyword.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing campaign negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveCampaignNegativeKeyword(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): AxiosPromise<CampaignNegativeKeywordResponse> {
            return localVarFp.archiveCampaignNegativeKeyword(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates one or more campaign negative keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCampaignNegativeKeyword>} [createCampaignNegativeKeyword] An array of campaign negative keyword objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaignNegativeKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCampaignNegativeKeyword?: Array<CreateCampaignNegativeKeyword>, options?: any): AxiosPromise<Array<CampaignNegativeKeywordResponse>> {
            return localVarFp.createCampaignNegativeKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createCampaignNegativeKeyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a campaign negative keyword specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing campaign negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignNegativeKeyword(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): AxiosPromise<CampaignNegativeKeyword> {
            return localVarFp.getCampaignNegativeKeyword(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a campaign negative keyword that has extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing campaign negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignNegativeKeywordEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): AxiosPromise<CampaignNegativeKeywordEx> {
            return localVarFp.getCampaignNegativeKeywordEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of campaign negative keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'negativePhrase' | 'negativeExact'} [matchTypeFilter] Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to negative keywords that match the specified text.
         * @param {string} [campaignIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignNegativeKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'negativePhrase' | 'negativeExact', keywordText?: string, campaignIdFilter?: string, keywordIdFilter?: string, options?: any): AxiosPromise<Array<CampaignNegativeKeyword>> {
            return localVarFp.listCampaignNegativeKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, matchTypeFilter, keywordText, campaignIdFilter, keywordIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of campaign negative keywords that have extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'negativePhrase' | 'negativeExact'} [matchTypeFilter] Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to negative keywords that match the specified text.
         * @param {string} [campaignIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignNegativeKeywordsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'negativePhrase' | 'negativeExact', keywordText?: string, campaignIdFilter?: string, keywordIdFilter?: string, options?: any): AxiosPromise<Array<CampaignNegativeKeywordEx>> {
            return localVarFp.listCampaignNegativeKeywordsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, matchTypeFilter, keywordText, campaignIdFilter, keywordIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates one or more campaign negative keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateCampaignNegativeKeyword>} [updateCampaignNegativeKeyword] An array of campaign negative keywords with updated values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaignNegativeKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateCampaignNegativeKeyword?: Array<UpdateCampaignNegativeKeyword>, options?: any): AxiosPromise<Array<CampaignNegativeKeywordResponse>> {
            return localVarFp.updateCampaignNegativeKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateCampaignNegativeKeyword, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveCampaignNegativeKeyword operation in CampaignNegativeKeywordsApi.
 * @export
 * @interface CampaignNegativeKeywordsApiArchiveCampaignNegativeKeywordRequest
 */
export interface CampaignNegativeKeywordsApiArchiveCampaignNegativeKeywordRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiArchiveCampaignNegativeKeyword
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiArchiveCampaignNegativeKeyword
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing campaign negative keyword.
     * @type {number}
     * @memberof CampaignNegativeKeywordsApiArchiveCampaignNegativeKeyword
     */
    readonly keywordId: number
}

/**
 * Request parameters for createCampaignNegativeKeywords operation in CampaignNegativeKeywordsApi.
 * @export
 * @interface CampaignNegativeKeywordsApiCreateCampaignNegativeKeywordsRequest
 */
export interface CampaignNegativeKeywordsApiCreateCampaignNegativeKeywordsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiCreateCampaignNegativeKeywords
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiCreateCampaignNegativeKeywords
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of campaign negative keyword objects.
     * @type {Array<CreateCampaignNegativeKeyword>}
     * @memberof CampaignNegativeKeywordsApiCreateCampaignNegativeKeywords
     */
    readonly createCampaignNegativeKeyword?: Array<CreateCampaignNegativeKeyword>
}

/**
 * Request parameters for getCampaignNegativeKeyword operation in CampaignNegativeKeywordsApi.
 * @export
 * @interface CampaignNegativeKeywordsApiGetCampaignNegativeKeywordRequest
 */
export interface CampaignNegativeKeywordsApiGetCampaignNegativeKeywordRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiGetCampaignNegativeKeyword
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiGetCampaignNegativeKeyword
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing campaign negative keyword.
     * @type {number}
     * @memberof CampaignNegativeKeywordsApiGetCampaignNegativeKeyword
     */
    readonly keywordId: number
}

/**
 * Request parameters for getCampaignNegativeKeywordEx operation in CampaignNegativeKeywordsApi.
 * @export
 * @interface CampaignNegativeKeywordsApiGetCampaignNegativeKeywordExRequest
 */
export interface CampaignNegativeKeywordsApiGetCampaignNegativeKeywordExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiGetCampaignNegativeKeywordEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiGetCampaignNegativeKeywordEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing campaign negative keyword.
     * @type {number}
     * @memberof CampaignNegativeKeywordsApiGetCampaignNegativeKeywordEx
     */
    readonly keywordId: number
}

/**
 * Request parameters for listCampaignNegativeKeywords operation in CampaignNegativeKeywordsApi.
 * @export
 * @interface CampaignNegativeKeywordsApiListCampaignNegativeKeywordsRequest
 */
export interface CampaignNegativeKeywordsApiListCampaignNegativeKeywordsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywords
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywords
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywords
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywords
     */
    readonly count?: number

    /**
     * Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
     * @type {'negativePhrase' | 'negativeExact'}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywords
     */
    readonly matchTypeFilter?: 'negativePhrase' | 'negativeExact'

    /**
     * Restricts results to negative keywords that match the specified text.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywords
     */
    readonly keywordText?: string

    /**
     * Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywords
     */
    readonly campaignIdFilter?: string

    /**
     * Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywords
     */
    readonly keywordIdFilter?: string
}

/**
 * Request parameters for listCampaignNegativeKeywordsEx operation in CampaignNegativeKeywordsApi.
 * @export
 * @interface CampaignNegativeKeywordsApiListCampaignNegativeKeywordsExRequest
 */
export interface CampaignNegativeKeywordsApiListCampaignNegativeKeywordsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywordsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywordsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywordsEx
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywordsEx
     */
    readonly count?: number

    /**
     * Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
     * @type {'negativePhrase' | 'negativeExact'}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywordsEx
     */
    readonly matchTypeFilter?: 'negativePhrase' | 'negativeExact'

    /**
     * Restricts results to negative keywords that match the specified text.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywordsEx
     */
    readonly keywordText?: string

    /**
     * Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywordsEx
     */
    readonly campaignIdFilter?: string

    /**
     * Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiListCampaignNegativeKeywordsEx
     */
    readonly keywordIdFilter?: string
}

/**
 * Request parameters for updateCampaignNegativeKeywords operation in CampaignNegativeKeywordsApi.
 * @export
 * @interface CampaignNegativeKeywordsApiUpdateCampaignNegativeKeywordsRequest
 */
export interface CampaignNegativeKeywordsApiUpdateCampaignNegativeKeywordsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiUpdateCampaignNegativeKeywords
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignNegativeKeywordsApiUpdateCampaignNegativeKeywords
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of campaign negative keywords with updated values.
     * @type {Array<UpdateCampaignNegativeKeyword>}
     * @memberof CampaignNegativeKeywordsApiUpdateCampaignNegativeKeywords
     */
    readonly updateCampaignNegativeKeyword?: Array<UpdateCampaignNegativeKeyword>
}

/**
 * CampaignNegativeKeywordsApi - object-oriented interface
 * @export
 * @class CampaignNegativeKeywordsApi
 * @extends {BaseAPI}
 */
export class CampaignNegativeKeywordsApi extends BaseAPI {
    /**
     * Set the status of the specified campaign negative keyword to `archived`. Note that once the status for a keyword is set to `archived` it cannot be changed.
     * @summary Archives a campaign negative keyword.
     * @param {CampaignNegativeKeywordsApiArchiveCampaignNegativeKeywordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignNegativeKeywordsApi
     */
    public archiveCampaignNegativeKeyword(requestParameters: CampaignNegativeKeywordsApiArchiveCampaignNegativeKeywordRequest, options?: any) {
        return CampaignNegativeKeywordsApiFp(this.configuration).archiveCampaignNegativeKeyword(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.keywordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates one or more campaign negative keywords.
     * @param {CampaignNegativeKeywordsApiCreateCampaignNegativeKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignNegativeKeywordsApi
     */
    public createCampaignNegativeKeywords(requestParameters: CampaignNegativeKeywordsApiCreateCampaignNegativeKeywordsRequest, options?: any) {
        return CampaignNegativeKeywordsApiFp(this.configuration).createCampaignNegativeKeywords(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createCampaignNegativeKeyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a campaign negative keyword specified by identifier.
     * @param {CampaignNegativeKeywordsApiGetCampaignNegativeKeywordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignNegativeKeywordsApi
     */
    public getCampaignNegativeKeyword(requestParameters: CampaignNegativeKeywordsApiGetCampaignNegativeKeywordRequest, options?: any) {
        return CampaignNegativeKeywordsApiFp(this.configuration).getCampaignNegativeKeyword(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.keywordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a campaign negative keyword that has extended data fields.
     * @param {CampaignNegativeKeywordsApiGetCampaignNegativeKeywordExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignNegativeKeywordsApi
     */
    public getCampaignNegativeKeywordEx(requestParameters: CampaignNegativeKeywordsApiGetCampaignNegativeKeywordExRequest, options?: any) {
        return CampaignNegativeKeywordsApiFp(this.configuration).getCampaignNegativeKeywordEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.keywordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of campaign negative keywords.
     * @param {CampaignNegativeKeywordsApiListCampaignNegativeKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignNegativeKeywordsApi
     */
    public listCampaignNegativeKeywords(requestParameters: CampaignNegativeKeywordsApiListCampaignNegativeKeywordsRequest, options?: any) {
        return CampaignNegativeKeywordsApiFp(this.configuration).listCampaignNegativeKeywords(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.matchTypeFilter, requestParameters.keywordText, requestParameters.campaignIdFilter, requestParameters.keywordIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of campaign negative keywords that have extended data fields.
     * @param {CampaignNegativeKeywordsApiListCampaignNegativeKeywordsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignNegativeKeywordsApi
     */
    public listCampaignNegativeKeywordsEx(requestParameters: CampaignNegativeKeywordsApiListCampaignNegativeKeywordsExRequest, options?: any) {
        return CampaignNegativeKeywordsApiFp(this.configuration).listCampaignNegativeKeywordsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.matchTypeFilter, requestParameters.keywordText, requestParameters.campaignIdFilter, requestParameters.keywordIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates one or more campaign negative keywords.
     * @param {CampaignNegativeKeywordsApiUpdateCampaignNegativeKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignNegativeKeywordsApi
     */
    public updateCampaignNegativeKeywords(requestParameters: CampaignNegativeKeywordsApiUpdateCampaignNegativeKeywordsRequest, options?: any) {
        return CampaignNegativeKeywordsApiFp(this.configuration).updateCampaignNegativeKeywords(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateCampaignNegativeKeyword, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CampaignsApi - axios parameter creator
 * @export
 */
export const CampaignsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sets the campaign status to `archived`. Archived entities cannot be made active again. See [developer notes](https://advertising.amazon.com/API/docs/en-us/get-started/developer-notes#Archiving) for more information.
         * @summary Archives a campaign.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of an existing campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveCampaign: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveCampaign', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveCampaign', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('archiveCampaign', 'campaignId', campaignId)
            const localVarPath = `/v2/sp/campaigns/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCampaign>} [createCampaign] An array of campaigns.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCampaign?: Array<CreateCampaign>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCampaign, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a campaign specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of an existing campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaign: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getCampaign', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getCampaign', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaign', 'campaignId', campaignId)
            const localVarPath = `/v2/sp/campaigns/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a campaign with extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of an existing campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getCampaignEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getCampaignEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaignEx', 'campaignId', campaignId)
            const localVarPath = `/v2/sp/campaigns/extended/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets an array of campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [name] Restricts results to campaigns with the specified name.
         * @param {string} [portfolioIdFilter] A comma-delimited list of portfolio identifiers.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, portfolioIdFilter?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (portfolioIdFilter !== undefined) {
                localVarQueryParameter['portfolioIdFilter'] = portfolioIdFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets an array of campaigns with extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [name] Restricts results to campaigns with the specified name.
         * @param {string} [portfolioIdFilter] A comma-delimited list of portfolio identifiers.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, portfolioIdFilter?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listCampaignsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listCampaignsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/campaigns/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (portfolioIdFilter !== undefined) {
                localVarQueryParameter['portfolioIdFilter'] = portfolioIdFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateCampaign>} [updateCampaign] An array of campaigns with updated values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateCampaign?: Array<UpdateCampaign>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCampaign, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignsApi - functional programming interface
 * @export
 */
export const CampaignsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampaignsApiAxiosParamCreator(configuration)
    return {
        /**
         * Sets the campaign status to `archived`. Archived entities cannot be made active again. See [developer notes](https://advertising.amazon.com/API/docs/en-us/get-started/developer-notes#Archiving) for more information.
         * @summary Archives a campaign.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of an existing campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveCampaign(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveCampaign(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCampaign>} [createCampaign] An array of campaigns.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCampaign?: Array<CreateCampaign>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createCampaign, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a campaign specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of an existing campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaign(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaign(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a campaign with extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of an existing campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets an array of campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [name] Restricts results to campaigns with the specified name.
         * @param {string} [portfolioIdFilter] A comma-delimited list of portfolio identifiers.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, portfolioIdFilter?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Campaign>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, name, portfolioIdFilter, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets an array of campaigns with extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [name] Restricts results to campaigns with the specified name.
         * @param {string} [portfolioIdFilter] A comma-delimited list of portfolio identifiers.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaignsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, portfolioIdFilter?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCampaignsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, name, portfolioIdFilter, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateCampaign>} [updateCampaign] An array of campaigns with updated values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateCampaign?: Array<UpdateCampaign>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateCampaign, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CampaignsApi - factory interface
 * @export
 */
export const CampaignsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampaignsApiFp(configuration)
    return {
        /**
         * Sets the campaign status to `archived`. Archived entities cannot be made active again. See [developer notes](https://advertising.amazon.com/API/docs/en-us/get-started/developer-notes#Archiving) for more information.
         * @summary Archives a campaign.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of an existing campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveCampaign(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): AxiosPromise<CampaignResponse> {
            return localVarFp.archiveCampaign(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCampaign>} [createCampaign] An array of campaigns.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCampaign?: Array<CreateCampaign>, options?: any): AxiosPromise<Array<CampaignResponse>> {
            return localVarFp.createCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createCampaign, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a campaign specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of an existing campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaign(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): AxiosPromise<Campaign> {
            return localVarFp.getCampaign(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a campaign with extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of an existing campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): AxiosPromise<CampaignEx> {
            return localVarFp.getCampaignEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets an array of campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [name] Restricts results to campaigns with the specified name.
         * @param {string} [portfolioIdFilter] A comma-delimited list of portfolio identifiers.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, portfolioIdFilter?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<Campaign>> {
            return localVarFp.listCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, name, portfolioIdFilter, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets an array of campaigns with extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [name] Restricts results to campaigns with the specified name.
         * @param {string} [portfolioIdFilter] A comma-delimited list of portfolio identifiers.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, portfolioIdFilter?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<CampaignEx>> {
            return localVarFp.listCampaignsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, name, portfolioIdFilter, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateCampaign>} [updateCampaign] An array of campaigns with updated values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateCampaign?: Array<UpdateCampaign>, options?: any): AxiosPromise<Array<CampaignResponse>> {
            return localVarFp.updateCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateCampaign, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveCampaign operation in CampaignsApi.
 * @export
 * @interface CampaignsApiArchiveCampaignRequest
 */
export interface CampaignsApiArchiveCampaignRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof CampaignsApiArchiveCampaign
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiArchiveCampaign
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing campaign.
     * @type {number}
     * @memberof CampaignsApiArchiveCampaign
     */
    readonly campaignId: number
}

/**
 * Request parameters for createCampaigns operation in CampaignsApi.
 * @export
 * @interface CampaignsApiCreateCampaignsRequest
 */
export interface CampaignsApiCreateCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof CampaignsApiCreateCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiCreateCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of campaigns.
     * @type {Array<CreateCampaign>}
     * @memberof CampaignsApiCreateCampaigns
     */
    readonly createCampaign?: Array<CreateCampaign>
}

/**
 * Request parameters for getCampaign operation in CampaignsApi.
 * @export
 * @interface CampaignsApiGetCampaignRequest
 */
export interface CampaignsApiGetCampaignRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof CampaignsApiGetCampaign
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiGetCampaign
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing campaign.
     * @type {number}
     * @memberof CampaignsApiGetCampaign
     */
    readonly campaignId: number
}

/**
 * Request parameters for getCampaignEx operation in CampaignsApi.
 * @export
 * @interface CampaignsApiGetCampaignExRequest
 */
export interface CampaignsApiGetCampaignExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof CampaignsApiGetCampaignEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiGetCampaignEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing campaign.
     * @type {number}
     * @memberof CampaignsApiGetCampaignEx
     */
    readonly campaignId: number
}

/**
 * Request parameters for listCampaigns operation in CampaignsApi.
 * @export
 * @interface CampaignsApiListCampaignsRequest
 */
export interface CampaignsApiListCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof CampaignsApiListCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiListCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof CampaignsApiListCampaigns
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof CampaignsApiListCampaigns
     */
    readonly count?: number

    /**
     * Restricts results to resources with state within the specified comma-separated list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof CampaignsApiListCampaigns
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Restricts results to campaigns with the specified name.
     * @type {string}
     * @memberof CampaignsApiListCampaigns
     */
    readonly name?: string

    /**
     * A comma-delimited list of portfolio identifiers.
     * @type {string}
     * @memberof CampaignsApiListCampaigns
     */
    readonly portfolioIdFilter?: string

    /**
     * A comma-delimited list of campaign identifiers.
     * @type {string}
     * @memberof CampaignsApiListCampaigns
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for listCampaignsEx operation in CampaignsApi.
 * @export
 * @interface CampaignsApiListCampaignsExRequest
 */
export interface CampaignsApiListCampaignsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly count?: number

    /**
     * Restricts results to resources with state within the specified comma-separated list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Restricts results to campaigns with the specified name.
     * @type {string}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly name?: string

    /**
     * A comma-delimited list of portfolio identifiers.
     * @type {string}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly portfolioIdFilter?: string

    /**
     * A comma-delimited list of campaign identifiers.
     * @type {string}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for updateCampaigns operation in CampaignsApi.
 * @export
 * @interface CampaignsApiUpdateCampaignsRequest
 */
export interface CampaignsApiUpdateCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof CampaignsApiUpdateCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiUpdateCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of campaigns with updated values.
     * @type {Array<UpdateCampaign>}
     * @memberof CampaignsApiUpdateCampaigns
     */
    readonly updateCampaign?: Array<UpdateCampaign>
}

/**
 * CampaignsApi - object-oriented interface
 * @export
 * @class CampaignsApi
 * @extends {BaseAPI}
 */
export class CampaignsApi extends BaseAPI {
    /**
     * Sets the campaign status to `archived`. Archived entities cannot be made active again. See [developer notes](https://advertising.amazon.com/API/docs/en-us/get-started/developer-notes#Archiving) for more information.
     * @summary Archives a campaign.
     * @param {CampaignsApiArchiveCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public archiveCampaign(requestParameters: CampaignsApiArchiveCampaignRequest, options?: any) {
        return CampaignsApiFp(this.configuration).archiveCampaign(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates one or more campaigns.
     * @param {CampaignsApiCreateCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public createCampaigns(requestParameters: CampaignsApiCreateCampaignsRequest, options?: any) {
        return CampaignsApiFp(this.configuration).createCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createCampaign, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a campaign specified by identifier.
     * @param {CampaignsApiGetCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaign(requestParameters: CampaignsApiGetCampaignRequest, options?: any) {
        return CampaignsApiFp(this.configuration).getCampaign(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a campaign with extended data fields.
     * @param {CampaignsApiGetCampaignExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaignEx(requestParameters: CampaignsApiGetCampaignExRequest, options?: any) {
        return CampaignsApiFp(this.configuration).getCampaignEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets an array of campaigns.
     * @param {CampaignsApiListCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public listCampaigns(requestParameters: CampaignsApiListCampaignsRequest, options?: any) {
        return CampaignsApiFp(this.configuration).listCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.name, requestParameters.portfolioIdFilter, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets an array of campaigns with extended data fields.
     * @param {CampaignsApiListCampaignsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public listCampaignsEx(requestParameters: CampaignsApiListCampaignsExRequest, options?: any) {
        return CampaignsApiFp(this.configuration).listCampaignsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.name, requestParameters.portfolioIdFilter, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates one or more campaigns.
     * @param {CampaignsApiUpdateCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public updateCampaigns(requestParameters: CampaignsApiUpdateCampaignsRequest, options?: any) {
        return CampaignsApiFp(this.configuration).updateCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateCampaign, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * KeywordsApi - axios parameter creator
 * @export
 */
export const KeywordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Set the status of the specified keyword to `archived`. Note that once the status for a keyword is set to `archived` it cannot be changed.
         * @summary Archives a keyword.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveKeyword: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveKeyword', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveKeyword', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'keywordId' is not null or undefined
            assertParamExists('archiveKeyword', 'keywordId', keywordId)
            const localVarPath = `/v2/sp/keywords/{keywordId}`
                .replace(`{${"keywordId"}}`, encodeURIComponent(String(keywordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates one or more keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateKeyword>} [createKeyword] An array of keyword objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKeywords: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createKeyword?: Array<CreateKeyword>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createKeywords', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createKeywords', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/keywords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createKeyword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a keyword specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing keyword.
         * @param {string} [locale] The locale preference of the advertiser.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeyword: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, locale?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getKeyword', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getKeyword', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'keywordId' is not null or undefined
            assertParamExists('getKeyword', 'keywordId', keywordId)
            const localVarPath = `/v2/sp/keywords/{keywordId}`
                .replace(`{${"keywordId"}}`, encodeURIComponent(String(keywordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a keyword with extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing keyword.
         * @param {string} [locale] The locale preference of the advertiser.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeywordEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, locale?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getKeywordEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getKeywordEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'keywordId' is not null or undefined
            assertParamExists('getKeywordEx', 'keywordId', keywordId)
            const localVarPath = `/v2/sp/keywords/extended/{keywordId}`
                .replace(`{${"keywordId"}}`, encodeURIComponent(String(keywordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'broad' | 'phrase' | 'exact'} [matchTypeFilter] Restricts results to keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to keywords that match the specified text exactly.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [locale] Restricts results to keywords associated with locale.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKeywords: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'broad' | 'phrase' | 'exact', keywordText?: string, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, keywordIdFilter?: string, locale?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listKeywords', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listKeywords', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/keywords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (matchTypeFilter !== undefined) {
                localVarQueryParameter['matchTypeFilter'] = matchTypeFilter;
            }

            if (keywordText !== undefined) {
                localVarQueryParameter['keywordText'] = keywordText;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (keywordIdFilter !== undefined) {
                localVarQueryParameter['keywordIdFilter'] = keywordIdFilter;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of keywords that have extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'broad' | 'phrase' | 'exact'} [matchTypeFilter] Restricts results to keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to keywords that match the specified text exactly.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [locale] Restricts results to keywords associated with locale.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKeywordsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'broad' | 'phrase' | 'exact', keywordText?: string, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, keywordIdFilter?: string, locale?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listKeywordsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listKeywordsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/keywords/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (matchTypeFilter !== undefined) {
                localVarQueryParameter['matchTypeFilter'] = matchTypeFilter;
            }

            if (keywordText !== undefined) {
                localVarQueryParameter['keywordText'] = keywordText;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (keywordIdFilter !== undefined) {
                localVarQueryParameter['keywordIdFilter'] = keywordIdFilter;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates one or more keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateKeyword>} [updateKeyword] An array of update keyword objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKeywords: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateKeyword?: Array<UpdateKeyword>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateKeywords', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateKeywords', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/keywords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateKeyword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeywordsApi - functional programming interface
 * @export
 */
export const KeywordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KeywordsApiAxiosParamCreator(configuration)
    return {
        /**
         * Set the status of the specified keyword to `archived`. Note that once the status for a keyword is set to `archived` it cannot be changed.
         * @summary Archives a keyword.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveKeyword(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeywordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveKeyword(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates one or more keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateKeyword>} [createKeyword] An array of keyword objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createKeyword?: Array<CreateKeyword>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeywordResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createKeyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a keyword specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing keyword.
         * @param {string} [locale] The locale preference of the advertiser.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKeyword(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, locale?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Keyword>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKeyword(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a keyword with extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing keyword.
         * @param {string} [locale] The locale preference of the advertiser.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKeywordEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, locale?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeywordEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKeywordEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a list of keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'broad' | 'phrase' | 'exact'} [matchTypeFilter] Restricts results to keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to keywords that match the specified text exactly.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [locale] Restricts results to keywords associated with locale.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'broad' | 'phrase' | 'exact', keywordText?: string, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, keywordIdFilter?: string, locale?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Keyword>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, matchTypeFilter, keywordText, stateFilter, campaignIdFilter, adGroupIdFilter, keywordIdFilter, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of keywords that have extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'broad' | 'phrase' | 'exact'} [matchTypeFilter] Restricts results to keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to keywords that match the specified text exactly.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [locale] Restricts results to keywords associated with locale.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listKeywordsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'broad' | 'phrase' | 'exact', keywordText?: string, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, keywordIdFilter?: string, locale?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeywordEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listKeywordsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, matchTypeFilter, keywordText, stateFilter, campaignIdFilter, adGroupIdFilter, keywordIdFilter, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates one or more keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateKeyword>} [updateKeyword] An array of update keyword objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateKeyword?: Array<UpdateKeyword>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KeywordResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateKeyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KeywordsApi - factory interface
 * @export
 */
export const KeywordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KeywordsApiFp(configuration)
    return {
        /**
         * Set the status of the specified keyword to `archived`. Note that once the status for a keyword is set to `archived` it cannot be changed.
         * @summary Archives a keyword.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveKeyword(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): AxiosPromise<KeywordResponse> {
            return localVarFp.archiveKeyword(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates one or more keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateKeyword>} [createKeyword] An array of keyword objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createKeyword?: Array<CreateKeyword>, options?: any): AxiosPromise<Array<KeywordResponse>> {
            return localVarFp.createKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createKeyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a keyword specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing keyword.
         * @param {string} [locale] The locale preference of the advertiser.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeyword(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, locale?: string, options?: any): AxiosPromise<Keyword> {
            return localVarFp.getKeyword(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a keyword with extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing keyword.
         * @param {string} [locale] The locale preference of the advertiser.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeywordEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, locale?: string, options?: any): AxiosPromise<KeywordEx> {
            return localVarFp.getKeywordEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, locale, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'broad' | 'phrase' | 'exact'} [matchTypeFilter] Restricts results to keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to keywords that match the specified text exactly.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [locale] Restricts results to keywords associated with locale.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'broad' | 'phrase' | 'exact', keywordText?: string, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, keywordIdFilter?: string, locale?: string, options?: any): AxiosPromise<Array<Keyword>> {
            return localVarFp.listKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, matchTypeFilter, keywordText, stateFilter, campaignIdFilter, adGroupIdFilter, keywordIdFilter, locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of keywords that have extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'broad' | 'phrase' | 'exact'} [matchTypeFilter] Restricts results to keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to keywords that match the specified text exactly.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [locale] Restricts results to keywords associated with locale.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKeywordsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'broad' | 'phrase' | 'exact', keywordText?: string, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, keywordIdFilter?: string, locale?: string, options?: any): AxiosPromise<Array<KeywordEx>> {
            return localVarFp.listKeywordsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, matchTypeFilter, keywordText, stateFilter, campaignIdFilter, adGroupIdFilter, keywordIdFilter, locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates one or more keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateKeyword>} [updateKeyword] An array of update keyword objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateKeyword?: Array<UpdateKeyword>, options?: any): AxiosPromise<Array<KeywordResponse>> {
            return localVarFp.updateKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateKeyword, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveKeyword operation in KeywordsApi.
 * @export
 * @interface KeywordsApiArchiveKeywordRequest
 */
export interface KeywordsApiArchiveKeywordRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof KeywordsApiArchiveKeyword
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof KeywordsApiArchiveKeyword
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing keyword.
     * @type {number}
     * @memberof KeywordsApiArchiveKeyword
     */
    readonly keywordId: number
}

/**
 * Request parameters for createKeywords operation in KeywordsApi.
 * @export
 * @interface KeywordsApiCreateKeywordsRequest
 */
export interface KeywordsApiCreateKeywordsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof KeywordsApiCreateKeywords
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof KeywordsApiCreateKeywords
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of keyword objects.
     * @type {Array<CreateKeyword>}
     * @memberof KeywordsApiCreateKeywords
     */
    readonly createKeyword?: Array<CreateKeyword>
}

/**
 * Request parameters for getKeyword operation in KeywordsApi.
 * @export
 * @interface KeywordsApiGetKeywordRequest
 */
export interface KeywordsApiGetKeywordRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof KeywordsApiGetKeyword
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof KeywordsApiGetKeyword
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing keyword.
     * @type {number}
     * @memberof KeywordsApiGetKeyword
     */
    readonly keywordId: number

    /**
     * The locale preference of the advertiser.
     * @type {string}
     * @memberof KeywordsApiGetKeyword
     */
    readonly locale?: string
}

/**
 * Request parameters for getKeywordEx operation in KeywordsApi.
 * @export
 * @interface KeywordsApiGetKeywordExRequest
 */
export interface KeywordsApiGetKeywordExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof KeywordsApiGetKeywordEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof KeywordsApiGetKeywordEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing keyword.
     * @type {number}
     * @memberof KeywordsApiGetKeywordEx
     */
    readonly keywordId: number

    /**
     * The locale preference of the advertiser.
     * @type {string}
     * @memberof KeywordsApiGetKeywordEx
     */
    readonly locale?: string
}

/**
 * Request parameters for listKeywords operation in KeywordsApi.
 * @export
 * @interface KeywordsApiListKeywordsRequest
 */
export interface KeywordsApiListKeywordsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof KeywordsApiListKeywords
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof KeywordsApiListKeywords
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof KeywordsApiListKeywords
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof KeywordsApiListKeywords
     */
    readonly count?: number

    /**
     * Restricts results to keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
     * @type {'broad' | 'phrase' | 'exact'}
     * @memberof KeywordsApiListKeywords
     */
    readonly matchTypeFilter?: 'broad' | 'phrase' | 'exact'

    /**
     * Restricts results to keywords that match the specified text exactly.
     * @type {string}
     * @memberof KeywordsApiListKeywords
     */
    readonly keywordText?: string

    /**
     * Restricts results to resources with state within the specified comma-separated list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof KeywordsApiListKeywords
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * A comma-delimited list of campaign identifiers.
     * @type {string}
     * @memberof KeywordsApiListKeywords
     */
    readonly campaignIdFilter?: string

    /**
     * Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof KeywordsApiListKeywords
     */
    readonly adGroupIdFilter?: string

    /**
     * Restricts results to keywords associated with campaigns specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof KeywordsApiListKeywords
     */
    readonly keywordIdFilter?: string

    /**
     * Restricts results to keywords associated with locale.
     * @type {string}
     * @memberof KeywordsApiListKeywords
     */
    readonly locale?: string
}

/**
 * Request parameters for listKeywordsEx operation in KeywordsApi.
 * @export
 * @interface KeywordsApiListKeywordsExRequest
 */
export interface KeywordsApiListKeywordsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof KeywordsApiListKeywordsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof KeywordsApiListKeywordsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof KeywordsApiListKeywordsEx
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof KeywordsApiListKeywordsEx
     */
    readonly count?: number

    /**
     * Restricts results to keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
     * @type {'broad' | 'phrase' | 'exact'}
     * @memberof KeywordsApiListKeywordsEx
     */
    readonly matchTypeFilter?: 'broad' | 'phrase' | 'exact'

    /**
     * Restricts results to keywords that match the specified text exactly.
     * @type {string}
     * @memberof KeywordsApiListKeywordsEx
     */
    readonly keywordText?: string

    /**
     * Restricts results to resources with state within the specified comma-separated list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof KeywordsApiListKeywordsEx
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * A comma-delimited list of campaign identifiers.
     * @type {string}
     * @memberof KeywordsApiListKeywordsEx
     */
    readonly campaignIdFilter?: string

    /**
     * Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof KeywordsApiListKeywordsEx
     */
    readonly adGroupIdFilter?: string

    /**
     * Restricts results to keywords associated with campaigns specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof KeywordsApiListKeywordsEx
     */
    readonly keywordIdFilter?: string

    /**
     * Restricts results to keywords associated with locale.
     * @type {string}
     * @memberof KeywordsApiListKeywordsEx
     */
    readonly locale?: string
}

/**
 * Request parameters for updateKeywords operation in KeywordsApi.
 * @export
 * @interface KeywordsApiUpdateKeywordsRequest
 */
export interface KeywordsApiUpdateKeywordsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof KeywordsApiUpdateKeywords
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof KeywordsApiUpdateKeywords
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of update keyword objects.
     * @type {Array<UpdateKeyword>}
     * @memberof KeywordsApiUpdateKeywords
     */
    readonly updateKeyword?: Array<UpdateKeyword>
}

/**
 * KeywordsApi - object-oriented interface
 * @export
 * @class KeywordsApi
 * @extends {BaseAPI}
 */
export class KeywordsApi extends BaseAPI {
    /**
     * Set the status of the specified keyword to `archived`. Note that once the status for a keyword is set to `archived` it cannot be changed.
     * @summary Archives a keyword.
     * @param {KeywordsApiArchiveKeywordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeywordsApi
     */
    public archiveKeyword(requestParameters: KeywordsApiArchiveKeywordRequest, options?: any) {
        return KeywordsApiFp(this.configuration).archiveKeyword(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.keywordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates one or more keywords.
     * @param {KeywordsApiCreateKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeywordsApi
     */
    public createKeywords(requestParameters: KeywordsApiCreateKeywordsRequest, options?: any) {
        return KeywordsApiFp(this.configuration).createKeywords(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createKeyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a keyword specified by identifier.
     * @param {KeywordsApiGetKeywordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeywordsApi
     */
    public getKeyword(requestParameters: KeywordsApiGetKeywordRequest, options?: any) {
        return KeywordsApiFp(this.configuration).getKeyword(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.keywordId, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a keyword with extended data fields.
     * @param {KeywordsApiGetKeywordExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeywordsApi
     */
    public getKeywordEx(requestParameters: KeywordsApiGetKeywordExRequest, options?: any) {
        return KeywordsApiFp(this.configuration).getKeywordEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.keywordId, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of keywords.
     * @param {KeywordsApiListKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeywordsApi
     */
    public listKeywords(requestParameters: KeywordsApiListKeywordsRequest, options?: any) {
        return KeywordsApiFp(this.configuration).listKeywords(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.matchTypeFilter, requestParameters.keywordText, requestParameters.stateFilter, requestParameters.campaignIdFilter, requestParameters.adGroupIdFilter, requestParameters.keywordIdFilter, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of keywords that have extended data fields.
     * @param {KeywordsApiListKeywordsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeywordsApi
     */
    public listKeywordsEx(requestParameters: KeywordsApiListKeywordsExRequest, options?: any) {
        return KeywordsApiFp(this.configuration).listKeywordsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.matchTypeFilter, requestParameters.keywordText, requestParameters.stateFilter, requestParameters.campaignIdFilter, requestParameters.adGroupIdFilter, requestParameters.keywordIdFilter, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates one or more keywords.
     * @param {KeywordsApiUpdateKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeywordsApi
     */
    public updateKeywords(requestParameters: KeywordsApiUpdateKeywordsRequest, options?: any) {
        return KeywordsApiFp(this.configuration).updateKeywords(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateKeyword, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegativeKeywordsApi - axios parameter creator
 * @export
 */
export const NegativeKeywordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Set the status of the specified negative keyword to `archived`. Note that once the status for a keyword is set to `archived` it cannot be changed.
         * @summary Archives a negative keyword.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveNegativeKeyword: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveNegativeKeyword', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveNegativeKeyword', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'keywordId' is not null or undefined
            assertParamExists('archiveNegativeKeyword', 'keywordId', keywordId)
            const localVarPath = `/v2/sp/negativeKeywords/{keywordId}`
                .replace(`{${"keywordId"}}`, encodeURIComponent(String(keywordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates one or more negative keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateNegativeKeyword>} [createNegativeKeyword] An array of negative keyword objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNegativeKeywords: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createNegativeKeyword?: Array<CreateNegativeKeyword>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createNegativeKeywords', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createNegativeKeywords', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/negativeKeywords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createNegativeKeyword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a negative keyword specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeKeyword: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getNegativeKeyword', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getNegativeKeyword', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'keywordId' is not null or undefined
            assertParamExists('getNegativeKeyword', 'keywordId', keywordId)
            const localVarPath = `/v2/sp/negativeKeywords/{keywordId}`
                .replace(`{${"keywordId"}}`, encodeURIComponent(String(keywordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a negative keyword that has extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeKeywordEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getNegativeKeywordEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getNegativeKeywordEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'keywordId' is not null or undefined
            assertParamExists('getNegativeKeywordEx', 'keywordId', keywordId)
            const localVarPath = `/v2/sp/negativeKeywords/extended/{keywordId}`
                .replace(`{${"keywordId"}}`, encodeURIComponent(String(keywordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of negative keyword objects.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'negativePhrase' | 'negativeExact'} [matchTypeFilter] Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to negative keywords that match the specified text.
         * @param {'enabled' | 'archived'} [stateFilter] Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
         * @param {string} [campaignIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [adGroupIdFilter] Restricts results to negative keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeKeywords: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'negativePhrase' | 'negativeExact', keywordText?: string, stateFilter?: 'enabled' | 'archived', campaignIdFilter?: string, adGroupIdFilter?: string, keywordIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listNegativeKeywords', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listNegativeKeywords', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/negativeKeywords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (matchTypeFilter !== undefined) {
                localVarQueryParameter['matchTypeFilter'] = matchTypeFilter;
            }

            if (keywordText !== undefined) {
                localVarQueryParameter['keywordText'] = keywordText;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (keywordIdFilter !== undefined) {
                localVarQueryParameter['keywordIdFilter'] = keywordIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of negative keywords that have extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'negativePhrase' | 'negativeExact'} [matchTypeFilter] Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to negative keywords that match the specified text.
         * @param {'enabled' | 'archived'} [stateFilter] Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
         * @param {string} [campaignIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [adGroupIdFilter] Restricts results to negative keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeKeywordsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'negativePhrase' | 'negativeExact', keywordText?: string, stateFilter?: 'enabled' | 'archived', campaignIdFilter?: string, adGroupIdFilter?: string, keywordIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listNegativeKeywordsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listNegativeKeywordsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/negativeKeywords/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (matchTypeFilter !== undefined) {
                localVarQueryParameter['matchTypeFilter'] = matchTypeFilter;
            }

            if (keywordText !== undefined) {
                localVarQueryParameter['keywordText'] = keywordText;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (keywordIdFilter !== undefined) {
                localVarQueryParameter['keywordIdFilter'] = keywordIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates one or more negative keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateNegativeKeyword>} [updateNegativeKeyword] An array negative keywords with updated values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNegativeKeywords: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateNegativeKeyword?: Array<UpdateNegativeKeyword>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateNegativeKeywords', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateNegativeKeywords', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/negativeKeywords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateNegativeKeyword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegativeKeywordsApi - functional programming interface
 * @export
 */
export const NegativeKeywordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegativeKeywordsApiAxiosParamCreator(configuration)
    return {
        /**
         * Set the status of the specified negative keyword to `archived`. Note that once the status for a keyword is set to `archived` it cannot be changed.
         * @summary Archives a negative keyword.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveNegativeKeyword(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NegativeKeywordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveNegativeKeyword(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates one or more negative keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateNegativeKeyword>} [createNegativeKeyword] An array of negative keyword objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNegativeKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createNegativeKeyword?: Array<CreateNegativeKeyword>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NegativeKeywordResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNegativeKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createNegativeKeyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a negative keyword specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNegativeKeyword(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NegativeKeyword>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNegativeKeyword(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a negative keyword that has extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNegativeKeywordEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NegativeKeywordEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNegativeKeywordEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of negative keyword objects.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'negativePhrase' | 'negativeExact'} [matchTypeFilter] Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to negative keywords that match the specified text.
         * @param {'enabled' | 'archived'} [stateFilter] Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
         * @param {string} [campaignIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [adGroupIdFilter] Restricts results to negative keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNegativeKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'negativePhrase' | 'negativeExact', keywordText?: string, stateFilter?: 'enabled' | 'archived', campaignIdFilter?: string, adGroupIdFilter?: string, keywordIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NegativeKeyword>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNegativeKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, matchTypeFilter, keywordText, stateFilter, campaignIdFilter, adGroupIdFilter, keywordIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of negative keywords that have extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'negativePhrase' | 'negativeExact'} [matchTypeFilter] Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to negative keywords that match the specified text.
         * @param {'enabled' | 'archived'} [stateFilter] Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
         * @param {string} [campaignIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [adGroupIdFilter] Restricts results to negative keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNegativeKeywordsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'negativePhrase' | 'negativeExact', keywordText?: string, stateFilter?: 'enabled' | 'archived', campaignIdFilter?: string, adGroupIdFilter?: string, keywordIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NegativeKeywordEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNegativeKeywordsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, matchTypeFilter, keywordText, stateFilter, campaignIdFilter, adGroupIdFilter, keywordIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates one or more negative keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateNegativeKeyword>} [updateNegativeKeyword] An array negative keywords with updated values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNegativeKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateNegativeKeyword?: Array<UpdateNegativeKeyword>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NegativeKeywordResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNegativeKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateNegativeKeyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegativeKeywordsApi - factory interface
 * @export
 */
export const NegativeKeywordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegativeKeywordsApiFp(configuration)
    return {
        /**
         * Set the status of the specified negative keyword to `archived`. Note that once the status for a keyword is set to `archived` it cannot be changed.
         * @summary Archives a negative keyword.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveNegativeKeyword(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): AxiosPromise<NegativeKeywordResponse> {
            return localVarFp.archiveNegativeKeyword(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates one or more negative keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateNegativeKeyword>} [createNegativeKeyword] An array of negative keyword objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNegativeKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createNegativeKeyword?: Array<CreateNegativeKeyword>, options?: any): AxiosPromise<Array<NegativeKeywordResponse>> {
            return localVarFp.createNegativeKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createNegativeKeyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a negative keyword specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeKeyword(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): AxiosPromise<NegativeKeyword> {
            return localVarFp.getNegativeKeyword(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a negative keyword that has extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing negative keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeKeywordEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): AxiosPromise<NegativeKeywordEx> {
            return localVarFp.getNegativeKeywordEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of negative keyword objects.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'negativePhrase' | 'negativeExact'} [matchTypeFilter] Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to negative keywords that match the specified text.
         * @param {'enabled' | 'archived'} [stateFilter] Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
         * @param {string} [campaignIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [adGroupIdFilter] Restricts results to negative keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'negativePhrase' | 'negativeExact', keywordText?: string, stateFilter?: 'enabled' | 'archived', campaignIdFilter?: string, adGroupIdFilter?: string, keywordIdFilter?: string, options?: any): AxiosPromise<Array<NegativeKeyword>> {
            return localVarFp.listNegativeKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, matchTypeFilter, keywordText, stateFilter, campaignIdFilter, adGroupIdFilter, keywordIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of negative keywords that have extended data fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'negativePhrase' | 'negativeExact'} [matchTypeFilter] Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
         * @param {string} [keywordText] Restricts results to negative keywords that match the specified text.
         * @param {'enabled' | 'archived'} [stateFilter] Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
         * @param {string} [campaignIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {string} [adGroupIdFilter] Restricts results to negative keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [keywordIdFilter] Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeKeywordsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, matchTypeFilter?: 'negativePhrase' | 'negativeExact', keywordText?: string, stateFilter?: 'enabled' | 'archived', campaignIdFilter?: string, adGroupIdFilter?: string, keywordIdFilter?: string, options?: any): AxiosPromise<Array<NegativeKeywordEx>> {
            return localVarFp.listNegativeKeywordsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, matchTypeFilter, keywordText, stateFilter, campaignIdFilter, adGroupIdFilter, keywordIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates one or more negative keywords.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateNegativeKeyword>} [updateNegativeKeyword] An array negative keywords with updated values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNegativeKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateNegativeKeyword?: Array<UpdateNegativeKeyword>, options?: any): AxiosPromise<Array<NegativeKeywordResponse>> {
            return localVarFp.updateNegativeKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateNegativeKeyword, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveNegativeKeyword operation in NegativeKeywordsApi.
 * @export
 * @interface NegativeKeywordsApiArchiveNegativeKeywordRequest
 */
export interface NegativeKeywordsApiArchiveNegativeKeywordRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof NegativeKeywordsApiArchiveNegativeKeyword
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeKeywordsApiArchiveNegativeKeyword
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing negative keyword.
     * @type {number}
     * @memberof NegativeKeywordsApiArchiveNegativeKeyword
     */
    readonly keywordId: number
}

/**
 * Request parameters for createNegativeKeywords operation in NegativeKeywordsApi.
 * @export
 * @interface NegativeKeywordsApiCreateNegativeKeywordsRequest
 */
export interface NegativeKeywordsApiCreateNegativeKeywordsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof NegativeKeywordsApiCreateNegativeKeywords
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeKeywordsApiCreateNegativeKeywords
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of negative keyword objects.
     * @type {Array<CreateNegativeKeyword>}
     * @memberof NegativeKeywordsApiCreateNegativeKeywords
     */
    readonly createNegativeKeyword?: Array<CreateNegativeKeyword>
}

/**
 * Request parameters for getNegativeKeyword operation in NegativeKeywordsApi.
 * @export
 * @interface NegativeKeywordsApiGetNegativeKeywordRequest
 */
export interface NegativeKeywordsApiGetNegativeKeywordRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof NegativeKeywordsApiGetNegativeKeyword
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeKeywordsApiGetNegativeKeyword
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing negative keyword.
     * @type {number}
     * @memberof NegativeKeywordsApiGetNegativeKeyword
     */
    readonly keywordId: number
}

/**
 * Request parameters for getNegativeKeywordEx operation in NegativeKeywordsApi.
 * @export
 * @interface NegativeKeywordsApiGetNegativeKeywordExRequest
 */
export interface NegativeKeywordsApiGetNegativeKeywordExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof NegativeKeywordsApiGetNegativeKeywordEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeKeywordsApiGetNegativeKeywordEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing negative keyword.
     * @type {number}
     * @memberof NegativeKeywordsApiGetNegativeKeywordEx
     */
    readonly keywordId: number
}

/**
 * Request parameters for listNegativeKeywords operation in NegativeKeywordsApi.
 * @export
 * @interface NegativeKeywordsApiListNegativeKeywordsRequest
 */
export interface NegativeKeywordsApiListNegativeKeywordsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof NegativeKeywordsApiListNegativeKeywords
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeKeywordsApiListNegativeKeywords
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof NegativeKeywordsApiListNegativeKeywords
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof NegativeKeywordsApiListNegativeKeywords
     */
    readonly count?: number

    /**
     * Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
     * @type {'negativePhrase' | 'negativeExact'}
     * @memberof NegativeKeywordsApiListNegativeKeywords
     */
    readonly matchTypeFilter?: 'negativePhrase' | 'negativeExact'

    /**
     * Restricts results to negative keywords that match the specified text.
     * @type {string}
     * @memberof NegativeKeywordsApiListNegativeKeywords
     */
    readonly keywordText?: string

    /**
     * Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
     * @type {'enabled' | 'archived'}
     * @memberof NegativeKeywordsApiListNegativeKeywords
     */
    readonly stateFilter?: 'enabled' | 'archived'

    /**
     * Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof NegativeKeywordsApiListNegativeKeywords
     */
    readonly campaignIdFilter?: string

    /**
     * Restricts results to negative keywords associated with ad groups specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof NegativeKeywordsApiListNegativeKeywords
     */
    readonly adGroupIdFilter?: string

    /**
     * Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof NegativeKeywordsApiListNegativeKeywords
     */
    readonly keywordIdFilter?: string
}

/**
 * Request parameters for listNegativeKeywordsEx operation in NegativeKeywordsApi.
 * @export
 * @interface NegativeKeywordsApiListNegativeKeywordsExRequest
 */
export interface NegativeKeywordsApiListNegativeKeywordsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof NegativeKeywordsApiListNegativeKeywordsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeKeywordsApiListNegativeKeywordsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof NegativeKeywordsApiListNegativeKeywordsEx
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof NegativeKeywordsApiListNegativeKeywordsEx
     */
    readonly count?: number

    /**
     * Restricts results to negative keywords with match types within the specified comma-separated list. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
     * @type {'negativePhrase' | 'negativeExact'}
     * @memberof NegativeKeywordsApiListNegativeKeywordsEx
     */
    readonly matchTypeFilter?: 'negativePhrase' | 'negativeExact'

    /**
     * Restricts results to negative keywords that match the specified text.
     * @type {string}
     * @memberof NegativeKeywordsApiListNegativeKeywordsEx
     */
    readonly keywordText?: string

    /**
     * Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
     * @type {'enabled' | 'archived'}
     * @memberof NegativeKeywordsApiListNegativeKeywordsEx
     */
    readonly stateFilter?: 'enabled' | 'archived'

    /**
     * Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof NegativeKeywordsApiListNegativeKeywordsEx
     */
    readonly campaignIdFilter?: string

    /**
     * Restricts results to negative keywords associated with ad groups specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof NegativeKeywordsApiListNegativeKeywordsEx
     */
    readonly adGroupIdFilter?: string

    /**
     * Restricts results to negative keywords associated with campaigns specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof NegativeKeywordsApiListNegativeKeywordsEx
     */
    readonly keywordIdFilter?: string
}

/**
 * Request parameters for updateNegativeKeywords operation in NegativeKeywordsApi.
 * @export
 * @interface NegativeKeywordsApiUpdateNegativeKeywordsRequest
 */
export interface NegativeKeywordsApiUpdateNegativeKeywordsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof NegativeKeywordsApiUpdateNegativeKeywords
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeKeywordsApiUpdateNegativeKeywords
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array negative keywords with updated values.
     * @type {Array<UpdateNegativeKeyword>}
     * @memberof NegativeKeywordsApiUpdateNegativeKeywords
     */
    readonly updateNegativeKeyword?: Array<UpdateNegativeKeyword>
}

/**
 * NegativeKeywordsApi - object-oriented interface
 * @export
 * @class NegativeKeywordsApi
 * @extends {BaseAPI}
 */
export class NegativeKeywordsApi extends BaseAPI {
    /**
     * Set the status of the specified negative keyword to `archived`. Note that once the status for a keyword is set to `archived` it cannot be changed.
     * @summary Archives a negative keyword.
     * @param {NegativeKeywordsApiArchiveNegativeKeywordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeKeywordsApi
     */
    public archiveNegativeKeyword(requestParameters: NegativeKeywordsApiArchiveNegativeKeywordRequest, options?: any) {
        return NegativeKeywordsApiFp(this.configuration).archiveNegativeKeyword(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.keywordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates one or more negative keywords.
     * @param {NegativeKeywordsApiCreateNegativeKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeKeywordsApi
     */
    public createNegativeKeywords(requestParameters: NegativeKeywordsApiCreateNegativeKeywordsRequest, options?: any) {
        return NegativeKeywordsApiFp(this.configuration).createNegativeKeywords(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createNegativeKeyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a negative keyword specified by identifier.
     * @param {NegativeKeywordsApiGetNegativeKeywordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeKeywordsApi
     */
    public getNegativeKeyword(requestParameters: NegativeKeywordsApiGetNegativeKeywordRequest, options?: any) {
        return NegativeKeywordsApiFp(this.configuration).getNegativeKeyword(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.keywordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a negative keyword that has extended data fields.
     * @param {NegativeKeywordsApiGetNegativeKeywordExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeKeywordsApi
     */
    public getNegativeKeywordEx(requestParameters: NegativeKeywordsApiGetNegativeKeywordExRequest, options?: any) {
        return NegativeKeywordsApiFp(this.configuration).getNegativeKeywordEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.keywordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of negative keyword objects.
     * @param {NegativeKeywordsApiListNegativeKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeKeywordsApi
     */
    public listNegativeKeywords(requestParameters: NegativeKeywordsApiListNegativeKeywordsRequest, options?: any) {
        return NegativeKeywordsApiFp(this.configuration).listNegativeKeywords(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.matchTypeFilter, requestParameters.keywordText, requestParameters.stateFilter, requestParameters.campaignIdFilter, requestParameters.adGroupIdFilter, requestParameters.keywordIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of negative keywords that have extended data fields.
     * @param {NegativeKeywordsApiListNegativeKeywordsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeKeywordsApi
     */
    public listNegativeKeywordsEx(requestParameters: NegativeKeywordsApiListNegativeKeywordsExRequest, options?: any) {
        return NegativeKeywordsApiFp(this.configuration).listNegativeKeywordsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.matchTypeFilter, requestParameters.keywordText, requestParameters.stateFilter, requestParameters.campaignIdFilter, requestParameters.adGroupIdFilter, requestParameters.keywordIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates one or more negative keywords.
     * @param {NegativeKeywordsApiUpdateNegativeKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeKeywordsApi
     */
    public updateNegativeKeywords(requestParameters: NegativeKeywordsApiUpdateNegativeKeywordsRequest, options?: any) {
        return NegativeKeywordsApiFp(this.configuration).updateNegativeKeywords(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateNegativeKeyword, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegativeProductTargetingApi - axios parameter creator
 * @export
 */
export const NegativeProductTargetingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Set the `status` of a negative targeting clause to `archived`. Note that once a negative targeting clause `status` is set to `archived`, it cannot be changed.
         * @summary Archives a negative targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveNegativeTargetingClause: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveNegativeTargetingClause', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveNegativeTargetingClause', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('archiveNegativeTargetingClause', 'targetId', targetId)
            const localVarPath = `/v2/sp/negativeTargets/{targetId}`
                .replace(`{${"targetId"}}`, encodeURIComponent(String(targetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates one ore more negative targeting expressions.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateNegativeTargetingClause>} [createNegativeTargetingClause] A list of negative targeting clauses.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNegativeTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createNegativeTargetingClause?: Array<CreateNegativeTargetingClause>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createNegativeTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createNegativeTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/negativeTargets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createNegativeTargetingClause, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a negative targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeTargetingClause: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getNegativeTargetingClause', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getNegativeTargetingClause', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('getNegativeTargetingClause', 'targetId', targetId)
            const localVarPath = `/v2/sp/negativeTargets/{targetId}`
                .replace(`{${"targetId"}}`, encodeURIComponent(String(targetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a negative targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeTargetingClauseEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getNegativeTargetingClauseEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getNegativeTargetingClauseEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('getNegativeTargetingClauseEx', 'targetId', targetId)
            const localVarPath = `/v2/sp/negativeTargets/extended/{targetId}`
                .replace(`{${"targetId"}}`, encodeURIComponent(String(targetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of negative targeting clauses filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'archived'} [stateFilter] Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [targetIdFilter] A comma-delimited list of target identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'archived', campaignIdFilter?: string, adGroupIdFilter?: string, targetIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listNegativeTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listNegativeTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/negativeTargets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (targetIdFilter !== undefined) {
                localVarQueryParameter['targetIdFilter'] = targetIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of negative targeting clauses filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'archived'} [stateFilter] Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [targetIdFilter] A comma-delimited list of target identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeTargetingClausesEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'archived', campaignIdFilter?: string, adGroupIdFilter?: string, targetIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listNegativeTargetingClausesEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listNegativeTargetingClausesEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/negativeTargets/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (targetIdFilter !== undefined) {
                localVarQueryParameter['targetIdFilter'] = targetIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates one or more negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateNegativeTargetingClause>} [updateNegativeTargetingClause] A list of negative targeting clauses with updated values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNegativeTargetingClause: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateNegativeTargetingClause?: Array<UpdateNegativeTargetingClause>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateNegativeTargetingClause', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateNegativeTargetingClause', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/negativeTargets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateNegativeTargetingClause, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegativeProductTargetingApi - functional programming interface
 * @export
 */
export const NegativeProductTargetingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegativeProductTargetingApiAxiosParamCreator(configuration)
    return {
        /**
         * Set the `status` of a negative targeting clause to `archived`. Note that once a negative targeting clause `status` is set to `archived`, it cannot be changed.
         * @summary Archives a negative targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveNegativeTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NegativeTargetingClauseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveNegativeTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates one ore more negative targeting expressions.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateNegativeTargetingClause>} [createNegativeTargetingClause] A list of negative targeting clauses.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createNegativeTargetingClause?: Array<CreateNegativeTargetingClause>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NegativeTargetingClauseResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createNegativeTargetingClause, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a negative targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNegativeTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NegativeTargetingClause>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNegativeTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a negative targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNegativeTargetingClauseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NegativeTargetingClauseEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNegativeTargetingClauseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of negative targeting clauses filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'archived'} [stateFilter] Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [targetIdFilter] A comma-delimited list of target identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'archived', campaignIdFilter?: string, adGroupIdFilter?: string, targetIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NegativeTargetingClause>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, targetIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of negative targeting clauses filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'archived'} [stateFilter] Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [targetIdFilter] A comma-delimited list of target identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNegativeTargetingClausesEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'archived', campaignIdFilter?: string, adGroupIdFilter?: string, targetIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NegativeTargetingClauseEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNegativeTargetingClausesEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, targetIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates one or more negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateNegativeTargetingClause>} [updateNegativeTargetingClause] A list of negative targeting clauses with updated values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNegativeTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateNegativeTargetingClause?: Array<UpdateNegativeTargetingClause>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NegativeTargetingClauseResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNegativeTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateNegativeTargetingClause, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegativeProductTargetingApi - factory interface
 * @export
 */
export const NegativeProductTargetingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegativeProductTargetingApiFp(configuration)
    return {
        /**
         * Set the `status` of a negative targeting clause to `archived`. Note that once a negative targeting clause `status` is set to `archived`, it cannot be changed.
         * @summary Archives a negative targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveNegativeTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): AxiosPromise<NegativeTargetingClauseResponse> {
            return localVarFp.archiveNegativeTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates one ore more negative targeting expressions.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateNegativeTargetingClause>} [createNegativeTargetingClause] A list of negative targeting clauses.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createNegativeTargetingClause?: Array<CreateNegativeTargetingClause>, options?: any): AxiosPromise<Array<NegativeTargetingClauseResponse>> {
            return localVarFp.createNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createNegativeTargetingClause, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a negative targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): AxiosPromise<NegativeTargetingClause> {
            return localVarFp.getNegativeTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a negative targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeTargetingClauseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): AxiosPromise<NegativeTargetingClauseEx> {
            return localVarFp.getNegativeTargetingClauseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of negative targeting clauses filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'archived'} [stateFilter] Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [targetIdFilter] A comma-delimited list of target identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'archived', campaignIdFilter?: string, adGroupIdFilter?: string, targetIdFilter?: string, options?: any): AxiosPromise<Array<NegativeTargetingClause>> {
            return localVarFp.listNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, targetIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of negative targeting clauses filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'archived'} [stateFilter] Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [targetIdFilter] A comma-delimited list of target identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeTargetingClausesEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'archived', campaignIdFilter?: string, adGroupIdFilter?: string, targetIdFilter?: string, options?: any): AxiosPromise<Array<NegativeTargetingClauseEx>> {
            return localVarFp.listNegativeTargetingClausesEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, targetIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates one or more negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateNegativeTargetingClause>} [updateNegativeTargetingClause] A list of negative targeting clauses with updated values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNegativeTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateNegativeTargetingClause?: Array<UpdateNegativeTargetingClause>, options?: any): AxiosPromise<Array<NegativeTargetingClauseResponse>> {
            return localVarFp.updateNegativeTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateNegativeTargetingClause, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveNegativeTargetingClause operation in NegativeProductTargetingApi.
 * @export
 * @interface NegativeProductTargetingApiArchiveNegativeTargetingClauseRequest
 */
export interface NegativeProductTargetingApiArchiveNegativeTargetingClauseRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof NegativeProductTargetingApiArchiveNegativeTargetingClause
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeProductTargetingApiArchiveNegativeTargetingClause
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The target identifier.
     * @type {number}
     * @memberof NegativeProductTargetingApiArchiveNegativeTargetingClause
     */
    readonly targetId: number
}

/**
 * Request parameters for createNegativeTargetingClauses operation in NegativeProductTargetingApi.
 * @export
 * @interface NegativeProductTargetingApiCreateNegativeTargetingClausesRequest
 */
export interface NegativeProductTargetingApiCreateNegativeTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof NegativeProductTargetingApiCreateNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeProductTargetingApiCreateNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of negative targeting clauses.
     * @type {Array<CreateNegativeTargetingClause>}
     * @memberof NegativeProductTargetingApiCreateNegativeTargetingClauses
     */
    readonly createNegativeTargetingClause?: Array<CreateNegativeTargetingClause>
}

/**
 * Request parameters for getNegativeTargetingClause operation in NegativeProductTargetingApi.
 * @export
 * @interface NegativeProductTargetingApiGetNegativeTargetingClauseRequest
 */
export interface NegativeProductTargetingApiGetNegativeTargetingClauseRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof NegativeProductTargetingApiGetNegativeTargetingClause
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeProductTargetingApiGetNegativeTargetingClause
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The target identifier.
     * @type {number}
     * @memberof NegativeProductTargetingApiGetNegativeTargetingClause
     */
    readonly targetId: number
}

/**
 * Request parameters for getNegativeTargetingClauseEx operation in NegativeProductTargetingApi.
 * @export
 * @interface NegativeProductTargetingApiGetNegativeTargetingClauseExRequest
 */
export interface NegativeProductTargetingApiGetNegativeTargetingClauseExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof NegativeProductTargetingApiGetNegativeTargetingClauseEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeProductTargetingApiGetNegativeTargetingClauseEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The target identifier.
     * @type {number}
     * @memberof NegativeProductTargetingApiGetNegativeTargetingClauseEx
     */
    readonly targetId: number
}

/**
 * Request parameters for listNegativeTargetingClauses operation in NegativeProductTargetingApi.
 * @export
 * @interface NegativeProductTargetingApiListNegativeTargetingClausesRequest
 */
export interface NegativeProductTargetingApiListNegativeTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClauses
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClauses
     */
    readonly count?: number

    /**
     * Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
     * @type {'enabled' | 'archived'}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClauses
     */
    readonly stateFilter?: 'enabled' | 'archived'

    /**
     * A comma-delimited list of campaign identifiers.
     * @type {string}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClauses
     */
    readonly campaignIdFilter?: string

    /**
     * Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClauses
     */
    readonly adGroupIdFilter?: string

    /**
     * A comma-delimited list of target identifiers.
     * @type {string}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClauses
     */
    readonly targetIdFilter?: string
}

/**
 * Request parameters for listNegativeTargetingClausesEx operation in NegativeProductTargetingApi.
 * @export
 * @interface NegativeProductTargetingApiListNegativeTargetingClausesExRequest
 */
export interface NegativeProductTargetingApiListNegativeTargetingClausesExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClausesEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClausesEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClausesEx
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClausesEx
     */
    readonly count?: number

    /**
     * Restricts results to negative resources with state within the specified comma-separated list. Default includes all.
     * @type {'enabled' | 'archived'}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClausesEx
     */
    readonly stateFilter?: 'enabled' | 'archived'

    /**
     * A comma-delimited list of campaign identifiers.
     * @type {string}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClausesEx
     */
    readonly campaignIdFilter?: string

    /**
     * Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClausesEx
     */
    readonly adGroupIdFilter?: string

    /**
     * A comma-delimited list of target identifiers.
     * @type {string}
     * @memberof NegativeProductTargetingApiListNegativeTargetingClausesEx
     */
    readonly targetIdFilter?: string
}

/**
 * Request parameters for updateNegativeTargetingClause operation in NegativeProductTargetingApi.
 * @export
 * @interface NegativeProductTargetingApiUpdateNegativeTargetingClauseRequest
 */
export interface NegativeProductTargetingApiUpdateNegativeTargetingClauseRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof NegativeProductTargetingApiUpdateNegativeTargetingClause
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeProductTargetingApiUpdateNegativeTargetingClause
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of negative targeting clauses with updated values.
     * @type {Array<UpdateNegativeTargetingClause>}
     * @memberof NegativeProductTargetingApiUpdateNegativeTargetingClause
     */
    readonly updateNegativeTargetingClause?: Array<UpdateNegativeTargetingClause>
}

/**
 * NegativeProductTargetingApi - object-oriented interface
 * @export
 * @class NegativeProductTargetingApi
 * @extends {BaseAPI}
 */
export class NegativeProductTargetingApi extends BaseAPI {
    /**
     * Set the `status` of a negative targeting clause to `archived`. Note that once a negative targeting clause `status` is set to `archived`, it cannot be changed.
     * @summary Archives a negative targeting clause.
     * @param {NegativeProductTargetingApiArchiveNegativeTargetingClauseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeProductTargetingApi
     */
    public archiveNegativeTargetingClause(requestParameters: NegativeProductTargetingApiArchiveNegativeTargetingClauseRequest, options?: any) {
        return NegativeProductTargetingApiFp(this.configuration).archiveNegativeTargetingClause(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.targetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates one ore more negative targeting expressions.
     * @param {NegativeProductTargetingApiCreateNegativeTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeProductTargetingApi
     */
    public createNegativeTargetingClauses(requestParameters: NegativeProductTargetingApiCreateNegativeTargetingClausesRequest, options?: any) {
        return NegativeProductTargetingApiFp(this.configuration).createNegativeTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createNegativeTargetingClause, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a negative targeting clause specified by identifier.
     * @param {NegativeProductTargetingApiGetNegativeTargetingClauseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeProductTargetingApi
     */
    public getNegativeTargetingClause(requestParameters: NegativeProductTargetingApiGetNegativeTargetingClauseRequest, options?: any) {
        return NegativeProductTargetingApiFp(this.configuration).getNegativeTargetingClause(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.targetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a negative targeting clause specified by identifier.
     * @param {NegativeProductTargetingApiGetNegativeTargetingClauseExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeProductTargetingApi
     */
    public getNegativeTargetingClauseEx(requestParameters: NegativeProductTargetingApiGetNegativeTargetingClauseExRequest, options?: any) {
        return NegativeProductTargetingApiFp(this.configuration).getNegativeTargetingClauseEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.targetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of negative targeting clauses filtered by specified criteria.
     * @param {NegativeProductTargetingApiListNegativeTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeProductTargetingApi
     */
    public listNegativeTargetingClauses(requestParameters: NegativeProductTargetingApiListNegativeTargetingClausesRequest, options?: any) {
        return NegativeProductTargetingApiFp(this.configuration).listNegativeTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.campaignIdFilter, requestParameters.adGroupIdFilter, requestParameters.targetIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of negative targeting clauses filtered by specified criteria.
     * @param {NegativeProductTargetingApiListNegativeTargetingClausesExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeProductTargetingApi
     */
    public listNegativeTargetingClausesEx(requestParameters: NegativeProductTargetingApiListNegativeTargetingClausesExRequest, options?: any) {
        return NegativeProductTargetingApiFp(this.configuration).listNegativeTargetingClausesEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.campaignIdFilter, requestParameters.adGroupIdFilter, requestParameters.targetIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates one or more negative targeting clauses.
     * @param {NegativeProductTargetingApiUpdateNegativeTargetingClauseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeProductTargetingApi
     */
    public updateNegativeTargetingClause(requestParameters: NegativeProductTargetingApiUpdateNegativeTargetingClauseRequest, options?: any) {
        return NegativeProductTargetingApiFp(this.configuration).updateNegativeTargetingClause(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateNegativeTargetingClause, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductAdsApi - axios parameter creator
 * @export
 */
export const ProductAdsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sets the state of a specified product ad to `archived`. Note that once the state is set to `archived` it cannot be changed.
         * @summary Archives a product ad.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId A product ad identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveProductAd: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveProductAd', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveProductAd', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('archiveProductAd', 'adId', adId)
            const localVarPath = `/v2/sp/productAds/{adId}`
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates one or more product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateProductAd>} [createProductAd] A list of product ads for creation. Note that the &#x60;SKU&#x60; field is used by sellers and the &#x60;ASIN&#x60; field is used by vendors.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductAds: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createProductAd?: Array<CreateProductAd>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createProductAds', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createProductAds', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/productAds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductAd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a product ad specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId A product ad identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductAd: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getProductAd', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getProductAd', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('getProductAd', 'adId', adId)
            const localVarPath = `/v2/sp/productAds/{adId}`
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets extended data for a product ad specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId A product ad identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductAdEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getProductAdEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getProductAdEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('getProductAdEx', 'adId', adId)
            const localVarPath = `/v2/sp/productAds/extended/{adId}`
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of product ads filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [adIdFilter] Restricts results to product ads associated with the product ad identifiers specified in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductAds: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, adIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listProductAds', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listProductAds', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/productAds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (adIdFilter !== undefined) {
                localVarQueryParameter['adIdFilter'] = adIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets extended data for a list of product ads filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [adIdFilter] Restricts results to product ads associated with the product ad identifiers specified in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductAdsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, adIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listProductAdsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listProductAdsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/productAds/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (adIdFilter !== undefined) {
                localVarQueryParameter['adIdFilter'] = adIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates one or more product ads specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateProductAd>} [updateProductAd] A list of product ad objects with updated values for the &#x60;state&#x60; field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductAds: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateProductAd?: Array<UpdateProductAd>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateProductAds', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateProductAds', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/productAds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductAd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductAdsApi - functional programming interface
 * @export
 */
export const ProductAdsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductAdsApiAxiosParamCreator(configuration)
    return {
        /**
         * Sets the state of a specified product ad to `archived`. Note that once the state is set to `archived` it cannot be changed.
         * @summary Archives a product ad.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId A product ad identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveProductAd(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveProductAd(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates one or more product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateProductAd>} [createProductAd] A list of product ads for creation. Note that the &#x60;SKU&#x60; field is used by sellers and the &#x60;ASIN&#x60; field is used by vendors.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createProductAd?: Array<CreateProductAd>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAdResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createProductAd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a product ad specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId A product ad identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductAd(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAd>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductAd(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets extended data for a product ad specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId A product ad identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductAdEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAdEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductAdEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of product ads filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [adIdFilter] Restricts results to product ads associated with the product ad identifiers specified in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, adIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAd>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, adIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets extended data for a list of product ads filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [adIdFilter] Restricts results to product ads associated with the product ad identifiers specified in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductAdsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, adIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAdEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProductAdsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, adIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates one or more product ads specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateProductAd>} [updateProductAd] A list of product ad objects with updated values for the &#x60;state&#x60; field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateProductAd?: Array<UpdateProductAd>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAdResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateProductAd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductAdsApi - factory interface
 * @export
 */
export const ProductAdsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductAdsApiFp(configuration)
    return {
        /**
         * Sets the state of a specified product ad to `archived`. Note that once the state is set to `archived` it cannot be changed.
         * @summary Archives a product ad.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId A product ad identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveProductAd(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): AxiosPromise<ProductAdResponse> {
            return localVarFp.archiveProductAd(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates one or more product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateProductAd>} [createProductAd] A list of product ads for creation. Note that the &#x60;SKU&#x60; field is used by sellers and the &#x60;ASIN&#x60; field is used by vendors.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createProductAd?: Array<CreateProductAd>, options?: any): AxiosPromise<Array<ProductAdResponse>> {
            return localVarFp.createProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createProductAd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a product ad specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId A product ad identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductAd(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): AxiosPromise<ProductAd> {
            return localVarFp.getProductAd(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets extended data for a product ad specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId A product ad identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductAdEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): AxiosPromise<ProductAdEx> {
            return localVarFp.getProductAdEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of product ads filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [adIdFilter] Restricts results to product ads associated with the product ad identifiers specified in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, adIdFilter?: string, options?: any): AxiosPromise<Array<ProductAd>> {
            return localVarFp.listProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, adIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets extended data for a list of product ads filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [adIdFilter] Restricts results to product ads associated with the product ad identifiers specified in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductAdsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, adIdFilter?: string, options?: any): AxiosPromise<Array<ProductAdEx>> {
            return localVarFp.listProductAdsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, adIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates one or more product ads specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateProductAd>} [updateProductAd] A list of product ad objects with updated values for the &#x60;state&#x60; field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateProductAd?: Array<UpdateProductAd>, options?: any): AxiosPromise<Array<ProductAdResponse>> {
            return localVarFp.updateProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateProductAd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveProductAd operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiArchiveProductAdRequest
 */
export interface ProductAdsApiArchiveProductAdRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductAdsApiArchiveProductAd
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiArchiveProductAd
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A product ad identifier.
     * @type {number}
     * @memberof ProductAdsApiArchiveProductAd
     */
    readonly adId: number
}

/**
 * Request parameters for createProductAds operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiCreateProductAdsRequest
 */
export interface ProductAdsApiCreateProductAdsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductAdsApiCreateProductAds
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiCreateProductAds
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of product ads for creation. Note that the &#x60;SKU&#x60; field is used by sellers and the &#x60;ASIN&#x60; field is used by vendors.
     * @type {Array<CreateProductAd>}
     * @memberof ProductAdsApiCreateProductAds
     */
    readonly createProductAd?: Array<CreateProductAd>
}

/**
 * Request parameters for getProductAd operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiGetProductAdRequest
 */
export interface ProductAdsApiGetProductAdRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductAdsApiGetProductAd
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiGetProductAd
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A product ad identifier.
     * @type {number}
     * @memberof ProductAdsApiGetProductAd
     */
    readonly adId: number
}

/**
 * Request parameters for getProductAdEx operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiGetProductAdExRequest
 */
export interface ProductAdsApiGetProductAdExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductAdsApiGetProductAdEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiGetProductAdEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A product ad identifier.
     * @type {number}
     * @memberof ProductAdsApiGetProductAdEx
     */
    readonly adId: number
}

/**
 * Request parameters for listProductAds operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiListProductAdsRequest
 */
export interface ProductAdsApiListProductAdsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductAdsApiListProductAds
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiListProductAds
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof ProductAdsApiListProductAds
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof ProductAdsApiListProductAds
     */
    readonly count?: number

    /**
     * Restricts results to resources with state within the specified comma-separated list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof ProductAdsApiListProductAds
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * A comma-delimited list of campaign identifiers.
     * @type {string}
     * @memberof ProductAdsApiListProductAds
     */
    readonly campaignIdFilter?: string

    /**
     * Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof ProductAdsApiListProductAds
     */
    readonly adGroupIdFilter?: string

    /**
     * Restricts results to product ads associated with the product ad identifiers specified in the comma-delimited list.
     * @type {string}
     * @memberof ProductAdsApiListProductAds
     */
    readonly adIdFilter?: string
}

/**
 * Request parameters for listProductAdsEx operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiListProductAdsExRequest
 */
export interface ProductAdsApiListProductAdsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly count?: number

    /**
     * Restricts results to resources with state within the specified comma-separated list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * A comma-delimited list of campaign identifiers.
     * @type {string}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly campaignIdFilter?: string

    /**
     * Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly adGroupIdFilter?: string

    /**
     * Restricts results to product ads associated with the product ad identifiers specified in the comma-delimited list.
     * @type {string}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly adIdFilter?: string
}

/**
 * Request parameters for updateProductAds operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiUpdateProductAdsRequest
 */
export interface ProductAdsApiUpdateProductAdsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductAdsApiUpdateProductAds
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiUpdateProductAds
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of product ad objects with updated values for the &#x60;state&#x60; field.
     * @type {Array<UpdateProductAd>}
     * @memberof ProductAdsApiUpdateProductAds
     */
    readonly updateProductAd?: Array<UpdateProductAd>
}

/**
 * ProductAdsApi - object-oriented interface
 * @export
 * @class ProductAdsApi
 * @extends {BaseAPI}
 */
export class ProductAdsApi extends BaseAPI {
    /**
     * Sets the state of a specified product ad to `archived`. Note that once the state is set to `archived` it cannot be changed.
     * @summary Archives a product ad.
     * @param {ProductAdsApiArchiveProductAdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public archiveProductAd(requestParameters: ProductAdsApiArchiveProductAdRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).archiveProductAd(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates one or more product ads.
     * @param {ProductAdsApiCreateProductAdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public createProductAds(requestParameters: ProductAdsApiCreateProductAdsRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).createProductAds(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createProductAd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a product ad specified by identifier.
     * @param {ProductAdsApiGetProductAdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public getProductAd(requestParameters: ProductAdsApiGetProductAdRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).getProductAd(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets extended data for a product ad specified by identifier.
     * @param {ProductAdsApiGetProductAdExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public getProductAdEx(requestParameters: ProductAdsApiGetProductAdExRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).getProductAdEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of product ads filtered by specified criteria.
     * @param {ProductAdsApiListProductAdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public listProductAds(requestParameters: ProductAdsApiListProductAdsRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).listProductAds(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.campaignIdFilter, requestParameters.adGroupIdFilter, requestParameters.adIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets extended data for a list of product ads filtered by specified criteria.
     * @param {ProductAdsApiListProductAdsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public listProductAdsEx(requestParameters: ProductAdsApiListProductAdsExRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).listProductAdsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.campaignIdFilter, requestParameters.adGroupIdFilter, requestParameters.adIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates one or more product ads specified by identifier.
     * @param {ProductAdsApiUpdateProductAdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public updateProductAds(requestParameters: ProductAdsApiUpdateProductAdsRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).updateProductAds(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateProductAd, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductTargetingApi - axios parameter creator
 * @export
 */
export const ProductTargetingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Set the `status` of a targeting clause to `archived`. Note that once a targeting clause `status` is set to `archived`, it cannot be changed.
         * @summary Archives a targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveTargetingClause: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveTargetingClause', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveTargetingClause', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('archiveTargetingClause', 'targetId', targetId)
            const localVarPath = `/v2/sp/targets/{targetId}`
                .replace(`{${"targetId"}}`, encodeURIComponent(String(targetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of recommended products for targeting.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTargetRecommendations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject2?: InlineObject2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createTargetRecommendations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createTargetRecommendations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/targets/productRecommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates one or more targeting expressions.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateTargetingClause>} [createTargetingClause] A list of targeting clauses.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createTargetingClause?: Array<CreateTargetingClause>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/targets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTargetingClause, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get recommended brands for Sponsored Products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} [keyword] A keyword for which to get recommended brands.
         * @param {number} [categoryId] Gets the top 50 brands for the specified category identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandRecommendations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keyword?: string, categoryId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getBrandRecommendations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getBrandRecommendations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/targets/brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetingClause: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getTargetingClause', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getTargetingClause', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('getTargetingClause', 'targetId', targetId)
            const localVarPath = `/v2/sp/targets/{targetId}`
                .replace(`{${"targetId"}}`, encodeURIComponent(String(targetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetingClauseEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getTargetingClauseEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getTargetingClauseEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('getTargetingClauseEx', 'targetId', targetId)
            const localVarPath = `/v2/sp/targets/extended/{targetId}`
                .replace(`{${"targetId"}}`, encodeURIComponent(String(targetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of targeting clauses filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [targetIdFilter] A comma-delimited list of target identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, targetIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/targets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (targetIdFilter !== undefined) {
                localVarQueryParameter['targetIdFilter'] = targetIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of targeting clauses filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [targetIdFilter] A comma-delimited list of target identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTargetingClausesEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, targetIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listTargetingClausesEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listTargetingClausesEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/targets/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (targetIdFilter !== undefined) {
                localVarQueryParameter['targetIdFilter'] = targetIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates one or more targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateTargetingClause>} [updateTargetingClause] A list of targeting clauses with updated values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTargetingClause: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateTargetingClause?: Array<UpdateTargetingClause>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateTargetingClause', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateTargetingClause', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/targets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTargetingClause, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductTargetingApi - functional programming interface
 * @export
 */
export const ProductTargetingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductTargetingApiAxiosParamCreator(configuration)
    return {
        /**
         * Set the `status` of a targeting clause to `archived`. Note that once a targeting clause `status` is set to `archived`, it cannot be changed.
         * @summary Archives a targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetingClauseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of recommended products for targeting.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTargetRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject2?: InlineObject2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductRecommendationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTargetRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, inlineObject2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates one or more targeting expressions.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateTargetingClause>} [createTargetingClause] A list of targeting clauses.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createTargetingClause?: Array<CreateTargetingClause>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetingClauseResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createTargetingClause, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get recommended brands for Sponsored Products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} [keyword] A keyword for which to get recommended brands.
         * @param {number} [categoryId] Gets the top 50 brands for the specified category identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrandRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keyword?: string, categoryId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrandRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keyword, categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetingClause>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargetingClauseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetingClauseEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargetingClauseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of targeting clauses filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [targetIdFilter] A comma-delimited list of target identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, targetIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetingClause>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, targetIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of targeting clauses filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [targetIdFilter] A comma-delimited list of target identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTargetingClausesEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, targetIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetingClauseEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTargetingClausesEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, targetIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates one or more targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateTargetingClause>} [updateTargetingClause] A list of targeting clauses with updated values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateTargetingClause?: Array<UpdateTargetingClause>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetingClauseResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateTargetingClause, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductTargetingApi - factory interface
 * @export
 */
export const ProductTargetingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductTargetingApiFp(configuration)
    return {
        /**
         * Set the `status` of a targeting clause to `archived`. Note that once a targeting clause `status` is set to `archived`, it cannot be changed.
         * @summary Archives a targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): AxiosPromise<TargetingClauseResponse> {
            return localVarFp.archiveTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of recommended products for targeting.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTargetRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject2?: InlineObject2, options?: any): AxiosPromise<ProductRecommendationsResponse> {
            return localVarFp.createTargetRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, inlineObject2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates one or more targeting expressions.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateTargetingClause>} [createTargetingClause] A list of targeting clauses.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createTargetingClause?: Array<CreateTargetingClause>, options?: any): AxiosPromise<Array<TargetingClauseResponse>> {
            return localVarFp.createTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createTargetingClause, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get recommended brands for Sponsored Products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} [keyword] A keyword for which to get recommended brands.
         * @param {number} [categoryId] Gets the top 50 brands for the specified category identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keyword?: string, categoryId?: number, options?: any): AxiosPromise<BrandResponse> {
            return localVarFp.getBrandRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keyword, categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): AxiosPromise<TargetingClause> {
            return localVarFp.getTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The target identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetingClauseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): AxiosPromise<TargetingClauseEx> {
            return localVarFp.getTargetingClauseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of targeting clauses filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [targetIdFilter] A comma-delimited list of target identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, targetIdFilter?: string, options?: any): AxiosPromise<Array<TargetingClause>> {
            return localVarFp.listTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, targetIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of targeting clauses filtered by specified criteria.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] 0-indexed record offset for the result set.
         * @param {number} [count] Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Restricts results to resources with state within the specified comma-separated list.
         * @param {string} [campaignIdFilter] A comma-delimited list of campaign identifiers.
         * @param {string} [adGroupIdFilter] Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
         * @param {string} [targetIdFilter] A comma-delimited list of target identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTargetingClausesEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, targetIdFilter?: string, options?: any): AxiosPromise<Array<TargetingClauseEx>> {
            return localVarFp.listTargetingClausesEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, targetIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates one or more targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateTargetingClause>} [updateTargetingClause] A list of targeting clauses with updated values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateTargetingClause?: Array<UpdateTargetingClause>, options?: any): AxiosPromise<Array<TargetingClauseResponse>> {
            return localVarFp.updateTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateTargetingClause, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveTargetingClause operation in ProductTargetingApi.
 * @export
 * @interface ProductTargetingApiArchiveTargetingClauseRequest
 */
export interface ProductTargetingApiArchiveTargetingClauseRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductTargetingApiArchiveTargetingClause
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductTargetingApiArchiveTargetingClause
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The target identifier.
     * @type {number}
     * @memberof ProductTargetingApiArchiveTargetingClause
     */
    readonly targetId: number
}

/**
 * Request parameters for createTargetRecommendations operation in ProductTargetingApi.
 * @export
 * @interface ProductTargetingApiCreateTargetRecommendationsRequest
 */
export interface ProductTargetingApiCreateTargetRecommendationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductTargetingApiCreateTargetRecommendations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductTargetingApiCreateTargetRecommendations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {InlineObject2}
     * @memberof ProductTargetingApiCreateTargetRecommendations
     */
    readonly inlineObject2?: InlineObject2
}

/**
 * Request parameters for createTargetingClauses operation in ProductTargetingApi.
 * @export
 * @interface ProductTargetingApiCreateTargetingClausesRequest
 */
export interface ProductTargetingApiCreateTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductTargetingApiCreateTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductTargetingApiCreateTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of targeting clauses.
     * @type {Array<CreateTargetingClause>}
     * @memberof ProductTargetingApiCreateTargetingClauses
     */
    readonly createTargetingClause?: Array<CreateTargetingClause>
}

/**
 * Request parameters for getBrandRecommendations operation in ProductTargetingApi.
 * @export
 * @interface ProductTargetingApiGetBrandRecommendationsRequest
 */
export interface ProductTargetingApiGetBrandRecommendationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductTargetingApiGetBrandRecommendations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductTargetingApiGetBrandRecommendations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A keyword for which to get recommended brands.
     * @type {string}
     * @memberof ProductTargetingApiGetBrandRecommendations
     */
    readonly keyword?: string

    /**
     * Gets the top 50 brands for the specified category identifier.
     * @type {number}
     * @memberof ProductTargetingApiGetBrandRecommendations
     */
    readonly categoryId?: number
}

/**
 * Request parameters for getTargetingClause operation in ProductTargetingApi.
 * @export
 * @interface ProductTargetingApiGetTargetingClauseRequest
 */
export interface ProductTargetingApiGetTargetingClauseRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductTargetingApiGetTargetingClause
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductTargetingApiGetTargetingClause
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The target identifier.
     * @type {number}
     * @memberof ProductTargetingApiGetTargetingClause
     */
    readonly targetId: number
}

/**
 * Request parameters for getTargetingClauseEx operation in ProductTargetingApi.
 * @export
 * @interface ProductTargetingApiGetTargetingClauseExRequest
 */
export interface ProductTargetingApiGetTargetingClauseExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductTargetingApiGetTargetingClauseEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductTargetingApiGetTargetingClauseEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The target identifier.
     * @type {number}
     * @memberof ProductTargetingApiGetTargetingClauseEx
     */
    readonly targetId: number
}

/**
 * Request parameters for listTargetingClauses operation in ProductTargetingApi.
 * @export
 * @interface ProductTargetingApiListTargetingClausesRequest
 */
export interface ProductTargetingApiListTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductTargetingApiListTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductTargetingApiListTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof ProductTargetingApiListTargetingClauses
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof ProductTargetingApiListTargetingClauses
     */
    readonly count?: number

    /**
     * Restricts results to resources with state within the specified comma-separated list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof ProductTargetingApiListTargetingClauses
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * A comma-delimited list of campaign identifiers.
     * @type {string}
     * @memberof ProductTargetingApiListTargetingClauses
     */
    readonly campaignIdFilter?: string

    /**
     * Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof ProductTargetingApiListTargetingClauses
     */
    readonly adGroupIdFilter?: string

    /**
     * A comma-delimited list of target identifiers.
     * @type {string}
     * @memberof ProductTargetingApiListTargetingClauses
     */
    readonly targetIdFilter?: string
}

/**
 * Request parameters for listTargetingClausesEx operation in ProductTargetingApi.
 * @export
 * @interface ProductTargetingApiListTargetingClausesExRequest
 */
export interface ProductTargetingApiListTargetingClausesExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductTargetingApiListTargetingClausesEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductTargetingApiListTargetingClausesEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 0-indexed record offset for the result set.
     * @type {number}
     * @memberof ProductTargetingApiListTargetingClausesEx
     */
    readonly startIndex?: number

    /**
     * Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof ProductTargetingApiListTargetingClausesEx
     */
    readonly count?: number

    /**
     * Restricts results to resources with state within the specified comma-separated list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof ProductTargetingApiListTargetingClausesEx
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * A comma-delimited list of campaign identifiers.
     * @type {string}
     * @memberof ProductTargetingApiListTargetingClausesEx
     */
    readonly campaignIdFilter?: string

    /**
     * Restricts results to keywords associated with ad groups specified by identifier in the comma-delimited list.
     * @type {string}
     * @memberof ProductTargetingApiListTargetingClausesEx
     */
    readonly adGroupIdFilter?: string

    /**
     * A comma-delimited list of target identifiers.
     * @type {string}
     * @memberof ProductTargetingApiListTargetingClausesEx
     */
    readonly targetIdFilter?: string
}

/**
 * Request parameters for updateTargetingClause operation in ProductTargetingApi.
 * @export
 * @interface ProductTargetingApiUpdateTargetingClauseRequest
 */
export interface ProductTargetingApiUpdateTargetingClauseRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ProductTargetingApiUpdateTargetingClause
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductTargetingApiUpdateTargetingClause
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of targeting clauses with updated values.
     * @type {Array<UpdateTargetingClause>}
     * @memberof ProductTargetingApiUpdateTargetingClause
     */
    readonly updateTargetingClause?: Array<UpdateTargetingClause>
}

/**
 * ProductTargetingApi - object-oriented interface
 * @export
 * @class ProductTargetingApi
 * @extends {BaseAPI}
 */
export class ProductTargetingApi extends BaseAPI {
    /**
     * Set the `status` of a targeting clause to `archived`. Note that once a targeting clause `status` is set to `archived`, it cannot be changed.
     * @summary Archives a targeting clause.
     * @param {ProductTargetingApiArchiveTargetingClauseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTargetingApi
     */
    public archiveTargetingClause(requestParameters: ProductTargetingApiArchiveTargetingClauseRequest, options?: any) {
        return ProductTargetingApiFp(this.configuration).archiveTargetingClause(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.targetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of recommended products for targeting.
     * @param {ProductTargetingApiCreateTargetRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTargetingApi
     */
    public createTargetRecommendations(requestParameters: ProductTargetingApiCreateTargetRecommendationsRequest, options?: any) {
        return ProductTargetingApiFp(this.configuration).createTargetRecommendations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.inlineObject2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates one or more targeting expressions.
     * @param {ProductTargetingApiCreateTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTargetingApi
     */
    public createTargetingClauses(requestParameters: ProductTargetingApiCreateTargetingClausesRequest, options?: any) {
        return ProductTargetingApiFp(this.configuration).createTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createTargetingClause, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get recommended brands for Sponsored Products.
     * @param {ProductTargetingApiGetBrandRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTargetingApi
     */
    public getBrandRecommendations(requestParameters: ProductTargetingApiGetBrandRecommendationsRequest, options?: any) {
        return ProductTargetingApiFp(this.configuration).getBrandRecommendations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.keyword, requestParameters.categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a targeting clause specified by identifier.
     * @param {ProductTargetingApiGetTargetingClauseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTargetingApi
     */
    public getTargetingClause(requestParameters: ProductTargetingApiGetTargetingClauseRequest, options?: any) {
        return ProductTargetingApiFp(this.configuration).getTargetingClause(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.targetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a targeting clause specified by identifier.
     * @param {ProductTargetingApiGetTargetingClauseExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTargetingApi
     */
    public getTargetingClauseEx(requestParameters: ProductTargetingApiGetTargetingClauseExRequest, options?: any) {
        return ProductTargetingApiFp(this.configuration).getTargetingClauseEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.targetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of targeting clauses filtered by specified criteria.
     * @param {ProductTargetingApiListTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTargetingApi
     */
    public listTargetingClauses(requestParameters: ProductTargetingApiListTargetingClausesRequest, options?: any) {
        return ProductTargetingApiFp(this.configuration).listTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.campaignIdFilter, requestParameters.adGroupIdFilter, requestParameters.targetIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of targeting clauses filtered by specified criteria.
     * @param {ProductTargetingApiListTargetingClausesExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTargetingApi
     */
    public listTargetingClausesEx(requestParameters: ProductTargetingApiListTargetingClausesExRequest, options?: any) {
        return ProductTargetingApiFp(this.configuration).listTargetingClausesEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.campaignIdFilter, requestParameters.adGroupIdFilter, requestParameters.targetIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates one or more targeting clauses.
     * @param {ProductTargetingApiUpdateTargetingClauseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTargetingApi
     */
    public updateTargetingClause(requestParameters: ProductTargetingApiUpdateTargetingClauseRequest, options?: any) {
        return ProductTargetingApiFp(this.configuration).updateTargetingClause(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateTargetingClause, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets a previously requested report specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} reportId The report identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getReport', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getReport', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('getReport', 'reportId', reportId)
            const localVarPath = `/v2/reports/{reportId}`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request the creation of a performance report for all entities of a single type which have performance data to report. Record types can be one of `campaigns`, `adGroups`, `keywords`, `productAds`, `asins`, and `targets`. **Note** that for `asin` reports, the report currently can **not** include metrics associated with both keywords and targets. If the `targetingId` value is set in the request, the report filters on targets and does not return sales associated with keywords. If the `targetingId` value is **not** set in the request, the report filters on keywords and does not return sales associated with targets. Therefore, the default behavior filters the report on keywords. Also note that if both `keywordId` **and** `targetingId` values are passed, the report filters on targets only and does **not** return keywords.
         * @summary Requests a Sponsored Products report.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'keywords' | 'productAds' | 'asins' | 'targets'} recordType The type of entity for which the report should be generated.
         * @param {Report} [report] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestReport: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'keywords' | 'productAds' | 'asins' | 'targets', report?: Report, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('requestReport', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('requestReport', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'recordType' is not null or undefined
            assertParamExists('requestReport', 'recordType', recordType)
            const localVarPath = `/v2/sp/{recordType}/report`
                .replace(`{${"recordType"}}`, encodeURIComponent(String(recordType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(report, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets a previously requested report specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} reportId The report identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReport(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReport(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, reportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request the creation of a performance report for all entities of a single type which have performance data to report. Record types can be one of `campaigns`, `adGroups`, `keywords`, `productAds`, `asins`, and `targets`. **Note** that for `asin` reports, the report currently can **not** include metrics associated with both keywords and targets. If the `targetingId` value is set in the request, the report filters on targets and does not return sales associated with keywords. If the `targetingId` value is **not** set in the request, the report filters on keywords and does not return sales associated with targets. Therefore, the default behavior filters the report on keywords. Also note that if both `keywordId` **and** `targetingId` values are passed, the report filters on targets only and does **not** return keywords.
         * @summary Requests a Sponsored Products report.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'keywords' | 'productAds' | 'asins' | 'targets'} recordType The type of entity for which the report should be generated.
         * @param {Report} [report] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestReport(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'keywords' | 'productAds' | 'asins' | 'targets', report?: Report, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestReport(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, report, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets a previously requested report specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} reportId The report identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportId: number, options?: any): AxiosPromise<Report> {
            return localVarFp.getReport(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, reportId, options).then((request) => request(axios, basePath));
        },
        /**
         * Request the creation of a performance report for all entities of a single type which have performance data to report. Record types can be one of `campaigns`, `adGroups`, `keywords`, `productAds`, `asins`, and `targets`. **Note** that for `asin` reports, the report currently can **not** include metrics associated with both keywords and targets. If the `targetingId` value is set in the request, the report filters on targets and does not return sales associated with keywords. If the `targetingId` value is **not** set in the request, the report filters on keywords and does not return sales associated with targets. Therefore, the default behavior filters the report on keywords. Also note that if both `keywordId` **and** `targetingId` values are passed, the report filters on targets only and does **not** return keywords.
         * @summary Requests a Sponsored Products report.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'keywords' | 'productAds' | 'asins' | 'targets'} recordType The type of entity for which the report should be generated.
         * @param {Report} [report] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestReport(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'keywords' | 'productAds' | 'asins' | 'targets', report?: Report, options?: any): AxiosPromise<Report> {
            return localVarFp.requestReport(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, report, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetReportRequest
 */
export interface ReportsApiGetReportRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ReportsApiGetReport
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ReportsApiGetReport
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The report identifier.
     * @type {number}
     * @memberof ReportsApiGetReport
     */
    readonly reportId: number
}

/**
 * Request parameters for requestReport operation in ReportsApi.
 * @export
 * @interface ReportsApiRequestReportRequest
 */
export interface ReportsApiRequestReportRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof ReportsApiRequestReport
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ReportsApiRequestReport
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The type of entity for which the report should be generated.
     * @type {'campaigns' | 'adGroups' | 'keywords' | 'productAds' | 'asins' | 'targets'}
     * @memberof ReportsApiRequestReport
     */
    readonly recordType: 'campaigns' | 'adGroups' | 'keywords' | 'productAds' | 'asins' | 'targets'

    /**
     * 
     * @type {Report}
     * @memberof ReportsApiRequestReport
     */
    readonly report?: Report
}

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
    /**
     * 
     * @summary Gets a previously requested report specified by identifier.
     * @param {ReportsApiGetReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public getReport(requestParameters: ReportsApiGetReportRequest, options?: any) {
        return ReportsApiFp(this.configuration).getReport(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.reportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request the creation of a performance report for all entities of a single type which have performance data to report. Record types can be one of `campaigns`, `adGroups`, `keywords`, `productAds`, `asins`, and `targets`. **Note** that for `asin` reports, the report currently can **not** include metrics associated with both keywords and targets. If the `targetingId` value is set in the request, the report filters on targets and does not return sales associated with keywords. If the `targetingId` value is **not** set in the request, the report filters on keywords and does not return sales associated with targets. Therefore, the default behavior filters the report on keywords. Also note that if both `keywordId` **and** `targetingId` values are passed, the report filters on targets only and does **not** return keywords.
     * @summary Requests a Sponsored Products report.
     * @param {ReportsApiRequestReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public requestReport(requestParameters: ReportsApiRequestReportRequest, options?: any) {
        return ReportsApiFp(this.configuration).requestReport(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.recordType, requestParameters.report, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SnapshotsApi - axios parameter creator
 * @export
 */
export const SnapshotsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the status of a requested snapshot.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} snapshotId The snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSnapshotStatus: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getSnapshotStatus', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getSnapshotStatus', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSnapshotStatus', 'snapshotId', snapshotId)
            const localVarPath = `/v2/sp/snapshots/{snapshotId}`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria.
         * @summary Request a file-based snapshot of all entities of the specified type.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets'} recordType The type of entity for which the snapshot is generated.
         * @param {SnapshotRequest} snapshotRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestSnapshot: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets', snapshotRequest: SnapshotRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('requestSnapshot', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('requestSnapshot', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'recordType' is not null or undefined
            assertParamExists('requestSnapshot', 'recordType', recordType)
            // verify required parameter 'snapshotRequest' is not null or undefined
            assertParamExists('requestSnapshot', 'snapshotRequest', snapshotRequest)
            const localVarPath = `/v2/sp/{recordType}/snapshot`
                .replace(`{${"recordType"}}`, encodeURIComponent(String(recordType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(snapshotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SnapshotsApi - functional programming interface
 * @export
 */
export const SnapshotsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SnapshotsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets the status of a requested snapshot.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} snapshotId The snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSnapshotStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSnapshotStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria.
         * @summary Request a file-based snapshot of all entities of the specified type.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets'} recordType The type of entity for which the snapshot is generated.
         * @param {SnapshotRequest} snapshotRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets', snapshotRequest: SnapshotRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, snapshotRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SnapshotsApi - factory interface
 * @export
 */
export const SnapshotsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SnapshotsApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets the status of a requested snapshot.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} snapshotId The snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSnapshotStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: number, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.getSnapshotStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options).then((request) => request(axios, basePath));
        },
        /**
         * Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria.
         * @summary Request a file-based snapshot of all entities of the specified type.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets'} recordType The type of entity for which the snapshot is generated.
         * @param {SnapshotRequest} snapshotRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets', snapshotRequest: SnapshotRequest, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.requestSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, snapshotRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSnapshotStatus operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiGetSnapshotStatusRequest
 */
export interface SnapshotsApiGetSnapshotStatusRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof SnapshotsApiGetSnapshotStatus
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SnapshotsApiGetSnapshotStatus
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The snapshot identifier.
     * @type {number}
     * @memberof SnapshotsApiGetSnapshotStatus
     */
    readonly snapshotId: number
}

/**
 * Request parameters for requestSnapshot operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiRequestSnapshotRequest
 */
export interface SnapshotsApiRequestSnapshotRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof SnapshotsApiRequestSnapshot
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SnapshotsApiRequestSnapshot
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The type of entity for which the snapshot is generated.
     * @type {'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets'}
     * @memberof SnapshotsApiRequestSnapshot
     */
    readonly recordType: 'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets'

    /**
     * 
     * @type {SnapshotRequest}
     * @memberof SnapshotsApiRequestSnapshot
     */
    readonly snapshotRequest: SnapshotRequest
}

/**
 * SnapshotsApi - object-oriented interface
 * @export
 * @class SnapshotsApi
 * @extends {BaseAPI}
 */
export class SnapshotsApi extends BaseAPI {
    /**
     * 
     * @summary Gets the status of a requested snapshot.
     * @param {SnapshotsApiGetSnapshotStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    public getSnapshotStatus(requestParameters: SnapshotsApiGetSnapshotStatusRequest, options?: any) {
        return SnapshotsApiFp(this.configuration).getSnapshotStatus(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.snapshotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria.
     * @summary Request a file-based snapshot of all entities of the specified type.
     * @param {SnapshotsApiRequestSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    public requestSnapshot(requestParameters: SnapshotsApiRequestSnapshotRequest, options?: any) {
        return SnapshotsApiFp(this.configuration).requestSnapshot(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.recordType, requestParameters.snapshotRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SuggestedKeywordsApi - axios parameter creator
 * @export
 */
export const SuggestedKeywordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Suggested keywords are returned in an array ordered by descending effectiveness.
         * @summary Gets suggested keyword for a specified list of ASINs.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkGetAsinSuggestedKeywords: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject?: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('bulkGetAsinSuggestedKeywords', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('bulkGetAsinSuggestedKeywords', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/asins/suggested/keywords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets suggested keywords for the specified ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of a valid ad group.
         * @param {number} [maxNumSuggestions] The maxiumum number of suggested keywords for the response.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [adStateFilter] Filters results to ad groups with state matching the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupSuggestedKeywords: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, maxNumSuggestions?: number, adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAdGroupSuggestedKeywords', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAdGroupSuggestedKeywords', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('getAdGroupSuggestedKeywords', 'adGroupId', adGroupId)
            const localVarPath = `/v2/sp/adGroups/{adGroupId}/suggested/keywords`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (maxNumSuggestions !== undefined) {
                localVarQueryParameter['maxNumSuggestions'] = maxNumSuggestions;
            }

            if (adStateFilter !== undefined) {
                localVarQueryParameter['adStateFilter'] = adStateFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets suggested keywords with extended data for the specified ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of a valid ad group.
         * @param {number} [maxNumSuggestions] The maxiumum number of suggested keywords for the response.
         * @param {'yes' | 'no'} [suggestBids] Set to &#x60;yes&#x60; to include a suggest bid for the suggested keyword in the response. Otherwise, set to &#x60;no&#x60;.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [adStateFilter] Filters results to ad groups with state matching the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupSuggestedKeywordsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, maxNumSuggestions?: number, suggestBids?: 'yes' | 'no', adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAdGroupSuggestedKeywordsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAdGroupSuggestedKeywordsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('getAdGroupSuggestedKeywordsEx', 'adGroupId', adGroupId)
            const localVarPath = `/v2/sp/adGroups/{adGroupId}/suggested/keywords/extended`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (maxNumSuggestions !== undefined) {
                localVarQueryParameter['maxNumSuggestions'] = maxNumSuggestions;
            }

            if (suggestBids !== undefined) {
                localVarQueryParameter['suggestBids'] = suggestBids;
            }

            if (adStateFilter !== undefined) {
                localVarQueryParameter['adStateFilter'] = adStateFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Suggested keywords are returned in an array ordered by descending effectiveness.
         * @summary Gets suggested keywords for the specified ASIN.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} asinValue An ASIN.
         * @param {number} [maxNumSuggestions] The maxiumum number of suggested keywords for the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsinSuggestedKeywords: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, asinValue: string, maxNumSuggestions?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAsinSuggestedKeywords', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAsinSuggestedKeywords', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'asinValue' is not null or undefined
            assertParamExists('getAsinSuggestedKeywords', 'asinValue', asinValue)
            const localVarPath = `/v2/sp/asins/{asinValue}/suggested/keywords`
                .replace(`{${"asinValue"}}`, encodeURIComponent(String(asinValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (maxNumSuggestions !== undefined) {
                localVarQueryParameter['maxNumSuggestions'] = maxNumSuggestions;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SuggestedKeywordsApi - functional programming interface
 * @export
 */
export const SuggestedKeywordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SuggestedKeywordsApiAxiosParamCreator(configuration)
    return {
        /**
         * Suggested keywords are returned in an array ordered by descending effectiveness.
         * @summary Gets suggested keyword for a specified list of ASINs.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkGetAsinSuggestedKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject?: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkGetAsinSuggestedKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets suggested keywords for the specified ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of a valid ad group.
         * @param {number} [maxNumSuggestions] The maxiumum number of suggested keywords for the response.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [adStateFilter] Filters results to ad groups with state matching the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdGroupSuggestedKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, maxNumSuggestions?: number, adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdGroupSuggestedKeywordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdGroupSuggestedKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, maxNumSuggestions, adStateFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets suggested keywords with extended data for the specified ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of a valid ad group.
         * @param {number} [maxNumSuggestions] The maxiumum number of suggested keywords for the response.
         * @param {'yes' | 'no'} [suggestBids] Set to &#x60;yes&#x60; to include a suggest bid for the suggested keyword in the response. Otherwise, set to &#x60;no&#x60;.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [adStateFilter] Filters results to ad groups with state matching the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdGroupSuggestedKeywordsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, maxNumSuggestions?: number, suggestBids?: 'yes' | 'no', adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdGroupSuggestedKeywordsResponseEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdGroupSuggestedKeywordsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, maxNumSuggestions, suggestBids, adStateFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Suggested keywords are returned in an array ordered by descending effectiveness.
         * @summary Gets suggested keywords for the specified ASIN.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} asinValue An ASIN.
         * @param {number} [maxNumSuggestions] The maxiumum number of suggested keywords for the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAsinSuggestedKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, asinValue: string, maxNumSuggestions?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAsinSuggestedKeywordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAsinSuggestedKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, asinValue, maxNumSuggestions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SuggestedKeywordsApi - factory interface
 * @export
 */
export const SuggestedKeywordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SuggestedKeywordsApiFp(configuration)
    return {
        /**
         * Suggested keywords are returned in an array ordered by descending effectiveness.
         * @summary Gets suggested keyword for a specified list of ASINs.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkGetAsinSuggestedKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject?: InlineObject, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.bulkGetAsinSuggestedKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets suggested keywords for the specified ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of a valid ad group.
         * @param {number} [maxNumSuggestions] The maxiumum number of suggested keywords for the response.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [adStateFilter] Filters results to ad groups with state matching the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupSuggestedKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, maxNumSuggestions?: number, adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', options?: any): AxiosPromise<AdGroupSuggestedKeywordsResponse> {
            return localVarFp.getAdGroupSuggestedKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, maxNumSuggestions, adStateFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets suggested keywords with extended data for the specified ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of a valid ad group.
         * @param {number} [maxNumSuggestions] The maxiumum number of suggested keywords for the response.
         * @param {'yes' | 'no'} [suggestBids] Set to &#x60;yes&#x60; to include a suggest bid for the suggested keyword in the response. Otherwise, set to &#x60;no&#x60;.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [adStateFilter] Filters results to ad groups with state matching the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupSuggestedKeywordsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, maxNumSuggestions?: number, suggestBids?: 'yes' | 'no', adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', options?: any): AxiosPromise<Array<AdGroupSuggestedKeywordsResponseEx>> {
            return localVarFp.getAdGroupSuggestedKeywordsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, maxNumSuggestions, suggestBids, adStateFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Suggested keywords are returned in an array ordered by descending effectiveness.
         * @summary Gets suggested keywords for the specified ASIN.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} asinValue An ASIN.
         * @param {number} [maxNumSuggestions] The maxiumum number of suggested keywords for the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsinSuggestedKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, asinValue: string, maxNumSuggestions?: number, options?: any): AxiosPromise<GetAsinSuggestedKeywordsResponse> {
            return localVarFp.getAsinSuggestedKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, asinValue, maxNumSuggestions, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for bulkGetAsinSuggestedKeywords operation in SuggestedKeywordsApi.
 * @export
 * @interface SuggestedKeywordsApiBulkGetAsinSuggestedKeywordsRequest
 */
export interface SuggestedKeywordsApiBulkGetAsinSuggestedKeywordsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof SuggestedKeywordsApiBulkGetAsinSuggestedKeywords
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SuggestedKeywordsApiBulkGetAsinSuggestedKeywords
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {InlineObject}
     * @memberof SuggestedKeywordsApiBulkGetAsinSuggestedKeywords
     */
    readonly inlineObject?: InlineObject
}

/**
 * Request parameters for getAdGroupSuggestedKeywords operation in SuggestedKeywordsApi.
 * @export
 * @interface SuggestedKeywordsApiGetAdGroupSuggestedKeywordsRequest
 */
export interface SuggestedKeywordsApiGetAdGroupSuggestedKeywordsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywords
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywords
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of a valid ad group.
     * @type {number}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywords
     */
    readonly adGroupId: number

    /**
     * The maxiumum number of suggested keywords for the response.
     * @type {number}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywords
     */
    readonly maxNumSuggestions?: number

    /**
     * Filters results to ad groups with state matching the comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywords
     */
    readonly adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'
}

/**
 * Request parameters for getAdGroupSuggestedKeywordsEx operation in SuggestedKeywordsApi.
 * @export
 * @interface SuggestedKeywordsApiGetAdGroupSuggestedKeywordsExRequest
 */
export interface SuggestedKeywordsApiGetAdGroupSuggestedKeywordsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywordsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywordsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of a valid ad group.
     * @type {number}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywordsEx
     */
    readonly adGroupId: number

    /**
     * The maxiumum number of suggested keywords for the response.
     * @type {number}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywordsEx
     */
    readonly maxNumSuggestions?: number

    /**
     * Set to &#x60;yes&#x60; to include a suggest bid for the suggested keyword in the response. Otherwise, set to &#x60;no&#x60;.
     * @type {'yes' | 'no'}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywordsEx
     */
    readonly suggestBids?: 'yes' | 'no'

    /**
     * Filters results to ad groups with state matching the comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywordsEx
     */
    readonly adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'
}

/**
 * Request parameters for getAsinSuggestedKeywords operation in SuggestedKeywordsApi.
 * @export
 * @interface SuggestedKeywordsApiGetAsinSuggestedKeywordsRequest
 */
export interface SuggestedKeywordsApiGetAsinSuggestedKeywordsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof SuggestedKeywordsApiGetAsinSuggestedKeywords
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SuggestedKeywordsApiGetAsinSuggestedKeywords
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An ASIN.
     * @type {string}
     * @memberof SuggestedKeywordsApiGetAsinSuggestedKeywords
     */
    readonly asinValue: string

    /**
     * The maxiumum number of suggested keywords for the response.
     * @type {number}
     * @memberof SuggestedKeywordsApiGetAsinSuggestedKeywords
     */
    readonly maxNumSuggestions?: number
}

/**
 * SuggestedKeywordsApi - object-oriented interface
 * @export
 * @class SuggestedKeywordsApi
 * @extends {BaseAPI}
 */
export class SuggestedKeywordsApi extends BaseAPI {
    /**
     * Suggested keywords are returned in an array ordered by descending effectiveness.
     * @summary Gets suggested keyword for a specified list of ASINs.
     * @param {SuggestedKeywordsApiBulkGetAsinSuggestedKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedKeywordsApi
     */
    public bulkGetAsinSuggestedKeywords(requestParameters: SuggestedKeywordsApiBulkGetAsinSuggestedKeywordsRequest, options?: any) {
        return SuggestedKeywordsApiFp(this.configuration).bulkGetAsinSuggestedKeywords(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets suggested keywords for the specified ad group.
     * @param {SuggestedKeywordsApiGetAdGroupSuggestedKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedKeywordsApi
     */
    public getAdGroupSuggestedKeywords(requestParameters: SuggestedKeywordsApiGetAdGroupSuggestedKeywordsRequest, options?: any) {
        return SuggestedKeywordsApiFp(this.configuration).getAdGroupSuggestedKeywords(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, requestParameters.maxNumSuggestions, requestParameters.adStateFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets suggested keywords with extended data for the specified ad group.
     * @param {SuggestedKeywordsApiGetAdGroupSuggestedKeywordsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedKeywordsApi
     */
    public getAdGroupSuggestedKeywordsEx(requestParameters: SuggestedKeywordsApiGetAdGroupSuggestedKeywordsExRequest, options?: any) {
        return SuggestedKeywordsApiFp(this.configuration).getAdGroupSuggestedKeywordsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, requestParameters.maxNumSuggestions, requestParameters.suggestBids, requestParameters.adStateFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Suggested keywords are returned in an array ordered by descending effectiveness.
     * @summary Gets suggested keywords for the specified ASIN.
     * @param {SuggestedKeywordsApiGetAsinSuggestedKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedKeywordsApi
     */
    public getAsinSuggestedKeywords(requestParameters: SuggestedKeywordsApiGetAsinSuggestedKeywordsRequest, options?: any) {
        return SuggestedKeywordsApiFp(this.configuration).getAsinSuggestedKeywords(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.asinValue, requestParameters.maxNumSuggestions, options).then((request) => request(this.axios, this.basePath));
    }
}


