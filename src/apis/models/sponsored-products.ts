/* tslint:disable */
/* eslint-disable */
/**
 * Amazon Ads API - Sponsored Products
 * Use the Amazon Ads API for Sponsored Products for campaign, ad group, keyword, negative keyword, and product ad management operations. For more information about Sponsored Products, see the [Sponsored Products Support Center](https://advertising.amazon.com/help?entityId=ENTITY3CWETCZD9HEG2#GWGFKPEWVWG2CLUJ). For onboarding information, see the [account setup](guides/onboarding/overview) topic.<br/> <br/> **Note**: This contract contains endpoints with upcoming planned deprecations. For more information on the latest versions and migration details, see [Deprecations](release-notes/deprecations).<br/> <br/>
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { createRequestFunction } from "../../helpers";

/**
 * 
 * @export
 * @interface AdGroup
 */
export interface AdGroup {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroup
     */
    adGroupId?: number;
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof AdGroup
     */
    name?: string;
    /**
     * The identifier of the campaign that the ad group is associated with.
     * @type {number}
     * @memberof AdGroup
     */
    campaignId?: number;
    /**
     * The bid value used when no bid is specified for keywords in the ad group.
     * @type {number}
     * @memberof AdGroup
     */
    defaultBid?: number;
    /**
     * 
     * @type {State}
     * @memberof AdGroup
     */
    state?: State;
}
/**
 * 
 * @export
 * @interface AdGroupBidRecommendationsResponse
 */
export interface AdGroupBidRecommendationsResponse {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroupBidRecommendationsResponse
     */
    adGroupId?: number;
    /**
     * 
     * @type {SuggestedBid}
     * @memberof AdGroupBidRecommendationsResponse
     */
    suggestedBid?: SuggestedBid;
}
/**
 * 
 * @export
 * @interface AdGroupEx
 */
export interface AdGroupEx {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroupEx
     */
    adGroupId?: number;
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof AdGroupEx
     */
    name?: string;
    /**
     * The identifier of the campaign that the ad group is associated with.
     * @type {number}
     * @memberof AdGroupEx
     */
    campaignId?: number;
    /**
     * The bid value used when no bid is specified for keywords in the ad group.
     * @type {number}
     * @memberof AdGroupEx
     */
    defaultBid?: number;
    /**
     * 
     * @type {State}
     * @memberof AdGroupEx
     */
    state?: State;
    /**
     * The creation date of the ad group in epoch time.
     * @type {number}
     * @memberof AdGroupEx
     */
    creationDate?: number;
    /**
     * The date that any value associated with the ad group was last changed, in epoch time.
     * @type {number}
     * @memberof AdGroupEx
     */
    lastUpdatedDate?: number;
    /**
     * The computed status. See developer notes for more information.
     * @type {string}
     * @memberof AdGroupEx
     */
    servingStatus?: AdGroupExServingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AdGroupExServingStatusEnum {
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupStatusEnabled = 'AD_GROUP_STATUS_ENABLED',
    AdPolicingSuspended = 'AD_POLICING_SUSPENDED',
    AdGroupIncomplete = 'AD_GROUP_INCOMPLETE',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    CampaignIncomplete = 'CAMPAIGN_INCOMPLETE',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    PendingStartDate = 'PENDING_START_DATE'
}

/**
 * 
 * @export
 * @interface AdGroupResponse
 */
export interface AdGroupResponse {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroupResponse
     */
    adGroupId?: number;
    /**
     * An enumerated success or error code for machine use.
     * @type {string}
     * @memberof AdGroupResponse
     */
    code?: string;
    /**
     * A human-readable description of the code.
     * @type {string}
     * @memberof AdGroupResponse
     */
    details?: string;
    /**
     * A human-readable description of the code.
     * @type {string}
     * @memberof AdGroupResponse
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface AdGroupSuggestedKeywordsResponse
 */
export interface AdGroupSuggestedKeywordsResponse {
    /**
     * The ad group identifier.
     * @type {number}
     * @memberof AdGroupSuggestedKeywordsResponse
     */
    adGroupId?: number;
    /**
     * An array of suggested keywords.
     * @type {Array<string>}
     * @memberof AdGroupSuggestedKeywordsResponse
     */
    suggestededKeywords?: Array<string>;
}
/**
 * 
 * @export
 * @interface AdGroupSuggestedKeywordsResponseEx
 */
export interface AdGroupSuggestedKeywordsResponseEx {
    /**
     * The ad group identifier.
     * @type {number}
     * @memberof AdGroupSuggestedKeywordsResponseEx
     */
    adGroupId?: number;
    /**
     * The campaign identifier.
     * @type {number}
     * @memberof AdGroupSuggestedKeywordsResponseEx
     */
    campaignId?: number;
    /**
     * The suggested keyword.
     * @type {string}
     * @memberof AdGroupSuggestedKeywordsResponseEx
     */
    keywordText?: string;
    /**
     * 
     * @type {MatchType}
     * @memberof AdGroupSuggestedKeywordsResponseEx
     */
    matchType?: MatchType;
    /**
     * The state of the ad for which the keyword is suggested.
     * @type {string}
     * @memberof AdGroupSuggestedKeywordsResponseEx
     */
    state?: AdGroupSuggestedKeywordsResponseExStateEnum;
    /**
     * The suggested bid for the suggested keyword. Note that this field will not be included in the response if the `suggestBids` query parameter is set to `no` in the request.
     * @type {number}
     * @memberof AdGroupSuggestedKeywordsResponseEx
     */
    bid?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum AdGroupSuggestedKeywordsResponseExStateEnum {
    Enabled = 'enabled',
    Paused = 'paused'
}

/**
 * 
 * @export
 * @interface BidRecommendationRequest
 */
export interface BidRecommendationRequest {
    /**
     * The identifier of the ad group that is associated with the targeting expression used to generate the bid recommendation.
     * @type {number}
     * @memberof BidRecommendationRequest
     */
    adGroupId?: number;
    /**
     * 
     * @type {TargetingExpression}
     * @memberof BidRecommendationRequest
     */
    expressions?: TargetingExpression;
}
/**
 * 
 * @export
 * @interface BidRecommendationsForTargetsResponse
 */
export interface BidRecommendationsForTargetsResponse {
    /**
     * The identifier of the ad group that the recommended bid are associated with.
     * @type {number}
     * @memberof BidRecommendationsForTargetsResponse
     */
    adGroupId?: number;
    /**
     * An array of recommendation objects.
     * @type {Array<BidRecommendationsForTargetsResponseRecommendations>}
     * @memberof BidRecommendationsForTargetsResponse
     */
    recommendations?: Array<BidRecommendationsForTargetsResponseRecommendations>;
}
/**
 * 
 * @export
 * @interface BidRecommendationsForTargetsResponseRecommendations
 */
export interface BidRecommendationsForTargetsResponseRecommendations {
    /**
     * 
     * @type {SuggestedBid}
     * @memberof BidRecommendationsForTargetsResponseRecommendations
     */
    suggestedBid?: SuggestedBid;
    /**
     * 
     * @type {TargetingExpression}
     * @memberof BidRecommendationsForTargetsResponseRecommendations
     */
    expressions?: TargetingExpression;
}
/**
 * 
 * @export
 * @interface BidRecommendationsResponse
 */
export interface BidRecommendationsResponse {
    /**
     * The identifier of the ad group that the recommendations are associated with.
     * @type {string}
     * @memberof BidRecommendationsResponse
     */
    adGroupId?: string;
    /**
     * An array of bid recommendation objects.
     * @type {Array<object>}
     * @memberof BidRecommendationsResponse
     */
    recommendations?: Array<object>;
}
/**
 * Specifies bidding controls.
 * @export
 * @interface Bidding
 */
export interface Bidding {
    /**
     * The bidding strategy. | Value | Strategy name | Description | |----------------|---------------|-------------| | `legacyForSales` | Dynamic bids - down only | Lowers your bids in real time when your ad may be less likely to convert to a sale. Campaigns created before the release of the bidding controls feature used this setting by default. | | `autoForSales` | Dynamic bids - up and down | Increases or decreases your bids in real time by a maximum of 100%. With this setting bids increase when your ad is more likely to convert to a sale, and bids decrease when less likely to convert to a sale. | | `manual` | Fixed bid | Uses your exact bid and any placement adjustments you set, and is not subject to dynamic bidding. |
     * @type {string}
     * @memberof Bidding
     */
    strategy?: BiddingStrategyEnum;
    /**
     * 
     * @type {Array<BiddingAdjustments>}
     * @memberof Bidding
     */
    adjustments?: Array<BiddingAdjustments>;
}

/**
    * @export
    * @enum {string}
    */
export enum BiddingStrategyEnum {
    LegacyForSales = 'legacyForSales',
    AutoForSales = 'autoForSales',
    Manual = 'manual'
}

/**
 * 
 * @export
 * @interface BiddingAdjustments
 */
export interface BiddingAdjustments {
    /**
     * You can enable controls to adjust your bid based on the placement location. Specify a location where you want to use bid controls. The percentage value set is the percentage of the original bid for which you want to have your bid adjustment increased. For example, a 50% adjustment on a $1.00 bid would increase the bid to $1.50 for the opportunity to win a specified placement. | Predicate |  Placement | |-----------|------------| | `placementTop` | Top of search (first page) | | `placementProductPage` | Product pages |
     * @type {string}
     * @memberof BiddingAdjustments
     */
    predicate?: BiddingAdjustmentsPredicateEnum;
    /**
     * The bid adjustment percentage value.
     * @type {number}
     * @memberof BiddingAdjustments
     */
    percentage?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum BiddingAdjustmentsPredicateEnum {
    PlacementTop = 'placementTop',
    PlacementProductPage = 'placementProductPage'
}

/**
 * 
 * @export
 * @interface BrandResponse
 */
export interface BrandResponse {
    /**
     * The brand identifier.
     * @type {number}
     * @memberof BrandResponse
     */
    id?: number;
    /**
     * The brand name.
     * @type {string}
     * @memberof BrandResponse
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface Campaign
 */
export interface Campaign {
    /**
     * The identifier of an existing portfolio to which the campaign is associated.
     * @type {number}
     * @memberof Campaign
     */
    portfolioId?: number;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof Campaign
     */
    campaignId?: number;
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof Campaign
     */
    name?: string;
    /**
     * A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
     * @type {{ [key: string]: string; }}
     * @memberof Campaign
     */
    tags?: { [key: string]: string; };
    /**
     * The advertising product managed by this campaign.
     * @type {string}
     * @memberof Campaign
     */
    campaignType?: CampaignCampaignTypeEnum;
    /**
     * The type of targeting of the campaign.
     * @type {string}
     * @memberof Campaign
     */
    targetingType?: CampaignTargetingTypeEnum;
    /**
     * 
     * @type {State}
     * @memberof Campaign
     */
    state?: State;
    /**
     * The daily budget of the campaign.
     * @type {number}
     * @memberof Campaign
     */
    dailyBudget?: number;
    /**
     * The starting date of the campaign. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof Campaign
     */
    startDate?: string;
    /**
     * The ending date of the campaign to stop running. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof Campaign
     */
    endDate?: string;
    /**
     * If set to true, Amazon increases the default bid for ads that are eligible to appear in this placement. See developer notes for more information.
     * @type {boolean}
     * @memberof Campaign
     */
    premiumBidAdjustment?: boolean;
    /**
     * 
     * @type {Bidding}
     * @memberof Campaign
     */
    bidding?: Bidding;
}

/**
    * @export
    * @enum {string}
    */
export enum CampaignCampaignTypeEnum {
    SponsoredProducts = 'sponsoredProducts'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignTargetingTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface CampaignEx
 */
export interface CampaignEx {
    /**
     * The identifier of an existing portfolio to which the campaign is associated.
     * @type {number}
     * @memberof CampaignEx
     */
    portfolioId?: number;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CampaignEx
     */
    campaignId?: number;
    /**
     * A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
     * @type {{ [key: string]: string; }}
     * @memberof CampaignEx
     */
    tags?: { [key: string]: string; };
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof CampaignEx
     */
    name?: string;
    /**
     * The advertising product managed by this campaign.
     * @type {string}
     * @memberof CampaignEx
     */
    campaignType?: CampaignExCampaignTypeEnum;
    /**
     * The type of targeting of the campaign.
     * @type {string}
     * @memberof CampaignEx
     */
    targetingType?: CampaignExTargetingTypeEnum;
    /**
     * 
     * @type {State}
     * @memberof CampaignEx
     */
    state?: State;
    /**
     * The daily budget of the campaign.
     * @type {number}
     * @memberof CampaignEx
     */
    dailyBudget?: number;
    /**
     * The starting date of the campaign. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof CampaignEx
     */
    startDate?: string;
    /**
     * The ending date of the campaign to stop running. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof CampaignEx
     */
    endDate?: string;
    /**
     * If set to true, Amazon increases the default bid for ads that are eligible to appear in this placement. See developer notes for more information.
     * @type {boolean}
     * @memberof CampaignEx
     */
    premiumBidAdjustment?: boolean;
    /**
     * 
     * @type {Bidding}
     * @memberof CampaignEx
     */
    bidding?: Bidding;
    /**
     * The creation date of the campaign, in epoch time.
     * @type {number}
     * @memberof CampaignEx
     */
    creationDate?: number;
    /**
     * The date that any value associated with the campaign was last changed, in epoch time.
     * @type {number}
     * @memberof CampaignEx
     */
    lastUpdatedDate?: number;
    /**
     * The computed status of the campaign. See developer notes for more information.
     * @type {string}
     * @memberof CampaignEx
     */
    servingStatus?: CampaignExServingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CampaignExCampaignTypeEnum {
    SponsoredProducts = 'sponsoredProducts'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignExTargetingTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignExServingStatusEnum {
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignStatusEnabled = 'CAMPAIGN_STATUS_ENABLED',
    AdvertiserPaymentFailed = 'ADVERTISER_PAYMENT_FAILED',
    AdvertiserPaymentFailure = 'ADVERTISER_PAYMENT_FAILURE',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    PendingStartDate = 'PENDING_START_DATE',
    CampaignIncomplete = 'CAMPAIGN_INCOMPLETE',
    Ended = 'ENDED'
}

/**
 * 
 * @export
 * @interface CampaignNegativeKeyword
 */
export interface CampaignNegativeKeyword {
    /**
     * The identifier of the campaign negative keyword.
     * @type {number}
     * @memberof CampaignNegativeKeyword
     */
    keywordId?: number;
    /**
     * The identifer of the campaign to which the campaign negative keyword is associated.
     * @type {number}
     * @memberof CampaignNegativeKeyword
     */
    campaignId?: number;
    /**
     * The campaign negative keyword state.
     * @type {string}
     * @memberof CampaignNegativeKeyword
     */
    state?: CampaignNegativeKeywordStateEnum;
    /**
     * The text of the expression to match against a search query.
     * @type {string}
     * @memberof CampaignNegativeKeyword
     */
    keywordText?: string;
    /**
     * 
     * @type {NegativeMatchType}
     * @memberof CampaignNegativeKeyword
     */
    matchType?: NegativeMatchType;
}

/**
    * @export
    * @enum {string}
    */
export enum CampaignNegativeKeywordStateEnum {
    Enabled = 'enabled'
}

/**
 * 
 * @export
 * @interface CampaignNegativeKeywordEx
 */
export interface CampaignNegativeKeywordEx {
    /**
     * The identifier of the campaign negative keyword.
     * @type {number}
     * @memberof CampaignNegativeKeywordEx
     */
    keywordId?: number;
    /**
     * The identifer of the campaign to which the campaign negative keyword is associated.
     * @type {number}
     * @memberof CampaignNegativeKeywordEx
     */
    campaignId?: number;
    /**
     * The campaign negative keyword state.
     * @type {string}
     * @memberof CampaignNegativeKeywordEx
     */
    state?: CampaignNegativeKeywordExStateEnum;
    /**
     * The text of the expression to match against a search query.
     * @type {string}
     * @memberof CampaignNegativeKeywordEx
     */
    keywordText?: string;
    /**
     * 
     * @type {NegativeMatchType}
     * @memberof CampaignNegativeKeywordEx
     */
    matchType?: NegativeMatchType;
    /**
     * Creation date in epoch time.
     * @type {number}
     * @memberof CampaignNegativeKeywordEx
     */
    creationDate?: number;
    /**
     * Date of last update in epoch time.
     * @type {number}
     * @memberof CampaignNegativeKeywordEx
     */
    lastUpdatedDate?: number;
    /**
     * The serving status of the campaign negative keyword. See the **computed status** section of the [developer notes](https://advertising.amazon.com/API/docs/en-us/reference/concepts/developer-notes) for definitions.
     * @type {string}
     * @memberof CampaignNegativeKeywordEx
     */
    servingStatus?: CampaignNegativeKeywordExServingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CampaignNegativeKeywordExStateEnum {
    Enabled = 'enabled'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignNegativeKeywordExServingStatusEnum {
    TargetingClauseStatusLive = 'TARGETING_CLAUSE_STATUS_LIVE',
    PendingStartDate = 'PENDING_START_DATE'
}

/**
 * 
 * @export
 * @interface CampaignNegativeKeywordResponse
 */
export interface CampaignNegativeKeywordResponse {
    /**
     * The identifier of the campaign negative keyword.
     * @type {number}
     * @memberof CampaignNegativeKeywordResponse
     */
    keywordId?: number;
    /**
     * An enumerated success or error code for machine use.
     * @type {string}
     * @memberof CampaignNegativeKeywordResponse
     */
    code?: string;
    /**
     * A human-readable description of the code.
     * @type {string}
     * @memberof CampaignNegativeKeywordResponse
     */
    details?: string;
    /**
     * A human-readable description of the code.
     * @type {string}
     * @memberof CampaignNegativeKeywordResponse
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface CampaignResponse
 */
export interface CampaignResponse {
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CampaignResponse
     */
    campaignId?: number;
    /**
     * An enumerated `SUCCESS` or `ERROR` code for machine use.
     * @type {string}
     * @memberof CampaignResponse
     */
    code?: string;
    /**
     * A human-readable description of the code.
     * @type {string}
     * @memberof CampaignResponse
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface CategoryResponse
 */
export interface CategoryResponse {
    /**
     * The category identifier.
     * @type {number}
     * @memberof CategoryResponse
     */
    id?: number;
    /**
     * The category name.
     * @type {string}
     * @memberof CategoryResponse
     */
    name?: string;
    /**
     * If set to `true`, indicates this category can be targeted in a targeting expression. Otherwise, set to false.
     * @type {string}
     * @memberof CategoryResponse
     */
    isTargetable?: CategoryResponseIsTargetableEnum;
    /**
     * The path of this category within the category catalog.
     * @type {string}
     * @memberof CategoryResponse
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CategoryResponseIsTargetableEnum {
    True = 'true',
    False = 'false'
}

/**
 * 
 * @export
 * @interface CreateAdGroup
 */
export interface CreateAdGroup {
    /**
     * A name for the ad group.
     * @type {string}
     * @memberof CreateAdGroup
     */
    name?: string;
    /**
     * An existing campaign to which the ad group is associated.
     * @type {number}
     * @memberof CreateAdGroup
     */
    campaignId?: number;
    /**
     * A bid value for use when no bid is specified for keywords in the ad group.
     * @type {number}
     * @memberof CreateAdGroup
     */
    defaultBid?: number;
    /**
     * 
     * @type {State}
     * @memberof CreateAdGroup
     */
    state?: State;
}
/**
 * 
 * @export
 * @interface CreateCampaign
 */
export interface CreateCampaign {
    /**
     * The identifier of an existing portfolio to which the campaign is associated.
     * @type {number}
     * @memberof CreateCampaign
     */
    portfolioId?: number;
    /**
     * A name for the campaign. Note that idempotency for this field works different for sellers and vendors. Sellers aren\'t allowed to have duplicate campaign names, but vendors can have duplicate campaign names.
     * @type {string}
     * @memberof CreateCampaign
     */
    name?: string;
    /**
     * A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
     * @type {{ [key: string]: string; }}
     * @memberof CreateCampaign
     */
    tags?: { [key: string]: string; };
    /**
     * The advertising product managed by this campaign.
     * @type {string}
     * @memberof CreateCampaign
     */
    campaignType?: CreateCampaignCampaignTypeEnum;
    /**
     * The type of targeting for the campaign.
     * @type {string}
     * @memberof CreateCampaign
     */
    targetingType?: CreateCampaignTargetingTypeEnum;
    /**
     * 
     * @type {State}
     * @memberof CreateCampaign
     */
    state?: State;
    /**
     * A daily budget for the campaign.
     * @type {number}
     * @memberof CreateCampaign
     */
    dailyBudget?: number;
    /**
     * A starting date for the campaign to go live. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof CreateCampaign
     */
    startDate?: string;
    /**
     * An ending date for the campaign to stop running. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof CreateCampaign
     */
    endDate?: string | null;
    /**
     * If set to true, Amazon increases the default bid for ads that are eligible to appear in this placement. See developer notes for more information.
     * @type {boolean}
     * @memberof CreateCampaign
     */
    premiumBidAdjustment?: boolean;
    /**
     * 
     * @type {Bidding}
     * @memberof CreateCampaign
     */
    bidding?: Bidding;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateCampaignCampaignTypeEnum {
    SponsoredProducts = 'sponsoredProducts'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateCampaignTargetingTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface CreateCampaignNegativeKeyword
 */
export interface CreateCampaignNegativeKeyword {
    /**
     * The identifer of the campaign to which the campaign negative keyword is associated.
     * @type {number}
     * @memberof CreateCampaignNegativeKeyword
     */
    campaignId?: number;
    /**
     * The campaign negative keyword state.
     * @type {string}
     * @memberof CreateCampaignNegativeKeyword
     */
    state?: CreateCampaignNegativeKeywordStateEnum;
    /**
     * The text of the expression to match against a search query.
     * @type {string}
     * @memberof CreateCampaignNegativeKeyword
     */
    keywordText?: string;
    /**
     * 
     * @type {NegativeMatchType}
     * @memberof CreateCampaignNegativeKeyword
     */
    matchType?: NegativeMatchType;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateCampaignNegativeKeywordStateEnum {
    Enabled = 'enabled'
}

/**
 * 
 * @export
 * @interface CreateKeyword
 */
export interface CreateKeyword {
    /**
     * The identifer of the campaign to which the keyword is associated.
     * @type {number}
     * @memberof CreateKeyword
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this keyword is associated.
     * @type {number}
     * @memberof CreateKeyword
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof CreateKeyword
     */
    state?: State;
    /**
     * The keyword text.
     * @type {string}
     * @memberof CreateKeyword
     */
    keywordText?: string;
    /**
     * The unlocalized keyword text in the preferred locale of the advertiser.
     * @type {string}
     * @memberof CreateKeyword
     */
    nativeLanguageKeyword?: string;
    /**
     * The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.
     * @type {string}
     * @memberof CreateKeyword
     */
    nativeLanguageLocale?: string;
    /**
     * 
     * @type {MatchType}
     * @memberof CreateKeyword
     */
    matchType?: MatchType;
    /**
     * Bid associated with this keyword. Applicable to biddable match types only.
     * @type {number}
     * @memberof CreateKeyword
     */
    bid?: number | null;
}
/**
 * 
 * @export
 * @interface CreateNegativeKeyword
 */
export interface CreateNegativeKeyword {
    /**
     * The identifier of the campaign to which the negative keyword is associated.
     * @type {number}
     * @memberof CreateNegativeKeyword
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which the negative keyword is associated.
     * @type {number}
     * @memberof CreateNegativeKeyword
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof CreateNegativeKeyword
     */
    state?: State;
    /**
     * The text of the expression to match against a search query.
     * @type {string}
     * @memberof CreateNegativeKeyword
     */
    keywordText?: string;
    /**
     * 
     * @type {NegativeMatchType}
     * @memberof CreateNegativeKeyword
     */
    matchType?: NegativeMatchType;
}
/**
 * 
 * @export
 * @interface CreateNegativeTargetingClause
 */
export interface CreateNegativeTargetingClause {
    /**
     * The identifier of the campaign to which this negative target is associated.
     * @type {number}
     * @memberof CreateNegativeTargetingClause
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this negative target is associated.
     * @type {number}
     * @memberof CreateNegativeTargetingClause
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof CreateNegativeTargetingClause
     */
    state?: State;
    /**
     * The negative targeting expression.
     * @type {Array<NegativeTargetingExpressionPredicate>}
     * @memberof CreateNegativeTargetingClause
     */
    expression?: Array<NegativeTargetingExpressionPredicate>;
    /**
     * 
     * @type {ExpressionType}
     * @memberof CreateNegativeTargetingClause
     */
    expressionType?: ExpressionType;
}
/**
 * 
 * @export
 * @interface CreateProductAd
 */
export interface CreateProductAd {
    /**
     * The campaign identifier.
     * @type {number}
     * @memberof CreateProductAd
     */
    campaignId?: number;
    /**
     * The ad group identifier.
     * @type {number}
     * @memberof CreateProductAd
     */
    adGroupId?: number;
    /**
     * The SKU associated with the product. Defined for seller accounts only.
     * @type {string}
     * @memberof CreateProductAd
     */
    sku?: string;
    /**
     * The ASIN associated with the product. Defined for vendors only.
     * @type {string}
     * @memberof CreateProductAd
     */
    asin?: string;
    /**
     * 
     * @type {State}
     * @memberof CreateProductAd
     */
    state?: State;
}
/**
 * 
 * @export
 * @interface CreateTargetingClause
 */
export interface CreateTargetingClause {
    /**
     * The identifier of the campaign to which this target is associated.
     * @type {number}
     * @memberof CreateTargetingClause
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this target is associated.
     * @type {number}
     * @memberof CreateTargetingClause
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof CreateTargetingClause
     */
    state?: State;
    /**
     * The targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof CreateTargetingClause
     */
    expression?: Array<TargetingExpressionPredicate>;
    /**
     * The resolved targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof CreateTargetingClause
     */
    resolvedExpression?: Array<TargetingExpressionPredicate>;
    /**
     * 
     * @type {ExpressionType}
     * @memberof CreateTargetingClause
     */
    expressionType?: ExpressionType;
    /**
     * The bid for ads sourced using the target. Targets that do not have bid values in listTargetingClauses will inherit the defaultBid from the adGroup level. This table details the maximum allowable bid (in local currency) for keywords by marketplace: | Marketplace | Currency | Min / Max bid for SP | | --- | --- | --- | | US | USD | 0.02 / 1000 | | CA | CAD | 0.02 / 1000 | | UK | GBP | 0.02 / 1000 | | DE | EUR | 0.02 / 1000 | | FR | EUR | 0.02 / 1000 | | ES | EUR | 0.02 / 1000 | | IT | EUR | 0.02 / 1000 | | JP | JPY | 2.0 / 100000 | | AU | AUD | 0.10 / 1410 | | AE | AED | 0.24 / 184.0 |
     * @type {number}
     * @memberof CreateTargetingClause
     */
    bid?: number | null;
}
/**
 * The type of expression.
 * @export
 * @enum {string}
 */

export enum ExpressionType {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface GetAsinSuggestedKeywordsResponse
 */
export interface GetAsinSuggestedKeywordsResponse {
    /**
     * The ASIN for which keywords are suggested.
     * @type {string}
     * @memberof GetAsinSuggestedKeywordsResponse
     */
    asin?: string;
    /**
     * The list of suggested keywords.
     * @type {Array<GetAsinSuggestedKeywordsResponseSuggestedKeywords>}
     * @memberof GetAsinSuggestedKeywordsResponse
     */
    suggestedKeywords?: Array<GetAsinSuggestedKeywordsResponseSuggestedKeywords>;
}
/**
 * 
 * @export
 * @interface GetAsinSuggestedKeywordsResponseSuggestedKeywords
 */
export interface GetAsinSuggestedKeywordsResponseSuggestedKeywords {
    /**
     * The text of the suggested keyword.
     * @type {string}
     * @memberof GetAsinSuggestedKeywordsResponseSuggestedKeywords
     */
    keywordText?: string;
    /**
     * 
     * @type {MatchType}
     * @memberof GetAsinSuggestedKeywordsResponseSuggestedKeywords
     */
    matchType?: MatchType;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * A list of ASINs.
     * @type {Array<string>}
     * @memberof InlineObject
     */
    asins?: Array<string>;
    /**
     * The maximum number of suggested keywords in the response.
     * @type {number}
     * @memberof InlineObject
     */
    maxNumSuggestions?: number;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * The ad group identifier.
     * @type {number}
     * @memberof InlineObject1
     */
    adGroupId?: number;
    /**
     * The list of targeting expressions.
     * @type {Array<Array<TargetingExpressionPredicate>>}
     * @memberof InlineObject1
     */
    expressions?: Array<Array<TargetingExpressionPredicate>>;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * The ad group identifier.
     * @type {number}
     * @memberof InlineResponse200
     */
    adGroupId?: number;
    /**
     * The list of recommended bids with associated targeting expressions.
     * @type {Array<InlineResponse200Recommendations>}
     * @memberof InlineResponse200
     */
    recommendations?: Array<InlineResponse200Recommendations>;
}
/**
 * 
 * @export
 * @interface InlineResponse200Recommendations
 */
export interface InlineResponse200Recommendations {
    /**
     * 
     * @type {SuggestedBid}
     * @memberof InlineResponse200Recommendations
     */
    suggestedBid?: SuggestedBid;
    /**
     * 
     * @type {TargetingExpressionPredicate}
     * @memberof InlineResponse200Recommendations
     */
    expression?: TargetingExpressionPredicate;
    /**
     * The response code.
     * @type {string}
     * @memberof InlineResponse200Recommendations
     */
    code?: InlineResponse200RecommendationsCodeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200RecommendationsCodeEnum {
    Success = 'SUCCESS',
    InvalidArgument = 'INVALID_ARGUMENT',
    NotFound = 'NOT_FOUND',
    InternalError = 'INTERNAL_ERROR',
    ServerIsBusy = 'SERVER_IS_BUSY',
    Unauthorized = 'UNAUTHORIZED'
}

/**
 * 
 * @export
 * @interface Keyword
 */
export interface Keyword {
    /**
     * The identifier of the keyword.
     * @type {number}
     * @memberof Keyword
     */
    keywordId?: number;
    /**
     * The identifer of the campaign to which the keyword is associated.
     * @type {number}
     * @memberof Keyword
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this keyword is associated.
     * @type {number}
     * @memberof Keyword
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof Keyword
     */
    state?: State;
    /**
     * The keyword text.
     * @type {string}
     * @memberof Keyword
     */
    keywordText?: string;
    /**
     * The unlocalized keyword text in the preferred locale of the advertiser.
     * @type {string}
     * @memberof Keyword
     */
    nativeLanguageKeyword?: string;
    /**
     * 
     * @type {MatchType}
     * @memberof Keyword
     */
    matchType?: MatchType;
    /**
     * Bid associated with this keyword. Applicable to biddable match types only.
     * @type {number}
     * @memberof Keyword
     */
    bid?: number;
}
/**
 * 
 * @export
 * @interface KeywordBidRecommendationsData
 */
export interface KeywordBidRecommendationsData {
    /**
     * The identifier of the ad group that the keywords are associated with.
     * @type {number}
     * @memberof KeywordBidRecommendationsData
     */
    adGroupId?: number;
    /**
     * An array of keyword data objects.
     * @type {Array<KeywordBidRecommendationsDataKeywords>}
     * @memberof KeywordBidRecommendationsData
     */
    keywords?: Array<KeywordBidRecommendationsDataKeywords>;
}
/**
 * 
 * @export
 * @interface KeywordBidRecommendationsDataKeywords
 */
export interface KeywordBidRecommendationsDataKeywords {
    /**
     * The keyword text.
     * @type {string}
     * @memberof KeywordBidRecommendationsDataKeywords
     */
    keyword?: string;
    /**
     * 
     * @type {MatchType}
     * @memberof KeywordBidRecommendationsDataKeywords
     */
    matchType?: MatchType;
}
/**
 * 
 * @export
 * @interface KeywordBidRecommendationsResponse
 */
export interface KeywordBidRecommendationsResponse {
    /**
     * The identifier of the keyword that the bid is associated with.
     * @type {number}
     * @memberof KeywordBidRecommendationsResponse
     */
    keywordId?: number;
    /**
     * The identifier of the ad group that the bid is associated with.
     * @type {number}
     * @memberof KeywordBidRecommendationsResponse
     */
    adGroupId?: number;
    /**
     * 
     * @type {SuggestedBid}
     * @memberof KeywordBidRecommendationsResponse
     */
    suggestedBid?: SuggestedBid;
}
/**
 * 
 * @export
 * @interface KeywordEx
 */
export interface KeywordEx {
    /**
     * The identifier of the keyword.
     * @type {number}
     * @memberof KeywordEx
     */
    keywordId?: number;
    /**
     * The identifer of the campaign to which the keyword is associated.
     * @type {number}
     * @memberof KeywordEx
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this keyword is associated.
     * @type {number}
     * @memberof KeywordEx
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof KeywordEx
     */
    state?: State;
    /**
     * The text of the expression to match against a search query.
     * @type {string}
     * @memberof KeywordEx
     */
    keywordText?: string;
    /**
     * The unlocalized keyword text in the preferred locale of the advertiser.
     * @type {string}
     * @memberof KeywordEx
     */
    nativeLanguageKeyword?: string;
    /**
     * 
     * @type {MatchType}
     * @memberof KeywordEx
     */
    matchType?: MatchType;
    /**
     * Bid associated with this keyword. This table details the maximum allowable bid (in local currency) for keywords by marketplace: | Marketplace | Currency | Min / Max bid for SP | | --- | --- | --- | | US | USD | 0.02 / 1000 | | CA | CAD | 0.02 / 1000 | | UK | GBP | 0.02 / 1000 | | DE | EUR | 0.02 / 1000 | | FR | EUR | 0.02 / 1000 | | ES | EUR | 0.02 / 1000 | | IT | EUR | 0.02 / 1000 | | JP | JPY | 2.0 / 100000 | | AU | AUD | 0.10 / 1410 | | AE | AED | 0.24 / 184.0 |
     * @type {number}
     * @memberof KeywordEx
     */
    bid?: number;
    /**
     * Creation date in epoch time.
     * @type {number}
     * @memberof KeywordEx
     */
    creationDate?: number;
    /**
     * Date of last update in epoch time.
     * @type {number}
     * @memberof KeywordEx
     */
    lastUpdatedDate?: number;
    /**
     * The serving status of the keyword. See the **computed status** section of the [developer notes](https://advertising.amazon.com/API/docs/en-us/reference/concepts/developer-notes) for definitions.
     * @type {string}
     * @memberof KeywordEx
     */
    servingStatus?: KeywordExServingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum KeywordExServingStatusEnum {
    TargetingClauseArchived = 'TARGETING_CLAUSE_ARCHIVED',
    TargetingClausePaused = 'TARGETING_CLAUSE_PAUSED',
    TargetingClauseStatusLive = 'TARGETING_CLAUSE_STATUS_LIVE',
    TargetingClausePolicingSuspended = 'TARGETING_CLAUSE_POLICING_SUSPENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    PendingStartDate = 'PENDING_START_DATE'
}

/**
 * 
 * @export
 * @interface KeywordResponse
 */
export interface KeywordResponse {
    /**
     * The identifer of the keyword.
     * @type {number}
     * @memberof KeywordResponse
     */
    keywordId?: number;
    /**
     * The success or error code for the operation.
     * @type {string}
     * @memberof KeywordResponse
     */
    code?: string;
    /**
     * The human-readable description of the error.
     * @type {string}
     * @memberof KeywordResponse
     */
    details?: string;
    /**
     * The human-readable description of the error.
     * @type {string}
     * @memberof KeywordResponse
     */
    description?: string;
}
/**
 * The type of match. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
 * @export
 * @enum {string}
 */

export enum MatchType {
    Exact = 'exact',
    Phrase = 'phrase',
    Broad = 'broad'
}

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An enumerated error for machine use.
     * @type {string}
     * @memberof ModelError
     */
    code?: string;
    /**
     * A human-readable description of the error.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * The type of expression.
 * @export
 * @enum {string}
 */

export enum NegativeExpressionType {
    Manual = 'manual'
}

/**
 * 
 * @export
 * @interface NegativeKeyword
 */
export interface NegativeKeyword {
    /**
     * The identifier of the negative keyword.
     * @type {number}
     * @memberof NegativeKeyword
     */
    keywordId?: number;
    /**
     * The identifer of the campaign to which the negative keyword is associated.
     * @type {number}
     * @memberof NegativeKeyword
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which the negative keyword is associated.
     * @type {number}
     * @memberof NegativeKeyword
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof NegativeKeyword
     */
    state?: State;
    /**
     * The text of the expression to match against a search query.
     * @type {string}
     * @memberof NegativeKeyword
     */
    keywordText?: string;
    /**
     * 
     * @type {NegativeMatchType}
     * @memberof NegativeKeyword
     */
    matchType?: NegativeMatchType;
}
/**
 * 
 * @export
 * @interface NegativeKeywordEx
 */
export interface NegativeKeywordEx {
    /**
     * The identifier of the keyword.
     * @type {number}
     * @memberof NegativeKeywordEx
     */
    keywordId?: number;
    /**
     * The identifer of the campaign to which the keyword is associated.
     * @type {number}
     * @memberof NegativeKeywordEx
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this keyword is associated.
     * @type {number}
     * @memberof NegativeKeywordEx
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof NegativeKeywordEx
     */
    state?: State;
    /**
     * The text of the expression to match against a search query.
     * @type {string}
     * @memberof NegativeKeywordEx
     */
    keywordText?: string;
    /**
     * 
     * @type {NegativeMatchType}
     * @memberof NegativeKeywordEx
     */
    matchType?: NegativeMatchType;
    /**
     * Creation date in epoch time.
     * @type {number}
     * @memberof NegativeKeywordEx
     */
    creationDate?: number;
    /**
     * Date of last update in epoch time.
     * @type {number}
     * @memberof NegativeKeywordEx
     */
    lastUpdatedDate?: number;
    /**
     * The serving status of the keyword. See the **computed status** section of the [developer notes](https://advertising.amazon.com/API/docs/en-us/reference/concepts/developer-notes) for definitions.
     * @type {string}
     * @memberof NegativeKeywordEx
     */
    servingStatus?: NegativeKeywordExServingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum NegativeKeywordExServingStatusEnum {
    TargetingClauseArchived = 'TARGETING_CLAUSE_ARCHIVED',
    TargetingClausePaused = 'TARGETING_CLAUSE_PAUSED',
    TargetingClauseStatusLive = 'TARGETING_CLAUSE_STATUS_LIVE',
    TargetingClausePolicingSuspended = 'TARGETING_CLAUSE_POLICING_SUSPENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    PendingStartDate = 'PENDING_START_DATE'
}

/**
 * 
 * @export
 * @interface NegativeKeywordResponse
 */
export interface NegativeKeywordResponse {
    /**
     * The identifier of the keyword.
     * @type {number}
     * @memberof NegativeKeywordResponse
     */
    keywordId?: number;
    /**
     * The success or error code for the operation.
     * @type {string}
     * @memberof NegativeKeywordResponse
     */
    code?: string;
    /**
     * The human-readable description of the error.
     * @type {string}
     * @memberof NegativeKeywordResponse
     */
    details?: string;
    /**
     * The human-readable description of the error.
     * @type {string}
     * @memberof NegativeKeywordResponse
     */
    description?: string;
}
/**
 * The type of match. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.
 * @export
 * @enum {string}
 */

export enum NegativeMatchType {
    NegativeExact = 'negativeExact',
    NegativePhrase = 'negativePhrase'
}

/**
 * 
 * @export
 * @interface NegativeTargetingClause
 */
export interface NegativeTargetingClause {
    /**
     * The negative target identifier.
     * @type {number}
     * @memberof NegativeTargetingClause
     */
    targetId?: number;
    /**
     * The identifier of the campaign to which this negative target is associated.
     * @type {number}
     * @memberof NegativeTargetingClause
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this negative target is associated.
     * @type {number}
     * @memberof NegativeTargetingClause
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof NegativeTargetingClause
     */
    state?: State;
    /**
     * The negative targeting expression.
     * @type {Array<NegativeTargetingExpressionPredicate>}
     * @memberof NegativeTargetingClause
     */
    expression?: Array<NegativeTargetingExpressionPredicate>;
    /**
     * 
     * @type {NegativeExpressionType}
     * @memberof NegativeTargetingClause
     */
    expressionType?: NegativeExpressionType;
}
/**
 * 
 * @export
 * @interface NegativeTargetingClauseEx
 */
export interface NegativeTargetingClauseEx {
    /**
     * The negative target identifier.
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    targetId?: number;
    /**
     * The identifier of the campaign to which this negative target is associated.
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this negative target is associated.
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof NegativeTargetingClauseEx
     */
    state?: State;
    /**
     * The negative targeting expression.
     * @type {Array<NegativeTargetingExpressionPredicate>}
     * @memberof NegativeTargetingClauseEx
     */
    expression?: Array<NegativeTargetingExpressionPredicate>;
    /**
     * 
     * @type {NegativeExpressionType}
     * @memberof NegativeTargetingClauseEx
     */
    expressionType?: NegativeExpressionType;
    /**
     * The epoch time that the negative targeting clause was created.
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    creationDate?: number;
    /**
     * The epoch time that the negative targeting clause was updated.
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    lastUpdatedDate?: number;
    /**
     * The computed status of the negative targeting clause. See the [developer notes](https://advertising.amazon.com/API/docs/en-us/reference/concepts/developer-notes) for more information.
     * @type {string}
     * @memberof NegativeTargetingClauseEx
     */
    servingStatus?: NegativeTargetingClauseExServingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseExServingStatusEnum {
    TargetingClauseArchived = 'TARGETING_CLAUSE_ARCHIVED',
    TargetingClausePaused = 'TARGETING_CLAUSE_PAUSED',
    TargetingClauseStatusLive = 'TARGETING_CLAUSE_STATUS_LIVE',
    TargetingClausePolicingSuspended = 'TARGETING_CLAUSE_POLICING_SUSPENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    PendingStartDate = 'PENDING_START_DATE'
}

/**
 * 
 * @export
 * @interface NegativeTargetingClauseResponse
 */
export interface NegativeTargetingClauseResponse {
    /**
     * The negative target identifier.
     * @type {number}
     * @memberof NegativeTargetingClauseResponse
     */
    targetId?: number;
    /**
     * An enumerated response code.
     * @type {string}
     * @memberof NegativeTargetingClauseResponse
     */
    code?: string;
    /**
     * A human-readable description of the value in the `code` field.
     * @type {string}
     * @memberof NegativeTargetingClauseResponse
     */
    details?: string;
    /**
     * A human-readable description of the value in the `code` field.
     * @type {string}
     * @memberof NegativeTargetingClauseResponse
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface NegativeTargetingExpressionPredicate
 */
export interface NegativeTargetingExpressionPredicate {
    /**
     * The expression value
     * @type {string}
     * @memberof NegativeTargetingExpressionPredicate
     */
    value?: string;
    /**
     * The targeting type
     * @type {string}
     * @memberof NegativeTargetingExpressionPredicate
     */
    type?: NegativeTargetingExpressionPredicateTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingExpressionPredicateTypeEnum {
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinSameAs = 'asinSameAs'
}

/**
 * 
 * @export
 * @interface ProductAd
 */
export interface ProductAd {
    /**
     * The product ad identifier.
     * @type {number}
     * @memberof ProductAd
     */
    adId?: number;
    /**
     * The campaign identifier.
     * @type {number}
     * @memberof ProductAd
     */
    campaignId?: number;
    /**
     * The ad group identifier.
     * @type {number}
     * @memberof ProductAd
     */
    adGroupId?: number;
    /**
     * The SKU associated with the product. Defined for seller accounts only.
     * @type {string}
     * @memberof ProductAd
     */
    sku?: string;
    /**
     * The ASIN associated with the product. Defined for vendors only.
     * @type {string}
     * @memberof ProductAd
     */
    asin?: string;
    /**
     * 
     * @type {State}
     * @memberof ProductAd
     */
    state?: State;
}
/**
 * 
 * @export
 * @interface ProductAdEx
 */
export interface ProductAdEx {
    /**
     * The product ad identifier.
     * @type {number}
     * @memberof ProductAdEx
     */
    adId?: number;
    /**
     * The campaign identifier.
     * @type {number}
     * @memberof ProductAdEx
     */
    campaignId?: number;
    /**
     * The ad group identifier.
     * @type {number}
     * @memberof ProductAdEx
     */
    adGroupId?: number;
    /**
     * The SKU associated with the product. Defined for seller accounts only.
     * @type {string}
     * @memberof ProductAdEx
     */
    sku?: string;
    /**
     * The ASIN associated with the product. Defined for vendors only.
     * @type {string}
     * @memberof ProductAdEx
     */
    asin?: string;
    /**
     * 
     * @type {State}
     * @memberof ProductAdEx
     */
    state?: State;
    /**
     * The epoch date the product ad was created.
     * @type {number}
     * @memberof ProductAdEx
     */
    creationDate?: number;
    /**
     * The epoch date the product ad was last updated.
     * @type {number}
     * @memberof ProductAdEx
     */
    lastUpdatedDate?: number;
    /**
     * The computed status of the product ad. See the [developer notes](https://advertising.amazon.com/API/docs/en-us/reference/concepts/developer-notes) for more information.
     * @type {string}
     * @memberof ProductAdEx
     */
    servingStatus?: ProductAdExServingStatusEnum;
    /**
     * Details of serving status. Only statuses related to moderation according to the ad policy are currently included.
     * @type {Array<ProductAdExServingStatusDetails>}
     * @memberof ProductAdEx
     */
    servingStatusDetails?: Array<ProductAdExServingStatusDetails>;
}

/**
    * @export
    * @enum {string}
    */
export enum ProductAdExServingStatusEnum {
    AdArchived = 'AD_ARCHIVED',
    AdPaused = 'AD_PAUSED',
    AdStatusLive = 'AD_STATUS_LIVE',
    AdPolicingSuspended = 'AD_POLICING_SUSPENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    MissingDecoration = 'MISSING_DECORATION',
    PendingStartDate = 'PENDING_START_DATE'
}

/**
 * 
 * @export
 * @interface ProductAdExServingStatusDetails
 */
export interface ProductAdExServingStatusDetails {
    /**
     * The status identifier.
     * @type {string}
     * @memberof ProductAdExServingStatusDetails
     */
    name?: string;
    /**
     * An enumerated advertising eligibility severity status. If set to `INELIGIBLE`, the product cannot be included in an advertisement. If set to `ELIGIBLE_WITH_WARNING`, the product may not receive impressions when included in an advertisement.
     * @type {string}
     * @memberof ProductAdExServingStatusDetails
     */
    severity?: string;
    /**
     * A human-readable description of the status identifier specified in the `name` field.
     * @type {string}
     * @memberof ProductAdExServingStatusDetails
     */
    message?: string;
    /**
     * A URL with additional information about the status identifier. May not be present for all status identifiers.
     * @type {string}
     * @memberof ProductAdExServingStatusDetails
     */
    helpUrl?: string;
}
/**
 * 
 * @export
 * @interface ProductAdResponse
 */
export interface ProductAdResponse {
    /**
     * The product ad identifier.
     * @type {number}
     * @memberof ProductAdResponse
     */
    adId?: number;
    /**
     * The enumerated success or error code.
     * @type {string}
     * @memberof ProductAdResponse
     */
    code?: string;
    /**
     * A human-readable description of the code.
     * @type {string}
     * @memberof ProductAdResponse
     */
    details?: string;
    /**
     * A human-readable description of the code.
     * @type {string}
     * @memberof ProductAdResponse
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface ProductRecommendationsResponse
 */
export interface ProductRecommendationsResponse {
    /**
     * The total number of recommendations in the response.
     * @type {number}
     * @memberof ProductRecommendationsResponse
     */
    totalResultCount?: number;
    /**
     * 
     * @type {Array<ProductRecommendationsResponseRecommendedProducts>}
     * @memberof ProductRecommendationsResponse
     */
    recommendedProducts?: Array<ProductRecommendationsResponseRecommendedProducts>;
}
/**
 * 
 * @export
 * @interface ProductRecommendationsResponseRecommendedProducts
 */
export interface ProductRecommendationsResponseRecommendedProducts {
    /**
     * The recommended ASIN for targeting.
     * @type {string}
     * @memberof ProductRecommendationsResponseRecommendedProducts
     */
    recommendedTargetAsin?: string;
}
/**
 * 
 * @export
 * @interface RefinementsResponse
 */
export interface RefinementsResponse {
    /**
     * The category identifier.
     * @type {number}
     * @memberof RefinementsResponse
     */
    categoryId?: number;
    /**
     * The brands found in this category.
     * @type {Array<RefinementsResponseBrands>}
     * @memberof RefinementsResponse
     */
    brands?: Array<RefinementsResponseBrands>;
}
/**
 * 
 * @export
 * @interface RefinementsResponseBrands
 */
export interface RefinementsResponseBrands {
    /**
     * The brand identifier. Note that this is not the same identifier returned from the [getBrands](sponsored-brands/3-0/openapi#/Brands/getBrands) operation.
     * @type {number}
     * @memberof RefinementsResponseBrands
     */
    id?: number;
    /**
     * The brand name.
     * @type {string}
     * @memberof RefinementsResponseBrands
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * Filters the response to include reports with `stateFilter` set to one of the values in the comma-delimited list. `stateFilter` and `segment` cannot be used in the same report request.  `asins` report types do not support the use of `stateFilter`.
     * @type {string}
     * @memberof Report
     */
    stateFilter?: ReportStateFilterEnum;
    /**
     * The type of campaign. Only required for `asins` reports - don\'t use with other report types.
     * @type {string}
     * @memberof Report
     */
    campaignType?: ReportCampaignTypeEnum;
    /**
     * A secondary dimension used to further segment certain types of reports. `stateFilter` and `segment` cannot be used in the same report request. Keyword search term reports only return search terms that have generated at least one click or sale.  **Note**: Search term reports for auto-targeted campaigns created before 11/14/2018 can be accessed from the `/v2/sp/keywords/report` resource. Search term reports for auto-targeted campaigns generated on-and-after 11/14/2018 can be accessed from the `/v2/sp/targets/report` resource.   | Dimension | Valid report types | Description | |-----------|-------------|-------------| | query | keywords, targets | Segments a report based on customer search term. | | placement | campaigns | Segments a `campaigns` report based on the page location where the ad appeared. |
     * @type {string}
     * @memberof Report
     */
    segment?: ReportSegmentEnum;
    /**
     * The date for which to retrieve the performance report in YYYYMMDD format. The time zone is specified by the profile used to request the report. If this date is today, then the performance report may contain partial information. Reports are not available for data older than 60 days. For details on data latency, see the service guarantees in the [developer notes](https://advertising.amazon.com/API/docs/en-us/reference/concepts/developer-notes) section.
     * @type {string}
     * @memberof Report
     */
    reportDate?: string;
    /**
     * A comma-separated list of the metrics to be included in the report.  Each report type supports different metrics. To understand supported metrics for each report type, see [Report types](/API/docs/en-us/guides/reporting/v2/report-types).
     * @type {string}
     * @memberof Report
     */
    metrics?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ReportStateFilterEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportCampaignTypeEnum {
    SponsoredProducts = 'sponsoredProducts'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportSegmentEnum {
    Query = 'query',
    Placement = 'placement'
}

/**
 * 
 * @export
 * @interface SnapshotRequest
 */
export interface SnapshotRequest {
    /**
     * 
     * @type {string}
     * @memberof SnapshotRequest
     */
    stateFilter?: SnapshotRequestStateFilterEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SnapshotRequestStateFilterEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived',
    EnabledPaused = 'enabled, paused',
    EnabledArchived = 'enabled, archived',
    PausedArchived = 'paused, archived',
    EnabledPausedArchived = 'enabled, paused, archived'
}

/**
 * 
 * @export
 * @interface SnapshotResponse
 */
export interface SnapshotResponse {
    /**
     * The snapshot identifier.
     * @type {string}
     * @memberof SnapshotResponse
     */
    snapshotId?: string;
    /**
     * The record type of the report.
     * @type {string}
     * @memberof SnapshotResponse
     */
    recordType?: SnapshotResponseRecordTypeEnum;
    /**
     * The generation status of the snapshot.
     * @type {string}
     * @memberof SnapshotResponse
     */
    status?: SnapshotResponseStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SnapshotResponseRecordTypeEnum {
    Campaigns = 'campaigns',
    AdGroups = 'adGroups',
    Keywords = 'keywords',
    NegativeKeywords = 'negativeKeywords',
    CampaignNegativeKeywords = 'campaignNegativeKeywords',
    ProductAds = 'productAds',
    Targets = 'targets',
    NegativeTargets = 'negativeTargets'
}
/**
    * @export
    * @enum {string}
    */
export enum SnapshotResponseStatusEnum {
    InProgress = 'IN_PROGRESS',
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * The current resource state.
 * @export
 * @enum {string}
 */

export enum State {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * Information about the recommended bid.
 * @export
 * @interface SuggestedBid
 */
export interface SuggestedBid {
    /**
     * The bid recommendation.
     * @type {number}
     * @memberof SuggestedBid
     */
    suggested?: number;
    /**
     * The lower bound bid recommendation.
     * @type {number}
     * @memberof SuggestedBid
     */
    rangeStart?: number;
    /**
     * The upper bound bid recommendation.
     * @type {number}
     * @memberof SuggestedBid
     */
    rangeEnd?: number;
}
/**
 * 
 * @export
 * @interface TargetingClause
 */
export interface TargetingClause {
    /**
     * The target identifier.
     * @type {number}
     * @memberof TargetingClause
     */
    targetId?: number;
    /**
     * The identifier of the campaign to which this target is associated.
     * @type {number}
     * @memberof TargetingClause
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this target is associated.
     * @type {number}
     * @memberof TargetingClause
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof TargetingClause
     */
    state?: State;
    /**
     * The targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof TargetingClause
     */
    expression?: Array<TargetingExpressionPredicate>;
    /**
     * The resolved targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof TargetingClause
     */
    resolvedExpression?: Array<TargetingExpressionPredicate>;
    /**
     * 
     * @type {ExpressionType}
     * @memberof TargetingClause
     */
    expressionType?: ExpressionType;
    /**
     * The bid for ads sourced using the target. Targets that do not have bid values in listTargetingClauses will inherit the defaultBid from the adGroup level. This table details the maximum allowable bid (in local currency) for keywords by marketplace: | Marketplace | Currency | Min / Max bid for SP | | --- | --- | --- | | US | USD | 0.02 / 1000 | | CA | CAD | 0.02 / 1000 | | UK | GBP | 0.02 / 1000 | | DE | EUR | 0.02 / 1000 | | FR | EUR | 0.02 / 1000 | | ES | EUR | 0.02 / 1000 | | IT | EUR | 0.02 / 1000 | | JP | JPY | 2.0 / 100000 | | AU | AUD | 0.10 / 1410 | | AE | AED | 0.24 / 184.0 |
     * @type {number}
     * @memberof TargetingClause
     */
    bid?: number | null;
}
/**
 * 
 * @export
 * @interface TargetingClauseEx
 */
export interface TargetingClauseEx {
    /**
     * The target identifier.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    targetId?: number;
    /**
     * The identifier of the campaign to which this target is associated.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    campaignId?: number;
    /**
     * The identifier of the ad group to which this target is associated.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    adGroupId?: number;
    /**
     * 
     * @type {State}
     * @memberof TargetingClauseEx
     */
    state?: State;
    /**
     * The targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof TargetingClauseEx
     */
    expression?: Array<TargetingExpressionPredicate>;
    /**
     * The resolved targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof TargetingClauseEx
     */
    resolvedExpression?: Array<TargetingExpressionPredicate>;
    /**
     * 
     * @type {ExpressionType}
     * @memberof TargetingClauseEx
     */
    expressionType?: ExpressionType;
    /**
     * The bid for ads sourced using the target. Targets that do not have bid values in listTargetingClauses will inherit the defaultBid from the adGroup level. This table details the maximum allowable bid (in local currency) for keywords by marketplace: | Marketplace | Currency | Min / Max bid for SP | | --- | --- | --- | | US | USD | 0.02 / 1000 | | CA | CAD | 0.02 / 1000 | | UK | GBP | 0.02 / 1000 | | DE | EUR | 0.02 / 1000 | | FR | EUR | 0.02 / 1000 | | ES | EUR | 0.02 / 1000 | | IT | EUR | 0.02 / 1000 | | JP | JPY | 2.0 / 100000 | | AU | AUD | 0.10 / 1410 | | AE | AED | 0.24 / 184.0 |
     * @type {number}
     * @memberof TargetingClauseEx
     */
    bid?: number | null;
    /**
     * The epoch time that the targeting clause was created.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    creationDate?: number;
    /**
     * The epoch time that the targeting clause was updated.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    lastUpdatedDate?: number;
    /**
     * The computed status of the targeting clause. See the [developer notes](https://advertising.amazon.com/API/docs/en-us/reference/concepts/developer-notes) for more information.
     * @type {string}
     * @memberof TargetingClauseEx
     */
    servingStatus?: TargetingClauseExServingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingClauseExServingStatusEnum {
    TargetingClauseArchived = 'TARGETING_CLAUSE_ARCHIVED',
    TargetingClausePaused = 'TARGETING_CLAUSE_PAUSED',
    TargetingClauseStatusLive = 'TARGETING_CLAUSE_STATUS_LIVE',
    TargetingClausePolicingSuspended = 'TARGETING_CLAUSE_POLICING_SUSPENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    PendingStartDate = 'PENDING_START_DATE'
}

/**
 * 
 * @export
 * @interface TargetingClauseResponse
 */
export interface TargetingClauseResponse {
    /**
     * The target identifier.
     * @type {number}
     * @memberof TargetingClauseResponse
     */
    targetId?: number;
    /**
     * An enumerated response code.
     * @type {string}
     * @memberof TargetingClauseResponse
     */
    code?: string;
    /**
     * A human-readable description of the value in the `code` field.
     * @type {string}
     * @memberof TargetingClauseResponse
     */
    details?: string;
    /**
     * A human-readable description of the value in the `code` field.
     * @type {string}
     * @memberof TargetingClauseResponse
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface TargetingExpression
 */
export interface TargetingExpression {
    /**
     * List of targeting expressions for which to generate bid recommendations.
     * @type {Array<TargetingExpressionExpressions>}
     * @memberof TargetingExpression
     */
    expressions?: Array<TargetingExpressionExpressions>;
}
/**
 * 
 * @export
 * @interface TargetingExpressionExpressions
 */
export interface TargetingExpressionExpressions {
    /**
     * The type.
     * @type {Array<string>}
     * @memberof TargetingExpressionExpressions
     */
    type?: Array<TargetingExpressionExpressionsTypeEnum>;
    /**
     * The expression value
     * @type {string}
     * @memberof TargetingExpressionExpressions
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingExpressionExpressionsTypeEnum {
    QueryBroadMatches = 'queryBroadMatches',
    QueryPhraseMatches = 'queryPhraseMatches',
    QueryExactMatches = 'queryExactMatches',
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinSameAs = 'asinSameAs',
    QueryBroadRelMatches = 'queryBroadRelMatches',
    QueryHighRelMatches = 'queryHighRelMatches',
    AsinSubstituteRelated = 'asinSubstituteRelated',
    AsinAccessoryRelated = 'asinAccessoryRelated'
}

/**
 * 
 * @export
 * @interface TargetingExpressionPredicate
 */
export interface TargetingExpressionPredicate {
    /**
     * The expression value
     * @type {string}
     * @memberof TargetingExpressionPredicate
     */
    value?: string;
    /**
     * The type of targeting expression. You can specify values for the following predicates: | Predicate | Description | | --- | --- | | `asinCategorySameAs` | Negatively Target the same category as the category expressed. | | `asinBrandSameAs` | Target the brand that is the same as the brand expressed. | | `asinPriceLessThan` | Target a price that is less than the price expressed. | | `asinPriceBetween` | Target a price that is between the prices expressed. | | `asinPriceGreaterThan` | Target a price that is greater than the price expressed. | | `asinReviewRatingLessThan` | Target a review rating less than the review rating that is expressed. | | `asinReviewRatingBetween` | Target a review rating that is between the review ratings expressed. | | `asinReviewRatingGreaterThan` | Target a review rating that is greater than the review rating expressed. | | `asinSameAs` | Target an ASIN that is the same as the ASIN expressed. | | `asinIsPrimeShippingEligible` | Target products that are Prime Shipping Eligible. This refinement can be applied at a category or brand level only. | | `asinAgeRangeSameAs` | Target an age range that is in the expressed range. This refinement can be applied for toys and games categories only. | | `asinGenreSameAs` | Target products related to the expressed genre. This refinement can be applied for Books and eBooks categories only.   | | `asinExpandedFrom` | Target a single product along with others closely related to it, including substitutes and complements.   | | `queryExactMatches` | Use this enum to exactly match your query with search queries.   | | `queryPhraseMatches` | Use this enum to match your query with search phrases.   | | `queryBroadMatches` | Use this enum to broadly match your query with search queries.   |
     * @type {string}
     * @memberof TargetingExpressionPredicate
     */
    type?: TargetingExpressionPredicateTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingExpressionPredicateTypeEnum {
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinSameAs = 'asinSameAs',
    QueryBroadRelMatches = 'queryBroadRelMatches',
    QueryHighRelMatches = 'queryHighRelMatches',
    AsinSubstituteRelated = 'asinSubstituteRelated',
    AsinAccessoryRelated = 'asinAccessoryRelated',
    AsinAgeRangeSameAs = 'asinAgeRangeSameAs',
    AsinGenreSameAs = 'asinGenreSameAs',
    AsinIsPrimeShippingEligible = 'asinIsPrimeShippingEligible',
    AsinExpandedFrom = 'asinExpandedFrom',
    QueryExactMatches = 'queryExactMatches',
    QueryPhraseMatches = 'queryPhraseMatches',
    QueryBroadMatches = 'queryBroadMatches'
}

/**
 * 
 * @export
 * @interface UpdateAdGroup
 */
export interface UpdateAdGroup {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof UpdateAdGroup
     */
    adGroupId?: number;
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof UpdateAdGroup
     */
    name?: string;
    /**
     * The bid value used when no bid is specified for keywords in the ad group.
     * @type {number}
     * @memberof UpdateAdGroup
     */
    defaultBid?: number;
    /**
     * 
     * @type {State}
     * @memberof UpdateAdGroup
     */
    state?: State;
}
/**
 * 
 * @export
 * @interface UpdateCampaign
 */
export interface UpdateCampaign {
    /**
     * The identifier of an existing campaign to update.
     * @type {number}
     * @memberof UpdateCampaign
     */
    campaignId?: number;
    /**
     * The identifier of an existing portfolio to which the campaign is associated.
     * @type {number}
     * @memberof UpdateCampaign
     */
    portfolioId?: number;
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof UpdateCampaign
     */
    name?: string;
    /**
     * A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.
     * @type {{ [key: string]: string; }}
     * @memberof UpdateCampaign
     */
    tags?: { [key: string]: string; };
    /**
     * 
     * @type {State}
     * @memberof UpdateCampaign
     */
    state?: State;
    /**
     * The daily budget of the campaign.
     * @type {number}
     * @memberof UpdateCampaign
     */
    dailyBudget?: number;
    /**
     * The starting date of the campaign. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof UpdateCampaign
     */
    startDate?: string;
    /**
     * The ending date of the campaign to stop running. The format of the date is YYYYMMDD.
     * @type {string}
     * @memberof UpdateCampaign
     */
    endDate?: string | null;
    /**
     * If set to true, Amazon increases the default bid for ads that are eligible to appear in this placement. See developer notes for more information.
     * @type {boolean}
     * @memberof UpdateCampaign
     */
    premiumBidAdjustment?: boolean;
    /**
     * 
     * @type {Bidding}
     * @memberof UpdateCampaign
     */
    bidding?: Bidding;
}
/**
 * 
 * @export
 * @interface UpdateCampaignNegativeKeyword
 */
export interface UpdateCampaignNegativeKeyword {
    /**
     * The identifier of the campaign negative keyword.
     * @type {number}
     * @memberof UpdateCampaignNegativeKeyword
     */
    keywordId?: number;
    /**
     * The campaign negative keyword state.
     * @type {string}
     * @memberof UpdateCampaignNegativeKeyword
     */
    state?: UpdateCampaignNegativeKeywordStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateCampaignNegativeKeywordStateEnum {
    Deleted = 'deleted'
}

/**
 * 
 * @export
 * @interface UpdateKeyword
 */
export interface UpdateKeyword {
    /**
     * The identifier of the keyword.
     * @type {number}
     * @memberof UpdateKeyword
     */
    keywordId?: number;
    /**
     * 
     * @type {State}
     * @memberof UpdateKeyword
     */
    state?: State;
    /**
     * Bid associated with this keyword. Applicable to biddable match types only.
     * @type {number}
     * @memberof UpdateKeyword
     */
    bid?: number | null;
}
/**
 * 
 * @export
 * @interface UpdateNegativeKeyword
 */
export interface UpdateNegativeKeyword {
    /**
     * The identifer of the keyword.
     * @type {number}
     * @memberof UpdateNegativeKeyword
     */
    keywordId?: number;
    /**
     * 
     * @type {State}
     * @memberof UpdateNegativeKeyword
     */
    state?: State;
}
/**
 * 
 * @export
 * @interface UpdateNegativeTargetingClause
 */
export interface UpdateNegativeTargetingClause {
    /**
     * The target identifier.
     * @type {number}
     * @memberof UpdateNegativeTargetingClause
     */
    targetId?: number;
    /**
     * 
     * @type {State}
     * @memberof UpdateNegativeTargetingClause
     */
    state?: State;
    /**
     * The targeting expression.
     * @type {Array<NegativeTargetingExpressionPredicate>}
     * @memberof UpdateNegativeTargetingClause
     */
    expression?: Array<NegativeTargetingExpressionPredicate>;
    /**
     * 
     * @type {ExpressionType}
     * @memberof UpdateNegativeTargetingClause
     */
    expressionType?: ExpressionType;
}
/**
 * 
 * @export
 * @interface UpdateProductAd
 */
export interface UpdateProductAd {
    /**
     * The product ad identifier.
     * @type {number}
     * @memberof UpdateProductAd
     */
    adId?: number;
    /**
     * 
     * @type {State}
     * @memberof UpdateProductAd
     */
    state?: State;
}
/**
 * 
 * @export
 * @interface UpdateTargetingClause
 */
export interface UpdateTargetingClause {
    /**
     * The target identifier.
     * @type {number}
     * @memberof UpdateTargetingClause
     */
    targetId?: number;
    /**
     * 
     * @type {State}
     * @memberof UpdateTargetingClause
     */
    state?: State;
    /**
     * The targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof UpdateTargetingClause
     */
    expression?: Array<TargetingExpressionPredicate>;
    /**
     * The resolved targeting expression.
     * @type {Array<TargetingExpressionPredicate>}
     * @memberof UpdateTargetingClause
     */
    resolvedExpression?: Array<TargetingExpressionPredicate>;
    /**
     * 
     * @type {ExpressionType}
     * @memberof UpdateTargetingClause
     */
    expressionType?: ExpressionType;
    /**
     * The bid for ads sourced using the target. Targets that do not have bid values in listTargetingClauses will inherit the defaultBid from the adGroup level. This table details the maximum allowable bid (in local currency) for keywords by marketplace: | Marketplace | Currency | Min / Max bid for SP | | --- | --- | --- | | US | USD | 0.02 / 1000 | | CA | CAD | 0.02 / 1000 | | UK | GBP | 0.02 / 1000 | | DE | EUR | 0.02 / 1000 | | FR | EUR | 0.02 / 1000 | | ES | EUR | 0.02 / 1000 | | IT | EUR | 0.02 / 1000 | | JP | JPY | 2.0 / 100000 | | AU | AUD | 0.10 / 1410 | | AE | AED | 0.24 / 184.0 |
     * @type {number}
     * @memberof UpdateTargetingClause
     */
    bid?: number | null;
}

/**
 * BidRecommendationsApi - axios parameter creator
 * @export
 */
export const BidRecommendationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **Deprecation notice: This endpoint will be deprecated on September 30, 2023. Use [theme-based bid recommendations](/API/docs/en-us/sponsored-products/3-0/openapi/prod#/ThemeBasedBidRecommendation/GetThemeBasedBidRecommendationForAdGroup_v1) going forward.**
         * @summary Gets bid recommendations for keywords. [PLANNED DEPRECATION 9/30/2023]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {KeywordBidRecommendationsData} [keywordBidRecommendationsData] An array of keyword bid recommendation objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKeywordBidRecommendations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordBidRecommendationsData?: KeywordBidRecommendationsData, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createKeywordBidRecommendations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createKeywordBidRecommendations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/keywords/bidRecommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(keywordBidRecommendationsData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Deprecation notice: This endpoint will be deprecated on September 30, 2023. Use [theme-based bid recommendations](/API/docs/en-us/sponsored-products/3-0/openapi/prod#/ThemeBasedBidRecommendation/GetThemeBasedBidRecommendationForAdGroup_v1) going forward.**
         * @summary Gets a bid recommendation for an ad group. [PLANNED DEPRECATION 9/30/2023]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of an existing ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupBidRecommendations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAdGroupBidRecommendations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAdGroupBidRecommendations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('getAdGroupBidRecommendations', 'adGroupId', adGroupId)
            const localVarPath = `/v2/sp/adGroups/{adGroupId}/bidRecommendations`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of bid recommendations for keyword, product, or auto targeting expressions.
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBidRecommendations: async (inlineObject1?: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/sp/targets/bidRecommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Deprecation notice: This endpoint will be deprecated on September 30, 2023. Use [theme-based bid recommendations](/API/docs/en-us/sponsored-products/3-0/openapi/prod#/ThemeBasedBidRecommendation/GetThemeBasedBidRecommendationForAdGroup_v1) going forward.**
         * @summary Gets a bid recommendation for a keyword. [PLANNED DEPRECATION 9/30/2023]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeywordBidRecommendations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getKeywordBidRecommendations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getKeywordBidRecommendations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'keywordId' is not null or undefined
            assertParamExists('getKeywordBidRecommendations', 'keywordId', keywordId)
            const localVarPath = `/v2/sp/keywords/{keywordId}/bidRecommendations`
                .replace(`{${"keywordId"}}`, encodeURIComponent(String(keywordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BidRecommendationsApi - functional programming interface
 * @export
 */
export const BidRecommendationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BidRecommendationsApiAxiosParamCreator(configuration)
    return {
        /**
         * **Deprecation notice: This endpoint will be deprecated on September 30, 2023. Use [theme-based bid recommendations](/API/docs/en-us/sponsored-products/3-0/openapi/prod#/ThemeBasedBidRecommendation/GetThemeBasedBidRecommendationForAdGroup_v1) going forward.**
         * @summary Gets bid recommendations for keywords. [PLANNED DEPRECATION 9/30/2023]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {KeywordBidRecommendationsData} [keywordBidRecommendationsData] An array of keyword bid recommendation objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createKeywordBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordBidRecommendationsData?: KeywordBidRecommendationsData, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BidRecommendationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createKeywordBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordBidRecommendationsData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Deprecation notice: This endpoint will be deprecated on September 30, 2023. Use [theme-based bid recommendations](/API/docs/en-us/sponsored-products/3-0/openapi/prod#/ThemeBasedBidRecommendation/GetThemeBasedBidRecommendationForAdGroup_v1) going forward.**
         * @summary Gets a bid recommendation for an ad group. [PLANNED DEPRECATION 9/30/2023]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of an existing ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdGroupBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdGroupBidRecommendationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdGroupBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of bid recommendations for keyword, product, or auto targeting expressions.
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBidRecommendations(inlineObject1?: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBidRecommendations(inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Deprecation notice: This endpoint will be deprecated on September 30, 2023. Use [theme-based bid recommendations](/API/docs/en-us/sponsored-products/3-0/openapi/prod#/ThemeBasedBidRecommendation/GetThemeBasedBidRecommendationForAdGroup_v1) going forward.**
         * @summary Gets a bid recommendation for a keyword. [PLANNED DEPRECATION 9/30/2023]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKeywordBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeywordBidRecommendationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKeywordBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BidRecommendationsApi - factory interface
 * @export
 */
export const BidRecommendationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BidRecommendationsApiFp(configuration)
    return {
        /**
         * **Deprecation notice: This endpoint will be deprecated on September 30, 2023. Use [theme-based bid recommendations](/API/docs/en-us/sponsored-products/3-0/openapi/prod#/ThemeBasedBidRecommendation/GetThemeBasedBidRecommendationForAdGroup_v1) going forward.**
         * @summary Gets bid recommendations for keywords. [PLANNED DEPRECATION 9/30/2023]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {KeywordBidRecommendationsData} [keywordBidRecommendationsData] An array of keyword bid recommendation objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKeywordBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordBidRecommendationsData?: KeywordBidRecommendationsData, options?: any): AxiosPromise<BidRecommendationsResponse> {
            return localVarFp.createKeywordBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordBidRecommendationsData, options).then((request) => request(axios, basePath));
        },
        /**
         * **Deprecation notice: This endpoint will be deprecated on September 30, 2023. Use [theme-based bid recommendations](/API/docs/en-us/sponsored-products/3-0/openapi/prod#/ThemeBasedBidRecommendation/GetThemeBasedBidRecommendationForAdGroup_v1) going forward.**
         * @summary Gets a bid recommendation for an ad group. [PLANNED DEPRECATION 9/30/2023]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of an existing ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): AxiosPromise<AdGroupBidRecommendationsResponse> {
            return localVarFp.getAdGroupBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of bid recommendations for keyword, product, or auto targeting expressions.
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBidRecommendations(inlineObject1?: InlineObject1, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getBidRecommendations(inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * **Deprecation notice: This endpoint will be deprecated on September 30, 2023. Use [theme-based bid recommendations](/API/docs/en-us/sponsored-products/3-0/openapi/prod#/ThemeBasedBidRecommendation/GetThemeBasedBidRecommendationForAdGroup_v1) going forward.**
         * @summary Gets a bid recommendation for a keyword. [PLANNED DEPRECATION 9/30/2023]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} keywordId The identifier of an existing keyword.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeywordBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, keywordId: number, options?: any): AxiosPromise<KeywordBidRecommendationsResponse> {
            return localVarFp.getKeywordBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, keywordId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createKeywordBidRecommendations operation in BidRecommendationsApi.
 * @export
 * @interface BidRecommendationsApiCreateKeywordBidRecommendationsRequest
 */
export interface BidRecommendationsApiCreateKeywordBidRecommendationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof BidRecommendationsApiCreateKeywordBidRecommendations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BidRecommendationsApiCreateKeywordBidRecommendations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of keyword bid recommendation objects.
     * @type {KeywordBidRecommendationsData}
     * @memberof BidRecommendationsApiCreateKeywordBidRecommendations
     */
    readonly keywordBidRecommendationsData?: KeywordBidRecommendationsData
}

/**
 * Request parameters for getAdGroupBidRecommendations operation in BidRecommendationsApi.
 * @export
 * @interface BidRecommendationsApiGetAdGroupBidRecommendationsRequest
 */
export interface BidRecommendationsApiGetAdGroupBidRecommendationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof BidRecommendationsApiGetAdGroupBidRecommendations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BidRecommendationsApiGetAdGroupBidRecommendations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing ad group.
     * @type {number}
     * @memberof BidRecommendationsApiGetAdGroupBidRecommendations
     */
    readonly adGroupId: number
}

/**
 * Request parameters for getBidRecommendations operation in BidRecommendationsApi.
 * @export
 * @interface BidRecommendationsApiGetBidRecommendationsRequest
 */
export interface BidRecommendationsApiGetBidRecommendationsRequest {
    /**
     * 
     * @type {InlineObject1}
     * @memberof BidRecommendationsApiGetBidRecommendations
     */
    readonly inlineObject1?: InlineObject1
}

/**
 * Request parameters for getKeywordBidRecommendations operation in BidRecommendationsApi.
 * @export
 * @interface BidRecommendationsApiGetKeywordBidRecommendationsRequest
 */
export interface BidRecommendationsApiGetKeywordBidRecommendationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof BidRecommendationsApiGetKeywordBidRecommendations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BidRecommendationsApiGetKeywordBidRecommendations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an existing keyword.
     * @type {number}
     * @memberof BidRecommendationsApiGetKeywordBidRecommendations
     */
    readonly keywordId: number
}

/**
 * BidRecommendationsApi - object-oriented interface
 * @export
 * @class BidRecommendationsApi
 * @extends {BaseAPI}
 */
export class BidRecommendationsApi extends BaseAPI {
    /**
     * **Deprecation notice: This endpoint will be deprecated on September 30, 2023. Use [theme-based bid recommendations](/API/docs/en-us/sponsored-products/3-0/openapi/prod#/ThemeBasedBidRecommendation/GetThemeBasedBidRecommendationForAdGroup_v1) going forward.**
     * @summary Gets bid recommendations for keywords. [PLANNED DEPRECATION 9/30/2023]
     * @param {BidRecommendationsApiCreateKeywordBidRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidRecommendationsApi
     */
    public createKeywordBidRecommendations(requestParameters: BidRecommendationsApiCreateKeywordBidRecommendationsRequest, options?: any) {
        return BidRecommendationsApiFp(this.configuration).createKeywordBidRecommendations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.keywordBidRecommendationsData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Deprecation notice: This endpoint will be deprecated on September 30, 2023. Use [theme-based bid recommendations](/API/docs/en-us/sponsored-products/3-0/openapi/prod#/ThemeBasedBidRecommendation/GetThemeBasedBidRecommendationForAdGroup_v1) going forward.**
     * @summary Gets a bid recommendation for an ad group. [PLANNED DEPRECATION 9/30/2023]
     * @param {BidRecommendationsApiGetAdGroupBidRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidRecommendationsApi
     */
    public getAdGroupBidRecommendations(requestParameters: BidRecommendationsApiGetAdGroupBidRecommendationsRequest, options?: any) {
        return BidRecommendationsApiFp(this.configuration).getAdGroupBidRecommendations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of bid recommendations for keyword, product, or auto targeting expressions.
     * @param {BidRecommendationsApiGetBidRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidRecommendationsApi
     */
    public getBidRecommendations(requestParameters: BidRecommendationsApiGetBidRecommendationsRequest = {}, options?: any) {
        return BidRecommendationsApiFp(this.configuration).getBidRecommendations(requestParameters.inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Deprecation notice: This endpoint will be deprecated on September 30, 2023. Use [theme-based bid recommendations](/API/docs/en-us/sponsored-products/3-0/openapi/prod#/ThemeBasedBidRecommendation/GetThemeBasedBidRecommendationForAdGroup_v1) going forward.**
     * @summary Gets a bid recommendation for a keyword. [PLANNED DEPRECATION 9/30/2023]
     * @param {BidRecommendationsApiGetKeywordBidRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidRecommendationsApi
     */
    public getKeywordBidRecommendations(requestParameters: BidRecommendationsApiGetKeywordBidRecommendationsRequest, options?: any) {
        return BidRecommendationsApiFp(this.configuration).getKeywordBidRecommendations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.keywordId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SnapshotsApi - axios parameter creator
 * @export
 */
export const SnapshotsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
         * @summary Downloads a previously requested snapshot.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} snapshotId The snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadSnapshot: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('downloadSnapshot', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('downloadSnapshot', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('downloadSnapshot', 'snapshotId', snapshotId)
            const localVarPath = `/v2/sp/snapshots/{snapshotId}/download`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/overview).**
         * @summary Gets the status of a requested snapshot.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} snapshotId The snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSnapshotStatus: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getSnapshotStatus', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getSnapshotStatus', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSnapshotStatus', 'snapshotId', snapshotId)
            const localVarPath = `/v2/sp/snapshots/{snapshotId}`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria.  **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
         * @summary Request a file-based snapshot of all entities of the specified type.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets'} recordType The type of entity for which the snapshot is generated.
         * @param {SnapshotRequest} snapshotRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestSnapshot: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets', snapshotRequest: SnapshotRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('requestSnapshot', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('requestSnapshot', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'recordType' is not null or undefined
            assertParamExists('requestSnapshot', 'recordType', recordType)
            // verify required parameter 'snapshotRequest' is not null or undefined
            assertParamExists('requestSnapshot', 'snapshotRequest', snapshotRequest)
            const localVarPath = `/v2/sp/{recordType}/snapshot`
                .replace(`{${"recordType"}}`, encodeURIComponent(String(recordType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(snapshotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SnapshotsApi - functional programming interface
 * @export
 */
export const SnapshotsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SnapshotsApiAxiosParamCreator(configuration)
    return {
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
         * @summary Downloads a previously requested snapshot.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} snapshotId The snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/overview).**
         * @summary Gets the status of a requested snapshot.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} snapshotId The snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSnapshotStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSnapshotStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria.  **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
         * @summary Request a file-based snapshot of all entities of the specified type.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets'} recordType The type of entity for which the snapshot is generated.
         * @param {SnapshotRequest} snapshotRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets', snapshotRequest: SnapshotRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, snapshotRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SnapshotsApi - factory interface
 * @export
 */
export const SnapshotsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SnapshotsApiFp(configuration)
    return {
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
         * @summary Downloads a previously requested snapshot.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} snapshotId The snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: number, options?: any): AxiosPromise<void> {
            return localVarFp.downloadSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options).then((request) => request(axios, basePath));
        },
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/overview).**
         * @summary Gets the status of a requested snapshot.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} snapshotId The snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSnapshotStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: number, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.getSnapshotStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options).then((request) => request(axios, basePath));
        },
        /**
         * Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria.  **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
         * @summary Request a file-based snapshot of all entities of the specified type.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets'} recordType The type of entity for which the snapshot is generated.
         * @param {SnapshotRequest} snapshotRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets', snapshotRequest: SnapshotRequest, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.requestSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, snapshotRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for downloadSnapshot operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiDownloadSnapshotRequest
 */
export interface SnapshotsApiDownloadSnapshotRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof SnapshotsApiDownloadSnapshot
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SnapshotsApiDownloadSnapshot
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The snapshot identifier.
     * @type {number}
     * @memberof SnapshotsApiDownloadSnapshot
     */
    readonly snapshotId: number
}

/**
 * Request parameters for getSnapshotStatus operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiGetSnapshotStatusRequest
 */
export interface SnapshotsApiGetSnapshotStatusRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof SnapshotsApiGetSnapshotStatus
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SnapshotsApiGetSnapshotStatus
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The snapshot identifier.
     * @type {number}
     * @memberof SnapshotsApiGetSnapshotStatus
     */
    readonly snapshotId: number
}

/**
 * Request parameters for requestSnapshot operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiRequestSnapshotRequest
 */
export interface SnapshotsApiRequestSnapshotRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof SnapshotsApiRequestSnapshot
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SnapshotsApiRequestSnapshot
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The type of entity for which the snapshot is generated.
     * @type {'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets'}
     * @memberof SnapshotsApiRequestSnapshot
     */
    readonly recordType: 'campaigns' | 'adGroups' | 'keywords' | 'negativeKeywords' | 'campaignNegativeKeywords' | 'productAds' | 'targets' | 'negativeTargets'

    /**
     * 
     * @type {SnapshotRequest}
     * @memberof SnapshotsApiRequestSnapshot
     */
    readonly snapshotRequest: SnapshotRequest
}

/**
 * SnapshotsApi - object-oriented interface
 * @export
 * @class SnapshotsApi
 * @extends {BaseAPI}
 */
export class SnapshotsApi extends BaseAPI {
    /**
     * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
     * @summary Downloads a previously requested snapshot.
     * @param {SnapshotsApiDownloadSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    public downloadSnapshot(requestParameters: SnapshotsApiDownloadSnapshotRequest, options?: any) {
        return SnapshotsApiFp(this.configuration).downloadSnapshot(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.snapshotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/overview).**
     * @summary Gets the status of a requested snapshot.
     * @param {SnapshotsApiGetSnapshotStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    public getSnapshotStatus(requestParameters: SnapshotsApiGetSnapshotStatusRequest, options?: any) {
        return SnapshotsApiFp(this.configuration).getSnapshotStatus(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.snapshotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria.  **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
     * @summary Request a file-based snapshot of all entities of the specified type.
     * @param {SnapshotsApiRequestSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    public requestSnapshot(requestParameters: SnapshotsApiRequestSnapshotRequest, options?: any) {
        return SnapshotsApiFp(this.configuration).requestSnapshot(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.recordType, requestParameters.snapshotRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SuggestedKeywordsApi - axios parameter creator
 * @export
 */
export const SuggestedKeywordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Suggested keywords are returned in an array ordered by descending effectiveness.
         * @summary Gets suggested keyword for a specified list of ASINs.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkGetAsinSuggestedKeywords: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject?: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('bulkGetAsinSuggestedKeywords', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('bulkGetAsinSuggestedKeywords', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/sp/asins/suggested/keywords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets suggested keywords for the specified ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of a valid ad group.
         * @param {number} [maxNumSuggestions] The maximum number of suggested keywords for the response.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [adStateFilter] Filters results to ad groups with state matching the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupSuggestedKeywords: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, maxNumSuggestions?: number, adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAdGroupSuggestedKeywords', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAdGroupSuggestedKeywords', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('getAdGroupSuggestedKeywords', 'adGroupId', adGroupId)
            const localVarPath = `/v2/sp/adGroups/{adGroupId}/suggested/keywords`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (maxNumSuggestions !== undefined) {
                localVarQueryParameter['maxNumSuggestions'] = maxNumSuggestions;
            }

            if (adStateFilter !== undefined) {
                localVarQueryParameter['adStateFilter'] = adStateFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets suggested keywords with extended data for the specified ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of a valid ad group.
         * @param {number} [maxNumSuggestions] The maximum number of suggested keywords for the response.
         * @param {'yes' | 'no'} [suggestBids] Set to &#x60;yes&#x60; to include a suggest bid for the suggested keyword in the response. Otherwise, set to &#x60;no&#x60;.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [adStateFilter] Filters results to ad groups with state matching the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupSuggestedKeywordsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, maxNumSuggestions?: number, suggestBids?: 'yes' | 'no', adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAdGroupSuggestedKeywordsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAdGroupSuggestedKeywordsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('getAdGroupSuggestedKeywordsEx', 'adGroupId', adGroupId)
            const localVarPath = `/v2/sp/adGroups/{adGroupId}/suggested/keywords/extended`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (maxNumSuggestions !== undefined) {
                localVarQueryParameter['maxNumSuggestions'] = maxNumSuggestions;
            }

            if (suggestBids !== undefined) {
                localVarQueryParameter['suggestBids'] = suggestBids;
            }

            if (adStateFilter !== undefined) {
                localVarQueryParameter['adStateFilter'] = adStateFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Suggested keywords are returned in an array ordered by descending effectiveness.
         * @summary Gets suggested keywords for the specified ASIN.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} asinValue An ASIN.
         * @param {number} [maxNumSuggestions] The maximum number of suggested keywords for the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsinSuggestedKeywords: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, asinValue: string, maxNumSuggestions?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAsinSuggestedKeywords', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAsinSuggestedKeywords', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'asinValue' is not null or undefined
            assertParamExists('getAsinSuggestedKeywords', 'asinValue', asinValue)
            const localVarPath = `/v2/sp/asins/{asinValue}/suggested/keywords`
                .replace(`{${"asinValue"}}`, encodeURIComponent(String(asinValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (maxNumSuggestions !== undefined) {
                localVarQueryParameter['maxNumSuggestions'] = maxNumSuggestions;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SuggestedKeywordsApi - functional programming interface
 * @export
 */
export const SuggestedKeywordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SuggestedKeywordsApiAxiosParamCreator(configuration)
    return {
        /**
         * Suggested keywords are returned in an array ordered by descending effectiveness.
         * @summary Gets suggested keyword for a specified list of ASINs.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkGetAsinSuggestedKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject?: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkGetAsinSuggestedKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets suggested keywords for the specified ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of a valid ad group.
         * @param {number} [maxNumSuggestions] The maximum number of suggested keywords for the response.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [adStateFilter] Filters results to ad groups with state matching the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdGroupSuggestedKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, maxNumSuggestions?: number, adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdGroupSuggestedKeywordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdGroupSuggestedKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, maxNumSuggestions, adStateFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets suggested keywords with extended data for the specified ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of a valid ad group.
         * @param {number} [maxNumSuggestions] The maximum number of suggested keywords for the response.
         * @param {'yes' | 'no'} [suggestBids] Set to &#x60;yes&#x60; to include a suggest bid for the suggested keyword in the response. Otherwise, set to &#x60;no&#x60;.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [adStateFilter] Filters results to ad groups with state matching the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdGroupSuggestedKeywordsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, maxNumSuggestions?: number, suggestBids?: 'yes' | 'no', adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdGroupSuggestedKeywordsResponseEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdGroupSuggestedKeywordsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, maxNumSuggestions, suggestBids, adStateFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Suggested keywords are returned in an array ordered by descending effectiveness.
         * @summary Gets suggested keywords for the specified ASIN.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} asinValue An ASIN.
         * @param {number} [maxNumSuggestions] The maximum number of suggested keywords for the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAsinSuggestedKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, asinValue: string, maxNumSuggestions?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAsinSuggestedKeywordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAsinSuggestedKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, asinValue, maxNumSuggestions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SuggestedKeywordsApi - factory interface
 * @export
 */
export const SuggestedKeywordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SuggestedKeywordsApiFp(configuration)
    return {
        /**
         * Suggested keywords are returned in an array ordered by descending effectiveness.
         * @summary Gets suggested keyword for a specified list of ASINs.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkGetAsinSuggestedKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject?: InlineObject, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.bulkGetAsinSuggestedKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets suggested keywords for the specified ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of a valid ad group.
         * @param {number} [maxNumSuggestions] The maximum number of suggested keywords for the response.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [adStateFilter] Filters results to ad groups with state matching the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupSuggestedKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, maxNumSuggestions?: number, adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', options?: any): AxiosPromise<AdGroupSuggestedKeywordsResponse> {
            return localVarFp.getAdGroupSuggestedKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, maxNumSuggestions, adStateFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets suggested keywords with extended data for the specified ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of a valid ad group.
         * @param {number} [maxNumSuggestions] The maximum number of suggested keywords for the response.
         * @param {'yes' | 'no'} [suggestBids] Set to &#x60;yes&#x60; to include a suggest bid for the suggested keyword in the response. Otherwise, set to &#x60;no&#x60;.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [adStateFilter] Filters results to ad groups with state matching the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupSuggestedKeywordsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, maxNumSuggestions?: number, suggestBids?: 'yes' | 'no', adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', options?: any): AxiosPromise<Array<AdGroupSuggestedKeywordsResponseEx>> {
            return localVarFp.getAdGroupSuggestedKeywordsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, maxNumSuggestions, suggestBids, adStateFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Suggested keywords are returned in an array ordered by descending effectiveness.
         * @summary Gets suggested keywords for the specified ASIN.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} asinValue An ASIN.
         * @param {number} [maxNumSuggestions] The maximum number of suggested keywords for the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAsinSuggestedKeywords(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, asinValue: string, maxNumSuggestions?: number, options?: any): AxiosPromise<GetAsinSuggestedKeywordsResponse> {
            return localVarFp.getAsinSuggestedKeywords(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, asinValue, maxNumSuggestions, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for bulkGetAsinSuggestedKeywords operation in SuggestedKeywordsApi.
 * @export
 * @interface SuggestedKeywordsApiBulkGetAsinSuggestedKeywordsRequest
 */
export interface SuggestedKeywordsApiBulkGetAsinSuggestedKeywordsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof SuggestedKeywordsApiBulkGetAsinSuggestedKeywords
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SuggestedKeywordsApiBulkGetAsinSuggestedKeywords
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {InlineObject}
     * @memberof SuggestedKeywordsApiBulkGetAsinSuggestedKeywords
     */
    readonly inlineObject?: InlineObject
}

/**
 * Request parameters for getAdGroupSuggestedKeywords operation in SuggestedKeywordsApi.
 * @export
 * @interface SuggestedKeywordsApiGetAdGroupSuggestedKeywordsRequest
 */
export interface SuggestedKeywordsApiGetAdGroupSuggestedKeywordsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywords
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywords
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of a valid ad group.
     * @type {number}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywords
     */
    readonly adGroupId: number

    /**
     * The maximum number of suggested keywords for the response.
     * @type {number}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywords
     */
    readonly maxNumSuggestions?: number

    /**
     * Filters results to ad groups with state matching the comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywords
     */
    readonly adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'
}

/**
 * Request parameters for getAdGroupSuggestedKeywordsEx operation in SuggestedKeywordsApi.
 * @export
 * @interface SuggestedKeywordsApiGetAdGroupSuggestedKeywordsExRequest
 */
export interface SuggestedKeywordsApiGetAdGroupSuggestedKeywordsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywordsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywordsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of a valid ad group.
     * @type {number}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywordsEx
     */
    readonly adGroupId: number

    /**
     * The maximum number of suggested keywords for the response.
     * @type {number}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywordsEx
     */
    readonly maxNumSuggestions?: number

    /**
     * Set to &#x60;yes&#x60; to include a suggest bid for the suggested keyword in the response. Otherwise, set to &#x60;no&#x60;.
     * @type {'yes' | 'no'}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywordsEx
     */
    readonly suggestBids?: 'yes' | 'no'

    /**
     * Filters results to ad groups with state matching the comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof SuggestedKeywordsApiGetAdGroupSuggestedKeywordsEx
     */
    readonly adStateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'
}

/**
 * Request parameters for getAsinSuggestedKeywords operation in SuggestedKeywordsApi.
 * @export
 * @interface SuggestedKeywordsApiGetAsinSuggestedKeywordsRequest
 */
export interface SuggestedKeywordsApiGetAsinSuggestedKeywordsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; developer account.
     * @type {string}
     * @memberof SuggestedKeywordsApiGetAsinSuggestedKeywords
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SuggestedKeywordsApiGetAsinSuggestedKeywords
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An ASIN.
     * @type {string}
     * @memberof SuggestedKeywordsApiGetAsinSuggestedKeywords
     */
    readonly asinValue: string

    /**
     * The maximum number of suggested keywords for the response.
     * @type {number}
     * @memberof SuggestedKeywordsApiGetAsinSuggestedKeywords
     */
    readonly maxNumSuggestions?: number
}

/**
 * SuggestedKeywordsApi - object-oriented interface
 * @export
 * @class SuggestedKeywordsApi
 * @extends {BaseAPI}
 */
export class SuggestedKeywordsApi extends BaseAPI {
    /**
     * Suggested keywords are returned in an array ordered by descending effectiveness.
     * @summary Gets suggested keyword for a specified list of ASINs.
     * @param {SuggestedKeywordsApiBulkGetAsinSuggestedKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedKeywordsApi
     */
    public bulkGetAsinSuggestedKeywords(requestParameters: SuggestedKeywordsApiBulkGetAsinSuggestedKeywordsRequest, options?: any) {
        return SuggestedKeywordsApiFp(this.configuration).bulkGetAsinSuggestedKeywords(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets suggested keywords for the specified ad group.
     * @param {SuggestedKeywordsApiGetAdGroupSuggestedKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedKeywordsApi
     */
    public getAdGroupSuggestedKeywords(requestParameters: SuggestedKeywordsApiGetAdGroupSuggestedKeywordsRequest, options?: any) {
        return SuggestedKeywordsApiFp(this.configuration).getAdGroupSuggestedKeywords(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, requestParameters.maxNumSuggestions, requestParameters.adStateFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets suggested keywords with extended data for the specified ad group.
     * @param {SuggestedKeywordsApiGetAdGroupSuggestedKeywordsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedKeywordsApi
     */
    public getAdGroupSuggestedKeywordsEx(requestParameters: SuggestedKeywordsApiGetAdGroupSuggestedKeywordsExRequest, options?: any) {
        return SuggestedKeywordsApiFp(this.configuration).getAdGroupSuggestedKeywordsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, requestParameters.maxNumSuggestions, requestParameters.suggestBids, requestParameters.adStateFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Suggested keywords are returned in an array ordered by descending effectiveness.
     * @summary Gets suggested keywords for the specified ASIN.
     * @param {SuggestedKeywordsApiGetAsinSuggestedKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedKeywordsApi
     */
    public getAsinSuggestedKeywords(requestParameters: SuggestedKeywordsApiGetAsinSuggestedKeywordsRequest, options?: any) {
        return SuggestedKeywordsApiFp(this.configuration).getAsinSuggestedKeywords(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.asinValue, requestParameters.maxNumSuggestions, options).then((request) => request(this.axios, this.basePath));
    }
}


