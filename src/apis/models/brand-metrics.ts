/* tslint:disable */
/* eslint-disable */
/**
 * Brand Metrics
 * Brand Metrics provides a new measurement solution that quantifies opportunities for your brand at each stage of the customer journey on Amazon, and helps brands understand the value of different shopping engagements that impact stages of that journey. You can now access Awareness and Consideration indices that compare your performance to peers using models predictive of consideration and sales. Brand Metrics quantifies the number of customers in the awareness and consideration marketing funnel stages and is built at scale to measure all shopping engagements with your brand on Amazon, not just ad-attributed engagements. Additionally, BM breaks out key shopping engagements at each stage of the shopping journey, along with the Return on Engagement, so you can measure the historical sales following a consideration event or purchase.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { createRequestFunction } from "../../helpers";

/**
 * Request object to generate available report dates for the brands
 * @export
 * @interface BrandMetricsAvailableComputationDatesRequest
 */
export interface BrandMetricsAvailableComputationDatesRequest {
    /**
     * The node at the top of a browse tree. It is the start node of a tree
     * @type {string}
     * @memberof BrandMetricsAvailableComputationDatesRequest
     */
    categoryNodeTreeName: string;
    /**
     * The hierarchical path that leads to a node starting with the root node
     * @type {Array<string>}
     * @memberof BrandMetricsAvailableComputationDatesRequest
     */
    categoryNodePath?: Array<string>;
    /**
     * Brand name to get the dates for
     * @type {string}
     * @memberof BrandMetricsAvailableComputationDatesRequest
     */
    brandName?: string;
    /**
     * Category Node ID represents the catalog node that can be used in product targeting with categories
     * @type {string}
     * @memberof BrandMetricsAvailableComputationDatesRequest
     */
    categoryNodeId: string;
    /**
     * Beginning of the data range (inclusive) in YYYY-MM-DD format . The date will be in the Coordinated Universal Time (UTC) timezone. If no date is passed, it will fetch the dates from the begining date till the reportEndDate. if no date is passed for both reportStartDate and reportEndDate, latest report will be fetched
     * @type {string}
     * @memberof BrandMetricsAvailableComputationDatesRequest
     */
    reportStartDate?: string;
    /**
     * Currently supported values: â€œ1w\" (one week), \"1m\" (one month) and \"1cm\" (one calendar month). This defines the period of time used to determine the number of shoppers in the metrics computation.
     * @type {string}
     * @memberof BrandMetricsAvailableComputationDatesRequest
     */
    lookBackPeriod?: BrandMetricsAvailableComputationDatesRequestLookBackPeriodEnum;
    /**
     * Token  to fetch additional results (if any). Subsequent calls must be made with same  parameters as in the previous requests.
     * @type {string}
     * @memberof BrandMetricsAvailableComputationDatesRequest
     */
    nextToken?: string;
    /**
     * Brand Id from BrandAid
     * @type {string}
     * @memberof BrandMetricsAvailableComputationDatesRequest
     */
    brandId: string;
    /**
     * End of the data range (inclusive) in YYYY-MM-DD format . The date will be in the Coordinated Universal Time (UTC) timezone. If no date is passed, it will fetch the dates from the reportStartDate to the latest date. if no date is passed for both reportStartDate and reportEndDate, latest report will be fetched
     * @type {string}
     * @memberof BrandMetricsAvailableComputationDatesRequest
     */
    reportEndDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BrandMetricsAvailableComputationDatesRequestLookBackPeriodEnum {
    _1m = '1m',
    _1w = '1w',
    _1cm = '1cm'
}

/**
 * Response object containing list of available dates on which the metrics were calculated.
 * @export
 * @interface BrandMetricsAvailableComputationDatesResponse
 */
export interface BrandMetricsAvailableComputationDatesResponse {
    /**
     * Token  to fetch additional results (if any). Subsequent calls must be made with same  parameters as in the previous requests.
     * @type {string}
     * @memberof BrandMetricsAvailableComputationDatesResponse
     */
    nextToken?: string;
    /**
     * List of available dates on which the metrics were calculated.
     * @type {Array<string>}
     * @memberof BrandMetricsAvailableComputationDatesResponse
     */
    metricsComputationDates: Array<string>;
}
/**
 * List of brands IDs owned by the calling advertiser.
 * @export
 * @interface BrandMetricsBrandsResponse
 */
export interface BrandMetricsBrandsResponse {
    /**
     * List of brands IDs owned by the calling advertiser.
     * @type {Array<BrandMetricsBrandsResponseBrands>}
     * @memberof BrandMetricsBrandsResponse
     */
    brands: Array<BrandMetricsBrandsResponseBrands>;
    /**
     * Token  to fetch additional results (if any). Subsequent calls must be made with same  parameters as in the previous requests.
     * @type {string}
     * @memberof BrandMetricsBrandsResponse
     */
    nextToken?: string;
}
/**
 * Object to give additional details on why the brand is unavailable. Only populated if the available field is false.
 * @export
 * @interface BrandMetricsBrandsResponseBrandMetricsUnavailableReason
 */
export interface BrandMetricsBrandsResponseBrandMetricsUnavailableReason {
    /**
     * Reason for why access to the brand or data for the brand is not available
     * @type {string}
     * @memberof BrandMetricsBrandsResponseBrandMetricsUnavailableReason
     */
    reason?: string;
    /**
     * Reason code for why access to the brand or data for the brand is not available
     * @type {number}
     * @memberof BrandMetricsBrandsResponseBrandMetricsUnavailableReason
     */
    code?: number;
}
/**
 * 
 * @export
 * @interface BrandMetricsBrandsResponseBrands
 */
export interface BrandMetricsBrandsResponseBrands {
    /**
     * Brand Name
     * @type {string}
     * @memberof BrandMetricsBrandsResponseBrands
     */
    name?: string;
    /**
     * Brand Id from Brand Aid
     * @type {string}
     * @memberof BrandMetricsBrandsResponseBrands
     */
    id?: string;
    /**
     * 
     * @type {BrandMetricsBrandsResponseBrandMetricsUnavailableReason}
     * @memberof BrandMetricsBrandsResponseBrands
     */
    brandMetricsUnavailableReason?: BrandMetricsBrandsResponseBrandMetricsUnavailableReason;
    /**
     * Signifies whether the data for the brand is available or not
     * @type {boolean}
     * @memberof BrandMetricsBrandsResponseBrands
     */
    brandMetricsAvailable?: boolean;
}
/**
 * Request object to fetch all the category Ids for the brands
 * @export
 * @interface BrandMetricsCategoriesRequest
 */
export interface BrandMetricsCategoriesRequest {
    /**
     * Name of the brand.
     * @type {string}
     * @memberof BrandMetricsCategoriesRequest
     */
    brandName?: string;
    /**
     * Token  to fetch additional results (if any). Subsequent calls must be made with same  parameters as in the previous requests.
     * @type {string}
     * @memberof BrandMetricsCategoriesRequest
     */
    nextToken?: string;
    /**
     * Brand Id from BrandAid
     * @type {string}
     * @memberof BrandMetricsCategoriesRequest
     */
    brandId: string;
}
/**
 * Response object containing category Ids for the brands
 * @export
 * @interface BrandMetricsCategoriesResponse
 */
export interface BrandMetricsCategoriesResponse {
    /**
     * List of category Node IDs owned by the calling advertiser. Returns all the categories if brandName and BrandId are not passed.
     * @type {Array<BrandMetricsCategoriesResponseCategoryNodeIds>}
     * @memberof BrandMetricsCategoriesResponse
     */
    categoryNodeIds: Array<BrandMetricsCategoriesResponseCategoryNodeIds>;
    /**
     * Token  to fetch additional results (if any). Subsequent calls must be made with same  parameters as in the previous requests.
     * @type {string}
     * @memberof BrandMetricsCategoriesResponse
     */
    nextToken?: string;
}
/**
 * 
 * @export
 * @interface BrandMetricsCategoriesResponseCategoryNodeIds
 */
export interface BrandMetricsCategoriesResponseCategoryNodeIds {
    /**
     * The hierarchical path that leads to a node starting with the root node
     * @type {Array<string>}
     * @memberof BrandMetricsCategoriesResponseCategoryNodeIds
     */
    categoryNodePath?: Array<string>;
    /**
     * The node at the top of a browse tree. It is the start node of a tree
     * @type {string}
     * @memberof BrandMetricsCategoriesResponseCategoryNodeIds
     */
    categoryNodeTreeName?: string;
    /**
     * Category Node ID represents the catalog node that can be used in product targeting with categories
     * @type {string}
     * @memberof BrandMetricsCategoriesResponseCategoryNodeIds
     */
    categoryNodeId?: string;
}
/**
 * 
 * @export
 * @interface BrandMetricsCurrencyAmount
 */
export interface BrandMetricsCurrencyAmount {
    /**
     * 
     * @type {number}
     * @memberof BrandMetricsCurrencyAmount
     */
    amount?: number;
    /**
     * The currency used for all monetary values for entities under this profile
     * @type {string}
     * @memberof BrandMetricsCurrencyAmount
     */
    currencyCode?: BrandMetricsCurrencyAmountCurrencyCodeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum BrandMetricsCurrencyAmountCurrencyCodeEnum {
    Aed = 'AED',
    Aud = 'AUD',
    Brl = 'BRL',
    Cad = 'CAD',
    Cny = 'CNY',
    Egp = 'EGP',
    Eur = 'EUR',
    Gbp = 'GBP',
    Inr = 'INR',
    Jpy = 'JPY',
    Mxn = 'MXN',
    Pln = 'PLN',
    Sar = 'SAR',
    Sek = 'SEK',
    Sgd = 'SGD',
    Try = 'TRY',
    Usd = 'USD'
}

/**
 * The error response object.
 * @export
 * @interface BrandMetricsError
 */
export interface BrandMetricsError {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof BrandMetricsError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof BrandMetricsError
     */
    details?: string;
}
/**
 * Request object to generate the Brand Metrics Report
 * @export
 * @interface BrandMetricsGenerateReportRequest
 */
export interface BrandMetricsGenerateReportRequest {
    /**
     * Optional. The node at the top of a browse tree. It is the start node of a tree
     * @type {string}
     * @memberof BrandMetricsGenerateReportRequest
     */
    categoryNodeTreeName?: string;
    /**
     * Optional. The hierarchical path that leads to a node starting with the root node. If no Category Node Name is passed, then all data available for all brands belonging to the entity are retrieved.
     * @type {Array<string>}
     * @memberof BrandMetricsGenerateReportRequest
     */
    categoryNodePath?: Array<string>;
    /**
     * Optional. Brand Name. If no Brand Name is passed, then all data available for all brands belonging to the entity are retrieved.
     * @type {string}
     * @memberof BrandMetricsGenerateReportRequest
     */
    brandName?: string;
    /**
     * Optional. Retrieves metrics with metricsComputationDate between reportStartDate and reportEndDate  (inclusive). The date will be in the Coordinated Universal Time (UTC) timezone in YYYY-MM-DD format. If no date is passed in reportStartDate, all available metrics with metricsComputationDate till the reportEndDate will be provided. If no date is passed for either reportStartDate or reportEndDate, the metrics with the most receont metricsComputationDate will be returned.
     * @type {string}
     * @memberof BrandMetricsGenerateReportRequest
     */
    reportStartDate?: string;
    /**
     * Currently supported values: \"1w\" (one week), \"1m\" (one month) and  \"1cm\" (one calendar month). This defines the period of time used to determine the number of shoppers in the metrics computation.
     * @type {string}
     * @memberof BrandMetricsGenerateReportRequest
     */
    lookBackPeriod?: BrandMetricsGenerateReportRequestLookBackPeriodEnum;
    /**
     * Format of the report
     * @type {string}
     * @memberof BrandMetricsGenerateReportRequest
     */
    format?: BrandMetricsGenerateReportRequestFormatEnum;
    /**
     * Optional. Specify an array of string of metrics field names to include in the report. If no metric field names are specified, all metrics are returned.
     * @type {Array<string>}
     * @memberof BrandMetricsGenerateReportRequest
     */
    metrics?: Array<string>;
    /**
     * Optional. Retrieves metrics with metricsComputationDate between reportStartDate and reportEndDate  (inclusive). The date will be in the Coordinated Universal Time (UTC) timezone in YYYY-MM-DD format. If no date is passed in reportEndDate, all available metrics with metricsComputationDate from the reportStartDate will be provided. If no date is passed for either reportStartDate or reportEndDate, the metrics with the most receont metricsComputationDate will be returned.
     * @type {string}
     * @memberof BrandMetricsGenerateReportRequest
     */
    reportEndDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BrandMetricsGenerateReportRequestLookBackPeriodEnum {
    _1m = '1m',
    _1w = '1w',
    _1cm = '1cm'
}
/**
    * @export
    * @enum {string}
    */
export enum BrandMetricsGenerateReportRequestFormatEnum {
    Json = 'JSON',
    Csv = 'CSV'
}

/**
 * Response object containing Brand Metrics Report metadata
 * @export
 * @interface BrandMetricsGenerateReportResponse
 */
export interface BrandMetricsGenerateReportResponse {
    /**
     * The identifier of the report.
     * @type {string}
     * @memberof BrandMetricsGenerateReportResponse
     */
    reportId: string;
    /**
     * Format of the report
     * @type {string}
     * @memberof BrandMetricsGenerateReportResponse
     */
    format: BrandMetricsGenerateReportResponseFormatEnum;
    /**
     * A human-readable description of the current status.
     * @type {string}
     * @memberof BrandMetricsGenerateReportResponse
     */
    statusDetails: string;
    /**
     * The URI address of the report.
     * @type {string}
     * @memberof BrandMetricsGenerateReportResponse
     */
    location: string;
    /**
     * The expiration time of the URI in the location property in milliseconds. The expiration time is the interval between the time the response was generated and the time the URI expires.
     * @type {number}
     * @memberof BrandMetricsGenerateReportResponse
     */
    expiration: number;
    /**
     * The build status of the report.
     * @type {string}
     * @memberof BrandMetricsGenerateReportResponse
     */
    status: BrandMetricsGenerateReportResponseStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum BrandMetricsGenerateReportResponseFormatEnum {
    Json = 'JSON',
    Csv = 'CSV'
}
/**
    * @export
    * @enum {string}
    */
export enum BrandMetricsGenerateReportResponseStatusEnum {
    InProgress = 'IN_PROGRESS',
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * Response object containing Brand Metrics Report status metadata
 * @export
 * @interface BrandMetricsGetReportByIdResponse
 */
export interface BrandMetricsGetReportByIdResponse {
    /**
     * The identifier of the report.
     * @type {string}
     * @memberof BrandMetricsGetReportByIdResponse
     */
    reportId: string;
    /**
     * Format of the report
     * @type {string}
     * @memberof BrandMetricsGetReportByIdResponse
     */
    format: BrandMetricsGetReportByIdResponseFormatEnum;
    /**
     * A human-readable description of the current status.
     * @type {string}
     * @memberof BrandMetricsGetReportByIdResponse
     */
    statusDetails: string;
    /**
     * The URI address of the report.
     * @type {string}
     * @memberof BrandMetricsGetReportByIdResponse
     */
    location: string;
    /**
     * The expiration time of the URI in the location property in milliseconds. The expiration time is the interval between the time the response was generated and the time the URI expires.
     * @type {number}
     * @memberof BrandMetricsGetReportByIdResponse
     */
    expiration: number;
    /**
     * The build status of the report.
     * @type {string}
     * @memberof BrandMetricsGetReportByIdResponse
     */
    status: BrandMetricsGetReportByIdResponseStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum BrandMetricsGetReportByIdResponseFormatEnum {
    Json = 'JSON',
    Csv = 'CSV'
}
/**
    * @export
    * @enum {string}
    */
export enum BrandMetricsGetReportByIdResponseStatusEnum {
    InProgress = 'IN_PROGRESS',
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * Request object to generate Brand Metrics for the Brands
 * @export
 * @interface BrandMetricsGetRequest
 */
export interface BrandMetricsGetRequest {
    /**
     * The node at the top of a browse tree. It is the start node of a tree
     * @type {string}
     * @memberof BrandMetricsGetRequest
     */
    categoryNodeTreeName: string;
    /**
     * The hierarchical path that leads to a node starting with the root node
     * @type {Array<string>}
     * @memberof BrandMetricsGetRequest
     */
    categoryNodePath?: Array<string>;
    /**
     * Brand Name
     * @type {string}
     * @memberof BrandMetricsGetRequest
     */
    brandName?: string;
    /**
     * Category Node ID represents the catalog node that can be used in product targeting with categories
     * @type {string}
     * @memberof BrandMetricsGetRequest
     */
    categoryNodeId: string;
    /**
     * Beginning of the data range (inclusive) in YYYY-MM-DD format . The date will be in the Coordinated Universal Time (UTC) timezone. If no date is passed, it will fetch the reports from the begining date till the reportEndDate. if no date is passed for both reportStartDate and reportEndDate, latest report will be fetched
     * @type {string}
     * @memberof BrandMetricsGetRequest
     */
    reportStartDate?: string;
    /**
     * Currently supported values: \"1w\" (one week), \"1m\" (one month) and \"1cm\" (one calendar month). This defines the period of time used to determine the number of shoppers in the metrics computation.
     * @type {string}
     * @memberof BrandMetricsGetRequest
     */
    lookBackPeriod?: BrandMetricsGetRequestLookBackPeriodEnum;
    /**
     * Token  to fetch additional results (if any). Subsequent calls must be made with same  parameters as in the previous requests.
     * @type {string}
     * @memberof BrandMetricsGetRequest
     */
    nextToken?: string;
    /**
     * Brand Id from BrandAid
     * @type {string}
     * @memberof BrandMetricsGetRequest
     */
    brandId: string;
    /**
     * End of the data range (inclusive) in YYYY-MM-DD format . The date will be in the Coordinated Universal Time (UTC) timezone. If no date is passed, it will fetch the reports from the reportStartDate to the latest date. if no date is passed for both reportStartDate and reportEndDate, latest report will be fetched
     * @type {string}
     * @memberof BrandMetricsGetRequest
     */
    reportEndDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BrandMetricsGetRequestLookBackPeriodEnum {
    _1m = '1m',
    _1w = '1w',
    _1cm = '1cm'
}

/**
 * Response object containing Brand Metrics for the brands
 * @export
 * @interface BrandMetricsGetResponse
 */
export interface BrandMetricsGetResponse {
    /**
     * Token  to fetch additional results (if any). Subsequent calls must be made with same  parameters as in the previous requests.
     * @type {string}
     * @memberof BrandMetricsGetResponse
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<BrandMetricsGetResponseBrandBuildingMetrics>}
     * @memberof BrandMetricsGetResponse
     */
    brandBuildingMetrics?: Array<BrandMetricsGetResponseBrandBuildingMetrics>;
}
/**
 * 
 * @export
 * @interface BrandMetricsGetResponseAbiMetrics
 */
export interface BrandMetricsGetResponseAbiMetrics {
    /**
     * Consideration Index measures actual on-Amazon audience signals reflecting consideration for your brand in the short and long term, across the whole on-Amazon audience. The percentile lets you know how the consideration activity for your brand compares to that of your peers.
     * @type {number}
     * @memberof BrandMetricsGetResponseAbiMetrics
     */
    considerationIndex?: number;
    /**
     * Sales Index represents actual on-Amazon sales in the short term and long term, across the whole on-Amazon audience. The percentile lets you know how your sales compare to that of your peers
     * @type {number}
     * @memberof BrandMetricsGetResponseAbiMetrics
     */
    salesIndex?: number;
    /**
     * Awareness Index measures actual on-Amazon audience signals reflecting awareness for your brand in the short and long term, across the whole on-Amazon audience. The percentile lets you know how the awareness activity for your brand compares to that of your peers.
     * @type {number}
     * @memberof BrandMetricsGetResponseAbiMetrics
     */
    awarenessIndex?: number;
}
/**
 * 
 * @export
 * @interface BrandMetricsGetResponseBrandBuildingMetrics
 */
export interface BrandMetricsGetResponseBrandBuildingMetrics {
    /**
     * 
     * @type {BrandMetricsGetResponseMetadata}
     * @memberof BrandMetricsGetResponseBrandBuildingMetrics
     */
    metadata?: BrandMetricsGetResponseMetadata;
    /**
     * 
     * @type {BrandMetricsGetResponseReturnOnEngagementValue}
     * @memberof BrandMetricsGetResponseBrandBuildingMetrics
     */
    ReturnOnEngagementValue?: BrandMetricsGetResponseReturnOnEngagementValue;
    /**
     * 
     * @type {BrandMetricsGetResponseAbiMetrics}
     * @memberof BrandMetricsGetResponseBrandBuildingMetrics
     */
    abiMetrics?: BrandMetricsGetResponseAbiMetrics;
    /**
     * 
     * @type {BrandMetricsGetResponseEngagedShopperRate}
     * @memberof BrandMetricsGetResponseBrandBuildingMetrics
     */
    engagedShopperRate?: BrandMetricsGetResponseEngagedShopperRate;
    /**
     * 
     * @type {BrandMetricsGetResponseShoppers}
     * @memberof BrandMetricsGetResponseBrandBuildingMetrics
     */
    shoppers?: BrandMetricsGetResponseShoppers;
    /**
     * 
     * @type {BrandMetricsGetResponseCustomerConversionRate}
     * @memberof BrandMetricsGetResponseBrandBuildingMetrics
     */
    customerConversionRate?: BrandMetricsGetResponseCustomerConversionRate;
    /**
     * 
     * @type {BrandMetricsGetResponseNewToBrandCustomerRate}
     * @memberof BrandMetricsGetResponseBrandBuildingMetrics
     */
    newToBrandCustomerRate?: BrandMetricsGetResponseNewToBrandCustomerRate;
}
/**
 * 
 * @export
 * @interface BrandMetricsGetResponseCustomerConversionRate
 */
export interface BrandMetricsGetResponseCustomerConversionRate {
    /**
     * Percentage of shoppers moving from \"considering\" [Brand Name] in the [categoryNodePath] to \"purchased\" in the [lookBackPeriod]
     * @type {number}
     * @memberof BrandMetricsGetResponseCustomerConversionRate
     */
    thisBrand?: number;
    /**
     * Percentage of shoppers moving from \"considering\" the average of the top 95th-99th percent of peers in the [categoryNodePath] to \"purchased\" in the l[lookBackPeriod]
     * @type {number}
     * @memberof BrandMetricsGetResponseCustomerConversionRate
     */
    topPerformers?: number;
    /**
     * Percentage of shoppers moving from \"considering\" the peer median in the [categoryNodePath] to \"purchased\" in the [lookBackPeriod]
     * @type {number}
     * @memberof BrandMetricsGetResponseCustomerConversionRate
     */
    peerMedian?: number;
}
/**
 * 
 * @export
 * @interface BrandMetricsGetResponseEngagedShopperRate
 */
export interface BrandMetricsGetResponseEngagedShopperRate {
    /**
     * 
     * @type {BrandMetricsGetResponseEngagedShopperRateThisBrand}
     * @memberof BrandMetricsGetResponseEngagedShopperRate
     */
    thisBrand?: BrandMetricsGetResponseEngagedShopperRateThisBrand;
    /**
     * 
     * @type {BrandMetricsGetResponseEngagedShopperRateTopPerformers}
     * @memberof BrandMetricsGetResponseEngagedShopperRate
     */
    topPerformers?: BrandMetricsGetResponseEngagedShopperRateTopPerformers;
    /**
     * 
     * @type {BrandMetricsGetResponseEngagedShopperRatePeerMedian}
     * @memberof BrandMetricsGetResponseEngagedShopperRate
     */
    peerMedian?: BrandMetricsGetResponseEngagedShopperRatePeerMedian;
}
/**
 * Percentage of unique shoppers in a category that your brand has driven an engagement with or purchase from in the last month divided by the total unique shoppers with 1+ detail page view in the selected category for the median peers
 * @export
 * @interface BrandMetricsGetResponseEngagedShopperRatePeerMedian
 */
export interface BrandMetricsGetResponseEngagedShopperRatePeerMedian {
    /**
     * 
     * @type {any}
     * @memberof BrandMetricsGetResponseEngagedShopperRatePeerMedian
     */
    upperBound?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BrandMetricsGetResponseEngagedShopperRatePeerMedian
     */
    lowerBound?: any | null;
}
/**
 * Percentage of unique shoppers in a category that your brand has driven an engagement with or purchase from in the last month divided by the total unique shoppers with 1+ detail page view in the selected category
 * @export
 * @interface BrandMetricsGetResponseEngagedShopperRateThisBrand
 */
export interface BrandMetricsGetResponseEngagedShopperRateThisBrand {
    /**
     * 
     * @type {any}
     * @memberof BrandMetricsGetResponseEngagedShopperRateThisBrand
     */
    upperBound?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BrandMetricsGetResponseEngagedShopperRateThisBrand
     */
    lowerBound?: any | null;
}
/**
 * Percentage of unique shoppers in a category that your brand has driven an engagement with or purchase from in the last month divided by the total unique shoppers with 1+ detail page view in the selected category for the top 95th-99th percent of peers
 * @export
 * @interface BrandMetricsGetResponseEngagedShopperRateTopPerformers
 */
export interface BrandMetricsGetResponseEngagedShopperRateTopPerformers {
    /**
     * 
     * @type {any}
     * @memberof BrandMetricsGetResponseEngagedShopperRateTopPerformers
     */
    upperBound?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BrandMetricsGetResponseEngagedShopperRateTopPerformers
     */
    lowerBound?: any | null;
}
/**
 * 
 * @export
 * @interface BrandMetricsGetResponseMetadata
 */
export interface BrandMetricsGetResponseMetadata {
    /**
     * 
     * @type {Array<string>}
     * @memberof BrandMetricsGetResponseMetadata
     */
    categoryNodePath?: Array<string>;
    /**
     * The node at the top of a browse tree. It is the start node of a tree
     * @type {string}
     * @memberof BrandMetricsGetResponseMetadata
     */
    categoryNodeTreeName?: string;
    /**
     * Brand Name
     * @type {string}
     * @memberof BrandMetricsGetResponseMetadata
     */
    brandName?: string;
    /**
     * Category Node ID represents the catalog node that can be used in product targeting with categories
     * @type {string}
     * @memberof BrandMetricsGetResponseMetadata
     */
    categoryNodeId?: string;
    /**
     * Brand Id from BrandAid
     * @type {string}
     * @memberof BrandMetricsGetResponseMetadata
     */
    brandId?: string;
    /**
     * List of available dates on which the metrics were calculated.
     * @type {string}
     * @memberof BrandMetricsGetResponseMetadata
     */
    metricsComputationDate?: string;
}
/**
 * 
 * @export
 * @interface BrandMetricsGetResponseNewToBrandCustomerRate
 */
export interface BrandMetricsGetResponseNewToBrandCustomerRate {
    /**
     * share of customers that had not purchased [Brand Name] products in the last 12 months, but did so in the [lookBackPeriod]
     * @type {number}
     * @memberof BrandMetricsGetResponseNewToBrandCustomerRate
     */
    thisBrand?: number;
    /**
     * share of customers that had not purchased average of the top 95th-99th percent of peers products in the last 12 months, but did so in the [lookBackPeriod]
     * @type {number}
     * @memberof BrandMetricsGetResponseNewToBrandCustomerRate
     */
    topPerformers?: number;
    /**
     * share of customers that had not purchased peer median products in the last 12 months, but did so in the [lookBackPeriod]
     * @type {number}
     * @memberof BrandMetricsGetResponseNewToBrandCustomerRate
     */
    peerMedian?: number;
}
/**
 * 
 * @export
 * @interface BrandMetricsGetResponseReturnOnEngagementValue
 */
export interface BrandMetricsGetResponseReturnOnEngagementValue {
    /**
     * 
     * @type {BrandMetricsReturnOnEngagementMetrics}
     * @memberof BrandMetricsGetResponseReturnOnEngagementValue
     */
    thisBrand?: BrandMetricsReturnOnEngagementMetrics;
    /**
     * 
     * @type {BrandMetricsReturnOnEngagementMetrics}
     * @memberof BrandMetricsGetResponseReturnOnEngagementValue
     */
    topPerformers?: BrandMetricsReturnOnEngagementMetrics;
    /**
     * 
     * @type {BrandMetricsReturnOnEngagementMetrics}
     * @memberof BrandMetricsGetResponseReturnOnEngagementValue
     */
    peerMedian?: BrandMetricsReturnOnEngagementMetrics;
}
/**
 * 
 * @export
 * @interface BrandMetricsGetResponseShoppers
 */
export interface BrandMetricsGetResponseShoppers {
    /**
     * 
     * @type {BrandMetricsShoppersMetrics}
     * @memberof BrandMetricsGetResponseShoppers
     */
    thisBrand?: BrandMetricsShoppersMetrics;
    /**
     * 
     * @type {BrandMetricsShoppersMetrics}
     * @memberof BrandMetricsGetResponseShoppers
     */
    topPerformers?: BrandMetricsShoppersMetrics;
    /**
     * 
     * @type {BrandMetricsShoppersMetrics}
     * @memberof BrandMetricsGetResponseShoppers
     */
    peerMedian?: BrandMetricsShoppersMetrics;
}
/**
 * Response object containing brand metrics for the overview page
 * @export
 * @interface BrandMetricsOverviewResponse
 */
export interface BrandMetricsOverviewResponse {
    /**
     * Token  to fetch additional results (if any). Subsequent calls must be made with same  parameters as in the previous requests.
     * @type {string}
     * @memberof BrandMetricsOverviewResponse
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<BrandMetricsOverviewResponseOverviewMetrics>}
     * @memberof BrandMetricsOverviewResponse
     */
    overviewMetrics: Array<BrandMetricsOverviewResponseOverviewMetrics>;
}
/**
 * metrics for the overview page
 * @export
 * @interface BrandMetricsOverviewResponseMetrics
 */
export interface BrandMetricsOverviewResponseMetrics {
    /**
     * Lower bound on the Percentage of unique shoppers in a category that your brand has driven an engagement with or purchase from int the selected time frame divided by the total unique shoppers with 1+ detail page view in the selected category
     * @type {number}
     * @memberof BrandMetricsOverviewResponseMetrics
     */
    engagedShopperRateLowerBound?: number;
    /**
     * Upper bound on the Percentage of unique shoppers in a category that your brand has driven an engagement with or purchase from int the selected time frame divided by the total unique shoppers with 1+ detail page view in the selected category
     * @type {number}
     * @memberof BrandMetricsOverviewResponseMetrics
     */
    engagedShopperRateUpperBound?: number;
    /**
     * Percentage of shoppers moving from \\\"considering\\\" [Brand Name] in the [categoryNodePath] to \\\"purchased\\\" in the [lookBackPeriod]
     * @type {number}
     * @memberof BrandMetricsOverviewResponseMetrics
     */
    customerConversionRate?: number;
    /**
     * Total number of shoppers that interacted with the brand in the given lookback period.
     * @type {number}
     * @memberof BrandMetricsOverviewResponseMetrics
     */
    totalShoppers?: number;
    /**
     * share of customers that had not purchased [Brand Name] products in the last 12 months, but did so in the [lookBackPeriod]
     * @type {number}
     * @memberof BrandMetricsOverviewResponseMetrics
     */
    newToBrandCustomerRate?: number;
}
/**
 * 
 * @export
 * @interface BrandMetricsOverviewResponseOverviewMetadata
 */
export interface BrandMetricsOverviewResponseOverviewMetadata {
    /**
     * 
     * @type {Array<string>}
     * @memberof BrandMetricsOverviewResponseOverviewMetadata
     */
    categoryNodePath?: Array<string>;
    /**
     * The node at the top of a browse tree. It is the start node of a tree
     * @type {string}
     * @memberof BrandMetricsOverviewResponseOverviewMetadata
     */
    categoryNodeTreeName?: string;
    /**
     * Category Node ID represents the catalog node that can be used in product targeting with categories
     * @type {string}
     * @memberof BrandMetricsOverviewResponseOverviewMetadata
     */
    categoryNodeId?: string;
}
/**
 * 
 * @export
 * @interface BrandMetricsOverviewResponseOverviewMetrics
 */
export interface BrandMetricsOverviewResponseOverviewMetrics {
    /**
     * 
     * @type {BrandMetricsOverviewResponseOverviewMetadata}
     * @memberof BrandMetricsOverviewResponseOverviewMetrics
     */
    overviewMetadata?: BrandMetricsOverviewResponseOverviewMetadata;
    /**
     * 
     * @type {BrandMetricsOverviewResponseMetrics}
     * @memberof BrandMetricsOverviewResponseOverviewMetrics
     */
    metrics?: BrandMetricsOverviewResponseMetrics;
}
/**
 * Response object containing Historical Sales Value Metrics for the brands
 * @export
 * @interface BrandMetricsReturnOnEngagementMetrics
 */
export interface BrandMetricsReturnOnEngagementMetrics {
    /**
     * 
     * @type {BrandMetricsCurrencyAmount}
     * @memberof BrandMetricsReturnOnEngagementMetrics
     */
    viewedDetailPageOnly?: BrandMetricsCurrencyAmount;
    /**
     * 
     * @type {BrandMetricsCurrencyAmount}
     * @memberof BrandMetricsReturnOnEngagementMetrics
     */
    highValueCustomers?: BrandMetricsCurrencyAmount;
    /**
     * 
     * @type {BrandMetricsCurrencyAmount}
     * @memberof BrandMetricsReturnOnEngagementMetrics
     */
    brandCustomers?: BrandMetricsCurrencyAmount;
    /**
     * 
     * @type {BrandMetricsCurrencyAmount}
     * @memberof BrandMetricsReturnOnEngagementMetrics
     */
    brandedSearchesAndDetailPageViews?: BrandMetricsCurrencyAmount;
    /**
     * 
     * @type {BrandMetricsCurrencyAmount}
     * @memberof BrandMetricsReturnOnEngagementMetrics
     */
    totalBrandPurchasers?: BrandMetricsCurrencyAmount;
    /**
     * 
     * @type {BrandMetricsCurrencyAmount}
     * @memberof BrandMetricsReturnOnEngagementMetrics
     */
    addToCarts?: BrandMetricsCurrencyAmount;
}
/**
 * Response object containing Shopper Metrics for the brands
 * @export
 * @interface BrandMetricsShoppersMetrics
 */
export interface BrandMetricsShoppersMetrics {
    /**
     * Detail page views only
     * @type {number}
     * @memberof BrandMetricsShoppersMetrics
     */
    viewedDetailPageOnly?: number;
    /**
     * Searches which include the brand name or close variant
     * @type {number}
     * @memberof BrandMetricsShoppersMetrics
     */
    brandedSearchesOnly?: number;
    /**
     * High value purchasers who are subscribe and saved or in the top 10% of sales drivers
     * @type {number}
     * @memberof BrandMetricsShoppersMetrics
     */
    highValueCustomers?: number;
    /**
     * 0%-90% of sales contributing shoppers
     * @type {number}
     * @memberof BrandMetricsShoppersMetrics
     */
    brandCustomers?: number;
    /**
     * Users who searched for the brand, then visted at least one detail page in the selected category
     * @type {number}
     * @memberof BrandMetricsShoppersMetrics
     */
    brandedSearchesAndDetailPageViews?: number;
    /**
     * total number of customers that purchased from the brand
     * @type {number}
     * @memberof BrandMetricsShoppersMetrics
     */
    totalBrandPurchasers?: number;
    /**
     * Number of shoppers who have added an ASIN in the selected category to their cart but not purchased
     * @type {number}
     * @memberof BrandMetricsShoppersMetrics
     */
    addToCarts?: number;
}

/**
 * ReportApi - axios parameter creator
 * @export
 */
export const ReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generates the Brand Metrics report in CSV or JSON format. Customize the report by passing a specific categoryNodeTreeName, categoryNodePath, brandName, reportStartDate, reportEndDate, lookbackPeriod, format or a list of metrics from the available metrics in the metrics field. If an empty request body is passed, report for the latest available report date in JSON format will get generated with all the available brands and metrics for an advertiser. The report may or may not contain the Brand Metrics data for one or more brands depending on data availability.  **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
         * @summary Generate Brand Metrics Report. Each response record will include the following dimensional fields (in addition to the requested metrics) brand Namecategory, TreeNamecategory, HierarchylookbackPeriod, metricsComputationDate 
         * @param {string} amazonAdvertisingAPIScope The profile Id, for example, 195213312458027.
         * @param {string} amazonAdvertisingAPIClientID The client Id, for example, amzn1.application-oa2-client.8baa9caa3eac48eab89780e73ce03b19.
         * @param {BrandMetricsGenerateReportRequest} [brandMetricsGenerateReportRequest] Create request body to generate the Brand Metrics Report
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateBrandMetricsReport: async (amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientID: string, brandMetricsGenerateReportRequest?: BrandMetricsGenerateReportRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('generateBrandMetricsReport', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'amazonAdvertisingAPIClientID' is not null or undefined
            assertParamExists('generateBrandMetricsReport', 'amazonAdvertisingAPIClientID', amazonAdvertisingAPIClientID)
            const localVarPath = `/insights/brandMetrics/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }

            if (amazonAdvertisingAPIClientID !== undefined && amazonAdvertisingAPIClientID !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientID'] = String(amazonAdvertisingAPIClientID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.insightsBrandMetrics.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(brandMetricsGenerateReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the location and status of the report for the brands for which the metrics are available. The URL to the report is only available when the status of the report is SUCCESSFUL  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Retrieve the status and the URL of the Brand Metrics Report being generated
         * @param {string} reportId The report Id to be fetched
         * @param {string} amazonAdvertisingAPIScope The profile Id, for example, 195213312458027.
         * @param {string} amazonAdvertisingAPIClientID The client Id, for example, amzn1.application-oa2-client.8baa9caa3eac48eab89780e73ce03b19.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandMetricsReport: async (reportId: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientID: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('getBrandMetricsReport', 'reportId', reportId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getBrandMetricsReport', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'amazonAdvertisingAPIClientID' is not null or undefined
            assertParamExists('getBrandMetricsReport', 'amazonAdvertisingAPIClientID', amazonAdvertisingAPIClientID)
            const localVarPath = `/insights/brandMetrics/report/{reportId}`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }

            if (amazonAdvertisingAPIClientID !== undefined && amazonAdvertisingAPIClientID !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientID'] = String(amazonAdvertisingAPIClientID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportApi - functional programming interface
 * @export
 */
export const ReportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportApiAxiosParamCreator(configuration)
    return {
        /**
         * Generates the Brand Metrics report in CSV or JSON format. Customize the report by passing a specific categoryNodeTreeName, categoryNodePath, brandName, reportStartDate, reportEndDate, lookbackPeriod, format or a list of metrics from the available metrics in the metrics field. If an empty request body is passed, report for the latest available report date in JSON format will get generated with all the available brands and metrics for an advertiser. The report may or may not contain the Brand Metrics data for one or more brands depending on data availability.  **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
         * @summary Generate Brand Metrics Report. Each response record will include the following dimensional fields (in addition to the requested metrics) brand Namecategory, TreeNamecategory, HierarchylookbackPeriod, metricsComputationDate 
         * @param {string} amazonAdvertisingAPIScope The profile Id, for example, 195213312458027.
         * @param {string} amazonAdvertisingAPIClientID The client Id, for example, amzn1.application-oa2-client.8baa9caa3eac48eab89780e73ce03b19.
         * @param {BrandMetricsGenerateReportRequest} [brandMetricsGenerateReportRequest] Create request body to generate the Brand Metrics Report
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateBrandMetricsReport(amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientID: string, brandMetricsGenerateReportRequest?: BrandMetricsGenerateReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandMetricsGenerateReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateBrandMetricsReport(amazonAdvertisingAPIScope, amazonAdvertisingAPIClientID, brandMetricsGenerateReportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch the location and status of the report for the brands for which the metrics are available. The URL to the report is only available when the status of the report is SUCCESSFUL  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Retrieve the status and the URL of the Brand Metrics Report being generated
         * @param {string} reportId The report Id to be fetched
         * @param {string} amazonAdvertisingAPIScope The profile Id, for example, 195213312458027.
         * @param {string} amazonAdvertisingAPIClientID The client Id, for example, amzn1.application-oa2-client.8baa9caa3eac48eab89780e73ce03b19.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrandMetricsReport(reportId: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientID: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandMetricsGetReportByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrandMetricsReport(reportId, amazonAdvertisingAPIScope, amazonAdvertisingAPIClientID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportApi - factory interface
 * @export
 */
export const ReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportApiFp(configuration)
    return {
        /**
         * Generates the Brand Metrics report in CSV or JSON format. Customize the report by passing a specific categoryNodeTreeName, categoryNodePath, brandName, reportStartDate, reportEndDate, lookbackPeriod, format or a list of metrics from the available metrics in the metrics field. If an empty request body is passed, report for the latest available report date in JSON format will get generated with all the available brands and metrics for an advertiser. The report may or may not contain the Brand Metrics data for one or more brands depending on data availability.  **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
         * @summary Generate Brand Metrics Report. Each response record will include the following dimensional fields (in addition to the requested metrics) brand Namecategory, TreeNamecategory, HierarchylookbackPeriod, metricsComputationDate 
         * @param {string} amazonAdvertisingAPIScope The profile Id, for example, 195213312458027.
         * @param {string} amazonAdvertisingAPIClientID The client Id, for example, amzn1.application-oa2-client.8baa9caa3eac48eab89780e73ce03b19.
         * @param {BrandMetricsGenerateReportRequest} [brandMetricsGenerateReportRequest] Create request body to generate the Brand Metrics Report
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateBrandMetricsReport(amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientID: string, brandMetricsGenerateReportRequest?: BrandMetricsGenerateReportRequest, options?: any): AxiosPromise<BrandMetricsGenerateReportResponse> {
            return localVarFp.generateBrandMetricsReport(amazonAdvertisingAPIScope, amazonAdvertisingAPIClientID, brandMetricsGenerateReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the location and status of the report for the brands for which the metrics are available. The URL to the report is only available when the status of the report is SUCCESSFUL  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Retrieve the status and the URL of the Brand Metrics Report being generated
         * @param {string} reportId The report Id to be fetched
         * @param {string} amazonAdvertisingAPIScope The profile Id, for example, 195213312458027.
         * @param {string} amazonAdvertisingAPIClientID The client Id, for example, amzn1.application-oa2-client.8baa9caa3eac48eab89780e73ce03b19.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandMetricsReport(reportId: string, amazonAdvertisingAPIScope: string, amazonAdvertisingAPIClientID: string, options?: any): AxiosPromise<BrandMetricsGetReportByIdResponse> {
            return localVarFp.getBrandMetricsReport(reportId, amazonAdvertisingAPIScope, amazonAdvertisingAPIClientID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateBrandMetricsReport operation in ReportApi.
 * @export
 * @interface ReportApiGenerateBrandMetricsReportRequest
 */
export interface ReportApiGenerateBrandMetricsReportRequest {
    /**
     * The profile Id, for example, 195213312458027.
     * @type {string}
     * @memberof ReportApiGenerateBrandMetricsReport
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The client Id, for example, amzn1.application-oa2-client.8baa9caa3eac48eab89780e73ce03b19.
     * @type {string}
     * @memberof ReportApiGenerateBrandMetricsReport
     */
    readonly amazonAdvertisingAPIClientID: string

    /**
     * Create request body to generate the Brand Metrics Report
     * @type {BrandMetricsGenerateReportRequest}
     * @memberof ReportApiGenerateBrandMetricsReport
     */
    readonly brandMetricsGenerateReportRequest?: BrandMetricsGenerateReportRequest
}

/**
 * Request parameters for getBrandMetricsReport operation in ReportApi.
 * @export
 * @interface ReportApiGetBrandMetricsReportRequest
 */
export interface ReportApiGetBrandMetricsReportRequest {
    /**
     * The report Id to be fetched
     * @type {string}
     * @memberof ReportApiGetBrandMetricsReport
     */
    readonly reportId: string

    /**
     * The profile Id, for example, 195213312458027.
     * @type {string}
     * @memberof ReportApiGetBrandMetricsReport
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The client Id, for example, amzn1.application-oa2-client.8baa9caa3eac48eab89780e73ce03b19.
     * @type {string}
     * @memberof ReportApiGetBrandMetricsReport
     */
    readonly amazonAdvertisingAPIClientID: string
}

/**
 * ReportApi - object-oriented interface
 * @export
 * @class ReportApi
 * @extends {BaseAPI}
 */
export class ReportApi extends BaseAPI {
    /**
     * Generates the Brand Metrics report in CSV or JSON format. Customize the report by passing a specific categoryNodeTreeName, categoryNodePath, brandName, reportStartDate, reportEndDate, lookbackPeriod, format or a list of metrics from the available metrics in the metrics field. If an empty request body is passed, report for the latest available report date in JSON format will get generated with all the available brands and metrics for an advertiser. The report may or may not contain the Brand Metrics data for one or more brands depending on data availability.  **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
     * @summary Generate Brand Metrics Report. Each response record will include the following dimensional fields (in addition to the requested metrics) brand Namecategory, TreeNamecategory, HierarchylookbackPeriod, metricsComputationDate 
     * @param {ReportApiGenerateBrandMetricsReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public generateBrandMetricsReport(requestParameters: ReportApiGenerateBrandMetricsReportRequest, options?: any) {
        return ReportApiFp(this.configuration).generateBrandMetricsReport(requestParameters.amazonAdvertisingAPIScope, requestParameters.amazonAdvertisingAPIClientID, requestParameters.brandMetricsGenerateReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch the location and status of the report for the brands for which the metrics are available. The URL to the report is only available when the status of the report is SUCCESSFUL  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @summary Retrieve the status and the URL of the Brand Metrics Report being generated
     * @param {ReportApiGetBrandMetricsReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public getBrandMetricsReport(requestParameters: ReportApiGetBrandMetricsReportRequest, options?: any) {
        return ReportApiFp(this.configuration).getBrandMetricsReport(requestParameters.reportId, requestParameters.amazonAdvertisingAPIScope, requestParameters.amazonAdvertisingAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }
}


