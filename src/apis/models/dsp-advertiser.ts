/* tslint:disable */
/* eslint-disable */
/**
 * Amazon Ads API for DSP
 * Retrieve information of DSP advertisers.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { createRequestFunction } from "../../helpers";

/**
 * The DSP Advertiser object
 * @export
 * @interface DspAdvertiserV1
 */
export interface DspAdvertiserV1 {
    /**
     * The advertiser identifier.
     * @type {string}
     * @memberof DspAdvertiserV1
     */
    advertiserId?: string;
    /**
     * The advertiser name.
     * @type {string}
     * @memberof DspAdvertiserV1
     */
    name?: string;
    /**
     * 
     * @type {DspSupportedCurrencyV1}
     * @memberof DspAdvertiserV1
     */
    currency?: DspSupportedCurrencyV1;
    /**
     * The URL of the advertiserâ€™s website.
     * @type {string}
     * @memberof DspAdvertiserV1
     */
    url?: string;
    /**
     * 
     * @type {DspCountryV1}
     * @memberof DspAdvertiserV1
     */
    country?: DspCountryV1;
    /**
     * The advertiser timezone. - America/Anchorage - America/Caracas - America/Chicago - America/Denver - America/Halifax - America/Los_Angeles - America/New_York - America/Sao_Paulo - America/St_Johns - Asia/Almaty - Asia/Baghdad - Asia/Bangkok - Asia/Hong_Kong - Asia/Kabul - Asia/Kathmandu - Asia/Kolkata - Asia/Magadan - Asia/Shanghai - Asia/Tehran - Asia/Tokyo - Asia/Yekaterinburg - Asia/Yerevan - Atlantic/Azores - Atlantic/South_Georgia - Australia/Brisbane - Australia/Darwin - Europe/London - Europe/Paris - Indian/Cocos - Pacific/Fiji - Pacific/Honolulu - Pacific/Kwajalein - Pacific/Midway 
     * @type {string}
     * @memberof DspAdvertiserV1
     */
    timezone?: string;
}
/**
 * List of advertisers along with total number of advertisers which satisfy the filtering criteria.
 * @export
 * @interface DspAdvertisersV1
 */
export interface DspAdvertisersV1 {
    /**
     * Total number of advertisers which satisfy the filtering criteria. This number is given to support pagination and tell the client if there are more advertisers to be fetched.
     * @type {number}
     * @memberof DspAdvertisersV1
     */
    totalResults?: number;
    /**
     * List of advertisers with complete information.
     * @type {Array<DspAdvertiserV1>}
     * @memberof DspAdvertisersV1
     */
    response?: Array<DspAdvertiserV1>;
}
/**
 * The country code.
 * @export
 * @enum {string}
 */

export enum DspCountryV1 {
    Us = 'US',
    Ca = 'CA',
    Mx = 'MX',
    Br = 'BR',
    Gb = 'GB',
    De = 'DE',
    Fr = 'FR',
    It = 'IT',
    Es = 'ES',
    At = 'AT',
    In = 'IN',
    Cn = 'CN',
    Jp = 'JP'
}

/**
 * Error response object.
 * @export
 * @interface DspErrorV1
 */
export interface DspErrorV1 {
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof DspErrorV1
     */
    message: string;
    /**
     * A value will be used to identify your request uniquely.
     * @type {string}
     * @memberof DspErrorV1
     */
    requestId?: string;
    /**
     * List of errors. Useful in case of validation errors
     * @type {Array<DspSubErrorV1>}
     * @memberof DspErrorV1
     */
    errors?: Array<DspSubErrorV1>;
}
/**
 * Error Object
 * @export
 * @interface DspSubErrorV1
 */
export interface DspSubErrorV1 {
    /**
     * Enumerated error type.
     * @type {string}
     * @memberof DspSubErrorV1
     */
    errorType: string;
    /**
     * Request body field which is cause of the error.
     * @type {string}
     * @memberof DspSubErrorV1
     */
    field?: string;
    /**
     * Detailed error description
     * @type {string}
     * @memberof DspSubErrorV1
     */
    message: string;
}
/**
 * The supported currencies.
 * @export
 * @enum {string}
 */

export enum DspSupportedCurrencyV1 {
    Usd = 'USD',
    Cad = 'CAD',
    Jpy = 'JPY',
    Gbp = 'GBP',
    Eur = 'EUR',
    Inr = 'INR',
    Cny = 'CNY',
    Mxn = 'MXN',
    Brl = 'BRL'
}


/**
 * AdvertiserApi - axios parameter creator
 * @export
 */
export const AdvertiserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns advertiser information based on given advertiser id.
         * @param {string} amazonAdvertisingAPIClientId The client identifier of the customer making the request.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} advertiserId Unique id to identify advertiser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dspAdvertisersAdvertiserIdGet: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, advertiserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('dspAdvertisersAdvertiserIdGet', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('dspAdvertisersAdvertiserIdGet', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('dspAdvertisersAdvertiserIdGet', 'advertiserId', advertiserId)
            const localVarPath = `/dsp/advertisers/{advertiserId}`
                .replace(`{${"advertiserId"}}`, encodeURIComponent(String(advertiserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of advertisers with information which satisfy the filtering criteria.
         * @param {string} amazonAdvertisingAPIClientId The client identifier of the customer making the request.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {number} [startIndex] Sets a cursor into the requested set of advertisers. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Sets the number of advertisers to be returned in a single call. Maximum of 100 advertisers per call.
         * @param {string} [advertiserIdFilter] List of comma separated advertiser ids to filter the advertisers. If no advertiser ids provided, all advertisers in this entity will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dspAdvertisersGet: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, advertiserIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('dspAdvertisersGet', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('dspAdvertisersGet', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/advertisers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (advertiserIdFilter !== undefined) {
                localVarQueryParameter['advertiserIdFilter'] = advertiserIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdvertiserApi - functional programming interface
 * @export
 */
export const AdvertiserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdvertiserApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns advertiser information based on given advertiser id.
         * @param {string} amazonAdvertisingAPIClientId The client identifier of the customer making the request.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} advertiserId Unique id to identify advertiser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dspAdvertisersAdvertiserIdGet(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, advertiserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DspAdvertiserV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dspAdvertisersAdvertiserIdGet(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, advertiserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of advertisers with information which satisfy the filtering criteria.
         * @param {string} amazonAdvertisingAPIClientId The client identifier of the customer making the request.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {number} [startIndex] Sets a cursor into the requested set of advertisers. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Sets the number of advertisers to be returned in a single call. Maximum of 100 advertisers per call.
         * @param {string} [advertiserIdFilter] List of comma separated advertiser ids to filter the advertisers. If no advertiser ids provided, all advertisers in this entity will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dspAdvertisersGet(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, advertiserIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DspAdvertisersV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dspAdvertisersGet(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, advertiserIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdvertiserApi - factory interface
 * @export
 */
export const AdvertiserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdvertiserApiFp(configuration)
    return {
        /**
         * Returns advertiser information based on given advertiser id.
         * @param {string} amazonAdvertisingAPIClientId The client identifier of the customer making the request.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} advertiserId Unique id to identify advertiser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dspAdvertisersAdvertiserIdGet(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, advertiserId: string, options?: any): AxiosPromise<DspAdvertiserV1> {
            return localVarFp.dspAdvertisersAdvertiserIdGet(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, advertiserId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of advertisers with information which satisfy the filtering criteria.
         * @param {string} amazonAdvertisingAPIClientId The client identifier of the customer making the request.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {number} [startIndex] Sets a cursor into the requested set of advertisers. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Sets the number of advertisers to be returned in a single call. Maximum of 100 advertisers per call.
         * @param {string} [advertiserIdFilter] List of comma separated advertiser ids to filter the advertisers. If no advertiser ids provided, all advertisers in this entity will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dspAdvertisersGet(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, advertiserIdFilter?: string, options?: any): AxiosPromise<DspAdvertisersV1> {
            return localVarFp.dspAdvertisersGet(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, advertiserIdFilter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for dspAdvertisersAdvertiserIdGet operation in AdvertiserApi.
 * @export
 * @interface AdvertiserApiDspAdvertisersAdvertiserIdGetRequest
 */
export interface AdvertiserApiDspAdvertisersAdvertiserIdGetRequest {
    /**
     * The client identifier of the customer making the request.
     * @type {string}
     * @memberof AdvertiserApiDspAdvertisersAdvertiserIdGet
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof AdvertiserApiDspAdvertisersAdvertiserIdGet
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Unique id to identify advertiser
     * @type {string}
     * @memberof AdvertiserApiDspAdvertisersAdvertiserIdGet
     */
    readonly advertiserId: string
}

/**
 * Request parameters for dspAdvertisersGet operation in AdvertiserApi.
 * @export
 * @interface AdvertiserApiDspAdvertisersGetRequest
 */
export interface AdvertiserApiDspAdvertisersGetRequest {
    /**
     * The client identifier of the customer making the request.
     * @type {string}
     * @memberof AdvertiserApiDspAdvertisersGet
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use GET method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof AdvertiserApiDspAdvertisersGet
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Sets a cursor into the requested set of advertisers. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof AdvertiserApiDspAdvertisersGet
     */
    readonly startIndex?: number

    /**
     * Sets the number of advertisers to be returned in a single call. Maximum of 100 advertisers per call.
     * @type {number}
     * @memberof AdvertiserApiDspAdvertisersGet
     */
    readonly count?: number

    /**
     * List of comma separated advertiser ids to filter the advertisers. If no advertiser ids provided, all advertisers in this entity will be returned.
     * @type {string}
     * @memberof AdvertiserApiDspAdvertisersGet
     */
    readonly advertiserIdFilter?: string
}

/**
 * AdvertiserApi - object-oriented interface
 * @export
 * @class AdvertiserApi
 * @extends {BaseAPI}
 */
export class AdvertiserApi extends BaseAPI {
    /**
     * Returns advertiser information based on given advertiser id.
     * @param {AdvertiserApiDspAdvertisersAdvertiserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertiserApi
     */
    public dspAdvertisersAdvertiserIdGet(requestParameters: AdvertiserApiDspAdvertisersAdvertiserIdGetRequest, options?: any) {
        return AdvertiserApiFp(this.configuration).dspAdvertisersAdvertiserIdGet(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.advertiserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of advertisers with information which satisfy the filtering criteria.
     * @param {AdvertiserApiDspAdvertisersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertiserApi
     */
    public dspAdvertisersGet(requestParameters: AdvertiserApiDspAdvertisersGetRequest, options?: any) {
        return AdvertiserApiFp(this.configuration).dspAdvertisersGet(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.advertiserIdFilter, options).then((request) => request(this.axios, this.basePath));
    }
}


