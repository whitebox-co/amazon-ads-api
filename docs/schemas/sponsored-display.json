{
  "openapi": "3.0.2",
  "info": {
    "title": "Amazon Ads API for Sponsored Display",
    "description": "This API enables programmatic access for campaign creation, management, and reporting for Sponsored Display campaigns. For more information on the functionality, see the [Sponsored Display Support Center](https://advertising.amazon.com/help#GTPPHE6RAWC2C4LZ). For API onboarding information, see the [account setup](https://advertising.amazon.com/API/docs/en-us/setting-up/account-setup) topic.<br/><br/>\n> This specification is available for download from the **[Advertising API developer portal](https://d3a0d0y2hgofx6.cloudfront.net/openapi/en-us/sponsored-display/3-0/openapi.yaml).**",
    "contact": {
      "name": "Amazon Ads API Support",
      "url": "https://amzn-clicks.atlassian.net/servicedesk/customer/portals"
    },
    "license": {
      "name": "Amazon Ads API License Agreement",
      "url": "https://advertising.amazon.com/API/docs/license_agreement"
    },
    "version": "3.0"
  },
  "servers": [
    {
      "url": "https://advertising-api.amazon.com",
      "description": "Production endpoint for North America, which includes US and CA Amazon marketplaces."
    },
    {
      "url": "https://advertising-api-eu.amazon.com",
      "description": "Production endpoint for Europe, which includes UK, FR, IT, ES, DE, plus IN Amazon marketplaces."
    },
    {
      "url": "https://advertising-api-fe.amazon.com",
      "description": "Production endpoint for Far East, which includes JP Amazon marketplaces."
    }
  ],
  "tags": [
    {
      "name": "Campaigns"
    },
    {
      "name": "Ad groups"
    },
    {
      "name": "Product ads"
    },
    {
      "name": "Targeting"
    },
    {
      "name": "Targeting Recommendations"
    },
    {
      "name": "Bid Recommendations"
    },
    {
      "name": "Negative targeting"
    },
    {
      "name": "Creatives"
    },
    {
      "name": "Brand Safety List [Open Beta]"
    },
    {
      "name": "Reports"
    },
    {
      "name": "Snapshots"
    },
    {
      "name": "Bid rules [Preview Only]"
    }
  ],
  "paths": {
    "/sd/campaigns": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Gets a list of campaigns.",
        "description": "Gets an array of Campaign objects for a requested set of Sponsored Display campaigns. Note that the Campaign object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.",
        "operationId": "listCampaigns",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten campaigns set `startIndex=0` and `count=10`. To return the next ten campaigns, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Optional. The returned array includes only campaign with the specified name using an exact string match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "portfolioIdFilter",
            "in": "query",
            "description": "Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Campaign"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Updates one or more campaigns.",
        "operationId": "updateCampaigns",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of Campaign objects. For each object, specify a campaign identifier and mutable fields with their updated values. The mutable fields are `name`, `state`, `budget`, `startDate`, and `endDate`. Maximum length of the array is 100 objects.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateCampaign"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Creates one or more campaigns.",
        "operationId": "createCampaigns",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of Campaign objects. For each object, specify required fields and their values. Required fields are `name`, `tactic`, `state`, `budget`, and `startDate`. Maximum length of the array is 100 objects.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateCampaign"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/campaigns/{campaignId}": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Gets a requested campaign.",
        "description": "Returns a Campaign object for a requested campaign. Note that the Campaign object is designed for performance, with a small set of commonly used campaign fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.",
        "operationId": "getCampaign",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "The identifier of the requested campaign.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Sets the campaign status to archived.",
        "description": "This operation is equivalent to an update operation that sets the status field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.",
        "operationId": "archiveCampaign",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "The identifier of the campaign.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/campaigns/extended": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Gets a list of campaigns with extended fields.",
        "description": "Gets an array of CampaignResponseEx objects for a set of requested campaigns.",
        "operationId": "listCampaignsEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten campaigns set `startIndex=0` and `count=10`. To return the next ten campaigns, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Optional. The returned array includes only campaign with the specified name using an exact string match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "portfolioIdFilter",
            "in": "query",
            "description": "Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignResponseEx"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/campaigns/extended/{campaignId}": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Gets extended information for a requested campaign.",
        "description": "Returns a CampaignResponseEx object for a requested campaign. The CampaignResponseEx includes the extended set of available fields.",
        "operationId": "getCampaignResponseEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "The identifier of the requested campaign.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResponseEx"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/adGroups": {
      "get": {
        "tags": [
          "Ad groups"
        ],
        "summary": "Gets a list of ad groups.",
        "description": "Gets an array of AdGroup objects for a requested set of Sponsored Display ad groups. Note that the AdGroup object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the ad group operations that return the AdGroupResponseEx object.",
        "operationId": "listAdGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Sets the number of AdGroup objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten ad groups set `startIndex=0` and `count=10`. To return the next ten ad groups, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only ad groups with state set to one of the values in the specified comma-delimited list.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the specified comma-delimited list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Optional. The returned array includes only ad groups with the specified name.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Ad groups"
        ],
        "summary": "Updates on or more ad groups.",
        "operationId": "updateAdGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of AdGroup objects. For each object, specify an ad group identifier and mutable fields with their updated values. The mutable fields are 'name', 'defaultBid', and 'state'. Maximum length of the array is 100 objects.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateAdGroup"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdGroupResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Ad groups"
        ],
        "summary": "Creates one or more ad groups.",
        "operationId": "createAdGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of AdGroup objects. For each object, specify required fields and their values. Required fields are `campaignId`, `name`, `state`, and `defaultBid`. Maximum length of the array is 100 objects.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateAdGroup"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdGroupResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/adGroups/{adGroupId}": {
      "get": {
        "tags": [
          "Ad groups"
        ],
        "summary": "Gets a requested ad group.",
        "description": "Returns an AdGroup object for a requested campaign. Note that the AdGroup object is designed for performance, with a small set of commonly used ad group fields to reduce size. If the extended set of fields is required, use the campaign operations that return the AdGroupResponseEx object.",
        "operationId": "getAdGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "adGroupId",
            "in": "path",
            "description": "The identifier of the requested ad group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdGroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Ad groups"
        ],
        "summary": "Sets the ad group status to archived.",
        "description": "This operation is equivalent to an update operation that sets the status field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.",
        "operationId": "archiveAdGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "adGroupId",
            "in": "path",
            "description": "The identifier of the requested ad group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/adGroups/extended": {
      "get": {
        "tags": [
          "Ad groups"
        ],
        "summary": "Gets a list of ad groups with extended fields.",
        "description": "Gets an array of AdGroupResponseEx objects for a set of requested ad groups.",
        "operationId": "listAdGroupsEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. Sets a cursor into the requested set of ad groups. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten campaigns set `startIndex=0` and `count=10`. To return the next ten campaigns, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only campaigns with state set to one of the values in the comma-delimited list.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the comma-delimited list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Optional. The returned array includes only ad groups with the specified name.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdGroupResponseEx"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/adGroups/extended/{adGroupId}": {
      "get": {
        "tags": [
          "Ad groups"
        ],
        "summary": "Gets extended information for a requested ad group.",
        "operationId": "getAdGroupResponseEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "adGroupId",
            "in": "path",
            "description": "The identifier of the requested ad group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdGroupResponseEx"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/productAds": {
      "get": {
        "tags": [
          "Product ads"
        ],
        "summary": "Gets a list of product ads.",
        "description": "Gets an array of ProductAd objects for a requested set of Sponsored Display product ads. Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operation that returns the ProductAdResponseEx object.",
        "operationId": "listProductAds",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Sets the number of ProductAd objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten product ad set `startIndex=0` and `count=10`. To return the next ten product ads, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only products ads associated with campaigns that have state set to one of the values in the comma-delimited list.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "adIdFilter",
            "in": "query",
            "description": "Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductAd"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Product ads"
        ],
        "summary": "Updates one or more product ads.",
        "operationId": "updateProductAds",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of ProductAd objects. For each object, specify a product ad identifier and the only mutable field, `state`. Maximum length of the array is 100 objects.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateProductAd"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductAdResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product ads"
        ],
        "summary": "Creates one or more product ads.",
        "operationId": "createProductAds",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of ProductAd objects. For each object, specify required fields and their values. Required fields are `adGroupId`, `SKU` (for sellers) or `ASIN` (for vendors), and `state`'. Maximum length of the array is 100 objects.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateProductAd"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductAdResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/productAds/{adId}": {
      "get": {
        "tags": [
          "Product ads"
        ],
        "summary": "Gets a requested product ad.",
        "description": "Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operations that returns the ProductAdResponseEx object.",
        "operationId": "getProductAd",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "adId",
            "in": "path",
            "description": "The identifier of the requested product ad.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductAd"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Product ads"
        ],
        "summary": "Sets the status of a sproduct ad to archived.",
        "description": "This operation is equivalent to an update operation that sets the status field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.",
        "operationId": "archiveProductAd",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "adId",
            "in": "path",
            "description": "The identifier of the produce ad.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductAdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/productAds/extended": {
      "get": {
        "tags": [
          "Product ads"
        ],
        "summary": "Gets a list of product ads with extended fields.",
        "description": "Gets an array of ProductAdResponseEx objects for a set of requested ad groups. The ProductAdResponseEx object includes the extended set of available fields.",
        "operationId": "listProductAdsEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Sets the number of ProduceAdEx objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten product ads set `startIndex=0` and `count=10`. To return the next ten campaigns, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "adIdFilter",
            "in": "query",
            "description": "Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductAdResponseEx"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/productAds/extended/{adId}": {
      "get": {
        "tags": [
          "Product ads"
        ],
        "summary": "Gets extended information for a product ad.",
        "operationId": "getProductAdResponseEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "adId",
            "in": "path",
            "description": "The identifier of the requested product ad.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductAdResponseEx"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/brandSafety/deny": {
      "get": {
        "tags": [
          "Brand Safety List [Open Beta]"
        ],
        "summary": "Gets a list of websites/apps that are on the advertiser's Brand Safety Deny List.",
        "description": "Gets an array of websites/apps that are on the advertiser's Brand Safety Deny List. It can take up to 15 minutes\nfrom the time a domain is added/deleted to the time it is reflected in the deny list.",
        "operationId": "listDomains",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "required": false,
            "description": "Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.\n",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "description": "Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex=0 and count=1000. To return the next 1000 domains, set startIndex=1000 and count=1000, and so on. Defaults to max page size(1000).\n",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandSafetyGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Brand Safety List [Open Beta]"
        ],
        "summary": "Creates one or more domains to add to a Brand Safety Deny List.\n",
        "description": "Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list.\n",
        "operationId": "createBrandSafetyDenyListDomains",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects.\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandSafetyPostRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Request has been accepted for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandSafetyUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Brand Safety List [Open Beta]"
        ],
        "summary": "Archives all of the domains in the Brand Safety Deny List.\n",
        "description": "Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is \"COMPLETED\", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted.\n",
        "operationId": "deleteBrandSafetyDenyList",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "responses": {
          "202": {
            "description": "Request has been accepted for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandSafetyUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/reports/{reportId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Gets the status of a report previously requested.",
        "description": "Uses the `reportId` value from the response of a report previously requested via `POST` method of the `/sd/{recordType}/report` operation. \n\n**To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/concepts/reporting/sponsored-ads).**",
        "operationId": "getReportStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The identifier of the requested report.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/reports/{reportId}/download": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Downloads a previously requested report identified by reportId.",
        "description": "Gets a `307 Temporary Redirect` response that includes a `location` header with the value set to an AWS S3 path where the report is located. The path expires after 30 seconds. If the path expires before the report is downloaded, a new report request must be created. \n\n**To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/concepts/reporting/sponsored-ads).**",
        "operationId": "downloadReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The identifier of the requested report.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "307": {
            "description": "Successful operation.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "Redirect URI with S3 file location containing report data"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/{recordType}/report": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Creates a report request.",
        "description": "**To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/concepts/reporting/sponsored-ads).**\n\nThe Sponsored Display API supports creation of reports for campaigns, ad groups, product ads, targets, and asins. Create a ReportRequest object specifying the fields corresponding to performance data metrics to include in the report. ",
        "operationId": "requestReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "recordType",
            "in": "path",
            "description": "The type of report to generate, either `campaigns`, `adGroups`, `productAds`, `targets`, or `asins`. The 'asins' report, also known as the Purchased products report, is only available for seller brand owners.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "campaigns",
                "adGroups",
                "productAds",
                "targets",
                "asins"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not acceptable - Failed due to report date being too far in the past.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity - Failed due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/targets": {
      "get": {
        "tags": [
          "Targeting"
        ],
        "summary": "Gets a list of targeting clauses.",
        "description": "Gets a list of targeting clauses objects for a requested set of Sponsored Display targets. Note that the Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the target operations that return the TargetingClauseEx object.",
        "operationId": "listTargetingClauses",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. 0-indexed record offset for the result set. Defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Number of records to include in the paged response. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. Restricts results to those with `state` set to values in the specified comma-separated list. ",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified `adGroupId`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetingClause"
                  }
                },
                "example": {
                  "targetId": 123,
                  "adGroupId": 321,
                  "state": "enabled",
                  "expressionType": "manual",
                  "bid": 1.5,
                  "expression": {
                    "type": "asinSameAs",
                    "value": "B0123456789"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Targeting"
        ],
        "summary": "Updates one or more targeting clauses.",
        "description": "Updates one or more targeting clauses. Targeting clauses are identified using their targetId. The mutable fields are `bid` and `state`. Maximum length of the array is 100 objects. ",
        "operationId": "updateTargetingClauses",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "A list of up to 100 targeting clauses. Mutable fields: \n* `state`\n* `bid`'",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateTargetingClause"
                }
              },
              "example": {
                "targetId": 123,
                "adGroupId": 321,
                "state": "enabled",
                "expressionType": "manual",
                "bid": 1.5,
                "expression": {
                  "type": "asinSameAs",
                  "value": "B0123456789"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-Status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Targeting"
        ],
        "summary": "Creates one or more targeting clauses.",
        "description": "Successfully created targeting clauses are assigned a unique `targetId` value.\n\nCreate new targeting clauses for campaigns with tactic 'T00020' using the following:\n| Product targeting clause | Description |\n|------------------|-------------|\n| similarProduct | Dynamic segment to target products that are similar to the advertised asin. We recommend using 'similarProduct' targeting for all adGroups. |\n| asinSameAs=B0123456789 | Target this product. |\n| asinCategorySameAs=12345 | Target products in the category. |\n| asinCategorySameAs=12345 asinBrandSameAs=45678 | Target products in the category and brand. |\n\n**Refinements:**\n- asinBrandSameAs\n- asinPriceBetween\n- asinPriceGreaterThan\n- asinPriceLessThan\n- asinReviewRatingLessThan\n- asinReviewRatingGreaterThan\n- asinReviewRatingBetween\n- asinIsPrimeShippingEligible\n- asinAgeRangeSameAs\n- asinGenreSameAs\n\n**Refinement Notes:**\n* Brand, price, and review predicates are optional and may only be specified if category is also specified.\n* Review predicates accept numbers between 0 and 5 and are inclusive.\n* When using either of the 'between' strings to construct a targeting expression the format of the string is 'double-double' where the first double must be smaller than the second double. Prices are not inclusive.\n* 'similarProduct' has no expression value or refinements. \n\nCreate new targeting clauses for campaigns with tactic 'T00030' using the following:\n| Audience targeting clause | Description |\n|------------------|-------------|\n| views(exactProduct lookback=30) | Target an audience that has viewed the advertised asins in the past 7,14,30,60, or 90 days. |\n| views(similarProduct lookback=60) | Target an audience that has viewed similar products to the advertised asins in the past 7,14,30,60, or 90 days. |\n| views(asinCategorySameAs=12345 lookback=90) | Target an audience that has viewed products in the given category in the past 7,14,30,60, or 90 days. |\n| views(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=60) | Target an audience that has viewed products in the given category, brand, and price range in the past 7,14,30,60, or 90 days. |\n| purchases(relatedProduct lookback=180) | Target an audience that has purchased a related product in the past 7,14,30,60,90,180 or 365 days|\n| purchases(exactProduct lookback=365) | Target an audience that has purchased the advertised asins in the past 7,14,30,60,90,180 or 365 days|\n| purchases(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=90) | Target an audience that has purchased products in the given category, brand, and price range in the past 7,14,30,60,90,180 or 365 days |        \n\nNote: \n1. There is a limit of 20 targeting clauses per request for T00030.\n2. There is a limit of 100 targeting clauses per request for T00020.        \n3. If you receive the error of \"Cannot create targeting clause: audience size is too small\", please expand or broaden your targeting clause to increase the audience size.",
        "operationId": "createTargetingClauses",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "A list of targeting clauses for creation.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateTargetingClause"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "multi-status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/targets/{targetId}": {
      "get": {
        "tags": [
          "Targeting"
        ],
        "summary": "Gets a targeting clause specified by identifier.",
        "description": "This call returns the minimal set of targeting clause fields.",
        "operationId": "getTargets",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "The identifier of a targeting clause.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetingClause"
                },
                "example": {
                  "targetId": 123,
                  "adGroupId": 321,
                  "state": "enabled",
                  "expressionType": "manual",
                  "bid": 1.5,
                  "expression": {
                    "type": "asinSameAs",
                    "value": "B0123456789"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Targeting"
        ],
        "summary": "Sets the `state` of a targeting clause to `archived`.",
        "description": "Equivalent to using the `updateTargetingClauses` operation to set the `state` property of a targeting clause to `archived`. See [Developer\nNotes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.",
        "operationId": "archiveTargetingClause",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "The identifer of a targeting clause.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/targets/extended": {
      "get": {
        "tags": [
          "Targeting"
        ],
        "summary": "Gets a list of targeting clause objects with extended fields.",
        "description": "Gets an array of TargetingClauseEx objects for a set of requested targets. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTargets.",
        "operationId": "listTargetingClausesEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. 0-indexed record offset for the result set. Defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Number of records to include in the paged response. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: `enabled`, `paused`, or `archived`. Default behavior is to include enabled, paused, and archived.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "targetIdFilter",
            "in": "query",
            "description": "Optional. Restricts results to ads with the specified `tagetId` specified in comma-separated list",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified `adGroupId`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. Restricts results to ads within campaigns specified in comma-separated list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetingClauseEx"
                  }
                },
                "example": {
                  "targetId": 123,
                  "adGroupId": 321,
                  "state": "enabled",
                  "expressionType": "manual",
                  "bid": 1.5,
                  "expression": {
                    "type": "asinSameAs",
                    "value": "B0123456789"
                  },
                  "servingStatus": "TARGET_STATUS_PAUSED",
                  "creationDate": 1537568785000,
                  "lastUpdateDate": 1537568785000
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/targets/extended/{targetId}": {
      "get": {
        "tags": [
          "Targeting"
        ],
        "summary": "Gets extended information for a targeting clause.",
        "description": "Gets a targeting clause object with extended fields. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTarget.",
        "operationId": "getTargetsEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "The identifier of a targeting clause.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetingClauseEx"
                },
                "example": {
                  "targetId": 123,
                  "adGroupId": 321,
                  "state": "enabled",
                  "expressionType": "manual",
                  "bid": 1.5,
                  "expression": {
                    "type": "asinSameAs",
                    "value": "B0123456789"
                  },
                  "servingStatus": "TARGET_STATUS_PAUSED",
                  "creationDate": 1537568785000,
                  "lastUpdateDate": 1537568785000
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/targets/recommendations": {
      "post": {
        "tags": [
          "Targeting Recommendations"
        ],
        "operationId": "getTargetRecommendations",
        "summary": "Returns a set of recommended products and categories to target",
        "description": "This API provides product and category recommendations to target based on the list of input ASINs.\nAllow 1 week for our systems to process data for any new ASINs listed on Amazon before using this service.\n\nFor API v3.0, the API returns up to 100 recommendations for product targeting.\n\nFor API v3.1, the API returns up to 100 recommendations for both product and category targeting.\n\nFor API v3.2 the API introduces product targeting themes in the request and returns product recommendations based on different targeting themes. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. \n\nThe currently available tactic identifiers are:\n\n|Tactic Name|Type|Description|\n|-----------|----|-----------|\n|T00020&nbsp;|Product Targeting|Products: Choose individual products to show your ads in placements related to those products.|\n|T00030&nbsp;|Audience Targeting|Audiences: Select individual audiences to show your ads.|        ",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.sdtargetingrecommendations.v3.1+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingRecommendationsRequestV31"
              }
            },
            "application/vnd.sdtargetingrecommendations.v3.0+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingRecommendationsRequest"
              }
            },
            "application/vnd.sdtargetingrecommendations.v3.2+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingRecommendationsRequestV32"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/vnd.sdtargetingrecommendations.v3.2+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingRecommendationsResponseV32"
                }
              },
              "application/vnd.sdtargetingrecommendations.v3.1+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingRecommendationsResponseV31"
                }
              },
              "application/vnd.sdtargetingrecommendations.v3.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingRecommendationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Generic bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sd/negativeTargets": {
      "get": {
        "tags": [
          "Negative targeting"
        ],
        "summary": "Gets a list of negative targeting clauses.",
        "description": "Gets a list of negative targeting clauses objects for a requested set of Sponsored Display negative targets. Note that the Negative Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the negative target operations that return the NegativeTargetingClauseEx object.",
        "operationId": "listNegativeTargetingClauses",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. 0-indexed record offset for the result set. Defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Number of records to include in the paged response. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: `enabled`, `paused`, or `archived`. Default behavior is to include enabled, paused, and archived.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified `adGroupId`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NegativeTargetingClause"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Negative targeting"
        ],
        "summary": "Updates one or more negative targeting clauses.",
        "description": "Updates one or more negative targeting clauses. Negative targeting clauses are identified using their targetId. The mutable field is `state`. Maximum length of the array is 100 objects.",
        "operationId": "updateNegativeTargetingClauses",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "A list of up to 100 negative targeting clauses. Note that the only mutable field is `state`.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateNegativeTargetingClause"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-Status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Negative targeting"
        ],
        "summary": "Creates one or more negative targeting clauses.",
        "description": "Successfully created negative targeting clauses associated with an ad group are assigned a unique target identifier.\nProduct negative targeing clause examples:\n| Negative targeting clause | Description |\n|---------------------------|-------------|\n| asinSameAs=B0123456789 | Negatively target this product.|\n| asinBrandSameAs=12345 | Negatively target products in the brand.|",
        "operationId": "createNegativeTargetingClauses",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "A list of up to 100 negative targeting clauses for creation.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateNegativeTargetingClause"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-Status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/negativeTargets/{negativeTargetId}": {
      "get": {
        "tags": [
          "Negative targeting"
        ],
        "summary": "Gets a negative targeting clause specified by identifier.",
        "description": "This call returns the minimal set of negative targeting clause fields, but is more efficient than getNegativeTargetsEx.",
        "operationId": "getNegativeTargets",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "negativeTargetId",
            "in": "path",
            "description": "The negative targeting clause identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NegativeTargetingClause"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Negative targeting"
        ],
        "summary": "Sets the `state` of a negative targeting clause to `archived`.",
        "description": "Equivalent to using the updateNegativeTargetingClauses operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.",
        "operationId": "archiveNegativeTargetingClause",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "negativeTargetId",
            "in": "path",
            "description": "The identifier of a negative targeting clause.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/negativeTargets/extended": {
      "get": {
        "tags": [
          "Negative targeting"
        ],
        "summary": "Gets a list of negative targeting clause objects with extended fields.",
        "description": "Gets an array of NegativeTargetingClauseEx objects for a set of requested negative targets. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTargets.",
        "operationId": "listNegativeTargetingClausesEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. 0-indexed record offset for the result set. Defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Number of records to include in the paged response. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: `enabled`, `paused`, or `archived`. Default behavior is to include `enabled`, `paused`, and `archived`.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "targetIdFilter",
            "in": "query",
            "description": "Optional. Restricts results to ads with the specified `tagetId` specified in comma-separated list",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified `adGroupId`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. Restricts results to ads within campaigns specified in the comma-separated list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NegativeTargetingClauseEx"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/negativeTargets/extended/{negativeTargetId}": {
      "get": {
        "tags": [
          "Negative targeting"
        ],
        "summary": "Gets extended information for a negative targeting clause.",
        "description": "Gets a negative targeting clause with extended fields. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTarget.",
        "operationId": "getNegativeTargetsEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "negativeTargetId",
            "in": "path",
            "description": "The negative targeting clause identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NegativeTargetingClauseEx"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/{recordType}/snapshot": {
      "post": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria",
        "description": "**To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/concepts/snapshots/sponsored-ads).**",
        "operationId": "createSnapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "recordType",
            "in": "path",
            "description": "The type of entity for which the snapshot should be gnerated. Must be one of: `campaigns`, `adgroups`, `prodcutAds`, or `targets`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request a snapshot file for all entities of a single record type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/snapshots/{snapshotId}": {
      "get": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Retrieve status, metadata, and location of previously requested snapshot",
        "description": "**To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/concepts/snapshots/sponsored-ads).**",
        "operationId": "getSnapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "description": "The Snapshot identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified   resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/snapshots/{snapshotId}/download": {
      "get": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Download previously requested snapshot",
        "description": "**To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/concepts/snapshots/sponsored-ads).**",
        "operationId": "downloadSnapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "description": "The Snapshot identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "307": {
            "description": "Successful operation.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "Redirect URI with S3 file location containing snapshot data"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/creatives": {
      "get": {
        "tags": [
          "Creatives"
        ],
        "summary": "Gets a list of creatives",
        "description": "",
        "operationId": "listCreatives",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Sets a cursor into the requested set of creatives. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Sets the number of creative objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten creatives set `startIndex=0` and `count=10`. To return the next ten creatives, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 100,
              "default": 100
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "The returned array includes only creatives associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the `creativeIdFilter` parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creativeIdFilter",
            "in": "query",
            "description": "The returned array includes only creatives with identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the `adGroupIdFilter` parameter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Creative"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Creatives"
        ],
        "summary": "Updates one or more creatives.",
        "description": "",
        "operationId": "updateCreatives",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of creative objects to update. Maximum length of the array is 100 objects.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreativeUpdate"
                },
                "minItems": 1,
                "maxItems": 100
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreativeResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Creatives"
        ],
        "summary": "A POST request of one or more creatives.",
        "description": "",
        "operationId": "createCreatives",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of Creative objects to create. Maximum length of the array is 100 objects.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateCreative"
                },
                "minItems": 1,
                "maxItems": 100
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreativeResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/creatives/preview": {
      "post": {
        "tags": [
          "Creatives"
        ],
        "summary": "Gets creative preview HTML.",
        "description": "",
        "operationId": "postCreativePreview",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreativePreviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreativePreviewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/moderation/creatives": {
      "get": {
        "tags": [
          "Creatives"
        ],
        "summary": "Gets a list of creative moderations",
        "description": "",
        "operationId": "listCreativeModerations",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "language",
            "in": "query",
            "description": "The language of the returned creative moderation metadata.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Locale"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Sets a cursor into the requested set of creative moderations. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Sets the number of creative objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten creative moderations set `startIndex=0` and `count=10`. To return the next ten creative moderations, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 100,
              "default": 100
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "The returned array includes only creative moderations associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the `creativeIdFilter` parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creativeIdFilter",
            "in": "query",
            "description": "The returned array includes only creative moderations with creative identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the `adGroupIdFilter` parameter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreativeModeration"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/brandSafety/{requestId}/results": {
      "get": {
        "tags": [
          "Brand Safety List [Open Beta]"
        ],
        "summary": "Gets the results for the given request",
        "description": "When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests.\n",
        "operationId": "getRequestResults",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "The ID of the request previously submitted.",
            "name": "requestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "required": false,
            "description": "Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.\n",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "description": "Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex=0 and count=1000. To return the next 1000 results, set startIndex=1000 and count=1000, and so on. Defaults to max page size(1000).\n",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandSafetyRequestResultsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/brandSafety/{requestId}/status": {
      "get": {
        "tags": [
          "Brand Safety List [Open Beta]"
        ],
        "summary": "Gets the status of the given request",
        "description": "When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted.\n",
        "operationId": "getRequestStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "The ID of the request previously submitted.",
            "name": "requestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandSafetyRequestStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/brandSafety/status": {
      "get": {
        "tags": [
          "Brand Safety List [Open Beta]"
        ],
        "summary": "List status of all requests",
        "description": "List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days.\n",
        "operationId": "listRequestStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandSafetyListRequestStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/targets/bid/recommendations": {
      "post": {
        "tags": [
          "Bid Recommendations"
        ],
        "operationId": "getTargetBidRecommendations",
        "summary": "Returns a set of bid recommendations for targeting clauses",
        "description": "Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses.\n\nThe recommended bids are derrived from the last 7 days of winning auction bids for the related targeting clause.\n\n\nReceive bid recommendations using the following:\nProduct targeting clause|Description|\n|-----------|----|\n|asinSameAs=B0123456789|Receive a bid recommendation for this target product\n|asinCategorySameAs=12345|Receive a bid recommendation for this target category\n|similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.\n\n\nAudience targeting clause|Description|\n|-----------|----|\n|views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category\n|views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins\n|views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins\n\n\n#### Notes:\n- Bid recommendations for purchases and audiences are **not currently supported**. This note will be removed when these operations are available.\n- Refinements are currently not supported and if included will not impact the bid recommendation for the target.\n\n\n#### Advertised ASIN Notes:\n- For asinSameAs targets the advertised asins will not impact the bid recommendation\n- For asinCategrySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation\n- For similarProduct & exactProduct targets the advertised asins are required",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.sdtargetingrecommendations.v3.2+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingBidRecommendationsRequestV32"
              }
            },
            "application/vnd.sdtargetingrecommendations.v3.1+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingBidRecommendationsRequestV31"
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "multi-status",
            "content": {
              "application/vnd.sdtargetingrecommendations.v3.2+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseV32"
                }
              },
              "application/vnd.sdtargetingrecommendations.v3.1+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseV31"
                }
              }
            }
          },
          "400": {
            "description": "Generic bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sd/bidRules": {
      "get": {
        "tags": [
          "Bid rules [Preview Only]"
        ],
        "summary": "Gets a list of bid rules.",
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an array of BidRule objects for a requested set of Sponsored Display bid rules.",
        "operationId": "listBidRules",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. Sets a cursor into the requested set of bid rules. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Sets the number of BidRule objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten bid rules set `startIndex=0` and `count=10`. To return the next ten bid rules, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only bid rules with state set to one of the values in the specified comma-delimited list.\nAvailable values:\n  - enabled\n  - paused\n  - archived\n  - enabled, paused\n  - enabled, archived\n  - paused, archived\n  - enabled, paused, archived",
            "schema": {
              "type": "string",
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Optional. The returned array includes only bid rules with the specified name using an exact string match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only bid rules associated with the bid rule identifiers in the specified comma-delimited list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only bid rules associated with the campaign identifiers in the specified comma-delimited list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only bid rules associated with the ad group identifiers in the comma-delimited list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BidRule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bid rules [Preview Only]"
        ],
        "summary": "Updates one or more bid rules.",
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.",
        "operationId": "updateBidRules",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of BidRule objects. For each object, specify a bid rule identifier and mutable fields with their updated values. The mutable fields are `ruleName`, `state`, and `ruleConditions`.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "minItems": 1,
                "maxItems": 25,
                "items": {
                  "$ref": "#/components/schemas/UpdateBidRule"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BidRuleResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bid rules [Preview Only]"
        ],
        "summary": "Creates one or more bid rules.",
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.",
        "operationId": "createBidRules",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of BidRule objects. For each object, specify required fields and their values. Required fields are `campaignId`, `adGroupId`, `state` and `ruleConditions`.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "minItems": 1,
                "maxItems": 25,
                "items": {
                  "$ref": "#/components/schemas/CreateBidRule"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BidRuleResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/bidRules/{ruleId}": {
      "get": {
        "tags": [
          "Bid rules [Preview Only]"
        ],
        "summary": "Gets a requested bid rule.",
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets a BidRule object for a requested Sponsored Display bid rule.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "The identifier of the requested bid rule.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BidRule"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bid rules [Preview Only]"
        ],
        "summary": "Sets the status of a bid rule to archived.",
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. This operation is equivalent to an update operation that sets the state field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.",
        "operationId": "archiveBidRule",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "The identifier of the bid rule.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BidRuleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TacticReport": {
        "type": "string",
        "description": "The advertising tactic associated with the campaign. The following table lists available tactic names:\n|Tactic Name|Type|Description|\n|-----------|-----|-----------|\n|T00020     |Product| Choose individual products to show your ads in placements related to those products.<br>[Categories] Categories: Choose individual categories to show your ads in placements related to those categories.|\n|T00030     |Audiences| Select individual audiences to show your ads.|",
        "example": "T00020",
        "enum": [
          "T00020",
          "T00030"
        ]
      },
      "Segment": {
        "type": "string",
        "description": "Optional. A dimension used to further segment certain types of reports.\n\nNote: matchedTarget reports only return targets that have generated at least one click.\n| Dimension | Report types | Tactics | Metrics | Description |\n|---------|------------------|-------------|-------------|------------|\n| matchedTarget | campaigns, adGroups, targets | T00020, T00030 | Existing metrics for each report type are accepted. |  Segments a report based on the ASIN of the product page where the ad appeared.|",
        "example": "matchedTarget",
        "enum": [
          "matchedTarget"
        ]
      },
      "Tactic": {
        "type": "string",
        "description": "The advertising tactic associated with the campaign. The following table lists available tactic names:\n|Tactic Name|Type|Description|\n|-----------|-----|-----------|\n|T00020     |Product| Choose individual products to show your ads in placements related to those products.<br>[Categories] Categories: Choose individual categories to show your ads in placements related to those categories.|\n|T00030     |Audiences| Select individual audiences to show your ads.|",
        "example": "T00020",
        "enum": [
          "T00020",
          "T00030"
        ]
      },
      "CreativeType": {
        "type": "string",
        "nullable": true,
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. \n\nThe type of the associated creative. If the field is empty or null, a default value of IMAGE will be used. One ad group only supports one type (VIDEO or IMAGE) of creativeType at a time.\n|Name|Description|\n|----|-----------|\n|IMAGE |The creative will display static assets (e.g. headline, brandLogo or custom image).|\n|VIDEO |The creative will display video assets. This type of creative must have video assets provided.|",
        "example": null,
        "enum": [
          "IMAGE",
          "VIDEO"
        ]
      },
      "BaseCampaign": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the campaign."
          },
          "budgetType": {
            "type": "string",
            "description": "The time period over which the amount specified in the `budget` property is allocated.",
            "enum": [
              "daily"
            ]
          },
          "budget": {
            "type": "number",
            "description": "The amount of the budget.",
            "format": "double",
            "example": "3.00"
          },
          "startDate": {
            "type": "string",
            "description": "The YYYYMMDD start date of the campaign. The date must be today or in the future.",
            "example": "20190101"
          },
          "endDate": {
            "type": "string",
            "nullable": true,
            "description": "The YYYYMMDD end date of the campaign.",
            "example": null
          },
          "costType": {
            "type": "string",
            "description": "Determines how the campaign will bid and charge.\n|Name|Supported Tactics|Description|\n|----|----------|-----------|\n|cpc |T00020 T00030|[Default] The performance of this campaign is measured by the clicks triggered by the ad.|\n|vcpm |T00020 T00030|The performance of this campaign is measured by the viewed impressions triggered by the ad. $1 is the minimum bid for vCPM.|",
            "enum": [
              "cpc",
              "vcpm"
            ]
          },
          "state": {
            "type": "string",
            "description": "The state of the campaign.",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "portfolioId": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.",
            "example": null
          }
        }
      },
      "Campaign": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCampaign"
          },
          {
            "type": "object",
            "properties": {
              "campaignId": {
                "$ref": "#/components/schemas/CampaignId"
              },
              "tactic": {
                "$ref": "#/components/schemas/Tactic"
              },
              "deliveryProfile": {
                "type": "string",
                "enum": [
                  "as_soon_as_possible"
                ]
              }
            }
          }
        ]
      },
      "CreateCampaign": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCampaign"
          },
          {
            "type": "object",
            "properties": {
              "tactic": {
                "$ref": "#/components/schemas/Tactic"
              }
            }
          }
        ]
      },
      "UpdateCampaign": {
        "required": [
          "campaignId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCampaign"
          },
          {
            "type": "object",
            "properties": {
              "campaignId": {
                "$ref": "#/components/schemas/CampaignId"
              }
            }
          }
        ]
      },
      "CampaignId": {
        "type": "integer",
        "format": "int64",
        "description": "The identifier of the campaign."
      },
      "CampaignResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "description": {
            "type": "string",
            "description": "A human-readable description of the response."
          },
          "campaignId": {
            "$ref": "#/components/schemas/CampaignId"
          }
        }
      },
      "CampaignResponseEx": {
        "type": "object",
        "properties": {
          "campaignId": {
            "type": "number",
            "description": "The identifier of the campaign."
          },
          "name": {
            "type": "string",
            "description": "The name of the campaign."
          },
          "tactic": {
            "$ref": "#/components/schemas/Tactic"
          },
          "budgetType": {
            "type": "string",
            "description": "The time period over which the amount specified in the `budget` property is allocated.",
            "enum": [
              "daily"
            ]
          },
          "budget": {
            "type": "number",
            "description": "The amount of the budget.",
            "format": "double"
          },
          "startDate": {
            "type": "string",
            "description": "The YYYYMMDD start date of the campaign. The date must be today or in the future."
          },
          "endDate": {
            "type": "string",
            "description": "The YYYYMMDD end date of the campaign."
          },
          "state": {
            "type": "string",
            "description": "The state of the campaign.",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "portfolioId": {
            "type": "integer",
            "description": "Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.",
            "format": "int64"
          },
          "servingStatus": {
            "type": "string",
            "description": "The status of the campaign.",
            "enum": [
              "ADVERTISER_STATUS_ENABLED",
              "STATUS_UNAVAILABLE",
              "ADVERTISER_PAUSED",
              "ACCOUNT_OUT_OF_BUDGET",
              "ADVERTISER_PAYMENT_FAILURE",
              "CAMPAIGN_PAUSED",
              "CAMPAIGN_ARCHIVED",
              "PENDING_START_DATE",
              "ENDED",
              "CAMPAIGN_OUT_OF_BUDGET"
            ]
          },
          "costType": {
            "type": "string",
            "description": "Determines how the campaign will bid and charge. **Note that some cost types are not currently supported. This note will be removed when this operation is available.**\n|Name|Supported Tactics|Description|\n|----|----------|-----------|\n|cpc |T00020 T00030|[Default] The performance of this campaign is measured by the clicks triggered by the ad.|\n|vcpm|T00020 T00030|The performance of this campaign is measured by the viewed impressions triggered by the ad. $1 is the minimum bid for vCPM.|",
            "enum": [
              "cpc",
              "vcpm"
            ]
          },
          "creationDate": {
            "type": "integer",
            "description": "Epoch date the campaign was created.",
            "format": "int64"
          },
          "lastUpdatedDate": {
            "type": "integer",
            "description": "Epoch date of the last update to any property associated with the campaign.",
            "format": "int64"
          }
        }
      },
      "BaseAdGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the ad group."
          },
          "campaignId": {
            "$ref": "#/components/schemas/CampaignId"
          },
          "defaultBid": {
            "type": "number",
            "description": "The amount of the default bid associated with the ad group. Used if no bid is specified.",
            "format": "double"
          },
          "bidOptimization": {
            "type": "string",
            "description": "Bid Optimization for the Adgroup. Default behavior is to optimize for clicks. \n|Name|CostType|Supported Tactics|Description|\n|----|----------|-----------|-----------|\n|clicks |cpc|T00020 T00030|[Default] Optimize for page visits|\n|conversions |cpc|T00020 T00030|Optimize for conversion|\n|reach |vcpm|T00020 T00030|Optimize for viewable impressions. $1 is the minimum bid for vCPM.|",
            "enum": [
              "clicks",
              "conversions",
              "reach"
            ]
          },
          "state": {
            "type": "string",
            "description": "The state of the ad group.",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          }
        }
      },
      "AdGroupId": {
        "type": "integer",
        "format": "int64",
        "description": "The identifier of the ad group."
      },
      "AdGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseAdGroup"
          },
          {
            "type": "object",
            "properties": {
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "tactic": {
                "$ref": "#/components/schemas/Tactic"
              },
              "creativeType": {
                "$ref": "#/components/schemas/CreativeType"
              }
            }
          }
        ]
      },
      "CreateAdGroup": {
        "required": [
          "campaignId",
          "name",
          "state"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseAdGroup"
          },
          {
            "type": "object",
            "properties": {
              "creativeType": {
                "$ref": "#/components/schemas/CreativeType"
              }
            }
          }
        ]
      },
      "UpdateAdGroup": {
        "required": [
          "adGroupId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseAdGroup"
          },
          {
            "type": "object",
            "properties": {
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              }
            }
          }
        ]
      },
      "AdGroupResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "description": {
            "type": "string",
            "description": "A human-readable description of the response."
          },
          "adGroupId": {
            "$ref": "#/components/schemas/AdGroupId"
          }
        }
      },
      "AdGroupResponseEx": {
        "type": "object",
        "description": "Object containing an extended set of data fields for an Ad Group.",
        "properties": {
          "adGroupId": {
            "type": "number",
            "description": "The identifier of the ad group."
          },
          "name": {
            "type": "string",
            "description": "The name of the ad group."
          },
          "campaignId": {
            "type": "number",
            "description": "The identifier of the campaign that this ad group is associated with."
          },
          "defaultBid": {
            "type": "number",
            "description": "The amount of the default bid associated with the ad group. Used if no bid is specified.",
            "format": "double"
          },
          "state": {
            "type": "string",
            "description": "The delivery state of the ad group.",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "servingStatus": {
            "type": "string",
            "description": "The status of the ad group.",
            "enum": [
              "ADVERTISER_STATUS_ENABLED",
              "STATUS_UNAVAILABLE",
              "ADVERTISER_PAUSED",
              "ACCOUNT_OUT_OF_BUDGET",
              "ADVERTISER_PAYMENT_FAILURE",
              "CAMPAIGN_PAUSED",
              "CAMPAIGN_ARCHIVED",
              "PENDING_START_DATE",
              "ENDED",
              "CAMPAIGN_OUT_OF_BUDGET",
              "AD_GROUP_STATUS_ENABLED",
              "AD_GROUP_PAUSED",
              "AD_GROUP_ARCHIVED",
              "AD_GROUP_INCOMPLETE",
              "AD_GROUP_LOW_BID",
              "ADGROUP_POLICING_PENDING_REVIEW",
              "ADGROUP_POLICING_CREATIVE_REJECTED"
            ]
          },
          "bidOptimization": {
            "type": "string",
            "description": "Bid optimization type for the Adgroup. Default behavior is to optimize for clicks.  \n|Name|CostType|Supported Tactics|Description|\n|----|----------|-----------|-----------|\n|clicks [Default]|cpc|T00020 T00030|Optimize for page visits|\n|conversions|cpc|T00020 T00030|Optimize for conversion|\n|reach|vcpm|T00020 T00030|Optimize for viewable impressions. $1 is the minimum bid for vCPM.|",
            "enum": [
              "clicks",
              "conversions",
              "reach"
            ]
          },
          "creationDate": {
            "type": "integer",
            "description": "Epoch time the ad group was created.",
            "format": "int64"
          },
          "lastUpdatedDate": {
            "description": "Epoch time any property in the ad group was last updated.",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "BaseProductAd": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "The state of the campaign associated with the product ad.",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          }
        }
      },
      "ProductAd": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseProductAd"
          },
          {
            "type": "object",
            "properties": {
              "adId": {
                "$ref": "#/components/schemas/AdId"
              },
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "campaignId": {
                "$ref": "#/components/schemas/CampaignId"
              },
              "asin": {
                "type": "string",
                "description": "The ASIN of the product advertised by the product ad."
              },
              "sku": {
                "type": "string",
                "description": "The SKU of the product advertised by the product ad."
              }
            }
          }
        ]
      },
      "CreateProductAd": {
        "required": [
          "campaignId",
          "adGroupId",
          "state"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseProductAd"
          },
          {
            "type": "object",
            "properties": {
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "campaignId": {
                "$ref": "#/components/schemas/CampaignId"
              },
              "asin": {
                "type": "string",
                "description": "The ASIN of the product advertised by the product ad."
              },
              "sku": {
                "type": "string",
                "description": "The SKU of the product advertised by the product ad."
              }
            }
          }
        ]
      },
      "UpdateProductAd": {
        "required": [
          "adId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseProductAd"
          },
          {
            "type": "object",
            "properties": {
              "adId": {
                "$ref": "#/components/schemas/AdId"
              }
            }
          }
        ]
      },
      "AdId": {
        "type": "integer",
        "format": "int64",
        "description": "The identifier of the product ad."
      },
      "ProductAdResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "description": {
            "type": "string",
            "description": "A human-readable description of the response."
          },
          "adId": {
            "type": "number",
            "description": "The identifier of the ad."
          }
        }
      },
      "ProductAdResponseEx": {
        "type": "object",
        "properties": {
          "adId": {
            "type": "number",
            "description": "The identifier of the ad."
          },
          "adGroupId": {
            "type": "number",
            "description": "The identifier of the ad group associated with the ad."
          },
          "campaignId": {
            "type": "number",
            "description": "The identifier of the campaign associated with the ad."
          },
          "asin": {
            "type": "string",
            "description": "The ASIN of the product being advertised."
          },
          "sku": {
            "type": "string",
            "description": "The SKU of the product being advertised."
          },
          "state": {
            "type": "string",
            "description": "The state of the product ad.",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "servingStatus": {
            "type": "string",
            "description": "The status of the product ad.",
            "enum": [
              "ADVERTISER_STATUS_ENABLED",
              "STATUS_UNAVAILABLE",
              "ADVERTISER_PAUSED",
              "ACCOUNT_OUT_OF_BUDGET",
              "ADVERTISER_PAYMENT_FAILURE",
              "CAMPAIGN_PAUSED",
              "CAMPAIGN_ARCHIVED",
              "PENDING_START_DATE",
              "ENDED",
              "CAMPAIGN_OUT_OF_BUDGET",
              "AD_GROUP_STATUS_ENABLED",
              "AD_GROUP_PAUSED",
              "AD_GROUP_ARCHIVED",
              "AD_GROUP_INCOMPLETE",
              "AD_GROUP_LOW_BID",
              "AD_STATUS_LIVE",
              "AD_STATUS_PAUSED",
              "AD_STATUS_ARCHIVED",
              "MISSING_IMAGE",
              "MISSING_DECORATION",
              "NOT_BUYABLE",
              "NOT_IN_BUYBOX",
              "OUT_OF_STOCK",
              "NOT_IN_POLICY"
            ]
          },
          "creationDate": {
            "type": "integer",
            "description": "Epoch date the product ad was created.",
            "format": "int64"
          },
          "lastUpdatedDate": {
            "type": "integer",
            "description": "Epoch date of the last update to any property associated with the product ad.",
            "format": "int64"
          }
        }
      },
      "TargetingPredicate": {
        "type": "object",
        "description": "A predicate to match against in the Targeting Expression (only applicable to Product targeting - T00020).\n\n* All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system.\n* Brand, price, and review predicates are optional and may only be specified if category is also specified.\n* Review predicates accept numbers between 0 and 5 and are inclusive.\n* When using either of the 'between' strings to construct a targeting expression the format of the string is 'double-double' where the first double must be smaller than the second double. Prices are not inclusive.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "asinSameAs",
              "asinCategorySameAs",
              "asinBrandSameAs",
              "asinPriceBetween",
              "asinPriceGreaterThan",
              "asinPriceLessThan",
              "asinReviewRatingLessThan",
              "asinReviewRatingGreaterThan",
              "asinReviewRatingBetween",
              "asinIsPrimeShippingEligible",
              "asinAgeRangeSameAs",
              "asinGenreSameAs",
              "similarProduct"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value to be targeted.",
            "example": "B0123456789"
          }
        }
      },
      "TargetingPredicateLegacy": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "asinSameAs",
              "asinCategorySameAs",
              "asinBrandSameAs",
              "asinPriceBetween",
              "asinPriceGreaterThan",
              "asinPriceLessThan",
              "asinReviewRatingLessThan",
              "asinReviewRatingGreaterThan",
              "asinReviewRatingBetween",
              "similarProduct",
              "exactProduct",
              "asinIsPrimeShippingEligible",
              "asinAgeRangeSameAs",
              "asinGenreSameAs"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value to be targeted.",
            "example": "B0123456789"
          },
          "eventType": {
            "type": "string",
            "description": "The type of event that the value applies to. Only available for similarProduct and exactProduct currently.\n* views event type corresponds to a customer who viewed the detail page of the product(s).",
            "enum": [
              "views"
            ]
          }
        }
      },
      "TargetingPredicateNested": {
        "type": "object",
        "description": "A behavioral event and list of targeting predicates that represents an Audience to target (only applicable to Audience targeting - T00030).\n\n* For manual ASIN-grain targeting, the value array must contain only, 'exactProduct', 'similarProduct', 'releatedProduct' and 'lookback' TargetingPredicateBase components. The 'lookback' is mandatory and the value should be set to '7', '14', '30', '60', '90', '180' or '365'.\n* For manual Category-grain targeting, the value array must contain a 'lookback' and 'asinCategorySameAs' TargetingPredicateBase component, which can be further refined with optional brand, price, star-rating and shipping eligibility refinements. The 'lookback' is mandatory and the value should be set to '7', '14', '30', '60', '90', '180' or '365'.\n* For Amazon Audiences targeting, the TargetingPredicateNested type should be set to 'audience' and the value array should include one TargetingPredicateBase component with type set to 'audienceSameAs'.\n* **Future** For manual Category-grain targeting, adding a 'negative' TargetingPredicateBase will exclude that TargetingPredicateNested from the overall audience.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "views",
              "audience",
              "purchases"
            ]
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetingPredicateBase"
            }
          }
        }
      },
      "TargetingPredicateBase": {
        "type": "object",
        "description": "A predicate to match against inside the TargetingPredicateNested component (only applicable to Audience targeting - T00030).\n\n* All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system.\n* Brand, price, and review predicates are optional and may only be specified if category is also specified.\n* Review predicates accept numbers between 0 and 5 and are inclusive.\n* When using either of the 'between' strings to construct a targeting expression the format of the string is 'double-double' where the first double must be smaller than the second double. Prices are not inclusive.\n* The 'exactProduct', 'similarProduct', 'relatedProduct', and 'negative' types do not utilize the value field.\n* The only type currently applicable to Amazon Audiences targeting is 'audienceSameAs'.\n* A 'relatedProduct' TargetingPredicateBase will Target an audience that has purchased a related product in the past 7,14,30,60,90,180, or 365 days.\n* **Future** A 'negative' TargetingPredicateBase will exclude that TargetingPredicateNested from the overall audience.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "asinCategorySameAs",
              "asinBrandSameAs",
              "asinPriceBetween",
              "asinPriceGreaterThan",
              "asinPriceLessThan",
              "asinReviewRatingLessThan",
              "asinReviewRatingGreaterThan",
              "asinReviewRatingBetween",
              "similarProduct",
              "exactProduct",
              "asinIsPrimeShippingEligible",
              "asinAgeRangeSameAs",
              "asinGenreSameAs",
              "audienceSameAs",
              "lookback",
              "negative",
              "relatedProduct"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value to be targeted. ",
            "example": "B0123456789"
          }
        }
      },
      "TargetingExpression": {
        "type": "array",
        "description": "The targeting expression to match against.\n\n------- Applicable to Product targeting (T00020) -------\n* A 'TargetingExpression' in a Product targeting Campaign can only contain 'TargetingPredicate' components.\n* Expressions must specify either a category predicate or an ASIN predicate, but never both.\n* Only one category may be specified per targeting expression.\n* Only one brand may be specified per targeting expression.\n* Only one asin may be specified per targeting expression.\n* To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.\n\n------- Applicable to Audience targeting (T00030) -------\n* A 'TargetingExpression' in an Audience Campaign can only contain 'TargetingPredicateNested' components.\n* Expressions must specify ASIN-grain ('exactProduct'), manual ASIN-grain ('relatedProducts' or 'relatedProducts'), or category-grain targeting.\n* **Future** To exclude parts of an audience, specify a TargetingPredicateNested component that contains a negative TargetingPredicate type.",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/TargetingPredicate"
            },
            {
              "$ref": "#/components/schemas/TargetingPredicateLegacy"
            },
            {
              "$ref": "#/components/schemas/TargetingPredicateNested"
            }
          ]
        }
      },
      "CreateTargetingExpression": {
        "type": "array",
        "description": "The targeting expression to match against.\n\n------- Applicable to Product targeting (T00020) -------\n* A 'TargetingExpression' in a Product targeting Campaign can only contain 'TargetingPredicate' components.\n* Expressions must specify either a category predicate or an ASIN predicate, but never both.\n* Only one category may be specified per targeting expression.\n* Only one brand may be specified per targeting expression.\n* Only one asin may be specified per targeting expression.\n* To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.\n\n------- Applicable to Audience targeting (T00030) -------\n* A 'TargetingExpression' in an Audience Campaign can only contain 'TargetingPredicateNested' components.\n* Expressions must specify either auto ASIN-grain (exact products), manual ASIN-grain (similar products), or manual category-grain targeting.\n* **Future** To exclude parts of an audience, specify a TargetingPredicateNested component that contains a negative TargetingPredicate type.",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/TargetingPredicate"
            },
            {
              "$ref": "#/components/schemas/TargetingPredicateNested"
            }
          ]
        }
      },
      "BaseTargetingClause": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "bid": {
            "type": "number",
            "description": "The bid will override the adGroup bid if specified. This field is not used for negative targeting clauses. The bid must be less than the maximum allowable bid for the campaign's marketplace; for a list of maximum allowable bids, find the [\"Bid constraints by marketplace\" table in our documentation overview](https://advertising.amazon.com/API/docs/en-us/get-started/overview).",
            "format": "float",
            "nullable": true,
            "minimum": 0.02
          }
        }
      },
      "TargetingClause": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTargetingClause"
          },
          {
            "type": "object",
            "properties": {
              "targetId": {
                "$ref": "#/components/schemas/TargetId"
              },
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "expressionType": {
                "type": "string",
                "enum": [
                  "manual",
                  "auto"
                ],
                "description": "Tactic T00020 & T00030 ad groups should use 'manual' targeting."
              },
              "expression": {
                "$ref": "#/components/schemas/TargetingExpression",
                "description": "The targeting expression to match against."
              },
              "resolvedExpression": {
                "$ref": "#/components/schemas/TargetingExpression",
                "description": "The resolved targeting expression."
              }
            }
          }
        ]
      },
      "UpdateTargetingClause": {
        "required": [
          "targetId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTargetingClause"
          },
          {
            "type": "object",
            "properties": {
              "targetId": {
                "$ref": "#/components/schemas/TargetId"
              }
            }
          }
        ]
      },
      "CreateTargetingClause": {
        "required": [
          "adGroupId",
          "expressionType",
          "expression"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTargetingClause"
          },
          {
            "type": "object",
            "properties": {
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "expressionType": {
                "type": "string",
                "enum": [
                  "manual",
                  "auto"
                ],
                "description": "Tactic T00020 ad groups only allow manual targeting."
              },
              "expression": {
                "$ref": "#/components/schemas/CreateTargetingExpression",
                "description": "The targeting expression to match against."
              }
            }
          }
        ],
        "example": {
          "expression": [
            {
              "type": "views",
              "value": [
                {
                  "type": "similarProduct"
                },
                {
                  "type": "lookback",
                  "value": "30"
                }
              ]
            }
          ],
          "bid": "1.25",
          "adGroupId": 209426065351234,
          "expressionType": "manual",
          "state": "enabled"
        }
      },
      "TargetResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "description": {
            "type": "string",
            "description": "A human-readable description of the response."
          },
          "targetId": {
            "$ref": "#/components/schemas/TargetId"
          }
        }
      },
      "TargetingClauseEx": {
        "type": "object",
        "properties": {
          "targetId": {
            "type": "number"
          },
          "adGroupId": {
            "type": "number"
          },
          "state": {
            "type": "string",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "expressionType": {
            "type": "string",
            "enum": [
              "auto",
              "manual"
            ]
          },
          "bid": {
            "type": "number",
            "description": "If a value for `bid` is specified, it overrides the current adGroup bid. When using vcpm costType. $1 is the minimum bid for vCPM. Note that this field is ignored for negative targeting clauses."
          },
          "expression": {
            "$ref": "#/components/schemas/TargetingExpression"
          },
          "servingStatus": {
            "type": "string",
            "description": "The status of the target.",
            "enum": [
              "ADVERTISER_STATUS_ENABLED",
              "STATUS_UNAVAILABLE",
              "ADVERTISER_PAUSED",
              "ACCOUNT_OUT_OF_BUDGET",
              "ADVERTISER_PAYMENT_FAILURE",
              "CAMPAIGN_PAUSED",
              "CAMPAIGN_ARCHIVED",
              "PENDING_START_DATE",
              "ENDED",
              "CAMPAIGN_OUT_OF_BUDGET",
              "AD_GROUP_STATUS_ENABLED",
              "AD_GROUP_PAUSED",
              "AD_GROUP_ARCHIVED",
              "AD_GROUP_INCOMPLETE",
              "AD_GROUP_LOW_BID",
              "TARGET_STATUS_LIVE",
              "TARGET_STATUS_PAUSED",
              "TARGET_STATUS_ARCHIVED"
            ]
          },
          "creationDate": {
            "type": "integer",
            "description": "Epoch date the target was created.",
            "format": "int64"
          },
          "lastUpdatedDate": {
            "type": "integer",
            "description": "Epoch date of the last update to any property associated with the target.",
            "format": "int64"
          }
        }
      },
      "BaseNegativeTargetingClause": {
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          }
        }
      },
      "NegativeTargetingClause": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNegativeTargetingClause"
          },
          {
            "type": "object",
            "properties": {
              "targetId": {
                "$ref": "#/components/schemas/TargetId"
              },
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "expressionType": {
                "type": "string",
                "enum": [
                  "manual",
                  "auto"
                ]
              },
              "expression": {
                "type": "array",
                "description": "The expression to negatively match against.\n* Only one brand may be specified per targeting expression.\n* Only one asin may be specified per targeting expression.\n* To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.",
                "items": {
                  "$ref": "#/components/schemas/NegativeTargetingExpression"
                }
              },
              "resolvedExpression": {
                "type": "array",
                "description": "The resolved negative targeting expression.",
                "items": {
                  "$ref": "#/components/schemas/NegativeTargetingExpression"
                }
              }
            }
          }
        ]
      },
      "CreateNegativeTargetingClause": {
        "required": [
          "adGroupId",
          "expressionType",
          "expression",
          "state"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNegativeTargetingClause"
          },
          {
            "type": "object",
            "properties": {
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "expression": {
                "type": "array",
                "description": "The expression to negatively match against.\n* Only one brand may be specified per targeting expression.\n* Only one asin may be specified per targeting expression.\n* To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.",
                "items": {
                  "$ref": "#/components/schemas/NegativeTargetingExpression"
                }
              },
              "expressionType": {
                "type": "string",
                "enum": [
                  "manual",
                  "auto"
                ]
              }
            }
          }
        ]
      },
      "UpdateNegativeTargetingClause": {
        "required": [
          "targetId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNegativeTargetingClause"
          },
          {
            "type": "object",
            "properties": {
              "targetId": {
                "$ref": "#/components/schemas/TargetId"
              }
            }
          }
        ]
      },
      "TargetId": {
        "type": "integer",
        "format": "int64"
      },
      "NegativeTargetingExpression": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The intent type. See the [targeting topic](https://advertising.amazon.com/help#GQCBASRVERXSARL3) in the Amazon Ads support center for more information.",
            "enum": [
              "asinSameAs",
              "asinBrandSameAs"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value to be negatively targeted. Used only in manual expressions.",
            "example": "B0123456789"
          }
        }
      },
      "NegativeTargetingClauseEx": {
        "type": "object",
        "properties": {
          "targetId": {
            "type": "number"
          },
          "adGroupId": {
            "type": "number"
          },
          "state": {
            "type": "string",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "expressionType": {
            "type": "string",
            "enum": [
              "manual",
              "auto"
            ]
          },
          "expression": {
            "type": "array",
            "description": "The expression to negatively match against.\n* Only one brand may be specified per targeting expression.\n* Only one asin may be specified per targeting expression.\n* To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The intent type. See the [targeting topic](https://advertising.amazon.com/help#GQCBASRVERXSARL3) in the Amazon Ads support center for more information.",
                  "enum": [
                    "asinSameAs",
                    "asinBrandSameAs"
                  ]
                },
                "value": {
                  "type": "string",
                  "description": "The value to be negatively targeted. Used only in manual expressions.",
                  "example": "B0123456789"
                }
              }
            }
          },
          "servingStatus": {
            "type": "string",
            "description": "The status of the target.",
            "enum": [
              "ADVERTISER_STATUS_ENABLED",
              "STATUS_UNAVAILABLE",
              "ADVERTISER_PAUSED",
              "ACCOUNT_OUT_OF_BUDGET",
              "ADVERTISER_PAYMENT_FAILURE",
              "CAMPAIGN_PAUSED",
              "CAMPAIGN_ARCHIVED",
              "PENDING_START_DATE",
              "ENDED",
              "CAMPAIGN_OUT_OF_BUDGET",
              "AD_GROUP_STATUS_ENABLED",
              "AD_GROUP_PAUSED",
              "AD_GROUP_ARCHIVED",
              "AD_GROUP_INCOMPLETE",
              "AD_GROUP_LOW_BID",
              "TARGET_STATUS_LIVE",
              "TARGET_STATUS_PAUSED",
              "TARGET_STATUS_ARCHIVED"
            ]
          },
          "creationDate": {
            "type": "integer",
            "description": "Epoch date the target was created.",
            "format": "int64"
          },
          "lastUpdatedDate": {
            "type": "integer",
            "description": "Epoch date of the last update to any property associated with the target.",
            "format": "int64"
          }
        }
      },
      "ASIN": {
        "type": "string",
        "description": "Amazon Standard Identification Number",
        "example": "B00PN11UNW",
        "pattern": "[a-zA-Z0-9]{10}"
      },
      "GoalProduct": {
        "description": "A product an advertisers wants to advertise. Recommendations will be made for specified goal products.",
        "required": [
          "asin"
        ],
        "properties": {
          "asin": {
            "$ref": "#/components/schemas/ASIN"
          }
        }
      },
      "TargetingRecommendationsResponse": {
        "description": "Response to a request for targeting recommendations",
        "properties": {
          "recommendations": {
            "$ref": "#/components/schemas/TargetingRecommendations"
          }
        }
      },
      "RecommendationType": {
        "type": "string",
        "description": "Signifies a type of recommendation",
        "example": "PRODUCT",
        "enum": [
          "PRODUCT"
        ]
      },
      "TargetingRecommendations": {
        "description": "A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.",
        "properties": {
          "products": {
            "type": "array",
            "description": "List of recommended product targets",
            "minItems": 0,
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/ProductRecommendation"
            }
          }
        }
      },
      "ProductRecommendation": {
        "description": "A recommended product to target ads on",
        "properties": {
          "asin": {
            "$ref": "#/components/schemas/ASIN"
          },
          "rank": {
            "type": "integer",
            "description": "A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation",
            "minimum": 1
          }
        }
      },
      "TargetingRecommendationsRequest": {
        "description": "Request for targeting recommendations",
        "required": [
          "tactic",
          "products",
          "typeFilter"
        ],
        "properties": {
          "tactic": {
            "$ref": "#/components/schemas/Tactic"
          },
          "products": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of products for which to get targeting recommendations",
            "items": {
              "$ref": "#/components/schemas/GoalProduct"
            }
          },
          "typeFilter": {
            "type": "array",
            "description": "A filter to indicate which types of recommendations to request. T00030 only allow \"CATEGORY\".",
            "minItems": 1,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/RecommendationType"
            }
          }
        }
      },
      "ReportRequest": {
        "type": "object",
        "properties": {
          "reportDate": {
            "type": "string",
            "description": "Date in YYYYMMDD format. The report contains only metrics generated on the specified date. Note that the time zone used for date calculation is the one associated with the profile used to make the request.",
            "example": "20190401"
          },
          "tactic": {
            "$ref": "#/components/schemas/TacticReport"
          },
          "segment": {
            "$ref": "#/components/schemas/Segment"
          },
          "metrics": {
            "type": "string",
            "description": "A comma-separated list of the metrics to be included in the report. \n\nEach report type supports different metrics. **To understand supported metrics for each report type, see [Report types](/API/docs/en-us/concepts/reporting/report-types).**\n\n**Note**: Campaigns with vCPM costType should use view+click based metrics (viewAttributedConversions14d, viewAttributedDetailPageView14d, viewAttributedSales14d, viewAttributedUnitsOrdered14d, viewImpressions).\n\n**Note**: Detail page view metrics (attributedDetailPageView14d, viewAttributedDetailPageView14d) have an SLA of 3 days.\n\n**Tip**: Use new-to-brand (NTB) metrics to calculate how efficient your campaigns are at driving new shoppers:\n\n  1. Percentage of NTB orders = attributedOrdersNewToBrand14d / attributedConversions14d \n  2. Percentage NTB sales = attributedSalesNewToBrand14d / attributedSales14d \n  3. Percentage NTB units = attributedUnitsOrderedNewToBrand14d / attributedUnitsOrdered14d \n  4. NTB order rate = attributedOrdersNewToBrand14 / impressions ",
            "example": "campaignName,campaignId,impressions,clicks,cost,attributedSales14d"
          }
        }
      },
      "ReportResponse": {
        "type": "object",
        "properties": {
          "reportId": {
            "type": "string",
            "description": "The identifier of the report."
          },
          "recordType": {
            "type": "string",
            "description": "The type of report requested.",
            "enum": [
              "CAMPAIGN",
              "AD_GROUP",
              "PRODUCT_AD"
            ]
          },
          "status": {
            "type": "string",
            "description": "The build status of the report.",
            "enum": [
              "IN_PROGRESS",
              "SUCCESS",
              "FAILURE"
            ]
          },
          "statusDetails": {
            "description": "A human-readable description of the current status.",
            "type": "string"
          },
          "location": {
            "type": "string",
            "description": "The URI location of the report."
          },
          "fileSize": {
            "type": "integer",
            "description": "The size of the report file, in bytes.",
            "format": "int64"
          },
          "expiration": {
            "type": "integer",
            "description": "Epoch date of the expiration of the URI in the `location` property.",
            "format": "int64"
          }
        }
      },
      "PatchRequest": {
        "required": [
          "id",
          "request"
        ],
        "description": "JSONPatch request request object.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "request": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchDocument"
            }
          }
        }
      },
      "PatchDocument": {
        "required": [
          "op",
          "path"
        ],
        "description": "JSONPatch request document.",
        "type": "object",
        "properties": {
          "op": {
            "description": "The JSONPatch operation type.",
            "type": "string",
            "enum": [
              "add",
              "remove",
              "replace"
            ],
            "example": "replace"
          },
          "path": {
            "type": "string",
            "description": "A path constructed from the JSON object to be updated.",
            "example": "/state"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "object"
              }
            ],
            "example": "paused",
            "description": "The value used by the operation specified in the `op` field."
          }
        }
      },
      "CreativeProperties": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/HeadlineLogoCreativeProperties"
          },
          {
            "$ref": "#/components/schemas/CustomImageCreativeProperties"
          },
          {
            "$ref": "#/components/schemas/VideoCreativeProperties"
          }
        ]
      },
      "HeadlineLogoCreativeProperties": {
        "type": "object",
        "description": "User customizable properties of a headline logo creative.",
        "properties": {
          "contentType": {
            "type": "string",
            "description": "The content type of the image. For brand logo creative, this field is optional. If this field is not set, creative API will treat it as a brand logo creative.\n|Value|Description|\n|------|-----------|\n|HL|The creative will display a brand logo along with the headline. Headline and logo both need to exist together. |",
            "enum": [
              "HL"
            ]
          },
          "headline": {
            "type": "string",
            "maxLength": 50,
            "description": "A marketing phrase to display on the ad. This field is optional and mutable. A headline must be specified along with a brandLogo, otherwise both fields must be set to null. Maximum number of characters allowed is 50."
          },
          "brandLogo": {
            "$ref": "#/components/schemas/Image"
          }
        }
      },
      "CustomImageCreativeProperties": {
        "type": "object",
        "description": "User customizable properties of a custom image creative.",
        "properties": {
          "contentType": {
            "type": "string",
            "description": "The content type of the image. For custom image creative, this field is required and must be set to the custom image enum value.\n|Value|Description|\n|------|-----------|\n|CUSTOM_IMAGE| The creative will display a custom image with the product description. Either both rectCustomImage and squareCustomImage are available or none of them are available will be considered as a valid Custom Image Creative|",
            "enum": [
              "CUSTOM_IMAGE"
            ]
          },
          "rectCustomImage": {
            "$ref": "#/components/schemas/Image"
          },
          "squareCustomImage": {
            "$ref": "#/components/schemas/Image"
          }
        }
      },
      "VideoCreativeProperties": {
        "type": "object",
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. User customizable properties of a video creative.",
        "properties": {
          "video": {
            "$ref": "#/components/schemas/Video"
          }
        }
      },
      "Image": {
        "type": "object",
        "description": "This field denotes image which is displayed on the ad. They can either be a brand logo or a custom image. This field is optional and mutable. A brand logo must be specified along with a headline, otherwise both fields must be set to null. For custom image both rectCustomImage and squareCustomImage should use the same asset id and asset version. Specific restrictions based on the Image type are listed in the following table.\n|Image type|Maximum file size|Minimum width|Minimum height|Accepted file formats|\n|------|-----------|-----------|-----------|-----------|\n|Custom Image|5MB|1200|628|JPEG, JPG, PNG, GIF|\n|Brand Logo|1MB|600|100|JPEG, JPG, PNG|\nNote: For square custom images the cropped image should be 628x628 at minimum.",
        "required": [
          "assetId",
          "assetVersion"
        ],
        "properties": {
          "assetId": {
            "type": "string",
            "description": "The unique identifier of the image asset. This assetId comes from the Creative Asset Library."
          },
          "assetVersion": {
            "type": "string",
            "description": "The identifier of the particular image assetversion."
          },
          "croppingCoordinates": {
            "type": "object",
            "description": "Optional cropping coordinates to apply to the image.",
            "required": [
              "top",
              "left",
              "width",
              "height"
            ],
            "properties": {
              "top": {
                "type": "integer",
                "minimum": 0,
                "description": "Pixel distance from the top edge of the cropping zone to the top edge of the original image."
              },
              "left": {
                "type": "integer",
                "minimum": 0,
                "description": "Pixel distance from the left edge of the cropping zone to the left edge of the original image."
              },
              "width": {
                "type": "integer",
                "minimum": 0,
                "description": "Pixel width of the cropping zone."
              },
              "height": {
                "type": "integer",
                "minimum": 0,
                "description": "Pixel height of the cropping zone."
              }
            }
          }
        }
      },
      "Video": {
        "type": "object",
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.\nThis field denotes video which is displayed on the ad. This field is optional and mutable. A video asset must be provided for a VIDEO creative. Specific restrictions based on the video are listed in the following table.\n||Specifications|\n|------------------|------------------|\n|Maximum file size|500MB|\n|Aspect ratio|16:9|\n|Minimum duration|6s|\n|Maximum duration|45s|\n|Minimum frame size|1920x1080|\n|Minimum video bitrate|4mbps|\n|Video frame rate(fps)|23.976(recommended), 24, 25, or 29.97|\n|Video frame rate mode|Constant|\n|Minimum audio bitrate|192kbps|\n|Audio sample rate|44.1kHz or 48kHz|\n|Supported Formats|Video: H.264, MPEG-2, or MPEG-4; Audio: PCM or AAC|\n|Audio Channel|Audio format needs to be stereo or mono.|\n|Recommended video bitrate|8mbps|\n|Recommended duration|A duration of exactly 6s, 15s, 20s, or 30s is recommended. Use of videos outside of these durations may negatively impact your campaign performance. Shorter lengths will drive higher VCR (although scale on 6s may be limited).|",
        "required": [
          "assetId",
          "assetVersion"
        ],
        "properties": {
          "assetId": {
            "type": "string",
            "description": "The unique identifier of the video asset. This assetId comes from the Creative Asset Library."
          },
          "assetVersion": {
            "type": "string",
            "description": "The identifier of the particular video assetversion."
          }
        }
      },
      "CreativeModeration": {
        "type": "object",
        "description": "System generated Creative moderation.",
        "required": [
          "creativeId",
          "moderationStatus",
          "etaForModeration",
          "policyViolations",
          "creativeType"
        ],
        "properties": {
          "creativeId": {
            "type": "number",
            "description": "Unique identifier of the creative."
          },
          "creativeType": {
            "$ref": "#/components/schemas/CreativeTypeInCreativeResponse"
          },
          "moderationStatus": {
            "type": "string",
            "description": "The moderation status of the creative.\n|Status|Description|\n|------|-----------|\n|APPROVED|Moderation for the creative is complete.|\n|IN_PROGRESS|Moderation for the creative is in progress. The expected date and time for completion are specfied in the `etaForModeration` field.|\n|REJECTED|The creative has failed moderation. Specific information about the content that violated policy is available in `policyViolations`.|",
            "enum": [
              "APPROVED",
              "PENDING_REVIEW",
              "REJECTED"
            ]
          },
          "etaForModeration": {
            "type": "string",
            "format": "date-time",
            "description": "Expected date and time by which moderation will be complete."
          },
          "contentType": {
            "type": "string",
            "enum": [
              "HL",
              "CUSTOM_IMAGE"
            ],
            "description": "This contentType is same as what you specified when you create/update the creative. For brand logo creative, this field is optional. If this field is not set, creative API will treat it as a brand logo creative. For other creative types, this field is required and must be set to the corresponding enum value."
          },
          "policyViolations": {
            "type": "array",
            "description": "A list of policy violations for a creative that has failed moderation.",
            "items": {
              "type": "object",
              "properties": {
                "policyDescription": {
                  "type": "string",
                  "description": "A human-readable description of the policy."
                },
                "policyLinkUrl": {
                  "type": "string",
                  "description": "Address of the policy documentation. Follow the link to learn more about the specified policy."
                },
                "violatingHeadlineContents": {
                  "type": "array",
                  "description": "Information about the headline text that violates the specified policy.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "reviewedText": {
                        "type": "string",
                        "description": "The specific text reviewed during moderation."
                      },
                      "textEvidence": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "violatingText": {
                              "type": "string",
                              "description": "The specific text determined to violate the specified policy in reviewedText"
                            },
                            "violatingTextPosition": {
                              "type": "object",
                              "properties": {
                                "start": {
                                  "type": "integer",
                                  "description": "Zero-based index into the text in reviewedText where the text specified in violatingText starts"
                                },
                                "end": {
                                  "type": "integer",
                                  "description": "Zero-based index into the text in reviewedText where the text specified in violatingText ends"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "violatingBrandLogoContents": {
                  "type": "array",
                  "description": "Information about the brand logo that violates the specified policy.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "reviewedImageUrl": {
                        "type": "string",
                        "description": "Address of the image reviewed during moderation."
                      },
                      "imageEvidences": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "violatingImageCrop": {
                              "type": "object",
                              "properties": {
                                "topLeftX": {
                                  "type": "integer",
                                  "description": "The top left X-coordinate of the content that violates the specfied policy within the image."
                                },
                                "topLeftY": {
                                  "type": "integer",
                                  "description": "The top left Y-coordinate of the content that violates the specfied policy within the image."
                                },
                                "height": {
                                  "type": "integer",
                                  "description": "The height of the content that violates the specfied policy within the image."
                                },
                                "width": {
                                  "type": "integer",
                                  "description": "The width of the content that violates the specfied policy within the image."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "violatingCustomImageContents": {
                  "type": "array",
                  "description": "Information about the custom image that violates the specified policy.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "reviewedImageUrl": {
                        "type": "string",
                        "description": "Address of the image reviewed during moderation."
                      },
                      "imageEvidences": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "violatingImageCrop": {
                              "type": "object",
                              "properties": {
                                "topLeftX": {
                                  "type": "integer",
                                  "description": "The top left X-coordinate of the content that violates the specfied policy within the image."
                                },
                                "topLeftY": {
                                  "type": "integer",
                                  "description": "The top left Y-coordinate of the content that violates the specfied policy within the image."
                                },
                                "height": {
                                  "type": "integer",
                                  "description": "The height of the content that violates the specfied policy within the image."
                                },
                                "width": {
                                  "type": "integer",
                                  "description": "The width of the content that violates the specfied policy within the image."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "violatingVideoContents": {
                  "type": "array",
                  "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Information about the video that violates the specified policy.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "reviewedVideoUrl": {
                        "type": "string",
                        "description": "Address of the video reviewed during moderation."
                      },
                      "videoEvidences": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "violatingVideoPosition": {
                              "type": "object",
                              "properties": {
                                "start": {
                                  "type": "integer",
                                  "description": "Time at which policy violation within video asset starts."
                                },
                                "end": {
                                  "type": "integer",
                                  "description": "Time at which policy violation within the video asset ends."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CreativeTypeInCreativeRequest": {
        "type": "string",
        "nullable": true,
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.\n\nThe type of the creative.\n|Name|Description|\n|----|-----------|\n|IMAGE |The creative will display static assets (e.g. headline, brandLogo or custom image).|\n|VIDEO |The creative will display video assets. This type of creative must have video assets provided.|",
        "example": null,
        "enum": [
          "IMAGE",
          "VIDEO"
        ]
      },
      "CreativeTypeInCreativeResponse": {
        "type": "string",
        "nullable": false,
        "description": "This field is a PREVIEW ONLY. This note will be removed once this functionality becomes available.\n\nThe type of the creative.\n|Name|Description|\n|----|-----------|\n|IMAGE |The creative will display static assets (e.g. headline, brandLogo or custom image).|\n|VIDEO |The creative will display video assets. This type of creative must have video assets provided.|",
        "example": "IMAGE",
        "enum": [
          "IMAGE",
          "VIDEO"
        ]
      },
      "Creative": {
        "type": "object",
        "description": "Creative model.",
        "required": [
          "creativeId",
          "properties",
          "moderationStatus",
          "creativeType"
        ],
        "properties": {
          "creativeId": {
            "type": "number",
            "description": "Unique identifier of the creative.",
            "readOnly": true
          },
          "creativeType": {
            "$ref": "#/components/schemas/CreativeTypeInCreativeResponse"
          },
          "properties": {
            "$ref": "#/components/schemas/CreativeProperties"
          },
          "moderationStatus": {
            "type": "string",
            "description": "The moderation status of the creative",
            "enum": [
              "APPROVED",
              "PENDING_REVIEW",
              "REJECTED"
            ]
          }
        }
      },
      "PreviewCreativeModel": {
        "type": "object",
        "description": "Creative model for preview.",
        "properties": {
          "creativeType": {
            "$ref": "#/components/schemas/CreativeTypeInCreativeRequest"
          },
          "properties": {
            "$ref": "#/components/schemas/CreativeProperties"
          }
        }
      },
      "CreativeUpdate": {
        "type": "object",
        "description": "Creative update model.",
        "required": [
          "creativeId",
          "properties"
        ],
        "properties": {
          "creativeId": {
            "type": "number",
            "description": "Unique identifier of the creative.",
            "readOnly": true
          },
          "creativeType": {
            "$ref": "#/components/schemas/CreativeTypeInCreativeRequest"
          },
          "properties": {
            "$ref": "#/components/schemas/CreativeProperties"
          }
        }
      },
      "CreateCreative": {
        "type": "object",
        "description": "Creative create model.",
        "example": {
          "adGroupId": 21035454911234,
          "properties": {
            "contentType": "CUSTOM_IMAGE",
            "rectCustomImage": {
              "assetId": "amzn1.assetlibrary.asset1.fbb498fe19248f834be4b7xxxxxxxx",
              "assetVersion": "version_v1",
              "croppingCoordinates": {
                "top": 0,
                "left": 0,
                "width": 1200,
                "height": 628
              }
            },
            "squareCustomImage": {
              "assetId": "amzn1.assetlibrary.asset1.fbb498fe19248f834be4b7xxxxxxxx",
              "assetVersion": "version_v1",
              "croppingCoordinates": {
                "top": 0,
                "left": 0,
                "width": 628,
                "height": 628
              }
            }
          }
        },
        "required": [
          "adGroupId",
          "properties"
        ],
        "properties": {
          "adGroupId": {
            "type": "number",
            "description": "Unqiue identifier for the ad group associated with the creative."
          },
          "creativeType": {
            "$ref": "#/components/schemas/CreativeTypeInCreativeRequest"
          },
          "properties": {
            "$ref": "#/components/schemas/CreativeProperties"
          }
        }
      },
      "CreativeResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "description": {
            "type": "string",
            "description": "A human-readable description of the response."
          },
          "creativeId": {
            "type": "number",
            "description": "The identifier of the creative."
          }
        }
      },
      "CreativePreviewConfiguration": {
        "type": "object",
        "description": "Optional configuration for creative preview.",
        "properties": {
          "size": {
            "type": "object",
            "description": "The slot dimension to render the creative. Sponsored Display creatives are responsive to a limited list of width and height pairs, including 300x250, 650x130, 245x250, 414x125, 600x160, 600x300, 728x90, 980x55, 320x50, 970x250 and 270x150.",
            "properties": {
              "width": {
                "type": "integer"
              },
              "height": {
                "type": "integer"
              }
            }
          },
          "products": {
            "type": "array",
            "description": "The products to preview. Currently only the first product is previewable.",
            "items": {
              "type": "object",
              "properties": {
                "asin": {
                  "type": "string",
                  "description": "The ASIN of the product."
                }
              }
            }
          },
          "isMobile": {
            "type": "boolean",
            "description": "Preview the creative as if it is on a mobile environment."
          },
          "isOnAmazon": {
            "type": "boolean",
            "description": "Preview the creative as if it is on an amazon site or third party site. The main difference is whether the preview will contain an AdChoices icon."
          }
        }
      },
      "CreativePreviewRequest": {
        "type": "object",
        "required": [
          "creative",
          "previewConfiguration"
        ],
        "properties": {
          "creative": {
            "$ref": "#/components/schemas/PreviewCreativeModel"
          },
          "previewConfiguration": {
            "$ref": "#/components/schemas/CreativePreviewConfiguration"
          }
        }
      },
      "CreativePreviewResponse": {
        "type": "object",
        "required": [
          "previewHtml"
        ],
        "properties": {
          "previewHtml": {
            "type": "string"
          }
        }
      },
      "Locale": {
        "type": "string",
        "description": "Locale string as described in [BCP 47](https://tools.ietf.org/html/bcp47). For example, `en-US`",
        "pattern": "^\\[a-z]{2}-[AZ]{2}$",
        "enum": [
          "en-US",
          "es-MX",
          "zh-CN",
          "es-ES",
          "it-IT",
          "fr-FR",
          "fr-CA",
          "de-DE",
          "ja-JP",
          "ko-KR",
          "en-GB",
          "en-CA",
          "hi-IN",
          "en-IN",
          "en-DE",
          "en-ES",
          "en-FR",
          "en-IT",
          "en-JP",
          "en-AE",
          "ar-AE"
        ]
      },
      "Error": {
        "type": "object",
        "description": "The error response object.",
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "details": {
            "type": "string",
            "description": "A human-readable description of the response."
          }
        }
      },
      "TacticFilter": {
        "type": "string",
        "description": "Optional. Restricts results to entities with the advertising tactic associated with the campaign. Must be one of the following table lists available tactic names:\n|Tactic Name|Type|Description|\n|-----------|-----|-----------|\n|T00020     |Product| Choose individual products to show your ads in placements related to those products.<br>[Categories] Categories: Choose individual categories to show your ads in placements related to those categories.|\n|T00030     |Audiences| Select individual audiences to show your ads.|",
        "example": "T00020,T00030",
        "enum": [
          "T00020",
          "T00030",
          "T00020,T00030"
        ]
      },
      "SnapshotRequest": {
        "type": "object",
        "properties": {
          "stateFilter": {
            "type": "string",
            "description": "Optional. Restricts results to entities with state within the specified comma-separated list. Default behavior is to include 'enabled' and 'paused'. You can include 'enabled', 'paused', and 'archived' or any combination. ",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "tacticFilter": {
            "$ref": "#/components/schemas/TacticFilter"
          }
        }
      },
      "SnapshotResponse": {
        "type": "object",
        "properties": {
          "snapshotId": {
            "type": "string",
            "description": "The identifier of the snapshot that was requested."
          },
          "recordType": {
            "type": "string",
            "description": "The record type of the snapshot file.",
            "enum": [
              "campaigns",
              "adgroups",
              "productAds",
              "targets"
            ]
          },
          "status": {
            "type": "string",
            "description": "The status of the generation of the snapshot.",
            "enum": [
              "IN_PROGRESS",
              "SUCCESS",
              "FAILURE"
            ]
          },
          "statusDetails": {
            "type": "string",
            "description": "Optional description of the status."
          },
          "location": {
            "type": "string",
            "description": "The URI for the snapshot. It's only available if status is SUCCESS."
          },
          "fileSize": {
            "type": "number",
            "description": "The size of the snapshot file in bytes. It's only available if status is SUCCESS."
          },
          "expiration": {
            "type": "number",
            "description": "The epoch time for expiration of the snapshot file and each snapshot file will be expired in 30 mins after generated. It's only available if status is SUCCESS."
          }
        }
      },
      "SDTargetingRecommendationsRequest": {
        "description": "Request for targeting recommendations",
        "required": [
          "tactic",
          "products",
          "typeFilter"
        ],
        "properties": {
          "tactic": {
            "$ref": "#/components/schemas/SDTactic"
          },
          "products": {
            "type": "array",
            "minItems": 1,
            "maxItems": 10000,
            "description": "A list of products for which to get targeting recommendations",
            "items": {
              "$ref": "#/components/schemas/SDGoalProduct"
            }
          },
          "typeFilter": {
            "type": "array",
            "description": "A filter to indicate which types of recommendations to request.",
            "minItems": 1,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/SDRecommendationType"
            }
          }
        }
      },
      "SDTargetingRecommendationsRequestV31": {
        "description": "Request for targeting recommendations",
        "required": [
          "tactic",
          "products",
          "typeFilter"
        ],
        "properties": {
          "tactic": {
            "$ref": "#/components/schemas/SDTacticV31"
          },
          "products": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsProducts"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsTypeFilterV31"
          }
        }
      },
      "SDTargetingRecommendationsRequestV32": {
        "description": "Request for targeting recommendations for API version 3.2.",
        "required": [
          "tactic",
          "products",
          "typeFilter"
        ],
        "properties": {
          "tactic": {
            "$ref": "#/components/schemas/SDTacticV31"
          },
          "products": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsProducts"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsTypeFilterV31"
          },
          "themes": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsThemes"
          }
        }
      },
      "SDTargetingRecommendationsProducts": {
        "type": "array",
        "description": "A list of products for which to get targeting recommendations",
        "minItems": 1,
        "maxItems": 10000,
        "items": {
          "$ref": "#/components/schemas/SDGoalProduct"
        }
      },
      "SDTargetingRecommendationsTypeFilterV31": {
        "type": "array",
        "description": "A filter to indicate which types of recommendations to request.",
        "minItems": 1,
        "maxItems": 2,
        "example": [
          "PRODUCT",
          "CATEGORY"
        ],
        "items": {
          "$ref": "#/components/schemas/SDRecommendationTypeV31"
        }
      },
      "SDTargetingRecommendationsThemes": {
        "type": "object",
        "description": "The themes used to refine the recommendations. Currently only product targeting themes are supported.",
        "properties": {
          "product": {
            "type": "array",
            "minItems": 1,
            "maxItems": 5,
            "description": "A list of themes for product targeting recommendations. Recommendations will be returned for each theme.",
            "items": {
              "$ref": "#/components/schemas/SDProductTargetingTheme"
            }
          }
        }
      },
      "SDProductTargetingTheme": {
        "type": "object",
        "description": "Product targeting theme definitions.",
        "required": [
          "name",
          "expression"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the meaningful theme name which will be used as a unique identifier across various themes in the same request.\nThis identifier will also be used to map the recommendations back to the theme in the response body.\nNote: the value for this field cannot be \"default\" as that's a reserved keyword in the system.",
            "minLength": 1,
            "maxLength": 100,
            "pattern": "^(?!default$)"
          },
          "expression": {
            "type": "array",
            "minItems": 1,
            "maxItems": 3,
            "description": "A list of expressions defining the product targeting theme. The list will define an AND operator on different expressions.\nFor example, asinPriceGreaterThan and asinReviewRatingLessThan can be used to request product recommendations\nwhich are both with greater price and less review rating compared to the goal products.\nNote: there cannot be multiple expressions for the same variable in the same theme.",
            "items": {
              "$ref": "#/components/schemas/SDProductTargetingThemeExpression"
            }
          }
        }
      },
      "SDProductTargetingThemeExpression": {
        "type": "object",
        "description": "The expression used to define the product targeting theme.",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The product targeting grammar used to define the targeting theme. Note asinAsBestSeller is currently not supported.",
            "enum": [
              "asinPriceSimilarTo",
              "asinPriceGreaterThan",
              "asinPriceLessThan",
              "asinReviewRatingSimilarTo",
              "asinReviewRatingGreaterThan",
              "asinReviewRatingLessThan",
              "asinGlanceViewsSimilarTo",
              "asinGlanceViewsGreaterThan",
              "asinGlanceViewsLessThan",
              "asinBrandSameAs",
              "asinAsBestSeller"
            ]
          }
        }
      },
      "SDRecommendationType": {
        "type": "string",
        "description": "Signifies a type of recommendation",
        "example": "PRODUCT",
        "enum": [
          "PRODUCT"
        ]
      },
      "SDRecommendationTypeV31": {
        "type": "string",
        "description": "Signifies a type of recommendation",
        "example": "PRODUCT",
        "enum": [
          "PRODUCT",
          "CATEGORY"
        ]
      },
      "SDASIN": {
        "type": "string",
        "description": "Amazon Standard Identification Number",
        "example": "B00PN11UNW",
        "pattern": "[a-zA-Z0-9]{10}"
      },
      "SDErrorResponse": {
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response"
          },
          "details": {
            "type": "string",
            "description": "A human-readable description of the response."
          }
        }
      },
      "SDTargetingRecommendationsResponse": {
        "description": "Response to a request for targeting recommendations",
        "properties": {
          "recommendations": {
            "$ref": "#/components/schemas/SDTargetingRecommendations"
          }
        }
      },
      "SDTargetingRecommendationsResponseV31": {
        "description": "Response to a request for targeting recommendations",
        "properties": {
          "recommendations": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsV31"
          }
        }
      },
      "SDTargetingRecommendationsResponseV32": {
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Response body for targeting recommendations v3.2.",
        "properties": {
          "recommendations": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsV32"
          }
        }
      },
      "SDTargetingRecommendationsV32": {
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. For v3.2 the service will continue to return the recommendations returned for v3.1 in products field,\nand return recommendations for product targeting themes in themes field.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SDProductRecommendationsV32"
          },
          {
            "$ref": "#/components/schemas/SDCategoryRecommendations"
          },
          {
            "$ref": "#/components/schemas/SDThemeRecommendations"
          }
        ]
      },
      "SDThemeRecommendations": {
        "type": "object",
        "properties": {
          "themes": {
            "properties": {
              "products": {
                "type": "array",
                "description": "A list of product targeting theme recommendations.",
                "minItems": 1,
                "maxItems": 5,
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SDProductTargetingRecommendationsSuccess"
                    },
                    {
                      "$ref": "#/components/schemas/SDTargetingRecommendationsFailure"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "SDProductTargetingRecommendationsSuccess": {
        "type": "object",
        "description": "Recommendation results for product targeting.",
        "properties": {
          "code": {
            "type": "string",
            "description": "HTTP status code 200 indicating a successful response for product recomendations.",
            "example": 200
          },
          "name": {
            "type": "string",
            "description": "The theme name specified in the request."
          },
          "recommendations": {
            "type": "array",
            "description": "A list of recommended products.",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/SDProductRecommendationV32"
            }
          }
        }
      },
      "SDTargetingRecommendationsFailure": {
        "type": "object",
        "description": "A targeting recommendation failure record.",
        "properties": {
          "code": {
            "type": "string",
            "description": "HTTP status code indicating a failure response for targeting recomendations.",
            "example": 400
          },
          "name": {
            "type": "string",
            "description": "The theme name specified in the request. If the themes field is not provided in the request,\nthe value of this field will be set to default."
          },
          "errorMessage": {
            "type": "string",
            "description": "A human friendly error message indicating the failure reasons."
          }
        }
      },
      "SDCategory": {
        "type": "integer",
        "description": "The category identifier",
        "example": 7352105011
      },
      "SDTargetingRecommendations": {
        "description": "A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.",
        "properties": {
          "products": {
            "type": "array",
            "description": "List of recommended product targets",
            "minItems": 0,
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/SDProductRecommendation"
            }
          }
        }
      },
      "SDProductRecommendation": {
        "type": "object",
        "description": "A recommended product to target ads on",
        "properties": {
          "asin": {
            "$ref": "#/components/schemas/SDASIN"
          },
          "rank": {
            "type": "integer",
            "description": "A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation",
            "minimum": 1
          }
        }
      },
      "SDProductRecommendationV32": {
        "type": "object",
        "description": "A recommended product to target ads on",
        "properties": {
          "asin": {
            "$ref": "#/components/schemas/SDASIN"
          },
          "rank": {
            "type": "integer",
            "description": "A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation",
            "minimum": 1
          },
          "advertisedAsins": {
            "type": "array",
            "description": "The top advertised products this recommendation is made for.",
            "minItems": 1,
            "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/SDASIN"
            }
          }
        }
      },
      "SDTargetingRecommendationsV31": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDProductRecommendationsV31"
          },
          {
            "$ref": "#/components/schemas/SDCategoryRecommendations"
          }
        ]
      },
      "SDProductRecommendationsV31": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "description": "List of recommended product targets",
            "minItems": 0,
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/SDProductRecommendation"
            }
          }
        }
      },
      "SDProductRecommendationsV32": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "description": "List of recommended product targets",
            "minItems": 0,
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/SDProductRecommendationV32"
            }
          }
        }
      },
      "SDCategoryRecommendations": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "description": "List of recommended category targets",
            "minItems": 0,
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/SDCategoryRecommendation"
            }
          }
        }
      },
      "SDCategoryRecommendation": {
        "description": "A recommended category to target ads on",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/SDCategory"
          },
          "name": {
            "type": "string",
            "description": "The category name"
          },
          "path": {
            "type": "array",
            "description": " The path of the category within the category catalogue",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "targetableAsinCountRange": {
            "type": "object",
            "description": "The range of ASINs available within the category catalogue. If no targetable ASIN counts are available then the targetableAsinCountRange value will be null without any properties.",
            "properties": {
              "rangeLower": {
                "type": "integer"
              },
              "rangeUpper": {
                "type": "integer"
              }
            }
          },
          "rank": {
            "type": "integer",
            "description": "A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation",
            "minimum": 1
          }
        }
      },
      "SDTactic": {
        "type": "string",
        "description": "The advertising tactic associated with the campaign. The following table lists available tactic names:\n|Tactic Name|Type|Description|\n        |-----------|-----|-----------|\n        |T00020 &nbsp;    |Products&nbsp;| Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.",
        "example": "T00020",
        "enum": [
          "T00020"
        ]
      },
      "SDTacticV31": {
        "type": "string",
        "description": "The advertising tactic associated with the campaign. The following table lists available tactic names:\n|Tactic Name|Type|Description|\n        |-----------|-----|-----------|\n        |T00020 &nbsp;    |Products&nbsp;| Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.|\n        |T00030&nbsp;|Audiences &nbsp;|Select individual audiences to show your ads.",
        "example": "T00020",
        "enum": [
          "T00020",
          "T00030"
        ]
      },
      "SDGoalProduct": {
        "description": "A product an advertisers wants to advertise. Recommendations will be made for specified goal products.",
        "required": [
          "asin"
        ],
        "properties": {
          "asin": {
            "$ref": "#/components/schemas/SDASIN"
          }
        }
      },
      "BrandSafetyDenyListDomainType": {
        "type": "string",
        "description": "The domain type.",
        "enum": [
          "WEBSITE",
          "APP"
        ]
      },
      "BrandSafetyDenyListDomainState": {
        "type": "string",
        "description": "The state of the domain.",
        "enum": [
          "ENABLED",
          "ARCHIVED"
        ],
        "default": "ENABLED"
      },
      "BrandSafetyRequestStatus": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Request ID"
          },
          "timestamp": {
            "type": "string",
            "description": "Request timestamp"
          },
          "status": {
            "type": "string",
            "description": "The status of the request",
            "enum": [
              "IN_PROGRESS",
              "COMPLETED",
              "FAILURE"
            ]
          },
          "statusDetails": {
            "type": "string",
            "description": "Details related to the request status"
          }
        }
      },
      "BrandSafetyGetResponse": {
        "description": "Response for Brand Safety Deny List GET requests",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/BrandSafetyGetResponsePagination"
          },
          "domains": {
            "type": "array",
            "description": "List of Brand Safety Deny List Domains",
            "items": {
              "$ref": "#/components/schemas/BrandSafetyDenyListProcessedDomain"
            }
          }
        }
      },
      "BrandSafetyGetResponsePagination": {
        "type": "object",
        "description": "Response pagination info for Brand Safety Deny List GET requests",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of deny list domains created by the advertiser"
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of deny list domains returned from GET request"
          },
          "offset": {
            "type": "integer",
            "description": "The number of deny list domains skipped"
          }
        }
      },
      "BrandSafetyDenyListDomain": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The website or app identifier. This can be in the form of full domain (eg. 'example.com' or 'example.net'), or mobile app identifier (eg. 'com.example.app' for Android apps or '1234567890' for iOS apps)\n",
            "maxLength": 250
          },
          "type": {
            "$ref": "#/components/schemas/BrandSafetyDenyListDomainType"
          }
        },
        "example": {
          "name": "example.com",
          "type": "WEBSITE"
        }
      },
      "BrandSafetyDenyListProcessedDomain": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The identifier of the Brand Safety List domain.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The website or app identifier. This can be in the form of full domain (eg. 'example.com' or 'example.net'), or mobile app identifier (eg. 'com.example.app' for Android apps or '1234567890' for iOS apps)\n",
            "maxLength": 250
          },
          "type": {
            "$ref": "#/components/schemas/BrandSafetyDenyListDomainType"
          },
          "state": {
            "$ref": "#/components/schemas/BrandSafetyDenyListDomainState"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date time the domain was created at. Format YYYY-MM-ddT:HH:mm:ssZ",
            "example": "2018-09-16T11:43:21Z"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "description": "The date time the domain was last modified. Format YYYY-MM-ddT:HH:mm:ssZ",
            "example": "2018-09-16T11:43:21Z"
          }
        }
      },
      "BrandSafetyPostRequest": {
        "description": "POST Request for Brand Safety",
        "required": [
          "domains"
        ],
        "properties": {
          "domains": {
            "type": "array",
            "minItems": 1,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/BrandSafetyDenyListDomain"
            }
          }
        }
      },
      "BrandSafetyUpdateResponse": {
        "description": "Response for Brand Safety POST and DELETE requests",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "The identifier of the request"
          }
        }
      },
      "BrandSafetyDenyListDomainUpdateResultStatus": {
        "type": "string",
        "description": "The state of the domain.",
        "enum": [
          "SUCCESS",
          "FAILURE"
        ],
        "default": "SUCCESS"
      },
      "BrandSafetyRequestStatusResponse": {
        "type": "object",
        "description": "The status of the request.",
        "properties": {
          "requestStatus": {
            "$ref": "#/components/schemas/BrandSafetyRequestStatus"
          }
        }
      },
      "BrandSafetyListRequestStatusResponse": {
        "type": "object",
        "description": "List of all requests' status.",
        "properties": {
          "requestStatusList": {
            "type": "array",
            "description": "List of all requests' status.",
            "items": {
              "$ref": "#/components/schemas/BrandSafetyRequestStatus"
            }
          }
        }
      },
      "BrandSafetyRequestResultsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "description": "A list of results for the given requestId",
            "items": {
              "$ref": "#/components/schemas/BrandSafetyRequestResult"
            }
          }
        }
      },
      "BrandSafetyRequestResult": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/BrandSafetyDenyListDomainUpdateResultStatus"
          },
          "details": {
            "type": "string",
            "description": "A human-readable description of the response."
          },
          "domainId": {
            "type": "integer",
            "description": "The identifier of the Brand Safety Deny List Domain.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The website or app identifier."
          }
        }
      },
      "SDTargetingBidRecommendationsRequestV31": {
        "description": "Request for targeting bid recommendations.",
        "example": {
          "products": [
            {
              "asin": "B01B8R6V2E"
            }
          ],
          "targetingClauses": [
            {
              "targetingClause": {
                "expressionType": "manual",
                "expression": [
                  {
                    "type": "views",
                    "value": [
                      {
                        "type": "similarProduct"
                      },
                      {
                        "type": "lookback",
                        "value": "30"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        "required": [
          "targetingClauses"
        ],
        "properties": {
          "products": {
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "description": "A list of products to tailor bid recommendations for category and audience based targeting clauses.",
            "items": {
              "$ref": "#/components/schemas/SDGoalProduct"
            }
          },
          "targetingClauses": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of targeting clauses to receive bid recommendations for.",
            "items": {
              "type": "object",
              "required": [
                "targetingClause"
              ],
              "properties": {
                "targetingClause": {
                  "$ref": "#/components/schemas/SDTargetingClauseV31"
                }
              }
            }
          }
        }
      },
      "SDTargetingBidRecommendationsResponseV31": {
        "description": "Response to a request for targeting bid recommendations.",
        "required": [
          "bidRecommendations",
          "costType"
        ],
        "properties": {
          "costType": {
            "$ref": "#/components/schemas/SDCostTypeV31"
          },
          "bidRecommendations": {
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseItemSuccessV31"
                },
                {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseItemFailureV31"
                }
              ]
            }
          }
        }
      },
      "SDCostTypeV31": {
        "description": "Determines what performance metric the bid recommendations will be optimized for.\n|Name|Supported Tactics|Description|\n|----|----------|-----------|\n|cpc|T00020 T00030|The bid recommendations will be optimized for clicks triggered by the ad.|\n|vcpm|T00020 T00030|The bid recommendations will be optimized for viewed impressions triggered by the ad. $1 is the minimum bid for vCPM.|",
        "type": "string",
        "enum": [
          "cpc",
          "vcpm"
        ]
      },
      "SDTargetingBidRecommendationsResponseItemSuccessV31": {
        "description": "A recommended bid range to use for a target.",
        "required": [
          "code"
        ],
        "allOf": [
          {
            "description": "Success response for corresponding targeting clause on the request.",
            "properties": {
              "code": {
                "type": "string",
                "description": "The HTTP status code of this item.",
                "example": "200"
              }
            }
          },
          {
            "$ref": "#/components/schemas/SDBidRecommendationV31"
          }
        ]
      },
      "SDTargetingBidRecommendationsResponseItemFailureV31": {
        "description": "Failed bid recommendation response.",
        "required": [
          "code",
          "details"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of this item.",
            "example": "400"
          },
          "details": {
            "type": "string",
            "description": "A human-readable description of this item on error.",
            "example": "Targeting expression does not conform to language specific rules."
          }
        }
      },
      "SDTargetingClauseV31": {
        "description": "The targeting clause",
        "required": [
          "expressionType",
          "expression"
        ],
        "type": "object",
        "properties": {
          "expressionType": {
            "description": "Tactic T00020 ad groups only allow manual targeting.",
            "type": "string",
            "enum": [
              "manual",
              "auto"
            ]
          },
          "expression": {
            "$ref": "#/components/schemas/SDTargetingExpressionV31"
          }
        }
      },
      "SDBidRecommendationV31": {
        "required": [
          "rangeLower",
          "rangeUpper",
          "recommended"
        ],
        "description": "A recommended bid range to use for a target.",
        "properties": {
          "rangeLower": {
            "type": "number",
            "description": "The lowest recommended bid to use to win an ad placement for this target.",
            "example": 0.5
          },
          "rangeUpper": {
            "type": "number",
            "description": "The highest recommended bid to use to win an ad placement for this target.",
            "example": 1
          },
          "recommended": {
            "type": "number",
            "description": "The recommended bid to use to win an ad placement for this target.",
            "example": 0.75
          }
        }
      },
      "SDTargetingExpressionV31": {
        "type": "array",
        "description": "The targeting expression to match against.\n\n------- Applicable to Product targeting (T00020) -------\n* A 'TargetingExpression' in a Product targeting Campaign can only contain 'TargetingPredicate' components.\n* Expressions must specify either a category predicate or an ASIN predicate, but never both.\n* Only one category may be specified per targeting expression.\n* Only one brand may be specified per targeting expression.\n* Only one asin may be specified per targeting expression.\n* To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.\n\n------- Applicable to Audience targeting (T00030) -------\n* A 'TargetingExpression' in an Audience Campaign can only contain 'TargetingPredicateNested' components.\n* **Future** To exclude parts of an audience, specify a TargetingPredicateNested component that contains a negative TargetingPredicate type.",
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SDTargetExpressionV31"
        }
      },
      "SDTargetExpressionV31": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SDTargetingPredicateV31"
          },
          {
            "$ref": "#/components/schemas/SDTargetingPredicateNestedV31"
          }
        ]
      },
      "SDTargetingPredicateV31": {
        "type": "object",
        "description": "A predicate to match against in the Targeting Expression (only applicable to Product targeting - T00020).\n\n* All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system.\n* Brand, price, and review predicates are optional and may only be specified if category is also specified.\n* Review predicates accept numbers between 0 and 5 and are inclusive.\n* When using either of the â€˜betweenâ€™ strings to construct a targeting expression the format of the string is â€˜double-doubleâ€™ where the first double must be smaller than the second double. Prices are not inclusive.",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "asinSameAs",
              "asinCategorySameAs",
              "asinBrandSameAs",
              "asinPriceBetween",
              "asinPriceGreaterThan",
              "asinPriceLessThan",
              "asinReviewRatingLessThan",
              "asinReviewRatingGreaterThan",
              "asinReviewRatingBetween",
              "asinIsPrimeShippingEligible",
              "asinAgeRangeSameAs",
              "asinGenreSameAs"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value to be targeted.",
            "example": "B0123456789"
          }
        }
      },
      "SDTargetingPredicateNestedV31": {
        "type": "object",
        "description": "A behavioral event and list of targeting predicates that represents an Audience to target (only applicable to Audience targeting - T00030).\n\n* For manual ASIN-grain targeting, the value array must contain only, 'exactProduct', 'similarProduct', 'releatedProduct' and 'lookback' TargetingPredicateBase components. The 'lookback' is mandatory and the value should be set to '7', '14', '30', '60', '90', '180' or '365'.\n* For manual Category-grain targeting, the value array must contain a 'lookback' and 'asinCategorySameAs' TargetingPredicateBase component, which can be further refined with optional brand, price, star-rating and shipping eligibility refinements. The 'lookback' is mandatory and the value should be set to '7', '14', '30', '60', '90', '180' or '365'.\n* For manual Category-grain targeting, the value array must contain a 'lookback' and 'asinCategorySameAs' TargetingPredicateBase component, which can be further refined with optional brand, price, star-rating and shipping eligibility refinements.\n* For Amazon Audiences targeting, the TargetingPredicateNested type should be set to 'audience' and the value array should include one TargetingPredicateBase component with type set to 'audienceSameAs'.\n* **Future** For manual Category-grain targeting, adding a 'negative' TargetingPredicateBase will exclude that TargetingPredicateNested from the overall audience.",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "views",
              "audience",
              "purchases"
            ]
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDTargetingPredicateBaseV31"
            }
          }
        }
      },
      "SDTargetingPredicateBaseV31": {
        "type": "object",
        "description": "A predicate to match against inside the TargetingPredicateNested component (only applicable to Audience targeting - T00030).\n\n* All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system.\n* Brand, price, and review predicates are optional and may only be specified if category is also specified.\n* Review predicates accept numbers between 0 and 5 and are inclusive.\n* When using either of the â€˜betweenâ€™ strings to construct a targeting expression the format of the string is â€˜double-doubleâ€™ where the first double must be smaller than the second double. Prices are not inclusive.\n* The exactProduct, similarProduct, and negative types do not utilize the value field.\n* The only type currently applicable to Amazon Audiences targeting is 'audienceSameAs'.\n* **Future** A 'negative' TargetingPredicateBase will exclude that TargetingPredicateNested from the overall audience.",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "asinCategorySameAs",
              "asinBrandSameAs",
              "asinPriceBetween",
              "asinPriceGreaterThan",
              "asinPriceLessThan",
              "asinReviewRatingLessThan",
              "asinReviewRatingGreaterThan",
              "asinReviewRatingBetween",
              "similarProduct",
              "exactProduct",
              "asinIsPrimeShippingEligible",
              "asinAgeRangeSameAs",
              "asinGenreSameAs",
              "audienceSameAs",
              "lookback"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value to be targeted.",
            "example": "B0123456789"
          }
        }
      },
      "SDTargetingBidRecommendationsRequestV32": {
        "description": "Request for targeting bid recommendations.",
        "example": {
          "products": [
            {
              "asin": "B01B8R6V2E"
            }
          ],
          "bidOptimization": "reach",
          "costType": "vcpm",
          "targetingClauses": [
            {
              "targetingClause": {
                "expressionType": "manual",
                "expression": [
                  {
                    "type": "views",
                    "value": [
                      {
                        "type": "similarProduct"
                      },
                      {
                        "type": "lookback",
                        "value": "30"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        "required": [
          "targetingClauses",
          "bidOptimization",
          "costType"
        ],
        "properties": {
          "products": {
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "description": "A list of products to tailor bid recommendations for category and audience based targeting clauses.",
            "items": {
              "$ref": "#/components/schemas/SDGoalProduct"
            }
          },
          "bidOptimization": {
            "$ref": "#/components/schemas/SDBidOptimizationV32"
          },
          "costType": {
            "$ref": "#/components/schemas/SDCostTypeV31"
          },
          "targetingClauses": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of targeting clauses to receive bid recommendations for.",
            "items": {
              "type": "object",
              "required": [
                "targetingClause"
              ],
              "properties": {
                "targetingClause": {
                  "$ref": "#/components/schemas/SDTargetingClauseV31"
                }
              }
            }
          }
        }
      },
      "SDTargetingBidRecommendationsResponseV32": {
        "description": "Response to a request for targeting bid recommendations.",
        "required": [
          "bidRecommendations",
          "costType",
          "bidOptimization"
        ],
        "properties": {
          "bidOptimization": {
            "$ref": "#/components/schemas/SDBidOptimizationV32"
          },
          "costType": {
            "$ref": "#/components/schemas/SDCostTypeV31"
          },
          "bidRecommendations": {
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseItemSuccessV31"
                },
                {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseItemFailureV31"
                }
              ]
            }
          }
        }
      },
      "SDBidOptimizationV32": {
        "type": "string",
        "description": "Determines what the recommended bids will be optimized for. \n\n|Name|CostType|Supported Tactics|Description|\n|----|----------|-----------|-----------|\n|clicks|cpc|T00020 T00030|Optimize for page visits|\n|conversions|cpc|T00020 T00030|Optimize for conversion|\n|reach|vcpm|T00020 T00030|Optimize for viewable impressions. $1 is the minimum bid for vCPM.|",
        "enum": [
          "clicks",
          "conversions",
          "reach"
        ]
      },
      "RuleId": {
        "type": "string",
        "description": "The identifier of the bid rule."
      },
      "PlacementType": {
        "type": "string",
        "enum": [
          "ALL"
        ],
        "default": "ALL",
        "description": "Placement type where the rule should be applied, defaults to `ALL`(including home page, detail page, twitch and offsite).\n\n**Future** More available placemenTypes will be supported."
      },
      "RuleCondition": {
        "type": "object",
        "description": "A rule condition that defines the advertiser's intent for the outcome of the rule.\nCertain actions are performed by the product to achieve and maintain the rule condition.",
        "properties": {
          "metricName": {
            "type": "string",
            "description": "The name of the metric.\nSupported rule metrics:\n\n|      Metric      |Operator        |Description|\n|------------------|----------------|-------------------|\n|VCPM              |EQUAL_TO        |Maximize viewable impressions while cost per 1000 views = `threshold`|\n|IMPRESSION_SHARE  |GREATER_THAN    |Get at least `threshold%` impressions(percentage range 0-100) from a specific placement|\n|COST_PER_DPV      |EQUAL_TO        |Maximize viewable impressions while cost per detail page view = `threshold`|\n|COST_PER_ORDER    |EQUAL_TO        |Maximize viewable impressions/page visits/conversion while cost per order = `threshold`|\n|COST_PER_CLICK    |EQUAL_TO        |Maximize page visits while cost per click = `threshold`|\n|ROAS              |EQUAL_TO        |Maximize conversion while ROAS = `threshold`|",
            "enum": [
              "VCPM",
              "IMPRESSION_SHARE",
              "COST_PER_DPV",
              "COST_PER_ORDER",
              "COST_PER_CLICK",
              "ROAS"
            ]
          },
          "comparisonOperator": {
            "type": "string",
            "description": "The camparison operator.",
            "enum": [
              "EQUAL_TO",
              "LESS_THAN",
              "GREATER_THAN",
              "LESS_THAN_OR_EQUAL_TO",
              "GREATER_THAN_OR_EQUAL_TO"
            ]
          },
          "threshold": {
            "type": "number",
            "description": "The value of the threshold associated with the metric.",
            "format": "double",
            "minimum": 0
          }
        }
      },
      "BaseBidRule": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "The state of the bid rule.",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "ruleName": {
            "type": "string",
            "description": "The name of the bid rule."
          },
          "ruleConditions": {
            "type": "array",
            "description": "A list of rule conditions that define the advertiser's intent for the outcome of the rule. The rule uses 'AND' logic to combine every condition in this list, and will validate the combination when the rule is created or updated.",
            "minItems": 1,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/RuleCondition"
            }
          }
        }
      },
      "BidRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseBidRule"
          },
          {
            "type": "object",
            "properties": {
              "ruleId": {
                "$ref": "#/components/schemas/RuleId"
              },
              "campaignId": {
                "$ref": "#/components/schemas/CampaignId"
              },
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "placementType": {
                "$ref": "#/components/schemas/PlacementType"
              }
            }
          }
        ]
      },
      "CreateBidRule": {
        "required": [
          "campaignId",
          "adGroupId",
          "state",
          "ruleConditions"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseBidRule"
          },
          {
            "type": "object",
            "properties": {
              "campaignId": {
                "$ref": "#/components/schemas/CampaignId"
              },
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "placementType": {
                "$ref": "#/components/schemas/PlacementType"
              }
            }
          }
        ]
      },
      "UpdateBidRule": {
        "required": [
          "ruleId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseBidRule"
          },
          {
            "type": "object",
            "properties": {
              "ruleId": {
                "$ref": "#/components/schemas/RuleId"
              }
            }
          }
        ]
      },
      "BidRuleResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "description": {
            "type": "string",
            "description": "A human-readable description of the response."
          },
          "ruleId": {
            "$ref": "#/components/schemas/RuleId"
          }
        }
      }
    },
    "parameters": {
      "clientHeader": {
        "name": "Amazon-Advertising-API-ClientId",
        "in": "header",
        "description": "The identifier of a client associated with a \"Login with Amazon\" account.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "profileHeader": {
        "name": "Amazon-Advertising-API-Scope",
        "in": "header",
        "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "oauth2AuthorizationCode": {
        "type": "oauth2",
        "description": "Login with Amazon. For more information see [Login with Amazon authorization code grant](https://developer.amazon.com/docs/login-with-amazon/authorization-code-grant.html).",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://www.amazon.com/ap/oa",
            "tokenUrl": "https://api.amazon.com/auth/o2/token",
            "scopes": {
              "cpc_advertising:campaign_management": "Modify your advertising campaigns and access performance data"
            }
          }
        }
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "oauth2AuthorizationCode": [
        "cpc_advertising:campaign_management"
      ]
    },
    {
      "bearerAuth": []
    }
  ]
}