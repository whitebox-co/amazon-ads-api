{
  "info": {
    "description": "Sponsored Display Snapshot API to get the status of Snapshot file.",
    "title": "Sponsored Display",
    "version": "3.0"
  },
  "paths": {
    "/sd/campaigns/{campaignId}/budgetRules/budgetHistory": {
      "get": {
        "summary": "Gets the budget history for a campaign specified by identifier.",
        "description": "**Deprecation notice: This endpoint will be deprecated on August 31, 2023.** The budget history is returned for the time period specified in the required startDate and endDate parameters. The maximum time period is 90 days.",
        "operationId": "getRuleBasedBudgetHistoryForSDCampaigns",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDBudgetHistory"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a Login with Amazon account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "format": "int64",
              "type": "number"
            },
            "in": "path",
            "name": "campaignId",
            "description": "The campaign identifier.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "nextToken",
            "description": "To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results."
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "pageSize",
            "description": "Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startDate",
            "description": "The start date of the budget history in YYYYMMDD format.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endDate",
            "description": "The end date of the budget history in YYYYMMDD format.",
            "required": true
          }
        ],
        "tags": [
          "BudgetRules"
        ]
      }
    },
    "/sd/brandSafety/status": {
      "get": {
        "summary": "List status of all requests",
        "description": "List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days.\n\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]",
        "operationId": "listRequestStatus",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDBrandSafetyListRequestStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/SDBrandSafetyClientHeader"
          },
          {
            "$ref": "#/components/parameters/SDBrandSafetyProfileHeader"
          }
        ],
        "tags": [
          "Brand Safety Request Status"
        ]
      }
    },
    "/sd/budgetRules/{budgetRuleId}": {
      "get": {
        "summary": "Gets a budget rule specified by identifier.",
        "operationId": "GetBudgetRuleByRuleIdForSDCampaigns",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSDBudgetRuleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because the user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "budgetRuleId",
            "description": "The budget rule identifier.",
            "required": true
          }
        ],
        "tags": [
          "BudgetRules"
        ]
      }
    },
    "/sd/brandSafety/{requestId}/results": {
      "get": {
        "summary": "Gets the results for the given request",
        "description": "When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests.\n\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]",
        "tags": [
          "Brand Safety Request Results"
        ],
        "operationId": "getRequestResults",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDBrandSafetyRequestResultsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/SDBrandSafetyClientHeader"
          },
          {
            "$ref": "#/components/parameters/SDBrandSafetyProfileHeader"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "requestId",
            "description": "The ID of the request previously submitted.",
            "required": true
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "startIndex",
            "description": "Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.\n",
            "required": false
          },
          {
            "schema": {
              "maximum": 1000,
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "count",
            "description": "Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex=0 and count=1000. To return the next 1000 results, set startIndex=1000 and count=1000, and so on. Defaults to max page size(1000).\n",
            "required": false
          }
        ]
      }
    },
    "/sd/brandSafety/{requestId}/status": {
      "get": {
        "summary": "Gets the status of the given request",
        "description": "When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted\n\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]",
        "tags": [
          "Brand Safety Request Status"
        ],
        "operationId": "getRequestStatus",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDBrandSafetyRequestStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/SDBrandSafetyClientHeader"
          },
          {
            "$ref": "#/components/parameters/SDBrandSafetyProfileHeader"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "requestId",
            "description": "The ID of the request previously submitted.",
            "required": true
          }
        ]
      }
    },
    "/sd/campaigns/budgetRecommendations": {
      "post": {
        "summary": "Returns recommended daily budget and estimated missed opportunities for campaigns",
        "requestBody": {
          "content": {
            "application/vnd.sdbudgetrecommendations.v3+json": {
              "schema": {
                "$ref": "#/components/schemas/SDBudgetRecommendationsRequest"
              }
            }
          }
        },
        "operationId": "getSDBudgetRecommendations",
        "description": "Given a list of campaigns as input, this API provides the following metrics:\n<br> <b>1. Recommended daily budget - </b> Estimated budget needed to keep the campaign in budget for the full 24-hour period. Consider this budget to minimize your campaign's chances of running out of budget. \n<br> <b>2. Percent time in budget </b> - The share of time the campaign was in budget during the past 7 days.\n<br> <b>3. Estimated missed impressions, clicks and sales </b> - These are the estimated additional impressions, clicks and sales the campaign might have generated had it adopted the recommended budget. These are estimates based on campaign's historical performance - and not a guarantee of actual impressions, clicks and sales. Consider using these metrics to further inform your budget allocation decisions.\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]",
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/vnd.sdbudgetrecommendations.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDBudgetRecommendationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Generic bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/SDClientHeader"
          },
          {
            "$ref": "#/components/parameters/SDProfileHeader"
          }
        ],
        "tags": [
          "Budget Recommendations"
        ]
      }
    },
    "/sd/budgetRules": {
      "post": {
        "summary": "Creates one or more budget rules.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSDBudgetRulesRequest"
              }
            }
          },
          "required": true
        },
        "operationId": "CreateBudgetRulesForSDCampaigns",
        "responses": {
          "207": {
            "description": "Multi-status. An object containing a list of budget rule response objects reflecting the same order as the input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBudgetRulesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because the user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server BudgetRuleError - Something went wrong on the server. Retry later and report an BudgetRuleError if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          }
        ],
        "tags": [
          "BudgetRules"
        ]
      },
      "get": {
        "summary": "Get all budget rules created by an advertiser",
        "operationId": "GetSDBudgetRulesForAdvertiser",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSDBudgetRulesForAdvertiserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because the user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "nextToken",
            "description": "To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results."
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "pageSize",
            "description": "Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.",
            "required": true
          }
        ],
        "tags": [
          "BudgetRules"
        ]
      },
      "put": {
        "summary": "Update one or more budget rules.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSDBudgetRulesRequest"
              }
            }
          },
          "required": true
        },
        "operationId": "UpdateBudgetRulesForSDCampaigns",
        "responses": {
          "207": {
            "description": "Multi-status. An object containing a list of budget rule response objects reflecting the same order as the input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBudgetRulesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because the user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server BudgetRuleError - Something went wrong on the server. Retry later and report an BudgetRuleError if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          }
        ],
        "tags": [
          "BudgetRules"
        ]
      }
    },
    "/sd/brandSafety/deny": {
      "post": {
        "summary": "Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list.\n",
        "description": "\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_edit\"]",
        "tags": [
          "Brand Safety Deny List Domains"
        ],
        "requestBody": {
          "description": "An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SDBrandSafetyPostRequest"
              }
            }
          },
          "required": true
        },
        "operationId": "createBrandSafetyDenyListDomains",
        "responses": {
          "202": {
            "description": "Request has been accepted for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDBrandSafetyUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/SDBrandSafetyClientHeader"
          },
          {
            "$ref": "#/components/parameters/SDBrandSafetyProfileHeader"
          }
        ]
      },
      "get": {
        "summary": "Gets a list of websites/apps that are on the advertiser's Brand Safety Deny List.",
        "description": "Gets an array of websites/apps that are on the advertiser's Brand Safety Deny List. It can take up to 15 minutes from the time a domain is added/deleted to the time it is reflected in the deny list.\n\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]",
        "tags": [
          "Brand Safety Deny List Domains"
        ],
        "operationId": "listDomains",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDBrandSafetyGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/SDBrandSafetyClientHeader"
          },
          {
            "$ref": "#/components/parameters/SDBrandSafetyProfileHeader"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "startIndex",
            "description": "Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.\n",
            "required": false
          },
          {
            "schema": {
              "maximum": 1000,
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "count",
            "description": "Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex=0 and count=1000. To return the next 1000 domains, set startIndex=1000 and count=1000, and so on. Defaults to max page size(1000).\n",
            "required": false
          }
        ]
      },
      "delete": {
        "summary": "Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is \"COMPLETED\", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted.\n",
        "description": "\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_edit\"]",
        "tags": [
          "Brand Safety Deny List Domains"
        ],
        "operationId": "deleteBrandSafetyDenyList",
        "responses": {
          "202": {
            "description": "Request has been accepted for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDBrandSafetyUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDAPIError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/SDBrandSafetyClientHeader"
          },
          {
            "$ref": "#/components/parameters/SDBrandSafetyProfileHeader"
          }
        ]
      }
    },
    "/sd/budgetRules/{budgetRuleId}/campaigns": {
      "get": {
        "summary": "Gets all the campaigns associated with a budget rule",
        "operationId": "GetCampaignsAssociatedWithSDBudgetRule",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDGetAssociatedCampaignsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because the user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "budgetRuleId",
            "description": "The budget rule identifier.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "nextToken",
            "description": "To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results."
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "pageSize",
            "description": "Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.",
            "required": true
          }
        ],
        "tags": [
          "BudgetRules"
        ]
      }
    },
    "/sd/snapshots/{snapshotId}/download": {
      "get": {
        "operationId": "downloadSnapshotById",
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdDefaultError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdDefaultError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdDefaultError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdDefaultError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdDefaultError"
                }
              }
            }
          }
        },
        "description": "\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "required": true
          }
        ],
        "tags": [
          "Snapshot APIs"
        ]
      }
    },
    "/sd/campaigns/{campaignId}/budgetRules/{budgetRuleId}": {
      "delete": {
        "summary": "Disassociates a budget rule specified by identifier from a campaign specified by identifier.",
        "operationId": "DisassociateAssociatedBudgetRuleForSDCampaigns",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisassociateAssociatedBudgetRuleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "format": "int64",
              "type": "number"
            },
            "in": "path",
            "name": "campaignId",
            "description": "The campaign identifier.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "budgetRuleId",
            "description": "The budget rule identifier.",
            "required": true
          }
        ],
        "tags": [
          "BudgetRules"
        ]
      }
    },
    "/sd/campaigns/{campaignId}/budgetRules": {
      "post": {
        "summary": "Associates one or more budget rules to a campaign specified by identifer.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssociatedBudgetRulesRequest"
              }
            }
          },
          "required": true
        },
        "description": "A maximum of 250 rules can be associated to a campaign. Note that the name of each rule associated to a campaign is required to be unique.",
        "operationId": "CreateAssociatedBudgetRulesForSDCampaigns",
        "responses": {
          "207": {
            "description": "Multi-status. An object containing a list of associated budget rule response objects reflecting the same order as the input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAssociatedBudgetRulesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because the user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "format": "int64",
              "type": "number"
            },
            "in": "path",
            "name": "campaignId",
            "description": "The campaign identifier.",
            "required": true
          }
        ],
        "tags": [
          "BudgetRules"
        ]
      },
      "get": {
        "summary": "Gets a list of budget rules associated to a campaign specified by identifier.",
        "operationId": "ListAssociatedBudgetRulesForSDCampaigns",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDListAssociatedBudgetRulesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because the user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "format": "int64",
              "type": "number"
            },
            "in": "path",
            "name": "campaignId",
            "description": "The campaign identifier.",
            "required": true
          }
        ],
        "tags": [
          "BudgetRules"
        ]
      }
    },
    "/sd/targets/recommendations": {
      "post": {
        "summary": "Returns a set of recommended products and categories to target",
        "requestBody": {
          "content": {
            "application/vnd.sdtargetingrecommendations.v3.3+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingRecommendationsRequestV33"
              }
            },
            "application/vnd.sdtargetingrecommendations.v3.0+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingRecommendationsRequest"
              }
            },
            "application/vnd.sdtargetingrecommendations.v3.2+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingRecommendationsRequestV32"
              }
            },
            "application/vnd.sdtargetingrecommendations.v3.1+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingRecommendationsRequestV31"
              }
            },
            "application/vnd.sdtargetingrecommendations.v3.4+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingRecommendationsRequestV34"
              }
            }
          }
        },
        "operationId": "getTargetRecommendations",
        "description": "Provides a list of products to target based on the list of input ASINs. Currently the API will return up to 100 recommended products and categories.\nThe currently available tactic identifiers are:\n\n|Tactic Name|Type|Description|\n|-----------|----|-----------|\n|T00020&nbsp;|Product Targeting|Products: Choose individual products to show your ads in placements related to those products.|\n|T00030&nbsp;|Audience Targeting|Audiences: Select individual audiences to show your ads.|\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/vnd.sdtargetingrecommendations.v3.3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingRecommendationsResponseV33"
                }
              },
              "application/vnd.sdtargetingrecommendations.v3.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingRecommendationsResponse"
                }
              },
              "application/vnd.sdtargetingrecommendations.v3.2+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingRecommendationsResponseV32"
                }
              },
              "application/vnd.sdtargetingrecommendations.v3.1+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingRecommendationsResponseV31"
                }
              },
              "application/vnd.sdtargetingrecommendations.v3.4+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingRecommendationsResponseV34"
                }
              }
            }
          },
          "400": {
            "description": "Generic bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/SDClientHeader"
          },
          {
            "$ref": "#/components/parameters/SDProfileHeader"
          },
          {
            "$ref": "#/components/parameters/SDRequestedLocale"
          }
        ],
        "tags": [
          "Targeting Recommendations"
        ]
      }
    },
    "/sd/targets/bid/recommendations": {
      "post": {
        "summary": "Returns a set of bid recommendations for targeting clauses",
        "requestBody": {
          "content": {
            "application/vnd.sdtargetingrecommendations.v3.3+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingBidRecommendationsRequestV33"
              }
            },
            "application/vnd.sdtargetingrecommendations.v3.2+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingBidRecommendationsRequestV32"
              }
            },
            "application/vnd.sdtargetingrecommendations.v3.1+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingBidRecommendationsRequestV31"
              }
            }
          }
        },
        "operationId": "getTargetBidRecommendations",
        "description": "Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses.\n\nThe recommended bids are derived from the last 7 days of winning auction bids for the related targeting clause.\n\n\nReceive bid recommendations using the following:\nProduct targeting clause|Description|\n|-----------|----|\n|asinSameAs=B0123456789|Receive a bid recommendation for this target product\n|asinCategorySameAs=12345|Receive a bid recommendation for this target category\n|similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.\n\n\nAudience targeting clause|Description|\n|-----------|----|\n|views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category\n|views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins\n|views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins\n|purchases(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has purchased products in the given category\n|purchases(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has purchased the advertised asins\n|purchases(relatedProduct lookback=30)|Receive a bid recommendation for a target audience that has purchased related products to the advertised asins\n|audience(audienceSameAs=12345)|Receive a bid recommendation for the given target audience\n\n\n#### Refinement Notes:\n- Refinements are currently not supported and if included will not impact the bid recommendation for the target\n\n\n#### Advertised ASIN Notes:\n- For asinSameAs targets the advertised asins will not impact the bid recommendation\n- For asinCategorySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation\n- For similarProduct, exactProduct, and relatedProduct targets the advertised asins are required\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]",
        "responses": {
          "207": {
            "description": "multi-status",
            "content": {
              "application/vnd.sdtargetingrecommendations.v3.3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseV32"
                }
              },
              "application/vnd.sdtargetingrecommendations.v3.2+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseV32"
                }
              },
              "application/vnd.sdtargetingrecommendations.v3.1+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseV31"
                }
              }
            }
          },
          "400": {
            "description": "Generic bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/SDClientHeader"
          },
          {
            "$ref": "#/components/parameters/SDProfileHeader"
          }
        ],
        "tags": [
          "Targeting Recommendations"
        ]
      }
    },
    "/sd/recommendations/creative/headline": {
      "post": {
        "requestBody": {
          "description": "Request body for SD headline recommendations API.",
          "content": {
            "application/vnd.sdheadlinerecommendationrequest.v4.0+json": {
              "schema": {
                "$ref": "#/components/schemas/SDHeadlineRecommendationRequest"
              }
            }
          },
          "required": true
        },
        "description": "You can use this Sponsored Display API to retrieve creative headline recommendations from an array of ASINs.\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_view\"]",
        "operationId": "getHeadlineRecommendationsForSD",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/vnd.sdheadlinerecommendationresponse.v4.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDHeadlineRecommendationResponse"
                }
              }
            }
          },
          "400": {
            "description": "SchemaValidationException 400 response.",
            "content": {
              "application/vnd.sdheadlinerecommendationschemavalidationexception.v4.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDHeadlineRecommendationSchemaValidationException"
                }
              }
            }
          },
          "403": {
            "description": "AccessDeniedException 403 response.",
            "content": {
              "application/vnd.sdheadlinerecommendationaccessdeniedexception.v4.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDHeadlineRecommendationAccessDeniedException"
                }
              }
            }
          },
          "404": {
            "description": "IdentifierNotFoundException 404 response.",
            "content": {
              "application/vnd.sdheadlinerecommendationidentifiernotfoundexception.v4.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDHeadlineRecommendationIdentifierNotfoundException"
                }
              }
            }
          },
          "429": {
            "description": "ThrottlingException 429 response.",
            "content": {
              "application/vnd.sdheadlinerecommendationthrottlingexception.v4.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDHeadlineRecommendationMarsThrottlingException"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerException 500 response.",
            "content": {
              "application/vnd.sdheadlinerecommendationinternalserverexception.v4.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDHeadlineRecommendationInternalServerException"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "tags": [
          "Recommendations"
        ]
      }
    },
    "/sd/{recordType}/snapshot": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotRequest"
              }
            }
          },
          "required": true
        },
        "operationId": "createSnapshot",
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdDefaultError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdDefaultError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdDefaultError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdDefaultError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdDefaultError"
                }
              }
            }
          }
        },
        "description": "\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "campaigns",
                "adGroups",
                "productAds",
                "targets",
                "negativeTargets"
              ]
            },
            "in": "path",
            "name": "recordType",
            "required": true
          }
        ],
        "tags": [
          "Snapshot APIs"
        ]
      }
    },
    "/sd/snapshots/{snapshotId}": {
      "get": {
        "operationId": "getSnapshotById",
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdDefaultError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdDefaultError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdDefaultError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdDefaultError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdDefaultError"
                }
              }
            }
          }
        },
        "description": "\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "snapshotId",
            "required": true
          }
        ],
        "tags": [
          "Snapshot APIs"
        ]
      }
    },
    "/sd/campaigns/budget/usage": {
      "post": {
        "summary": "Budget usage API for SD campaigns",
        "description": "\n\n**Requires one of these permissions**:\n[\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]",
        "tags": [
          "Budget Usage"
        ],
        "requestBody": {
          "content": {
            "application/vnd.sdcampaignbudgetusage.v1+json": {
              "schema": {
                "$ref": "#/components/schemas/BudgetUsageCampaignRequest"
              }
            }
          }
        },
        "operationId": "sdCampaignsBudgetUsage",
        "responses": {
          "207": {
            "description": "Multi-status. An object containing a list of budget usage response objects reflecting the same order as the input.",
            "content": {
              "application/vnd.sdcampaignbudgetusage.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetUsageCampaignResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetUsageError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because the user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetUsageError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetUsageError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetUsageError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetUsageError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server BudgetUsageError - Something went wrong on the server. Retry later and report an BudgetUsageError if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetUsageError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {},
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {},
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          }
        ]
      }
    }
  },
  "components": {
    "headers": {},
    "examples": {},
    "schemas": {
      "SDProductTargetingRecommendationsSuccess": {
        "description": "Recommendation results for product targeting.",
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 200 indicating a successful response for product recommendations.",
            "type": "string",
            "example": "200"
          },
          "name": {
            "description": "The theme name specified in the request.",
            "type": "string"
          },
          "recommendations": {
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of recommended products.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDProductRecommendationV32"
            }
          }
        }
      },
      "SDTargetingRecommendationsResponse": {
        "description": "Response to a request for targeting recommendations",
        "properties": {
          "recommendations": {
            "$ref": "#/components/schemas/SDTargetingRecommendations"
          }
        }
      },
      "SDHeadlineRecommendationSchemaValidationException": {
        "type": "object",
        "properties": {
          "code": {
            "description": "InvalidArgumentErrorCode.",
            "type": "string",
            "enum": [
              "INVALID_ARGUMENT"
            ]
          },
          "details": {
            "description": "A human-readable description of the error response.",
            "type": "string"
          }
        }
      },
      "CreateBudgetRulesResponse": {
        "type": "object",
        "properties": {
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetRuleResponse"
            }
          }
        }
      },
      "SDTargetingRecommendationsFailureV34": {
        "description": "A targeting recommendation failure record.",
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code indicating a failure response for targeting recomendations.",
            "type": "string",
            "example": "400"
          },
          "expression": {
            "minItems": 1,
            "maxItems": 1,
            "description": "A list of expressions that failed to be applied in the product targeting theme.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDProductTargetingThemeExpression"
            }
          },
          "name": {
            "description": "The theme name specified in the request. If the themes field is not provided in the request,\nthe value of this field will be set to default.",
            "type": "string"
          },
          "errorMessage": {
            "description": "A human friendly error message indicating the failure reasons.",
            "type": "string"
          }
        }
      },
      "SDBudgetRecommendationsRequest": {
        "description": "Request for budget recommendations.",
        "required": [
          "campaignIds"
        ],
        "properties": {
          "campaignIds": {
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of campaign ids for which to get budget recommendations and missed opportunities.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "5292131569371",
              "5292131569372"
            ]
          }
        }
      },
      "HeadlineSuggestionResponse": {
        "description": "Response structure of headline suggestion API.",
        "type": "object",
        "properties": {
          "requestId": {
            "description": "An identifier for request made which is generated by server.",
            "type": "string"
          },
          "suggestions": {
            "description": "Suggestions are sorted, i.e., more suitable headline has lesser array index value",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuggestedHeadline"
            }
          }
        }
      },
      "SDBudgetRule": {
        "type": "object",
        "required": [
          "ruleId"
        ],
        "properties": {
          "ruleState": {
            "$ref": "#/components/schemas/state"
          },
          "lastUpdatedDate": {
            "format": "int64",
            "description": "Epoch time of budget rule update. Read-only.",
            "type": "number"
          },
          "createdDate": {
            "format": "int64",
            "description": "Epoch time of budget rule creation. Read-only.",
            "type": "number"
          },
          "ruleDetails": {
            "$ref": "#/components/schemas/SDBudgetRuleDetails"
          },
          "ruleId": {
            "description": "The budget rule identifier.",
            "type": "string"
          },
          "ruleStatus": {
            "description": "The budget rule status. Read-only.",
            "type": "string"
          }
        }
      },
      "state": {
        "description": "The budget rule state.",
        "type": "string",
        "enum": [
          "ACTIVE",
          "PAUSED"
        ]
      },
      "ViolatingImageEvidence": {
        "type": "object",
        "properties": {
          "violatingImageCrop": {
            "$ref": "#/components/schemas/ImageCrop"
          }
        }
      },
      "SDRecommendationTypeV32": {
        "description": "Signifies a type of recommendation",
        "type": "string",
        "enum": [
          "PRODUCT",
          "CATEGORY",
          "AUDIENCE"
        ],
        "example": "PRODUCT"
      },
      "SDRecommendationTypeV31": {
        "description": "Signifies a type of recommendation",
        "type": "string",
        "enum": [
          "PRODUCT",
          "CATEGORY"
        ],
        "example": "PRODUCT"
      },
      "SBGetAssociatedCampaignsResponse": {
        "type": "object",
        "properties": {
          "associatedCampaigns": {
            "minItems": 0,
            "maxItems": 30,
            "description": "A list of campaigns that are associated to this budget rule.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociatedCampaign"
            }
          },
          "nextToken": {
            "description": "To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.",
            "type": "string"
          }
        }
      },
      "EventTypeRuleDuration": {
        "description": "Object representing event type rule duration.",
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "eventId": {
            "description": "The event identifier. This value is available from the budget rules recommendation API.",
            "type": "string"
          },
          "endDate": {
            "description": "The event end date in YYYYMMDD format. Read-only.",
            "type": "string"
          },
          "eventName": {
            "description": "The event name. Read-only.",
            "type": "string"
          },
          "startDate": {
            "description": "The event start date in YYYYMMDD format. Read-only. Note that this field is present only for announced events.",
            "type": "string"
          }
        }
      },
      "SDHeadlineRecommendationRequest": {
        "description": "Request structure of SD headline recommendation API.",
        "type": "object",
        "properties": {
          "asins": {
            "minItems": 1,
            "maxItems": 100,
            "description": "An array of ASINs associated with the creative.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "maxNumRecommendations": {
            "description": "Maximum number of recommendations that API should return. Response will [0, maxNumRecommendations] recommendations (recommendations are not guaranteed as there can be instances where the ML model can not generate policy compliant headlines for the given set of asins).",
            "maximum": 10,
            "type": "number",
            "minimum": 1
          },
          "adFormat": {
            "type": "string",
            "enum": [
              "SPONSORED_DISPLAY"
            ]
          }
        }
      },
      "SPRuleBasedBudget": {
        "type": "object",
        "properties": {
          "executionTime": {
            "format": "int64",
            "description": "Epoch time of budget rule execution.",
            "type": "number"
          },
          "appliedRule": {
            "$ref": "#/components/schemas/SPBudgetRule"
          },
          "ruleBasedBudgetValue": {
            "description": "The budget value.",
            "type": "number"
          },
          "dailyBudgetValue": {
            "description": "The daily budget value.",
            "type": "number"
          },
          "performanceMetric": {
            "$ref": "#/components/schemas/PerformanceMetricValue"
          }
        }
      },
      "SDAudienceCategory": {
        "description": "An audience category determines the goal of the audience such as In-market, Interest and Lifestyle",
        "type": "string",
        "enum": [
          "In-market",
          "Lifestyle",
          "Interest",
          "Life event"
        ],
        "example": "In-Market"
      },
      "SDBidOptimizationV32": {
        "description": "Determines what the recommended bids will be optimized for.\n\n|Name|CostType|Supported Tactics|Description|\n|----|----------|-----------|-----------|\n|clicks|cpc|T00020 T00030|Optimize for page visits|\n|conversions|cpc|T00020 T00030|Optimize for conversion|\n|reach|vcpm|T00020 T00030|Optimize for viewable impressions|",
        "type": "string",
        "enum": [
          "clicks",
          "conversions",
          "reach"
        ]
      },
      "SBBudgetHistory": {
        "type": "object",
        "properties": {
          "nextToken": {
            "description": "To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.",
            "type": "string"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SBRuleBasedBudget"
            }
          }
        }
      },
      "AsinPolicyViolation": {
        "type": "object",
        "properties": {
          "policyDescription": {
            "description": "A human-readable description of the policy.",
            "type": "string",
            "example": "example: Advertising alcohol is not allowed"
          },
          "name": {
            "description": "A policy violation code.",
            "type": "string"
          },
          "type": {
            "description": "Type of policy violation.",
            "type": "string",
            "enum": [
              "WARNING",
              "REJECTED"
            ]
          },
          "policyLinkUrl": {
            "description": "Address of the policy documentation. Follow the link to learn more about the specified policy.",
            "type": "string",
            "example": "https://advertising.amazon.com/resources/ad-policy/en/creative-acceptance#alcohol"
          }
        }
      },
      "LandingPage": {
        "description": "Details of landing page.",
        "type": "object",
        "properties": {
          "url": {
            "description": "Landing Page Url of the component.",
            "type": "string"
          }
        }
      },
      "ImageComponentResponse": {
        "description": "Pre moderation result for a image component",
        "type": "object",
        "properties": {
          "preModerationStatus": {
            "description": "The pre moderation status of the component.",
            "type": "string",
            "enum": [
              "REJECTED",
              "APPROVED",
              "FAILED",
              "RETRYABLE_FAILURE"
            ]
          },
          "componentType": {
            "description": "Type of the image component.",
            "type": "string",
            "enum": [
              "BRAND_LOGO",
              "CUSTOM_IMAGE",
              "OTHER_IMAGE"
            ]
          },
          "landingPage": {
            "$ref": "#/components/schemas/LandingPage"
          },
          "policyViolations": {
            "description": "A list of policy violations for the component that were detected during pre moderation. Note that this field is present in the response only when preModerationStatus is set to REJECTED.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImagePolicyViolation"
            }
          },
          "id": {
            "description": "Id of the component. This is the same id sent as part of the request. This can be used to uniquely identify the component.",
            "type": "string"
          },
          "url": {
            "description": "Publicly accessible url of the image that got pre moderated.",
            "type": "string"
          }
        }
      },
      "TextPolicyViolation": {
        "description": "Structure of policy violation for a text component",
        "type": "object",
        "properties": {
          "policyDescription": {
            "description": "A human-readable description of the policy.",
            "type": "string"
          },
          "name": {
            "description": "A policy violation code.",
            "type": "string",
            "example": "GRAMMATICAL_ERROR"
          },
          "type": {
            "description": "Type of policy violation.",
            "type": "string",
            "enum": [
              "WARNING",
              "REJECTED"
            ]
          },
          "policyLinkUrl": {
            "description": "Address of the policy documentation. Follow the link to learn more about the specified policy.",
            "type": "string",
            "example": "https://advertising.amazon.com/resources/ad-policy/en/creative-acceptance#alcohol"
          },
          "textEvidences": {
            "description": "List of text evidences",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextEvidence"
            }
          }
        }
      },
      "CreateSPBudgetRulesRequest": {
        "type": "object",
        "properties": {
          "budgetRulesDetails": {
            "maxItems": 25,
            "description": "A list of budget rule details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SPBudgetRuleDetails"
            }
          }
        }
      },
      "TextComponentResponse": {
        "description": "Pre moderation result for a text component",
        "type": "object",
        "properties": {
          "preModerationStatus": {
            "description": "The pre moderation status of the component.",
            "type": "string",
            "enum": [
              "REJECTED",
              "APPROVED",
              "FAILED",
              "RETRYABLE_FAILURE"
            ]
          },
          "componentType": {
            "description": "Type of the text component.",
            "type": "string",
            "enum": [
              "HEADLINE",
              "BRAND_NAME",
              "OTHER_TEXT"
            ]
          },
          "corrections": {
            "description": "A list of corrected text without any policy violation. You could consider replacing the component with one of the corrected texts",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "policyViolations": {
            "description": "A list of policy violations for the component that were detected during pre moderation. Note that this field is present in the response only when preModerationStatus is set to REJECTED.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextPolicyViolation"
            }
          },
          "id": {
            "description": "Id of the component. This is the same id sent as part of the request. This can be used to uniquely identify the component.",
            "type": "string"
          },
          "text": {
            "description": "Text which got pre moderated.",
            "type": "string"
          }
        }
      },
      "SDCategoryRecommendationV33": {
        "description": "A recommended category to target ads on",
        "properties": {
          "path": {
            "minItems": 1,
            "description": "The path of the category within the category catalogue",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "translatedPath": {
            "minItems": 1,
            "description": "The translated path of the category within the category catalogue by requested locale, field will not be provided if locale is not provided or campaign localization is down",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "description": "The category name",
            "type": "string"
          },
          "rank": {
            "description": "A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation",
            "type": "integer",
            "minimum": 1
          },
          "targetableAsinCountRange": {
            "description": "The range of ASINs available within the category catalogue",
            "type": "object",
            "properties": {
              "rangeUpper": {
                "type": "integer"
              },
              "rangeLower": {
                "type": "integer"
              }
            }
          },
          "category": {
            "$ref": "#/components/schemas/SDCategory"
          },
          "translatedName": {
            "description": "The translated category name by requested locale, field will not be provided if locale is not provided or campaign localization service is down",
            "type": "string"
          }
        }
      },
      "SDProductTargetingRecommendationsSuccessV34": {
        "description": "Recommendation results for product targeting.",
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 200 indicating a successful response for product recommendations.",
            "type": "string",
            "example": "200"
          },
          "expression": {
            "minItems": 1,
            "maxItems": 1,
            "description": "A list of expressions defining the product targeting theme. The list will define an AND operator on different expressions.\nFor example, asinPriceGreaterThan and asinReviewRatingLessThan can be used to request product recommendations\nwhich are both with greater price and less review rating compared to the goal products.\nNote: currently the service only support one item in the array.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDProductTargetingThemeExpression"
            }
          },
          "name": {
            "description": "The theme name specified in the request.",
            "type": "string"
          },
          "recommendations": {
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of recommended products.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDProductRecommendationV32"
            }
          }
        }
      },
      "SDTargetingBidRecommendationsRequestV33": {
        "description": "Request for targeting bid recommendations.",
        "required": [
          "targetingClauses",
          "bidOptimization",
          "costType"
        ],
        "properties": {
          "bidOptimization": {
            "$ref": "#/components/schemas/SDBidOptimizationV32"
          },
          "creativeType": {
            "$ref": "#/components/schemas/SDCreativeType"
          },
          "costType": {
            "$ref": "#/components/schemas/SDCostTypeV31"
          },
          "targetingClauses": {
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of targeting clauses to receive bid recommendations for.",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "targetingClause"
              ],
              "properties": {
                "targetingClause": {
                  "$ref": "#/components/schemas/SDTargetingClauseV31"
                }
              }
            }
          },
          "products": {
            "minItems": 0,
            "maxItems": 10000,
            "description": "A list of products to tailor bid recommendations for category and audience based targeting clauses.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDGoalProduct"
            }
          }
        }
      },
      "SDTargetingRecommendationsRequest": {
        "description": "Request for targeting recommendations",
        "required": [
          "tactic",
          "products",
          "typeFilter"
        ],
        "properties": {
          "typeFilter": {
            "minItems": 1,
            "maxItems": 1,
            "description": "A filter to indicate which types of recommendations to request.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDRecommendationType"
            }
          },
          "tactic": {
            "$ref": "#/components/schemas/SDTactic"
          },
          "products": {
            "minItems": 1,
            "maxItems": 10000,
            "description": "A list of products for which to get targeting recommendations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDGoalProduct"
            }
          }
        }
      },
      "SDTargetingBidRecommendationsRequestV32": {
        "description": "Request for targeting bid recommendations.",
        "required": [
          "targetingClauses",
          "bidOptimization",
          "costType"
        ],
        "properties": {
          "bidOptimization": {
            "$ref": "#/components/schemas/SDBidOptimizationV32"
          },
          "costType": {
            "$ref": "#/components/schemas/SDCostTypeV31"
          },
          "targetingClauses": {
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of targeting clauses to receive bid recommendations for.",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "targetingClause"
              ],
              "properties": {
                "targetingClause": {
                  "$ref": "#/components/schemas/SDTargetingClauseV31"
                }
              }
            }
          },
          "products": {
            "minItems": 0,
            "maxItems": 10000,
            "description": "A list of products to tailor bid recommendations for category and audience based targeting clauses.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDGoalProduct"
            }
          }
        }
      },
      "SDTargetingBidRecommendationsRequestV31": {
        "description": "Request for targeting bid recommendations.",
        "required": [
          "targetingClauses"
        ],
        "properties": {
          "targetingClauses": {
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of targeting clauses to receive bid recommendations for.",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "targetingClause"
              ],
              "properties": {
                "targetingClause": {
                  "$ref": "#/components/schemas/SDTargetingClauseV31"
                }
              }
            }
          },
          "products": {
            "minItems": 0,
            "maxItems": 10000,
            "description": "A list of products to tailor bid recommendations for category and audience based targeting clauses.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDGoalProduct"
            }
          }
        }
      },
      "BudgetUsagePortfolioResponse": {
        "type": "object",
        "properties": {
          "success": {
            "description": "List of budget usage percentages that were successfully pulled",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetUsagePortfolio"
            }
          },
          "error": {
            "description": "List of budget usage percentages that failed to pull",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetUsagePortfolioBatchError"
            }
          }
        }
      },
      "SDBrandSafetyDenyListDomainType": {
        "description": "The domain type.",
        "type": "string",
        "enum": [
          "WEBSITE",
          "APP"
        ]
      },
      "GetSPBudgetRuleResponse": {
        "type": "object",
        "properties": {
          "budgetRule": {
            "$ref": "#/components/schemas/SPBudgetRule"
          }
        }
      },
      "RuleDuration": {
        "type": "object",
        "properties": {
          "eventTypeRuleDuration": {
            "$ref": "#/components/schemas/EventTypeRuleDuration"
          },
          "dateRangeTypeRuleDuration": {
            "$ref": "#/components/schemas/DateRangeTypeRuleDuration"
          }
        }
      },
      "SDAudienceRecommendations": {
        "type": "object",
        "properties": {
          "audiences": {
            "minItems": 0,
            "maxItems": 10,
            "description": "List of recommended audience targets, broken down by audience category",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDAudienceCategoryRecommendations"
            }
          }
        }
      },
      "VersionId": {
        "description": "The version identifier that helps to keep track of multiple versions of a submitted ad. In case of Sponsored Brands this is the creative version id.",
        "type": "string"
      },
      "ModerationError": {
        "description": "The Error Response Object.",
        "type": "object",
        "properties": {
          "code": {
            "description": "The HTTP status code of the response.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the response.",
            "type": "string"
          }
        }
      },
      "SDThemeRecommendations": {
        "type": "object",
        "properties": {
          "products": {
            "$ref": "#/components/schemas/SDProductThemeRecommendations"
          }
        }
      },
      "TextEvidence": {
        "description": "Structure of a text evidence",
        "type": "object",
        "properties": {
          "violatingText": {
            "description": "The specific text determined to violate the specified policy in reviewedText.",
            "type": "string",
            "example": "alcohol"
          },
          "position": {
            "description": "Position in the textComponent where the policy violation is detected.",
            "type": "object",
            "properties": {
              "start": {
                "description": "Zero-based index into the text in textComponent where the text specified in violatingText starts.",
                "type": "integer"
              },
              "end": {
                "description": "Zero-based index into the text in textComponent where the text specified in violatingText ends.",
                "type": "integer"
              }
            }
          }
        }
      },
      "SecondaryHeadlineRecommendationGroups": {
        "minItems": 0,
        "maxItems": 5,
        "description": "Ordered list of Secondary Headline recommendation groups.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TextRecommendations"
        }
      },
      "SDBrandSafetyRequestResult": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The website or app identifier.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the response.",
            "type": "string"
          },
          "domainId": {
            "format": "int64",
            "description": "The identifier of the Brand Safety Deny List Domain.",
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/SDBrandSafetyDenyListDomainUpdateResultStatus"
          }
        }
      },
      "ViolatingTextEvidence": {
        "type": "object",
        "properties": {
          "violatingTextPosition": {
            "$ref": "#/components/schemas/TextPosition"
          },
          "violatingText": {
            "description": "The specific text determined to violate the specified policy in reviewedText.",
            "type": "string"
          }
        }
      },
      "BudgetUsagePortfolio": {
        "type": "object",
        "properties": {
          "budgetUsagePercent": {
            "description": "Budget usage percentage (spend / available budget) for the given budget policy.",
            "type": "number"
          },
          "portfolioId": {
            "description": "ID of requested resource",
            "type": "string"
          },
          "usageUpdatedTimestamp": {
            "format": "date-time",
            "description": "Last evaluation time for budget usage",
            "type": "string"
          },
          "index": {
            "description": "An index to maintain order of the portfolioIds",
            "type": "number"
          },
          "budget": {
            "description": "Budget amount of resource requested",
            "type": "number"
          }
        }
      },
      "SDSevenDaysMissedOpportunities": {
        "properties": {
          "estimatedMissedSalesLower": {
            "description": "Lower bound of the estimated missed sales. This will be in local currency.",
            "type": "number",
            "example": "200.75"
          },
          "estimatedMissedSalesUpper": {
            "description": "Upper bound of the estimated missed sales. This will be in local currency.",
            "type": "number",
            "example": "400.75"
          },
          "endDate": {
            "format": "date",
            "description": "End date of the missed opportunities date range (YYYY-MM-DD).",
            "type": "string",
            "example": "2023-05-07"
          },
          "estimatedMissedImpressionsLower": {
            "description": "Lower bound of the estimated missed impressions.",
            "type": "integer",
            "example": "50"
          },
          "estimatedMissedClicksLower": {
            "description": "Lower bound of the estimated missed clicks.",
            "type": "integer",
            "example": "30"
          },
          "estimatedMissedClicksUpper": {
            "description": "Upper bound of the estimated missed clicks.",
            "type": "integer",
            "example": "50"
          },
          "estimatedMissedImpressionsUpper": {
            "description": "Upper bound of the estimated missed impressions.",
            "type": "integer",
            "example": "70"
          },
          "startDate": {
            "format": "date",
            "description": "Start date of the missed opportunities date range (YYYY-MM-DD).",
            "type": "string",
            "example": "2023-05-01"
          },
          "percentTimeInBudget": {
            "description": "Percentage of time the campaign is active with a budget.",
            "type": "number",
            "example": "60.5"
          },
          "estimatedMissedViewableImpressionsLower": {
            "description": "Lower bound of the estimated missed viewable impressions for vCPM campaigns.",
            "type": "integer",
            "example": "70"
          },
          "estimatedMissedViewableImpressionsUpper": {
            "description": "Upper bound of the estimated missed viewable impressions for vCPM campaigns.",
            "type": "integer",
            "example": "90"
          }
        }
      },
      "SDBrandSafetyListRequestStatusResponse": {
        "description": "List of all requests' status.",
        "type": "object",
        "properties": {
          "requestStatusList": {
            "description": "List of all requests' status.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDBrandSafetyRequestStatus"
            }
          }
        }
      },
      "SDProductRecommendation": {
        "description": "A recommended product to target ads on",
        "type": "object",
        "properties": {
          "rank": {
            "description": "A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation",
            "type": "integer",
            "minimum": 1
          },
          "asin": {
            "$ref": "#/components/schemas/SDASIN"
          }
        }
      },
      "SDTargetingExpressionV31": {
        "minItems": 1,
        "description": "The targeting expression to match against.\n\n------- Applicable to Product targeting (T00020) -------\n* A 'TargetingExpression' in a Product targeting Campaign can only contain 'TargetingPredicate' components.\n* Expressions must specify either a category predicate or an ASIN predicate, but never both.\n* Only one category may be specified per targeting expression.\n* Only one brand may be specified per targeting expression.\n* Only one asin may be specified per targeting expression.\n* To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.\n\n------- Applicable to Audience targeting (T00030) -------\n* A 'TargetingExpression' in an Audience Campaign can only contain 'TargetingPredicateNested' components.\n* Expressions must specify either auto ASIN-grain (exact products), manual ASIN-grain (similar products), or manual category-grain targeting.\n* **Future** To exclude parts of an audience, specify a TargetingPredicateNested component that contains a negative TargetingPredicate type.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SDTargetExpressionV31"
        }
      },
      "SBListAssociatedBudgetRulesResponse": {
        "type": "object",
        "properties": {
          "associatedRules": {
            "description": "A list of associated budget rules.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SBCampaignBudgetRule"
            }
          }
        }
      },
      "DatePolicyViolation": {
        "type": "object",
        "properties": {
          "policyDescription": {
            "description": "A human-readable description of the policy.",
            "type": "string",
            "example": "example: Advertising alcohol is not allowed"
          },
          "name": {
            "description": "A policy violation code.",
            "type": "string"
          },
          "type": {
            "description": "Type of policy violation.",
            "type": "string",
            "enum": [
              "WARNING",
              "REJECTED"
            ]
          },
          "policyLinkUrl": {
            "description": "Address of the policy documentation. Follow the link to learn more about the specified policy.",
            "type": "string",
            "example": "https://advertising.amazon.com/resources/ad-policy/en/creative-acceptance#alcohol"
          }
        }
      },
      "PrimaryHeadlineRecommendationGroups": {
        "minItems": 0,
        "maxItems": 5,
        "description": "Ordered list of Primary Headline recommendation groups.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TextRecommendations"
        }
      },
      "SDProductRecommendationV32": {
        "description": "A recommended product to target ads on",
        "type": "object",
        "properties": {
          "advertisedAsins": {
            "minItems": 1,
            "maxItems": 5,
            "description": "The top advertised products this recommendation is made for.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDASIN"
            }
          },
          "rank": {
            "description": "A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation",
            "type": "integer",
            "minimum": 1
          },
          "asin": {
            "$ref": "#/components/schemas/SDASIN"
          }
        }
      },
      "ViolatingTextContent": {
        "description": "Information about the specific text that violates the specified policy in the campaign.",
        "type": "object",
        "properties": {
          "reviewedText": {
            "description": "The actual text on which the moderation was done.",
            "type": "string"
          },
          "violatingTextEvidences": {
            "minItems": 0,
            "maxItems": 200,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViolatingTextEvidence"
            }
          },
          "moderatedComponent": {
            "description": "Moderation component which marked the policy violation.",
            "type": "string"
          }
        }
      },
      "SDAudience": {
        "description": "The audience identifier",
        "type": "string",
        "example": "417464173123977686"
      },
      "SDBrandSafetyUpdateResponse": {
        "description": "Response for Brand Safety POST and DELETE requests",
        "properties": {
          "requestId": {
            "description": "The identifier of the request",
            "type": "string"
          }
        }
      },
      "SuggestedHeadline": {
        "description": "Suggested Headline in response object.",
        "type": "object",
        "properties": {
          "headlineId": {
            "description": "Unique Id of suggested headline.",
            "type": "string",
            "example": "e991e32c-0136-427a-843b-ff04162f2f91"
          },
          "headline": {
            "description": "String that contains suggested headline.",
            "type": "string",
            "example": "This is a suggested headline."
          }
        }
      },
      "SDGetAssociatedCampaignsResponse": {
        "type": "object",
        "properties": {
          "associatedCampaigns": {
            "minItems": 0,
            "maxItems": 30,
            "description": "A list of campaigns that are associated to this budget rule.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociatedCampaign"
            }
          },
          "nextToken": {
            "description": "To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.",
            "type": "string"
          }
        }
      },
      "SDHeadlineRecommendationMarsThrottlingException": {
        "type": "object",
        "properties": {
          "code": {
            "description": "ThrottledErrorCode.",
            "type": "string",
            "enum": [
              "THROTTLED"
            ]
          },
          "details": {
            "description": "A human-readable description of the error response.",
            "type": "string"
          }
        }
      },
      "SDBudgetRecommendation": {
        "required": [
          "index",
          "campaignId",
          "suggestedBudget",
          "sevenDaysMissedOpportunities"
        ],
        "properties": {
          "campaignId": {
            "description": "Campaign id.",
            "type": "string",
            "example": "5292131569371"
          },
          "suggestedBudget": {
            "description": "Recommended budget for the campaign. This will be in local currency.",
            "type": "number",
            "example": "350.12"
          },
          "index": {
            "description": "Correlate the recommendation to the campaign index in the request. Zero-based.",
            "type": "integer",
            "example": "0"
          },
          "sevenDaysMissedOpportunities": {
            "$ref": "#/components/schemas/SDSevenDaysMissedOpportunities"
          }
        }
      },
      "SDRuleType": {
        "description": "The type of budget rule. SCHEDULE: A budget rule based on a start and end date. PERFORMANCE: A budget rule based on advertising performance criteria.",
        "type": "string",
        "enum": [
          "SCHEDULE",
          "PERFORMANCE"
        ]
      },
      "SDCostTypeV31": {
        "description": "Determines what performance metric the bid recommendations will be optimized for.\n|Name|Supported Tactics|Description|\n|----|----------|-----------|\n|CPC|T00020 T00030|The bid recommendations will be optimized for clicks triggered by the ad.|\n|VCPM|T00020 T00030|The bid recommendations will be optimized for viewed impressions triggered by the ad.|",
        "type": "string",
        "enum": [
          "cpc",
          "vcpm"
        ]
      },
      "TextComponent": {
        "description": "Text component which needs to be pre moderated",
        "type": "object",
        "required": [
          "componentType",
          "id",
          "text"
        ],
        "properties": {
          "componentType": {
            "description": "Type of text component.",
            "type": "string",
            "enum": [
              "HEADLINE",
              "BRAND_NAME",
              "OTHER_TEXT"
            ]
          },
          "id": {
            "description": "Id of the component. The same will be returned as part of the response as well. This can be used to uniquely identify the component from the pre moderation response.",
            "type": "string"
          },
          "text": {
            "description": "Text which needs to be moderated.",
            "type": "string"
          }
        }
      },
      "SDProductTargetingTheme": {
        "description": "Product targeting theme definitions.",
        "type": "object",
        "required": [
          "name",
          "expression"
        ],
        "properties": {
          "expression": {
            "minItems": 1,
            "maxItems": 1,
            "description": "A list of expressions defining the product targeting theme. The list will define an AND operator on different expressions.\nFor example, asinPriceGreaterThan and asinReviewRatingLessThan can be used to request product recommendations\nwhich are both with greater price and less review rating compared to the goal products.\nNote: currently the service only support one item in the array.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDProductTargetingThemeExpression"
            }
          },
          "name": {
            "minLength": 1,
            "pattern": "^(?!\\s*default\\s*$).*$",
            "description": "This is the meaningful theme name which will be used as a unique identifier across various themes in the same request.\nThis identifier will also be used to map the recommendations back to the theme in the response body.\nNote: the value for this field cannot be \"default\" as that's a reserved keyword in the system.",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "AsinComponent": {
        "description": "Asin component which needs to be pre moderated.",
        "type": "object",
        "required": [
          "asin",
          "componentType",
          "id"
        ],
        "properties": {
          "componentType": {
            "description": "Type of the asin component.",
            "type": "string",
            "enum": [
              "LANDING_ASIN",
              "PRODUCT_ASIN"
            ]
          },
          "asin": {
            "description": "Asin id to be pre moderated.",
            "type": "string"
          },
          "id": {
            "description": "Id of the component. The same will be returned as part of the response as well. This can be used to uniquely identify the component from the pre moderation response.",
            "type": "string"
          }
        }
      },
      "SDBrandSafetyDenyListDomain": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "description": "The website or app identifier. This can be in the form of full domain (eg. 'example.com' or 'example.net'), or mobile app identifier (eg. 'com.example.app' for Android apps or '1234567890' for iOS apps)\n",
            "type": "string",
            "maxLength": 250
          },
          "type": {
            "$ref": "#/components/schemas/SDBrandSafetyDenyListDomainType"
          }
        },
        "example": {
          "name": "example.com",
          "type": "WEBSITE"
        }
      },
      "SDErrorResponse": {
        "properties": {
          "code": {
            "description": "The HTTP status code of the response",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the response.",
            "type": "string"
          }
        }
      },
      "PreModerationRequest": {
        "description": "Components details that needs to be sent for pre moderation.",
        "type": "object",
        "required": [
          "adProgram",
          "locale"
        ],
        "properties": {
          "recordId": {
            "description": "Id of the brand/advertiser.",
            "type": "string"
          },
          "asinComponents": {
            "maxItems": 10,
            "description": "Asin components which needs to be pre moderated.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AsinComponent"
            }
          },
          "adProgram": {
            "description": "Type of Ad program to which this pre moderation components belong to.",
            "type": "string",
            "enum": [
              "SPONSORED_BRANDS",
              "SPONSORED_BRANDS_SPOTLIGHT",
              "SPONSORED_BRANDS_VIDEO",
              "STORES",
              "SPONSORED_DISPLAY",
              "DSP",
              "DSP_REC",
              "DSP_IMAGE",
              "DSP_THIRD_PARTY"
            ]
          },
          "locale": {
            "description": "Specifying locale will translate the premoderation message into that locale's associated language. \n \n | Locale | Language (ISO 639) | Country (ISO 3166) | \n |-----|-----|-------| \n | ar-AE | Arabic (ar) | United Arab Emirates (AE) | \n | zh-CN | Chinese (zh) | China (CN) | \n | nl-NL | Dutch (nl) | Netherlands (NL) | \n | en-AU | English (en) | Australia (AU) | \n | en-CA | English (en) | Canada (CA) | \n | en-IN | English (en) | India (IN) | \n | en-GB | English (en) | United Kingdom (GB) | \n | en-US | English (en) | United States (US) | \n | fr-CA | French (fr) | Canada (CA) | \n | fr-FR | French (fr) | France (FR) | \n | de-DE | German (de) | Germany (DE) | \n | it-IT | Italian (it) | Italy (IT) | \n | ja-JP | Japanese (ja) | Japan (JP) | \n | ko-KR | Korean (ko) | South Korea (KR) | \n | pt-BR | Portuguese (pt) | Brazil (BR) | \n | es-ES | Spanish (es) | Spain (ES) | \n | es-US | Spanish (es) | United States (US) | \n | es-MX | Spanish (es) | Mexico (MX) | \n | tr-TR | Turkish (tr) | Turkey (TR) | \n ",
            "type": "string",
            "enum": [
              "ar-AE",
              "zh-CN",
              "nl-NL",
              "en-AU",
              "en-CA",
              "en-IN",
              "en-GB",
              "en-US",
              "fr-CA",
              "fr-FR",
              "de-DE",
              "it-IT",
              "ja-JP",
              "ko-KR",
              "pt-BR",
              "es-ES",
              "es-US",
              "es-MX",
              "tr-TR"
            ]
          },
          "imageComponents": {
            "maxItems": 10,
            "description": "Image components which needs to be pre moderated.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageComponent"
            }
          },
          "dateComponents": {
            "maxItems": 10,
            "description": "Date components which needs to be pre moderated.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DateComponent"
            }
          },
          "textComponents": {
            "maxItems": 10,
            "description": "Text components which needs to be pre moderated.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextComponent"
            }
          },
          "videoComponents": {
            "maxItems": 1,
            "description": "Video components which needs to be pre moderated.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoComponent"
            }
          }
        }
      },
      "SDAudienceRecommendation": {
        "description": "A recommended standard Amazon audience to target ads on",
        "properties": {
          "audience": {
            "$ref": "#/components/schemas/SDAudience"
          },
          "name": {
            "description": "The Amazon audience name",
            "type": "string"
          },
          "rank": {
            "description": "A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation",
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "SBBudgetRule": {
        "type": "object",
        "required": [
          "ruleId"
        ],
        "properties": {
          "ruleState": {
            "$ref": "#/components/schemas/state"
          },
          "lastUpdatedDate": {
            "format": "int64",
            "description": "Epoch time of budget rule update. Read-only.",
            "type": "number"
          },
          "createdDate": {
            "format": "int64",
            "description": "Epoch time of budget rule creation. Read-only.",
            "type": "number"
          },
          "ruleDetails": {
            "$ref": "#/components/schemas/SBBudgetRuleDetails"
          },
          "ruleId": {
            "description": "The budget rule identifier.",
            "type": "string"
          },
          "ruleStatus": {
            "description": "The budget rule status. Read-only.",
            "type": "string"
          }
        }
      },
      "SDCategory": {
        "format": "int64",
        "description": "The category identifier",
        "type": "integer",
        "example": "7352105011"
      },
      "ModerationResult": {
        "type": "object",
        "properties": {
          "versionId": {
            "$ref": "#/components/schemas/VersionId"
          },
          "idType": {
            "$ref": "#/components/schemas/IdType"
          },
          "moderationStatus": {
            "$ref": "#/components/schemas/ModerationStatus"
          },
          "policyViolations": {
            "minItems": 0,
            "maxItems": 200,
            "description": "A list of policy violations for a campaign that has failed moderation. Note that this field is present in the response only when moderationStatus is set to REJECTED.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyViolation"
            }
          },
          "etaForModeration": {
            "description": "Expected date and time by which moderation will be complete. The format is ISO 8601 in UTC time zone. Note that this field is present in the response only when moderationStatus is set to IN_PROGRESS.",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          }
        }
      },
      "StorePage": {
        "type": "object",
        "properties": {
          "displayName": {
            "description": "Display Name of the store page shown on a store spotlight campaign.",
            "type": "string"
          },
          "primaryAsin": {
            "description": "Selected asin from the store page which is displayed on the store spotlight campaign.",
            "type": "string"
          }
        }
      },
      "SDBrandSafetyRequestStatus": {
        "type": "object",
        "properties": {
          "requestId": {
            "description": "Request ID",
            "type": "string"
          },
          "statusDetails": {
            "description": "Details related to the request status",
            "type": "string"
          },
          "timestamp": {
            "description": "Request timestamp",
            "type": "string"
          },
          "status": {
            "description": "The status of the request",
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "COMPLETED",
              "FAILURE"
            ]
          }
        }
      },
      "UpdateSDBudgetRulesRequest": {
        "description": "Request object for updating budget rule for SD campaign",
        "type": "object",
        "properties": {
          "budgetRulesDetails": {
            "maxItems": 25,
            "description": "A list of budget rule details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDBudgetRule"
            }
          }
        }
      },
      "GetSBBudgetRulesForAdvertiserResponse": {
        "type": "object",
        "properties": {
          "budgetRulesForAdvertiserResponse": {
            "minItems": 0,
            "maxItems": 30,
            "description": "A list of rules created by the advertiser.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SBBudgetRule"
            }
          },
          "nextToken": {
            "description": "To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.",
            "type": "string"
          }
        }
      },
      "SDProductRecommendationsV32": {
        "type": "object",
        "properties": {
          "products": {
            "minItems": 0,
            "maxItems": 1000,
            "description": "List of recommended product targets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDProductRecommendationV32"
            }
          }
        }
      },
      "SDTargetingPredicateBaseV31": {
        "description": "A predicate to match against inside the TargetingPredicateNested component (only applicable to Audience targeting - T00030).\n\n* All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Advertising browse system.\n* Brand, price, and review predicates are optional and may only be specified if category is also specified.\n* Review predicates accept numbers between 0 and 5 and are inclusive.\n* When using either of the â€˜betweenâ€™ strings to construct a targeting expression the format of the string is â€˜double-doubleâ€™ where the first double must be smaller than the second double. Prices are not inclusive.\n* The exactProduct, similarProduct, relatedProduct, and negative types do not utilize the value field.\n* The only type currently applicable to Amazon Audiences targeting is 'audienceSameAs'.\n* **Future** A 'negative' TargetingPredicateBase will exclude that TargetingPredicateNested from the overall audience.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "asinCategorySameAs",
              "asinBrandSameAs",
              "asinPriceBetween",
              "asinPriceGreaterThan",
              "asinPriceLessThan",
              "asinReviewRatingLessThan",
              "asinReviewRatingGreaterThan",
              "asinReviewRatingBetween",
              "similarProduct",
              "exactProduct",
              "asinIsPrimeShippingEligible",
              "asinAgeRangeSameAs",
              "asinGenreSameAs",
              "audienceSameAs",
              "lookback",
              "negative",
              "relatedProduct"
            ]
          },
          "value": {
            "description": "The value to be targeted.",
            "type": "string",
            "example": "B0123456789"
          }
        }
      },
      "SDProductRecommendationsV31": {
        "type": "object",
        "properties": {
          "products": {
            "minItems": 0,
            "maxItems": 1000,
            "description": "List of recommended product targets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDProductRecommendation"
            }
          }
        }
      },
      "SPListAssociatedBudgetRulesResponse": {
        "type": "object",
        "properties": {
          "associatedRules": {
            "description": "A list of associated budget rules.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SPCampaignBudgetRule"
            }
          }
        }
      },
      "SDRuleBasedBudget": {
        "type": "object",
        "properties": {
          "executionTime": {
            "format": "int64",
            "description": "Epoch time of budget rule execution.",
            "type": "number"
          },
          "appliedRule": {
            "$ref": "#/components/schemas/SDBudgetRule"
          },
          "ruleBasedBudgetValue": {
            "description": "The budget value.",
            "type": "number"
          },
          "dailyBudgetValue": {
            "description": "The daily budget value.",
            "type": "number"
          },
          "performanceMetric": {
            "$ref": "#/components/schemas/PerformanceMetricValue"
          }
        }
      },
      "SDBudgetRecommendationsResponse": {
        "required": [
          "budgetRecommendationsSuccessResults",
          "budgetRecommendationsErrorResults"
        ],
        "properties": {
          "budgetRecommendationsSuccessResults": {
            "minItems": 0,
            "maxItems": 100,
            "description": "List of successful budget recommendation for campaigns.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDBudgetRecommendation"
            }
          },
          "budgetRecommendationsErrorResults": {
            "minItems": 0,
            "maxItems": 100,
            "description": "List of errors that occurred when generating budget recommendation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDBudgetRecommendationError"
            }
          }
        }
      },
      "SDProductTargetingThemeExpression": {
        "description": "The expression used to define the product targeting theme.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "The product targeting grammar used to define the targeting theme. Note asinAsBestSeller is currently not supported.",
            "type": "string",
            "enum": [
              "asinPriceGreaterThan",
              "asinBrandSameAs",
              "asinReviewRatingLessThan",
              "asinGlanceViewsGreaterThan"
            ]
          }
        }
      },
      "SPGetAssociatedCampaignsResponse": {
        "type": "object",
        "properties": {
          "associatedCampaigns": {
            "minItems": 0,
            "maxItems": 30,
            "description": "A list of campaigns that are associated to this budget rule.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociatedCampaign"
            }
          },
          "nextToken": {
            "description": "To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.",
            "type": "string"
          }
        }
      },
      "SDBrandSafetyGetResponsePagination": {
        "description": "Response pagination info for Brand Safety Deny List GET requests",
        "type": "object",
        "properties": {
          "total": {
            "description": "The total number of deny list domains created by the advertiser.",
            "type": "integer"
          },
          "offset": {
            "description": "The number of deny list domains skipped.",
            "type": "integer"
          },
          "limit": {
            "description": "The maximum number of deny list domains returned from GET request.",
            "type": "integer"
          }
        }
      },
      "SDTargetingRecommendationsResponseV34": {
        "description": "Response to a request for targeting recommendations",
        "properties": {
          "recommendations": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsV34"
          }
        }
      },
      "PreModerationResponse": {
        "description": "Information regarding the policy violations if present for the components, sent for pre moderation.",
        "type": "object",
        "properties": {
          "recordId": {
            "description": "Id of the brand/advertiser.",
            "type": "string"
          },
          "asinComponents": {
            "description": "Pre moderation result of the asin components. It will have information regarding the policy violations present if any.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AsinComponentResponse"
            }
          },
          "preModerationId": {
            "description": "Unique Id for the moderation Request.",
            "type": "string"
          },
          "adProgram": {
            "description": "Type of Ad program to which the pre moderation components belong to.",
            "type": "string",
            "enum": [
              "SPONSORED_BRANDS",
              "SPONSORED_BRANDS_SPOTLIGHT",
              "SPONSORED_BRANDS_VIDEO",
              "STORES",
              "SPONSORED_DISPLAY",
              "DSP",
              "DSP_REC",
              "DSP_IMAGE",
              "DSP_THIRD_PARTY"
            ]
          },
          "locale": {
            "description": "Locale value that was passed in request.",
            "type": "string",
            "enum": [
              "ar-AE",
              "zh-CN",
              "nl-NL",
              "en-AU",
              "en-CA",
              "en-IN",
              "en-GB",
              "en-US",
              "fr-CA",
              "fr-FR",
              "de-DE",
              "it-IT",
              "ja-JP",
              "ko-KR",
              "pt-BR",
              "es-ES",
              "es-US",
              "es-MX",
              "tr-TR"
            ]
          },
          "imageComponents": {
            "description": "Pre moderation result of the image components. It will have information regarding the policy violations present if any.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageComponentResponse"
            }
          },
          "dateComponents": {
            "description": "Pre moderation result of the date components. It will have information regarding the policy violations present if any.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DateComponentResponse"
            }
          },
          "textComponents": {
            "description": "Pre moderation result of the text components. It will have information regarding the policy violations present if any.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextComponentResponse"
            }
          },
          "videoComponents": {
            "description": "Pre moderation result of the video components. It will have information regarding the policy violations present if any.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoComponentResponse"
            }
          }
        }
      },
      "SDTargetingRecommendationsResponseV31": {
        "description": "Response to a request for targeting recommendations",
        "properties": {
          "recommendations": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsV31"
          }
        }
      },
      "SDTargetingRecommendationsResponseV33": {
        "description": "Response to a request for targeting recommendations",
        "properties": {
          "recommendations": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsV33"
          }
        }
      },
      "SDTargetingRecommendationsResponseV32": {
        "description": "Response body for targeting recommendations v3.2.",
        "properties": {
          "recommendations": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsV32"
          }
        }
      },
      "DayOfWeek": {
        "description": "The day of the week.",
        "type": "string",
        "enum": [
          "MONDAY",
          "TUESDAY",
          "WEDNESDAY",
          "THURSDAY",
          "FRIDAY",
          "SATURDAY",
          "SUNDAY"
        ]
      },
      "UpdateBudgetRulesResponse": {
        "type": "object",
        "properties": {
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetRuleResponse"
            }
          }
        }
      },
      "SDBrandSafetyDenyListDomainUpdateResultStatus": {
        "default": "SUCCESS",
        "description": "The state of the domain.",
        "type": "string",
        "enum": [
          "SUCCESS",
          "FAILURE"
        ]
      },
      "ModerationResultsAdProgramType": {
        "description": "The program type of the ad.",
        "type": "string",
        "enum": [
          "SB_PRODUCT_COLLECTION",
          "SB_STORE_SPOTLIGHT",
          "SB_VIDEO",
          "SPONSORED_PRODUCTS"
        ]
      },
      "CreativeRecommendationsBadRequestError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Bad request error code.",
            "type": "string",
            "enum": [
              "BAD_REQUEST"
            ]
          },
          "details": {
            "description": "A human-readable description of the error response.",
            "type": "string"
          }
        }
      },
      "SdDefaultError": {
        "description": "The error response object",
        "type": "object",
        "properties": {
          "code": {
            "description": "The HTTP status code of the response.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the response.",
            "type": "string"
          }
        }
      },
      "SDTargetingClauseV31": {
        "description": "The targeting clause",
        "type": "object",
        "required": [
          "expressionType",
          "expression"
        ],
        "properties": {
          "expression": {
            "$ref": "#/components/schemas/SDTargetingExpressionV31"
          },
          "expressionType": {
            "description": "Tactic T00020 ad groups only allow manual targeting.",
            "type": "string",
            "enum": [
              "manual",
              "auto"
            ]
          }
        }
      },
      "VideoPosition": {
        "type": "object",
        "properties": {
          "start": {
            "format": "int64",
            "description": "Start time of the video having the policy violation.",
            "type": "integer"
          },
          "end": {
            "format": "int64",
            "description": "End time of the video having the policy violation.",
            "type": "integer"
          }
        }
      },
      "ModerationStatus": {
        "description": "The moderation status of the ad.",
        "type": "string",
        "enum": [
          "APPROVED",
          "IN_PROGRESS",
          "REJECTED",
          "FAILED"
        ]
      },
      "SDTactic": {
        "description": "The advertising tactic associated with the campaign. The following table lists available tactic names:\n\n|Tactic Name|Type|Description|\n|-----------|-----|-----------|\n|T00001&nbsp;|&nbsp;|This tactic name is only applicable for the `requestReport` operation and does not apply to any other campaign management operations. Reach shoppers who showed interest in categories related to your promoted products, or target specific products or product categories on Amazon. This tactic is for use by only vendors. This tactic is used to retrieve metrics for Sponsored Display campaigns that use interest, product or category audiences, including Sponsored Display campaigns that were previously Product Display Ads campaigns.|\n|T00010&nbsp;|Views&nbsp;|**Note that this advertising tactic is not currently supported. This note will be removed when this advertising tactic is available.** This is the same tactic as 'remarketing'. Shoppers who viewed the detail pages of your advertised products or similar products.|\n|remarketing&nbsp;|Views&nbsp;|This is the same tactic as 'T00010'. Shoppers who viewed the detail pages of your advertised products or similar products.|\n|T00020&nbsp;|Products&nbsp;|Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.|",
        "type": "string",
        "enum": [
          "T00001",
          "T00010",
          "T00020",
          "remarketing"
        ]
      },
      "SDTargetingRecommendationsProducts": {
        "minItems": 1,
        "maxItems": 10000,
        "description": "A list of products for which to get targeting recommendations",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SDGoalProduct"
        }
      },
      "SDThemeRecommendationsV34": {
        "type": "object",
        "properties": {
          "products": {
            "$ref": "#/components/schemas/SDProductThemeRecommendationsV34"
          }
        }
      },
      "SDTacticV31": {
        "description": "The advertising tactic associated with the campaign. The following table lists available tactic names:\n|Tactic Name|Type|Description|\n|-----------|-----|-----------|\n|T00001&nbsp;|&nbsp;|This tactic name is only applicable for the `requestReport` operation and does not apply to any other campaign management operations. Reach shoppers who showed interest in categories related to your promoted products, or target specific products or product categories on Amazon. This tactic is for use by only vendors. This tactic is used to retrieve metrics for Sponsored Display campaigns that use interest, product or category audiences, including Sponsored Display campaigns that were previously Product Display Ads campaigns.|\n|T00010&nbsp;|Views&nbsp;|**Note that this advertising tactic is not currently supported. This note will be removed when this advertising tactic is available.** This is the same tactic as 'remarketing'. Shoppers who viewed the detail pages of your advertised products or similar products.|\n|remarketing&nbsp;|Views&nbsp;|This is the same tactic as 'T00010'. Shoppers who viewed the detail pages of your advertised products or similar products.|\n|T00020&nbsp;|Products&nbsp;|Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.|\n|T00030&nbsp;|Audiences&nbsp;|Select individual audiences to show your ads.|",
        "type": "string",
        "enum": [
          "T00001",
          "T00010",
          "T00020",
          "remarketing",
          "T00030"
        ],
        "example": "T00030"
      },
      "SDBudgetRecommendationError": {
        "required": [
          "index",
          "campaignId",
          "code",
          "details"
        ],
        "properties": {
          "code": {
            "description": "The HTTP status code of the response.",
            "type": "string",
            "example": "404"
          },
          "campaignId": {
            "description": "Campaign id.",
            "type": "string",
            "example": "5292131569372"
          },
          "index": {
            "description": "Correlate the recommendation to the campaign index in the request. Zero-based.",
            "type": "integer",
            "example": "1"
          },
          "details": {
            "description": "A human-readable description of the response.",
            "type": "string",
            "example": "Budget recommendation is not found."
          }
        }
      },
      "CreativeRecommendationsRequest": {
        "description": "Request structure of creative recommendations API.",
        "type": "object",
        "required": [
          "asins",
          "requiredRecommendations",
          "adFormat"
        ],
        "properties": {
          "asins": {
            "minItems": 1,
            "maxItems": 3,
            "description": "An array of ASINs associated with the creative. Note, do not pass an empty array, this results in an error.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "adFormat": {
            "description": "Ad format of the creative.",
            "type": "string",
            "enum": [
              "SPONSORED_BRANDS_VIDEO"
            ]
          },
          "requiredRecommendations": {
            "minItems": 1,
            "maxItems": 2,
            "description": "Required recommendations details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequiredRecommendations"
            }
          }
        }
      },
      "RequiredRecommendations": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "maxRecommendationGroups": {
            "format": "int32",
            "description": "Maximum number of recommendations groups that API should return for given type. (recommendations are not guaranteed).",
            "maximum": 5,
            "type": "integer",
            "minimum": 1
          },
          "type": {
            "description": "Type of recommendations.",
            "type": "string",
            "enum": [
              "PRIMARY_HEADLINE",
              "SECONDARY_HEADLINE"
            ]
          }
        }
      },
      "CreativeRecommendationsAccessDeniedError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Access denied error code.",
            "type": "string",
            "enum": [
              "ACCESS_DENIED"
            ]
          },
          "details": {
            "description": "A human-readable description of the error response.",
            "type": "string"
          }
        }
      },
      "SDBrandSafetyDenyListDomainState": {
        "default": "ENABLED",
        "description": "The state of the domain.",
        "type": "string",
        "enum": [
          "ENABLED",
          "ARCHIVED"
        ]
      },
      "BudgetChangeType": {
        "description": "The value by which to update the budget of the budget rule.",
        "type": "string",
        "enum": [
          "PERCENT"
        ]
      },
      "SDBudgetRuleDetails": {
        "description": "Object representing details of a budget rule for SD campaign",
        "type": "object",
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/RuleDuration"
          },
          "recurrence": {
            "$ref": "#/components/schemas/Recurrence"
          },
          "ruleType": {
            "$ref": "#/components/schemas/SDRuleType"
          },
          "budgetIncreaseBy": {
            "$ref": "#/components/schemas/budgetIncreaseBy"
          },
          "name": {
            "description": "The budget rule name. Required to be unique within a campaign.",
            "type": "string",
            "maxLength": 355
          },
          "performanceMeasureCondition": {
            "$ref": "#/components/schemas/PerformanceMeasureCondition"
          }
        }
      },
      "SDCreativeType": {
        "nullable": true,
        "description": "The type of the associated creative. If the field is empty or null, a default value of IMAGE will be used. Only supports one type (VIDEO or IMAGE) at a time.",
        "type": "string",
        "enum": [
          "IMAGE",
          "VIDEO"
        ]
      },
      "HeadlineSuggestionRequest": {
        "description": "Request structure of headline suggestion API.",
        "type": "object",
        "properties": {
          "asins": {
            "minItems": 1,
            "maxItems": 3,
            "description": "An array of ASINs associated with the creative. Note do not pass an empty array, this results in an error.\n",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "storePages": {
            "minItems": 1,
            "maxItems": 3,
            "description": "An array of Store Pages associated with SB Spotlight Creative.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorePage"
            }
          },
          "maxNumSuggestions": {
            "description": "Maximum number of suggestions that API should return. Response will [0, maxNumSuggestions] suggestions (suggestions are not guaranteed).",
            "maximum": 10,
            "type": "number",
            "minimum": 1
          },
          "adFormat": {
            "type": "string",
            "enum": [
              "SPONSORED_BRANDS",
              "SPONSORED_BRANDS_SPOTLIGHT"
            ]
          }
        }
      },
      "CreativeRecommendationsNotFoundError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Not found error code.",
            "type": "string",
            "enum": [
              "NOT_FOUND"
            ]
          },
          "details": {
            "description": "A human-readable description of the error response.",
            "type": "string"
          }
        }
      },
      "GetSPBudgetRulesForAdvertiserResponse": {
        "type": "object",
        "properties": {
          "budgetRulesForAdvertiserResponse": {
            "minItems": 0,
            "maxItems": 30,
            "description": "A list of rules created by the advertiser.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SPBudgetRule"
            }
          },
          "nextToken": {
            "description": "To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.",
            "type": "string"
          }
        }
      },
      "SDBrandSafetyGetResponse": {
        "description": "Response for Brand Safety Deny List GET requests",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/SDBrandSafetyGetResponsePagination"
          },
          "domains": {
            "description": "List of Brand Safety Deny List Domains",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDBrandSafetyDenyListProcessedDomain"
            }
          }
        }
      },
      "CreativeRecommendationsInternalServerError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Internal error code.",
            "type": "string",
            "enum": [
              "INTERNAL_ERROR"
            ]
          },
          "details": {
            "description": "A human-readable description of the error response.",
            "type": "string"
          }
        }
      },
      "SBRuleType": {
        "description": "The type of budget rule. SCHEDULE: A budget rule based on a start and end date. PERFORMANCE: A budget rule based on advertising performance criteria.",
        "type": "string",
        "enum": [
          "SCHEDULE",
          "PERFORMANCE"
        ]
      },
      "PerformanceMetricForSB": {
        "description": "The advertising performance metric.",
        "type": "string",
        "enum": [
          "IS",
          "NTB",
          "ROAS"
        ]
      },
      "BudgetUsageCampaignBatchError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "An enumerated error code for machine use.",
            "type": "string"
          },
          "campaignId": {
            "description": "ID of requested resource",
            "type": "string"
          },
          "index": {
            "description": "An index to maintain order of the campaignIds",
            "type": "number"
          },
          "details": {
            "description": "A human-readable description of the response.",
            "type": "string"
          }
        }
      },
      "SDBrandSafetyRequestResultsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "description": "A list of results for the given requestId",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDBrandSafetyRequestResult"
            }
          }
        }
      },
      "SDCategoryRecommendation": {
        "description": "A recommended category to target ads on",
        "properties": {
          "path": {
            "minItems": 1,
            "description": "The path of the category within the category catalogue",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "description": "The category name",
            "type": "string"
          },
          "rank": {
            "description": "A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation",
            "type": "integer",
            "minimum": 1
          },
          "targetableAsinCountRange": {
            "description": "The range of ASINs available within the category catalogue",
            "type": "object",
            "properties": {
              "rangeUpper": {
                "type": "integer"
              },
              "rangeLower": {
                "type": "integer"
              }
            }
          },
          "category": {
            "$ref": "#/components/schemas/SDCategory"
          }
        }
      },
      "CreateSDBudgetRulesRequest": {
        "type": "object",
        "properties": {
          "budgetRulesDetails": {
            "maxItems": 25,
            "description": "A list of budget rule details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDBudgetRuleDetails"
            }
          }
        }
      },
      "SDHeadlineRecommendationAccessDeniedException": {
        "type": "object",
        "properties": {
          "code": {
            "description": "AccessDeniedErrorCode.",
            "type": "string",
            "enum": [
              "ACCESS_DENIED"
            ]
          },
          "details": {
            "description": "A human-readable description of the error response.",
            "type": "string"
          }
        }
      },
      "RecurrenceType": {
        "description": "depicts the type of recurrence",
        "type": "string",
        "enum": [
          "DAILY",
          "WEEKLY"
        ]
      },
      "BudgetUsagePortfolioBatchError": {
        "type": "object",
        "properties": {
          "portfolioId": {
            "description": "ID of requested resource",
            "type": "string"
          },
          "code": {
            "description": "An enumerated error code for machine use.",
            "type": "string"
          },
          "index": {
            "description": "An index to maintain order of the portfolioIds",
            "type": "number"
          },
          "details": {
            "description": "A human-readable description of the response.",
            "type": "string"
          }
        }
      },
      "ViolatingAsinContent": {
        "type": "object",
        "properties": {
          "violatingAsinEvidences": {
            "minItems": 0,
            "maxItems": 200,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViolatingAsinEvidence"
            }
          },
          "moderatedComponent": {
            "description": "Moderation component which marked the policy violation.",
            "type": "string"
          }
        }
      },
      "BudgetUsagePortfolioRequest": {
        "type": "object",
        "properties": {
          "portfolioIds": {
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of portfolio IDs.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IdType": {
        "description": "The unique identifiers type based on the adProgram of the ad.",
        "type": "string",
        "enum": [
          "AD_ID"
        ]
      },
      "SDLocale": {
        "description": "List of supported locales",
        "type": "string",
        "enum": [
          "ar_AE",
          "de_DE",
          "en_AE",
          "en_AU",
          "en_CA",
          "en_GB",
          "en_IN",
          "en_SG",
          "en_US",
          "es_ES",
          "es_MX",
          "fr_CA",
          "fr_FR",
          "hi_IN",
          "it_IT",
          "ja_JP",
          "ko_KR",
          "nl_NL",
          "pl_PL",
          "pt_BR",
          "sv_SE",
          "ta_IN",
          "th_TH",
          "tr_TR",
          "vi_VN",
          "zh_CN"
        ]
      },
      "SDProductThemeRecommendationsV34": {
        "minItems": 1,
        "maxItems": 5,
        "description": "A list of product targeting theme recommendations.",
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/SDProductTargetingRecommendationsSuccessV34"
            },
            {
              "$ref": "#/components/schemas/SDTargetingRecommendationsFailureV34"
            }
          ]
        }
      },
      "BudgetRuleResponse": {
        "type": "object",
        "properties": {
          "code": {
            "description": "An enumerated success or error code for machine use.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the error, if unsuccessful",
            "type": "string"
          },
          "ruleId": {
            "description": "The rule identifier.",
            "type": "string"
          },
          "associatedCampaignIds": {
            "type": "array",
            "items": {
              "description": "The campaign identifier for which rule based budget may get updated",
              "type": "string"
            }
          }
        }
      },
      "ModerationResultsResponse": {
        "type": "object",
        "properties": {
          "moderationResults": {
            "minItems": 1,
            "maxItems": 10,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModerationResult"
            }
          },
          "nextToken": {
            "$ref": "#/components/schemas/NextToken"
          }
        }
      },
      "Id": {
        "description": "The unique identifier of the ad which can be obtained after the ad is created using create APIs.",
        "type": "string"
      },
      "BudgetUsageCampaignRequest": {
        "type": "object",
        "properties": {
          "campaignIds": {
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of campaign IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SDProductThemeRecommendations": {
        "minItems": 1,
        "maxItems": 5,
        "description": "A list of product targeting theme recommendations.",
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/SDProductTargetingRecommendationsSuccess"
            },
            {
              "$ref": "#/components/schemas/SDTargetingRecommendationsFailure"
            }
          ]
        }
      },
      "SDTargetingPredicateNestedV31": {
        "description": "A behavioral event and list of targeting predicates that represents an Audience to target (only applicable to Audience targeting - T00030).\n\n* For auto ASIN-grain targeting, the value array must contain only 'exactProduct' and 'lookback' TargetingPredicateBase components.\n* For manual ASIN-grain targeting, the value array must contain only 'similarProduct' and 'lookback' TargetingPredicateBase components.\n* For manual Category-grain targeting, the value array must contain a 'lookback' and 'asinCategorySameAs' TargetingPredicateBase component, which can be further refined with optional brand, price, star-rating and shipping eligibility refinements.\n* For Amazon Audiences targeting, the TargetingPredicateNested type should be set to 'audience' and the value array should include one TargetingPredicateBase component with type set to 'audienceSameAs'.\n* **Future** For manual Category-grain targeting, adding a 'negative' TargetingPredicateBase will exclude that TargetingPredicateNested from the overall audience.",
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "views",
              "audience",
              "purchases"
            ]
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDTargetingPredicateBaseV31"
            }
          }
        }
      },
      "PerformanceMeasureCondition": {
        "type": "object",
        "required": [
          "comparisonOperator",
          "metricName",
          "threshold"
        ],
        "properties": {
          "metricName": {
            "$ref": "#/components/schemas/PerformanceMetric"
          },
          "comparisonOperator": {
            "$ref": "#/components/schemas/ComparisonOperator"
          },
          "threshold": {
            "format": "double",
            "description": "The performance threshold value.",
            "type": "number"
          }
        }
      },
      "SPBudgetRuleDetails": {
        "description": "Object representing details of a budget rule for SP campaign",
        "type": "object",
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/RuleDuration"
          },
          "recurrence": {
            "$ref": "#/components/schemas/Recurrence"
          },
          "ruleType": {
            "$ref": "#/components/schemas/SPRuleType"
          },
          "budgetIncreaseBy": {
            "$ref": "#/components/schemas/budgetIncreaseBy"
          },
          "name": {
            "description": "The budget rule name. Required to be unique within a campaign.",
            "type": "string",
            "maxLength": 355
          },
          "performanceMeasureCondition": {
            "$ref": "#/components/schemas/PerformanceMeasureCondition"
          }
        }
      },
      "GetSDBudgetRuleResponse": {
        "type": "object",
        "properties": {
          "budgetRule": {
            "$ref": "#/components/schemas/SDBudgetRule"
          }
        }
      },
      "ModerationResultsAccessDeniedError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Access denied error code.",
            "type": "string",
            "enum": [
              "ACCESS_DENIED"
            ]
          },
          "details": {
            "description": "A human-readable description of the error response.",
            "type": "string"
          }
        }
      },
      "SDHeadlineRecommendationIdentifierNotfoundException": {
        "type": "object",
        "properties": {
          "code": {
            "description": "IdentiferNotFoundErrorCode.",
            "type": "string",
            "enum": [
              "IDENTIFIER_NOT_FOUND"
            ]
          },
          "details": {
            "description": "A human-readable description of the error response.",
            "type": "string"
          }
        }
      },
      "SDTargetingRecommendationsTypeFilterV31": {
        "minItems": 1,
        "maxItems": 2,
        "description": "A filter to indicate which types of recommendations to request.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SDRecommendationTypeV31"
        },
        "example": [
          "PRODUCT",
          "CATEGORY"
        ]
      },
      "SDTargetingRecommendationsTypeFilterV32": {
        "minItems": 1,
        "maxItems": 2,
        "description": "A filter to indicate which types of recommendations to request.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SDRecommendationTypeV32"
        },
        "example": [
          "PRODUCT",
          "CATEGORY"
        ]
      },
      "VideoComponentResponse": {
        "description": "Pre moderation result for a video component",
        "type": "object",
        "properties": {
          "preModerationStatus": {
            "description": "The pre moderation status of the component.",
            "type": "string",
            "enum": [
              "REJECTED",
              "APPROVED",
              "FAILED",
              "RETRYABLE_FAILURE"
            ]
          },
          "componentType": {
            "description": "Type of the video component.",
            "type": "string",
            "enum": [
              "SPONSORED_BRANDS_VIDEO",
              "OTHER_VIDEO"
            ]
          },
          "landingPage": {
            "$ref": "#/components/schemas/LandingPage"
          },
          "policyViolations": {
            "description": "A list of policy violations for the component that were detected during pre moderation. Note that this field is present in the response only when preModerationStatus is set to REJECTED.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoPolicyViolation"
            }
          },
          "id": {
            "description": "Id of the component. This is the same id sent as part of the request. This can be used to uniquely identify the component.",
            "type": "string"
          },
          "url": {
            "description": "Publicly accessible url of the video that got pre moderated.",
            "type": "string"
          }
        }
      },
      "SDAudienceCategoryRecommendations": {
        "description": "List of recommended standard Amazon audience targets of a specific audience category",
        "properties": {
          "audiences": {
            "minItems": 0,
            "maxItems": 1000,
            "description": "List of recommended standard Amazon audience targets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDAudienceRecommendation"
            }
          },
          "category": {
            "$ref": "#/components/schemas/SDAudienceCategory"
          }
        }
      },
      "RecommendedHeadline": {
        "description": "Recommended Headline in response object. Recommended headline will be locale specific, i.e. for an asin input in ES, Recommended headline will be in ES.",
        "type": "object",
        "properties": {
          "headlineId": {
            "description": "Unique Id of Recommended headline.",
            "type": "string",
            "example": "e991e32c-0136-427a-843b-ff04162f2f91"
          },
          "headline": {
            "description": "String that contains Recommended headline.",
            "type": "string",
            "maxLength": 50,
            "example": "This is a Recommended headline."
          }
        }
      },
      "BudgetUsageError": {
        "description": "The Error Response Object.",
        "type": "object",
        "properties": {
          "code": {
            "description": "An enumerated error code for machine use.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the response.",
            "type": "string"
          }
        }
      },
      "ImageEvidence": {
        "description": "Structure of a image evidence",
        "type": "object",
        "properties": {
          "topLeftY": {
            "description": "The top left Y-coordinate of the content that violates the specfied policy within the image.",
            "type": "integer"
          },
          "topLeftX": {
            "description": "The top left X-coordinate of the content that violates the specfied policy within the image.",
            "type": "integer"
          },
          "width": {
            "description": "The width of the content that violates the specfied policy within the image.",
            "type": "integer"
          },
          "height": {
            "description": "The height of the content that violates the specfied policy within the image.",
            "type": "integer"
          }
        }
      },
      "DateComponentResponse": {
        "description": "Pre-moderation result for a date component",
        "type": "object",
        "properties": {
          "preModerationStatus": {
            "description": "The pre-moderation status of the component.",
            "type": "string",
            "enum": [
              "REJECTED",
              "APPROVED",
              "FAILED",
              "RETRYABLE_FAILURE"
            ]
          },
          "componentType": {
            "description": "Type of the date component.",
            "type": "string",
            "enum": [
              "CAMPAIGN_DATES"
            ]
          },
          "endDate": {
            "description": "End date of the component.",
            "type": "string"
          },
          "policyViolations": {
            "description": "A list of policy violations for the component that were detected during pre moderation. Note that this field is present in the response only when preModerationStatus is set to REJECTED.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatePolicyViolation"
            }
          },
          "id": {
            "description": "Id of the component. This is the same id sent as part of the request. This can be used to uniquely identify the component.",
            "type": "string"
          },
          "startDate": {
            "description": "Start date of the component.",
            "type": "string"
          }
        }
      },
      "ImageComponent": {
        "description": "Image component which needs to be pre moderated. A publicly accessible imageUrl must be sent.",
        "type": "object",
        "required": [
          "componentType",
          "id",
          "url"
        ],
        "properties": {
          "componentType": {
            "description": "Type of the image component.",
            "type": "string",
            "enum": [
              "BRAND_LOGO",
              "CUSTOM_IMAGE",
              "OTHER_IMAGE"
            ]
          },
          "landingPage": {
            "$ref": "#/components/schemas/LandingPage"
          },
          "id": {
            "description": "Id of the component. The same will be returned as part of the response as well. This can be used to uniquely identify the component from the pre moderation response.",
            "type": "string"
          },
          "url": {
            "description": "Url of the image to be pre moderated. The url must be publicly accessible.",
            "type": "string"
          }
        }
      },
      "VideoComponent": {
        "description": "Video component which needs to be pre moderated. A publicly accessible videoUrl must be sent.",
        "type": "object",
        "required": [
          "componentType",
          "id",
          "url"
        ],
        "properties": {
          "componentType": {
            "description": "Type of the video component.",
            "type": "string",
            "enum": [
              "SPONSORED_BRANDS_VIDEO",
              "OTHER_VIDEO"
            ]
          },
          "landingPage": {
            "$ref": "#/components/schemas/LandingPage"
          },
          "id": {
            "description": "Id of the component. The same will be returned as part of the response as well. This can be used to uniquely identify the component from the pre moderation response.",
            "type": "string"
          },
          "url": {
            "description": "Url of the video to be pre moderated. The url must be publicly accessible.",
            "type": "string"
          }
        }
      },
      "SnapshotResponse": {
        "type": "object",
        "properties": {
          "snapshotId": {
            "description": "The identifier of the snapshot that was requested.",
            "type": "string"
          },
          "fileSize": {
            "description": "The size of the snapshot file in bytes. It's only available if status is SUCCESS.",
            "type": "number"
          },
          "recordType": {
            "description": "The record type of the snapshot file.",
            "type": "string",
            "enum": [
              "campaigns",
              "adGroups",
              "productAds",
              "targets",
              "negativeTargets"
            ]
          },
          "statusDetails": {
            "description": "Status information of the call if SUCCESS or FAILURE status, optional for IN_PROCESS.",
            "type": "string"
          },
          "location": {
            "description": "The URI for the snapshot. It's only available if status is SUCCESS.",
            "type": "string"
          },
          "expiration": {
            "description": "The epoch time for expiration of the snapshot file. It's only available if status is SUCCESS.",
            "type": "number"
          },
          "status": {
            "description": "The status of the generation of the snapshot.",
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "SUCCESS",
              "FAILURE"
            ]
          }
        }
      },
      "budgetIncreaseBy": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/BudgetChangeType"
          },
          "value": {
            "format": "double",
            "description": "The budget value.",
            "type": "number"
          }
        }
      },
      "VideoEvidence": {
        "description": "Structure of a video evidence",
        "type": "object",
        "properties": {
          "start": {
            "description": "The start position (in seconds) of the content that violates the specified policy within the video.",
            "type": "integer"
          },
          "end": {
            "description": "The end position (in seconds) of the content that violates the specified policy within the video.",
            "type": "integer"
          }
        }
      },
      "ModerationResultsNotFoundError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Not found error code.",
            "type": "string",
            "enum": [
              "NOT_FOUND"
            ]
          },
          "details": {
            "description": "A human-readable description of the error response.",
            "type": "string"
          }
        }
      },
      "SDCategoryRecommendations": {
        "type": "object",
        "properties": {
          "categories": {
            "minItems": 0,
            "maxItems": 1000,
            "description": "List of recommended category targets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDCategoryRecommendation"
            }
          }
        }
      },
      "SPRuleType": {
        "description": "The type of budget rule. SCHEDULE: A budget rule based on a start and end date. PERFORMANCE: A budget rule based on advertising performance criteria.",
        "type": "string",
        "enum": [
          "SCHEDULE",
          "PERFORMANCE"
        ]
      },
      "CreateAssociatedBudgetRulesRequest": {
        "type": "object",
        "properties": {
          "budgetRuleIds": {
            "maxItems": 25,
            "description": "A list of budget rule identifiers.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ModerationResultsThrottlingError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Throttled error code.",
            "type": "string",
            "enum": [
              "THROTTLED"
            ]
          },
          "details": {
            "description": "A human-readable description of the error response.",
            "type": "string"
          }
        }
      },
      "SDBrandSafetyRequestStatusResponse": {
        "description": "The status of the request.",
        "type": "object",
        "properties": {
          "requestStatus": {
            "$ref": "#/components/schemas/SDBrandSafetyRequestStatus"
          }
        }
      },
      "GetSDBudgetRulesForAdvertiserResponse": {
        "type": "object",
        "properties": {
          "budgetRulesForAdvertiserResponse": {
            "minItems": 0,
            "maxItems": 30,
            "description": "A list of rules created by the advertiser.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDBudgetRule"
            }
          },
          "nextToken": {
            "description": "To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.",
            "type": "string"
          }
        }
      },
      "SDTargetingRecommendations": {
        "description": "A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.",
        "properties": {
          "products": {
            "minItems": 0,
            "maxItems": 1000,
            "description": "List of recommended product targets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDProductRecommendation"
            }
          }
        }
      },
      "ModerationResultsBadRequestError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Bad request error code.",
            "type": "string",
            "enum": [
              "BAD_REQUEST"
            ]
          },
          "details": {
            "description": "A human-readable description of the error response.",
            "type": "string"
          }
        }
      },
      "DateComponent": {
        "description": "Date component which needs to be pre moderated. Either startDate or endDate must be populated, or both can be populated.",
        "type": "object",
        "required": [
          "componentType",
          "id"
        ],
        "properties": {
          "componentType": {
            "description": "Type of the date component.",
            "type": "string",
            "enum": [
              "CAMPAIGN_DATE"
            ]
          },
          "endDate": {
            "description": "End date of the component in yyyy-MM-dd HH:mm:ss format",
            "type": "string"
          },
          "id": {
            "description": "Id of the component. The same will be returned as part of the response as well. This can be used to uniquely identify the component from the pre moderation response.",
            "type": "string"
          },
          "startDate": {
            "description": "Start date of the component in yyyy-MM-dd HH:mm:ss format",
            "type": "string"
          }
        }
      },
      "ImageCrop": {
        "type": "object",
        "properties": {
          "topLeftY": {
            "format": "int64",
            "description": "Policy violated region's top left Y-axis pixel value.",
            "type": "integer"
          },
          "topLeftX": {
            "format": "int64",
            "description": "Policy violated region's top left X-axis pixel value.",
            "type": "integer"
          },
          "width": {
            "format": "int64",
            "description": "Policy violated region's width in pixel.",
            "type": "integer"
          },
          "height": {
            "format": "int64",
            "description": "Policy violated region's height in pixel.",
            "type": "integer"
          }
        }
      },
      "ViolatingAsinEvidence": {
        "type": "object",
        "properties": {
          "asin": {
            "description": "ASIN which has the ad policy violation.",
            "type": "string"
          }
        }
      },
      "SDTargetingBidRecommendationsResponseItemSuccessV31": {
        "allOf": [
          {
            "description": "Success response for corresponding targeting clause on the request.",
            "properties": {
              "code": {
                "description": "The HTTP status code of this item.",
                "type": "string",
                "example": "200"
              }
            }
          },
          {
            "$ref": "#/components/schemas/SDBidRecommendationV31"
          }
        ],
        "description": "A recommended bid range to use for a target.",
        "required": [
          "code"
        ]
      },
      "SBCampaignBudgetRule": {
        "type": "object",
        "required": [
          "ruleId"
        ],
        "properties": {
          "ruleState": {
            "$ref": "#/components/schemas/state"
          },
          "lastUpdatedDate": {
            "format": "int64",
            "description": "Epoch time of budget rule update. Read-only.",
            "type": "number"
          },
          "createdDate": {
            "format": "int64",
            "description": "Epoch time of budget rule creation. Read-only.",
            "type": "number"
          },
          "ruleDetails": {
            "$ref": "#/components/schemas/SBBudgetRuleDetails"
          },
          "ruleId": {
            "description": "The budget rule identifier.",
            "type": "string"
          },
          "ruleStatus": {
            "description": "The budget rule evaluation status. Read-only.",
            "type": "string"
          }
        }
      },
      "SDBrandSafetyDenyListProcessedDomain": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "description": "The date time the domain was created at. Format: YYYY-MM-ddT:HH:mm:ssZ",
            "type": "string",
            "example": "2018-09-16T11:43:21Z"
          },
          "name": {
            "description": "The website or app identifier. This can be in the form of full domain (eg. 'example.com' or 'example.net'), or mobile app identifier (eg. 'com.example.app' for Android apps or '1234567890' for iOS apps)\n",
            "type": "string",
            "maxLength": 250
          },
          "state": {
            "$ref": "#/components/schemas/SDBrandSafetyDenyListDomainState"
          },
          "lastModified": {
            "format": "date-time",
            "description": "The date time the domain was last modified. Format: YYYY-MM-ddT:HH:mm:ssZ",
            "type": "string",
            "example": "2018-09-16T11:43:21Z"
          },
          "type": {
            "$ref": "#/components/schemas/SDBrandSafetyDenyListDomainType"
          },
          "domainId": {
            "format": "int64",
            "description": "The identifier of the Brand Safety List domain.",
            "type": "integer"
          }
        }
      },
      "Recurrence": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/RecurrenceType"
          },
          "daysOfWeek": {
            "description": "Object representing days of the week for weekly type rule. It is not required for daily recurrence type",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          }
        }
      },
      "SDBrandSafetyPostRequest": {
        "description": "POST Request for Brand Safety",
        "required": [
          "domains"
        ],
        "properties": {
          "domains": {
            "minItems": 1,
            "maxItems": 10000,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDBrandSafetyDenyListDomain"
            }
          }
        }
      },
      "SDRecommendationType": {
        "description": "Signifies a type of recommendation",
        "type": "string",
        "enum": [
          "PRODUCT"
        ],
        "example": "PRODUCT"
      },
      "ViolatingVideoEvidence": {
        "type": "object",
        "properties": {
          "violatingVideoPosition": {
            "$ref": "#/components/schemas/VideoPosition"
          }
        }
      },
      "DateRangeTypeRuleDuration": {
        "description": "Object representing date range type rule duration.",
        "type": "object",
        "required": [
          "startDate"
        ],
        "properties": {
          "endDate": {
            "description": "The end date of the budget rule in YYYYMMDD format. The end date is inclusive. Required to be equal or greater than `startDate`.",
            "type": "string"
          },
          "startDate": {
            "description": "The start date of the budget rule in YYYYMMDD format. The start date is inclusive. Required to be greater than or equal to current date.",
            "type": "string"
          }
        }
      },
      "SDTargetingRecommendationsRequestV32": {
        "description": "Request for targeting recommendations",
        "required": [
          "tactic",
          "products",
          "typeFilter"
        ],
        "properties": {
          "themes": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsThemes"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsTypeFilterV31"
          },
          "tactic": {
            "$ref": "#/components/schemas/SDTacticV31"
          },
          "products": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsProducts"
          }
        }
      },
      "BudgetUsageCampaignResponse": {
        "type": "object",
        "properties": {
          "success": {
            "description": "List of budget usage percentages that were successfully pulled",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetUsageCampaign"
            }
          },
          "error": {
            "description": "List of budget usage percentages that failed to pull",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetUsageCampaignBatchError"
            }
          }
        }
      },
      "SDTargetingRecommendationsRequestV33": {
        "description": "Request for targeting recommendations",
        "required": [
          "tactic",
          "products",
          "typeFilter"
        ],
        "properties": {
          "themes": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsThemes"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsTypeFilterV32"
          },
          "tactic": {
            "$ref": "#/components/schemas/SDTacticV31"
          },
          "products": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsProducts"
          }
        }
      },
      "SDTargetingRecommendationsRequestV34": {
        "description": "Request for targeting recommendations",
        "required": [
          "tactic",
          "products",
          "typeFilter"
        ],
        "properties": {
          "themes": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsThemes"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsTypeFilterV32"
          },
          "tactic": {
            "$ref": "#/components/schemas/SDTacticV31"
          },
          "products": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsProducts"
          }
        }
      },
      "SnapshotRequest": {
        "type": "object",
        "properties": {
          "tacticFilter": {
            "description": "Optional. Restricts results to entities with the advertising tactic associated with the campaign within the specified comma-separated list. The tacticFilter not presenting or passing `null` or `\"\"` would be treated as default behavior is to return entities for all tactics.",
            "type": "string",
            "enum": [
              "T00010",
              "T00020",
              "remarketing",
              "T00010,T00020",
              "T00020,remarketing",
              "T00010,remarketing",
              "T00010,T00020,remarketing"
            ]
          },
          "stateFilter": {
            "description": "Optional. Restricts results to entities with state within the specified comma-separated list. The stateFilter not presenting or passing `null` or `\"\"` would be treated as default behavior is to include enabled and paused.",
            "type": "string",
            "enum": [
              "enabled, paused",
              "enabled",
              "paused",
              "archived",
              "enabled,archived",
              "paused,archived",
              "enabled,paused,archived"
            ]
          }
        }
      },
      "SBBudgetRuleDetails": {
        "type": "object",
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/RuleDuration"
          },
          "recurrence": {
            "$ref": "#/components/schemas/Recurrence"
          },
          "ruleType": {
            "$ref": "#/components/schemas/SBRuleType"
          },
          "budgetIncreaseBy": {
            "$ref": "#/components/schemas/budgetIncreaseBy"
          },
          "name": {
            "description": "The budget rule name. Required to be unique within a campaign.",
            "type": "string",
            "maxLength": 355
          },
          "performanceMeasureCondition": {
            "$ref": "#/components/schemas/PerformanceMeasureConditionForSB"
          }
        }
      },
      "ViolatingVideoContent": {
        "type": "object",
        "properties": {
          "violatingVideoEvidences": {
            "minItems": 0,
            "maxItems": 200,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViolatingVideoEvidence"
            }
          },
          "moderatedComponent": {
            "description": "Moderation component which marked the policy violation.",
            "type": "string"
          },
          "reviewedVideoUrl": {
            "description": "URL of the video which has the ad policy violation.",
            "type": "string"
          }
        }
      },
      "ModerationResultsRequest": {
        "type": "object",
        "required": [
          "id",
          "idType",
          "adProgramType",
          "maxResults"
        ],
        "properties": {
          "versionIdFilter": {
            "minItems": 0,
            "maxItems": 200,
            "uniqueItems": true,
            "description": "Filter by specific version id of the ad. The API will return the ad's all versions moderation status if this field is empty.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VersionId"
            }
          },
          "idType": {
            "$ref": "#/components/schemas/IdType"
          },
          "adProgramType": {
            "$ref": "#/components/schemas/ModerationResultsAdProgramType"
          },
          "nextToken": {
            "$ref": "#/components/schemas/NextToken"
          },
          "maxResults": {
            "format": "int32",
            "description": "Sets a limit on the number of results returned by an operation.",
            "maximum": 10,
            "type": "integer",
            "minimum": 1
          },
          "moderationStatusFilter": {
            "minItems": 0,
            "maxItems": 20,
            "uniqueItems": true,
            "description": "Filter by specific moderation status.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModerationStatus"
            }
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          }
        }
      },
      "SBRuleDuration": {
        "type": "object",
        "required": [
          "dateRangeTypeRuleDuration"
        ],
        "properties": {
          "dateRangeTypeRuleDuration": {
            "$ref": "#/components/schemas/DateRangeTypeRuleDuration"
          }
        }
      },
      "SDTargetingRecommendationsFailure": {
        "description": "A targeting recommendation failure record.",
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code indicating a failure response for targeting recomendations.",
            "type": "string",
            "example": "400"
          },
          "name": {
            "description": "The theme name specified in the request. If the themes field is not provided in the request,\nthe value of this field will be set to default.",
            "type": "string"
          },
          "errorMessage": {
            "description": "A human friendly error message indicating the failure reasons.",
            "type": "string"
          }
        }
      },
      "PerformanceMetric": {
        "description": "The advertising performance metric.",
        "type": "string",
        "enum": [
          "ACOS",
          "CTR",
          "CVR",
          "ROAS"
        ]
      },
      "ImagePolicyViolation": {
        "description": "Structure of policy violation for a image component",
        "type": "object",
        "properties": {
          "policyDescription": {
            "description": "A human-readable description of the policy.",
            "type": "string"
          },
          "imageEvidences": {
            "description": "List of evidences for the policy violations detected on the image component.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageEvidence"
            }
          },
          "name": {
            "description": "A policy violation code.",
            "type": "string"
          },
          "type": {
            "description": "Type of policy violation.",
            "type": "string",
            "enum": [
              "WARNING",
              "REJECTED"
            ]
          },
          "policyLinkUrl": {
            "description": "Address of the policy documentation. Follow the link to learn more about the specified policy.",
            "type": "string",
            "example": "https://advertising.amazon.com/resources/ad-policy/en/creative-acceptance#alcohol"
          },
          "textEvidences": {
            "description": "Policy violation on an image can be detected on the ocr detected text on the image as well. This list of text evidences will have the policy violations detected on the text on top of the image.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextEvidence"
            }
          }
        }
      },
      "GetSBBudgetRuleResponse": {
        "type": "object",
        "properties": {
          "budgetRule": {
            "$ref": "#/components/schemas/SBBudgetRule"
          }
        }
      },
      "VideoPolicyViolation": {
        "description": "Structure of policy violation for a video component",
        "type": "object",
        "properties": {
          "policyDescription": {
            "description": "A human-readable description of the policy.",
            "type": "string"
          },
          "videoEvidences": {
            "description": "List of evidences for the policy violations detected on the video component.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoEvidence"
            }
          },
          "name": {
            "description": "A policy violation code.",
            "type": "string"
          },
          "type": {
            "description": "Type of policy violation.",
            "type": "string",
            "enum": [
              "WARNING",
              "REJECTED"
            ]
          },
          "policyLinkUrl": {
            "description": "Address of the policy documentation. Follow the link to learn more about the specified policy.",
            "type": "string",
            "example": "https://advertising.amazon.com/resources/ad-policy/en/creative-acceptance#alcohol"
          }
        }
      },
      "AssociatedBudgetRuleResponse": {
        "type": "object",
        "properties": {
          "code": {
            "description": "An enumerated success or error code for machine use.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the error, if unsuccessful",
            "type": "string"
          },
          "ruleId": {
            "description": "The budget rule identifier.",
            "type": "string"
          }
        }
      },
      "SDTargetingRecommendationsV32": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDProductRecommendationsV32"
          },
          {
            "$ref": "#/components/schemas/SDCategoryRecommendations"
          },
          {
            "type": "object",
            "properties": {
              "themes": {
                "$ref": "#/components/schemas/SDThemeRecommendations"
              }
            }
          }
        ],
        "description": "For v3.2 the service will continue to return the recommendations returned for v3.1 in products field,\nand return recommendations for product targeting themes in themes field."
      },
      "SDTargetingRecommendationsV31": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDProductRecommendationsV31"
          },
          {
            "$ref": "#/components/schemas/SDCategoryRecommendations"
          }
        ],
        "description": "A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning."
      },
      "SDTargetingRecommendationsV34": {
        "description": "A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.",
        "type": "object",
        "properties": {
          "themes": {
            "$ref": "#/components/schemas/SDThemeRecommendationsV34"
          },
          "audiences": {
            "minItems": 0,
            "maxItems": 10,
            "description": "List of recommended audience targets, broken down by audience category",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDAudienceCategoryRecommendations"
            }
          },
          "categories": {
            "minItems": 0,
            "maxItems": 1000,
            "description": "List of recommended category targets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDCategoryRecommendationV33"
            }
          },
          "products": {
            "minItems": 0,
            "maxItems": 1000,
            "description": "List of recommended product targets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDProductRecommendationV32"
            }
          }
        }
      },
      "SDTargetingRecommendationsV33": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDProductRecommendationsV32"
          },
          {
            "$ref": "#/components/schemas/SDCategoryRecommendationsV33"
          },
          {
            "$ref": "#/components/schemas/SDAudienceRecommendations"
          },
          {
            "type": "object",
            "properties": {
              "themes": {
                "$ref": "#/components/schemas/SDThemeRecommendations"
              }
            }
          }
        ],
        "description": "A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning."
      },
      "ComparisonOperator": {
        "description": "The comparison operator.",
        "type": "string",
        "enum": [
          "GREATER_THAN",
          "LESS_THAN",
          "LESS_THAN_OR_EQUAL_TO",
          "GREATER_THAN_OR_EQUAL_TO"
        ]
      },
      "PerformanceMeasureConditionForSB": {
        "type": "object",
        "required": [
          "comparisonOperator",
          "metricName",
          "threshold"
        ],
        "properties": {
          "metricName": {
            "$ref": "#/components/schemas/PerformanceMetricForSB"
          },
          "comparisonOperator": {
            "$ref": "#/components/schemas/ComparisonOperator"
          },
          "threshold": {
            "format": "double",
            "description": "The performance threshold value.",
            "type": "number"
          }
        }
      },
      "TextRecommendation": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique ID for generated recommendation.",
            "type": "string"
          },
          "value": {
            "description": "Recommendation value.",
            "type": "string"
          }
        }
      },
      "NextToken": {
        "description": "Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.",
        "type": "string"
      },
      "SDListAssociatedBudgetRulesResponse": {
        "type": "object",
        "properties": {
          "associatedRules": {
            "description": "A list of associated budget rules.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDBudgetRule"
            }
          }
        }
      },
      "SDTargetingPredicateV31": {
        "description": "A predicate to match against in the Targeting Expression (only applicable to Product targeting - T00020).\n\n* All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Advertising browse system.\n* Brand, price, and review predicates are optional and may only be specified if category is also specified.\n* Review predicates accept numbers between 0 and 5 and are inclusive.\n* When using either of the â€˜betweenâ€™ strings to construct a targeting expression the format of the string is â€˜double-doubleâ€™ where the first double must be smaller than the second double. Prices are not inclusive.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "asinSameAs",
              "asinCategorySameAs",
              "asinBrandSameAs",
              "asinPriceBetween",
              "asinPriceGreaterThan",
              "asinPriceLessThan",
              "asinReviewRatingLessThan",
              "asinReviewRatingGreaterThan",
              "asinReviewRatingBetween",
              "asinIsPrimeShippingEligible",
              "asinAgeRangeSameAs",
              "asinGenreSameAs",
              "similarProduct"
            ]
          },
          "value": {
            "description": "The value to be targeted.",
            "type": "string",
            "example": "B0123456789"
          }
        }
      },
      "SDHeadlineRecommendationResponse": {
        "description": "Response structure of SD headline recommendation API.",
        "type": "object",
        "properties": {
          "requestId": {
            "description": "An identifier for request made which is generated by server.",
            "type": "string"
          },
          "recommendations": {
            "minItems": 1,
            "maxItems": 10,
            "description": "Recommendations are sorted, i.e., more suitable headline has lesser array index value.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendedHeadline"
            }
          }
        }
      },
      "SDTargetingBidRecommendationsResponseV32": {
        "description": "Response to a request for targeting bid recommendations.",
        "required": [
          "bidRecommendations",
          "costType",
          "bidOptimization"
        ],
        "properties": {
          "bidOptimization": {
            "$ref": "#/components/schemas/SDBidOptimizationV32"
          },
          "bidRecommendations": {
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseItemSuccessV31"
                },
                {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseItemFailureV31"
                }
              ]
            }
          },
          "costType": {
            "$ref": "#/components/schemas/SDCostTypeV31"
          }
        }
      },
      "SDTargetingBidRecommendationsResponseV31": {
        "description": "Response to a request for targeting bid recommendations.",
        "required": [
          "bidRecommendations",
          "costType"
        ],
        "properties": {
          "bidRecommendations": {
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseItemSuccessV31"
                },
                {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseItemFailureV31"
                }
              ]
            }
          },
          "costType": {
            "$ref": "#/components/schemas/SDCostTypeV31"
          }
        }
      },
      "ViolatingImageContent": {
        "type": "object",
        "properties": {
          "violatingImageEvidences": {
            "minItems": 0,
            "maxItems": 200,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViolatingImageEvidence"
            }
          },
          "moderatedComponent": {
            "description": "Moderation component which marked the policy violation.",
            "type": "string"
          },
          "reviewedImageUrl": {
            "description": "URL of the image which has the ad policy violation.",
            "type": "string"
          }
        }
      },
      "SBRuleBasedBudget": {
        "type": "object",
        "properties": {
          "executionTime": {
            "format": "int64",
            "description": "Epoch time of budget rule execution.",
            "type": "number"
          },
          "appliedRule": {
            "$ref": "#/components/schemas/SBBudgetRule"
          },
          "ruleBasedBudgetValue": {
            "description": "The budget value.",
            "type": "number"
          },
          "dailyBudgetValue": {
            "description": "The daily budget value.",
            "type": "number"
          },
          "performanceMetric": {
            "$ref": "#/components/schemas/PerformanceMetricValue"
          }
        }
      },
      "SDAPIError": {
        "description": "The error response object.",
        "type": "object",
        "properties": {
          "code": {
            "description": "The HTTP status code of the response.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the response.",
            "type": "string"
          }
        }
      },
      "CreateSBBudgetRulesRequest": {
        "type": "object",
        "properties": {
          "budgetRulesDetails": {
            "maxItems": 25,
            "description": "A list of budget rule details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SBBudgetRuleDetails"
            }
          }
        }
      },
      "ModerationResultsInternalServerError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Internal error code.",
            "type": "string",
            "enum": [
              "INTERNAL_ERROR"
            ]
          },
          "details": {
            "description": "A human-readable description of the error response.",
            "type": "string"
          }
        }
      },
      "TextRecommendations": {
        "minItems": 0,
        "maxItems": 5,
        "description": "Ordered list of recommendations in each group.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TextRecommendation"
        }
      },
      "BudgetUsageCampaign": {
        "type": "object",
        "properties": {
          "budgetUsagePercent": {
            "description": "Budget usage percentage (spend / available budget) for the given budget policy.",
            "type": "number"
          },
          "campaignId": {
            "description": "ID of requested resource",
            "type": "string"
          },
          "usageUpdatedTimestamp": {
            "format": "date-time",
            "description": "Last evaluation time for budget usage",
            "type": "string"
          },
          "index": {
            "description": "An index to maintain order of the campaignIds",
            "type": "number"
          },
          "budget": {
            "description": "Budget amount of resource requested",
            "type": "number"
          }
        }
      },
      "SDBudgetHistory": {
        "type": "object",
        "properties": {
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDRuleBasedBudget"
            }
          }
        }
      },
      "SDASIN": {
        "pattern": "[a-zA-Z0-9]{10}",
        "description": "Amazon Standard Identification Number",
        "type": "string",
        "example": "B00PN11UNW"
      },
      "SDTargetingRecommendationsThemes": {
        "description": "The themes used to refine the recommendations. Currently only product targeting themes are supported.",
        "type": "object",
        "properties": {
          "product": {
            "minItems": 0,
            "maxItems": 5,
            "description": "A list of themes for product targeting recommendations. If this list is empty, the service will return\nall the current available theme recommendations. Recommendations will be returned for each theme.\nIf specified, each theme should only include unique expressions.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDProductTargetingTheme"
            }
          }
        }
      },
      "SPCampaignBudgetRule": {
        "type": "object",
        "required": [
          "ruleId"
        ],
        "properties": {
          "ruleState": {
            "$ref": "#/components/schemas/state"
          },
          "lastUpdatedDate": {
            "format": "int64",
            "description": "Epoch time of budget rule update. Read-only.",
            "type": "number"
          },
          "createdDate": {
            "format": "int64",
            "description": "Epoch time of budget rule creation. Read-only.",
            "type": "number"
          },
          "ruleDetails": {
            "$ref": "#/components/schemas/SPBudgetRuleDetails"
          },
          "ruleId": {
            "description": "The budget rule identifier.",
            "type": "string"
          },
          "ruleStatus": {
            "description": "The budget rule evaluation status. Read-only.",
            "type": "string"
          }
        }
      },
      "SPBudgetRule": {
        "type": "object",
        "required": [
          "ruleId"
        ],
        "properties": {
          "ruleState": {
            "$ref": "#/components/schemas/state"
          },
          "lastUpdatedDate": {
            "format": "int64",
            "description": "Epoch time of budget rule update. Read-only.",
            "type": "number"
          },
          "createdDate": {
            "format": "int64",
            "description": "Epoch time of budget rule creation. Read-only.",
            "type": "number"
          },
          "ruleDetails": {
            "$ref": "#/components/schemas/SPBudgetRuleDetails"
          },
          "ruleId": {
            "description": "The budget rule identifier.",
            "type": "string"
          },
          "ruleStatus": {
            "description": "The budget rule status. Read-only.",
            "type": "string"
          }
        }
      },
      "SDTargetingBidRecommendationsResponseItemFailureV31": {
        "description": "Failed bid recommendation response.",
        "required": [
          "code",
          "details"
        ],
        "properties": {
          "code": {
            "description": "The HTTP status code of this item.",
            "type": "string",
            "example": "400"
          },
          "details": {
            "description": "A human-readable description of this item on error.",
            "type": "string",
            "example": "Targeting expression does not conform to language specific rules."
          }
        }
      },
      "AsinComponentResponse": {
        "description": "Pre-moderation result for an Asin component",
        "type": "object",
        "properties": {
          "preModerationStatus": {
            "description": "The pre-moderation status of the component.",
            "type": "string",
            "enum": [
              "REJECTED",
              "APPROVED",
              "FAILED",
              "RETRYABLE_FAILURE"
            ]
          },
          "componentType": {
            "description": "Type of Asin component.",
            "type": "string",
            "enum": [
              "LANDING_ASIN",
              "PRODUCT_ASIN"
            ]
          },
          "policyViolations": {
            "description": "A list of policy violations for the component that were detected during pre moderation. Note that this field is present in the response only when preModerationStatus is set to REJECTED.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AsinPolicyViolation"
            }
          },
          "asin": {
            "description": "Pre-moderated Asin Id.",
            "type": "string"
          },
          "id": {
            "description": "Id of the component. This is the same id sent as part of the request. This can be used to uniquely identify the component.",
            "type": "string"
          }
        }
      },
      "CreativeRecommendationsThrottlingError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Throttled error code.",
            "type": "string",
            "enum": [
              "THROTTLED"
            ]
          },
          "details": {
            "description": "A human-readable description of the error response.",
            "type": "string"
          }
        }
      },
      "UpdateSBBudgetRulesRequest": {
        "type": "object",
        "properties": {
          "budgetRulesDetails": {
            "maxItems": 25,
            "description": "A list of budget rule details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SBBudgetRule"
            }
          }
        }
      },
      "CreateAssociatedBudgetRulesResponse": {
        "type": "object",
        "properties": {
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociatedBudgetRuleResponse"
            }
          }
        }
      },
      "SDTargetingRecommendationsRequestV31": {
        "description": "Request for targeting recommendations",
        "required": [
          "tactic",
          "products",
          "typeFilter"
        ],
        "properties": {
          "typeFilter": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsTypeFilterV31"
          },
          "tactic": {
            "$ref": "#/components/schemas/SDTacticV31"
          },
          "products": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsProducts"
          }
        }
      },
      "SDTargetExpressionV31": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SDTargetingPredicateV31"
          },
          {
            "$ref": "#/components/schemas/SDTargetingPredicateNestedV31"
          }
        ]
      },
      "PerformanceMetricValue": {
        "description": "An object giving the name of the performance metric and its value when the rule was evaluated",
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the performance metric",
            "type": "string"
          },
          "value": {
            "format": "double",
            "description": "Value of the performance metric",
            "type": "number"
          }
        }
      },
      "BudgetRuleError": {
        "description": "The Error Response Object.",
        "type": "object",
        "properties": {
          "code": {
            "description": "An enumerated error code for machine use.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the response.",
            "type": "string"
          }
        }
      },
      "SDBidRecommendationV31": {
        "description": "A recommended bid range to use for a target.",
        "required": [
          "rangeLower",
          "rangeUpper",
          "recommended"
        ],
        "properties": {
          "rangeUpper": {
            "description": "The highest recommended bid to use to win an ad placement for this target.",
            "type": "number",
            "example": "1"
          },
          "rangeLower": {
            "description": "The lowest recommended bid to use to win an ad placement for this target.",
            "type": "number",
            "example": "0.5"
          },
          "recommended": {
            "description": "The recommended bid to use to win an ad placement for this target.",
            "type": "number",
            "example": "0.75"
          }
        }
      },
      "SDGoalProduct": {
        "description": "A product an advertisers wants to advertise. Recommendations will be made for specified goal products.",
        "type": "object",
        "required": [
          "asin"
        ],
        "properties": {
          "asin": {
            "$ref": "#/components/schemas/SDASIN"
          }
        }
      },
      "UpdateSPBudgetRulesRequest": {
        "description": "Request object for updating budget rule for SP campaign",
        "type": "object",
        "properties": {
          "budgetRulesDetails": {
            "maxItems": 25,
            "description": "A list of budget rule details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SPBudgetRule"
            }
          }
        }
      },
      "CreativeRecommendationsResponse": {
        "type": "object",
        "properties": {
          "primaryHeadlines": {
            "$ref": "#/components/schemas/PrimaryHeadlineRecommendationGroups"
          },
          "secondaryHeadlines": {
            "$ref": "#/components/schemas/SecondaryHeadlineRecommendationGroups"
          }
        }
      },
      "SDCategoryRecommendationsV33": {
        "type": "object",
        "properties": {
          "categories": {
            "minItems": 0,
            "maxItems": 1000,
            "description": "List of recommended category targets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDCategoryRecommendationV33"
            }
          }
        }
      },
      "TextPosition": {
        "type": "object",
        "properties": {
          "start": {
            "format": "int64",
            "description": "Zero-based index into the text in reviewedText where the text specified in violatingText starts.",
            "type": "integer"
          },
          "end": {
            "format": "int64",
            "description": "Zero-based index into the text in reviewedText where the text specified in violatingText ends.",
            "type": "integer"
          }
        }
      },
      "AssociatedCampaign": {
        "type": "object",
        "required": [
          "campaignId",
          "campaignName",
          "ruleStatus"
        ],
        "properties": {
          "campaignId": {
            "description": "The campaign identifier.",
            "type": "string"
          },
          "ruleStatus": {
            "description": "The budget rule evaluation status for this campaign. Read-only.",
            "type": "string"
          },
          "campaignName": {
            "description": "The campaign name.",
            "type": "string"
          }
        }
      },
      "PolicyViolation": {
        "type": "object",
        "properties": {
          "policyDescription": {
            "description": "A human-readable description of the policy.",
            "type": "string"
          },
          "violatingTextContents": {
            "minItems": 0,
            "maxItems": 200,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViolatingTextContent"
            }
          },
          "violatingImageContents": {
            "minItems": 0,
            "maxItems": 200,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViolatingImageContent"
            }
          },
          "policyLinkUrl": {
            "description": "Address of the policy documentation. Follow the link to learn more about the specified policy.",
            "type": "string"
          },
          "violatingVideoContents": {
            "minItems": 0,
            "maxItems": 200,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViolatingVideoContent"
            }
          },
          "violatingAsinContents": {
            "minItems": 0,
            "maxItems": 200,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViolatingAsinContent"
            }
          }
        }
      },
      "DisassociateAssociatedBudgetRuleResponse": {
        "type": "object"
      },
      "SDHeadlineRecommendationInternalServerException": {
        "type": "object",
        "properties": {
          "code": {
            "description": "InternalErrorCode.",
            "type": "string",
            "enum": [
              "INTERNAL_ERROR"
            ]
          },
          "details": {
            "description": "A human-readable description of the error response.",
            "type": "string"
          }
        }
      },
      "SPBudgetHistory": {
        "type": "object",
        "properties": {
          "nextToken": {
            "description": "To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.",
            "type": "string"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SPRuleBasedBudget"
            }
          }
        }
      }
    },
    "requestBodies": {},
    "responses": {},
    "callbacks": {},
    "links": {},
    "securitySchemes": {},
    "parameters": {
      "SDBrandSafetyProfileHeader": {
        "schema": {
          "type": "string"
        },
        "in": "header",
        "name": "Amazon-Advertising-API-Scope",
        "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.\n",
        "required": true
      },
      "clientHeader": {
        "schema": {
          "type": "string"
        },
        "in": "header",
        "name": "Amazon-Advertising-API-ClientId",
        "description": "The identifier of a client associated with a \"Login with Amazon\" account.",
        "required": true
      },
      "SDBrandSafetyClientHeader": {
        "schema": {
          "type": "string"
        },
        "in": "header",
        "name": "Amazon-Advertising-API-ClientId",
        "description": "The identifier of a client associated with a \"Login with Amazon\" account.",
        "required": true
      },
      "SDProfileHeader": {
        "schema": {
          "type": "string"
        },
        "in": "header",
        "name": "Amazon-Advertising-API-Scope",
        "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to\nlist profiles associated with the access token passed in the HTTP Authorization header.",
        "required": true
      },
      "SDClientHeader": {
        "schema": {
          "type": "string"
        },
        "in": "header",
        "name": "Amazon-Advertising-API-ClientId",
        "description": "The identifier of a client associated with a \"Login with Amazon\" account.",
        "required": true
      },
      "SDRequestedLocale": {
        "schema": {
          "$ref": "#/components/schemas/SDLocale"
        },
        "in": "query",
        "name": "locale",
        "description": "The requested locale from query parameter",
        "required": false
      },
      "profileHeader": {
        "schema": {
          "type": "string"
        },
        "in": "header",
        "name": "Amazon-Advertising-API-Scope",
        "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id `profileId` from the response to pass it as input.",
        "required": true
      }
    }
  },
  "openapi": "3.0.1"
}