/* tslint:disable */
/* eslint-disable */
/**
 * Billing
 * Get invoice data by invoice ID
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { createRequestFunction } from "../../helpers";

/**
 * Sponsored Ads only. This field indicates the ad type (such as Sponsored Products, Sponsored Brands or Sponsored Display). 
 * @export
 * @enum {string}
 */

export enum AdProgram {
    SponsoredProduct = 'SPONSORED PRODUCT',
    SponsoredBrands = 'SPONSORED BRANDS',
    SponsoredDisplay = 'SPONSORED DISPLAY',
    SponsoredDisplayForFireTv = 'SPONSORED DISPLAY FOR FIRE TV',
    CreatorConnections = 'CREATOR CONNECTIONS',
    AmazonLive = 'AMAZON LIVE'
}

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    stateOrRegion: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    attentionName?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    city: string;
    /**
     * ISO 3611 country code
     * @type {string}
     * @memberof Address
     */
    countryCode: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    companyName: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    postalCode: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    addressLine1: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    addressLine2: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    addressLine3: string;
}
/**
 * 
 * @export
 * @interface Adjustment
 */
export interface Adjustment {
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof Adjustment
     */
    amount: CurrencyAmount;
    /**
     * Date in YYYYMMDD format
     * @type {string}
     * @memberof Adjustment
     */
    accountingDate: string;
    /**
     * Charges can include different fees (see feeType below). 
     * @type {Array<Fee>}
     * @memberof Adjustment
     */
    fees?: Array<Fee>;
    /**
     * 
     * @type {string}
     * @memberof Adjustment
     */
    comments?: string;
    /**
     * Sponsored Ads only. This identifier maps to one of the portfolios listed in the portfolios section. 
     * @type {number}
     * @memberof Adjustment
     */
    portfolioId?: number;
}
/**
 * 
 * @export
 * @interface AdvertiserMarketplace
 */
export interface AdvertiserMarketplace {
    /**
     * 
     * @type {string}
     * @memberof AdvertiserMarketplace
     */
    marketplaceId: string;
    /**
     * 
     * @type {string}
     * @memberof AdvertiserMarketplace
     */
    advertiserId: string;
}
/**
 * 
 * @export
 * @interface BillingNotification
 */
export interface BillingNotification {
    /**
     * 
     * @type {BillingNotificationSeverity}
     * @memberof BillingNotification
     */
    severity: BillingNotificationSeverity;
    /**
     * 
     * @type {string}
     * @memberof BillingNotification
     */
    paymentDueDate?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingNotification
     */
    suspensionDate?: string;
    /**
     * 
     * @type {BillingNotificationNames}
     * @memberof BillingNotification
     */
    name: BillingNotificationNames;
    /**
     * 
     * @type {string}
     * @memberof BillingNotification
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof BillingNotification
     */
    priority: number;
    /**
     * 
     * @type {string}
     * @memberof BillingNotification
     */
    title: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum BillingNotificationNames {
    AccountError = 'ACCOUNT_ERROR',
    CnpjVerificationInProgress = 'CNPJ_VERIFICATION_IN_PROGRESS',
    CreditCardChargeDisputeCausedSuspension = 'CREDIT_CARD_CHARGE_DISPUTE_CAUSED_SUSPENSION',
    CreditCardExpired = 'CREDIT_CARD_EXPIRED',
    CreditCardExpiresSoon = 'CREDIT_CARD_EXPIRES_SOON',
    CreditCardPaymentFailureCausedSuspension = 'CREDIT_CARD_PAYMENT_FAILURE_CAUSED_SUSPENSION',
    CreditCardVerificationFailureCausedSuspension = 'CREDIT_CARD_VERIFICATION_FAILURE_CAUSED_SUSPENSION',
    CreditCardVerificationFailure = 'CREDIT_CARD_VERIFICATION_FAILURE',
    CreditCardVerificationPending = 'CREDIT_CARD_VERIFICATION_PENDING',
    CreditCardWithVerificationPaymentFailureCausedSuspension = 'CREDIT_CARD_WITH_VERIFICATION_PAYMENT_FAILURE_CAUSED_SUSPENSION',
    CreditCardWithVerificationPaymentFailure = 'CREDIT_CARD_WITH_VERIFICATION_PAYMENT_FAILURE',
    CreditCardWithVerificationPendingCausedSuspension = 'CREDIT_CARD_WITH_VERIFICATION_PENDING_CAUSED_SUSPENSION',
    CreditCardWithVerificationSuspensionWithPaymentInProgress = 'CREDIT_CARD_WITH_VERIFICATION_SUSPENSION_WITH_PAYMENT_IN_PROGRESS',
    DeductFromProceedsPaymentFailureCausedSuspension = 'DEDUCT_FROM_PROCEEDS_PAYMENT_FAILURE_CAUSED_SUSPENSION',
    DeductFromProceedsWithCreditCardFallbackPaymentFailureCausedSuspension = 'DEDUCT_FROM_PROCEEDS_WITH_CREDIT_CARD_FALLBACK_PAYMENT_FAILURE_CAUSED_SUSPENSION',
    DeductFromProceedsWithCreditLimitEligible = 'DEDUCT_FROM_PROCEEDS_WITH_CREDIT_LIMIT_ELIGIBLE',
    DeductFromProceedsWithMonthlyInvoiceEligible = 'DEDUCT_FROM_PROCEEDS_WITH_MONTHLY_INVOICE_ELIGIBLE',
    InactiveSellerAccountCausedSuspension = 'INACTIVE_SELLER_ACCOUNT_CAUSED_SUSPENSION',
    InvalidPaymentRegistration = 'INVALID_PAYMENT_REGISTRATION',
    PayByInvoiceOverduePaymentCausedSuspension = 'PAY_BY_INVOICE_OVERDUE_PAYMENT_CAUSED_SUSPENSION',
    PayByInvoiceOverduePaymentPendingSuspension = 'PAY_BY_INVOICE_OVERDUE_PAYMENT_PENDING_SUSPENSION',
    PayByInvoiceOverduePayment = 'PAY_BY_INVOICE_OVERDUE_PAYMENT',
    PayByInvoiceUpcomingPayment = 'PAY_BY_INVOICE_UPCOMING_PAYMENT',
    PendingPaymentRegistration = 'PENDING_PAYMENT_REGISTRATION',
    PendingValidCnpjRegistration = 'PENDING_VALID_CNPJ_REGISTRATION',
    StoredValueAutoReloadPaymentFailure = 'STORED_VALUE_AUTO_RELOAD_PAYMENT_FAILURE',
    SellerAccountInsufficientAvailableBalanceCausedSuspension = 'SELLER_ACCOUNT_INSUFFICIENT_AVAILABLE_BALANCE_CAUSED_SUSPENSION',
    SellerAccountInsufficientGrossBalanceCausedSuspension = 'SELLER_ACCOUNT_INSUFFICIENT_GROSS_BALANCE_CAUSED_SUSPENSION',
    SellerAccountPaymentFailureCausedSuspension = 'SELLER_ACCOUNT_PAYMENT_FAILURE_CAUSED_SUSPENSION',
    SellerAccountWithCreditCardFallbackPaymentFailureCausedSuspension = 'SELLER_ACCOUNT_WITH_CREDIT_CARD_FALLBACK_PAYMENT_FAILURE_CAUSED_SUSPENSION'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum BillingNotificationSeverity {
    Alert = 'ALERT',
    Warning = 'WARNING',
    Info = 'INFO'
}

/**
 * 
 * @export
 * @interface BillingStatus
 */
export interface BillingStatus {
    /**
     * 
     * @type {BillingStatusCode}
     * @memberof BillingStatus
     */
    billingStatusCode: BillingStatusCode;
    /**
     * 
     * @type {string}
     * @memberof BillingStatus
     */
    message: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum BillingStatusCode {
    AccountBillingIssue = 'ACCOUNT_BILLING_ISSUE',
    InvalidPaymentRegistration = 'INVALID_PAYMENT_REGISTRATION',
    PaymentMethodExpired = 'PAYMENT_METHOD_EXPIRED',
    PaymentMethodVerificationFailed = 'PAYMENT_METHOD_VERIFICATION_FAILED',
    PendingBillingRegistration = 'PENDING_BILLING_REGISTRATION',
    PendingPaymentRegistration = 'PENDING_PAYMENT_REGISTRATION',
    PendingTaxRegistration = 'PENDING_TAX_REGISTRATION',
    StoredValueBalanceTooLow = 'STORED_VALUE_BALANCE_TOO_LOW',
    ReserveOrderBalanceTooLow = 'RESERVE_ORDER_BALANCE_TOO_LOW',
    ValidBillingStatus = 'VALID_BILLING_STATUS'
}

/**
 * 
 * @export
 * @interface BulkGetBillingNotificationsError
 */
export interface BulkGetBillingNotificationsError {
    /**
     * 
     * @type {number}
     * @memberof BulkGetBillingNotificationsError
     */
    index: number;
    /**
     * 
     * @type {BulkGetBillingNotificationsErrorCodes}
     * @memberof BulkGetBillingNotificationsError
     */
    errorCode: BulkGetBillingNotificationsErrorCodes;
    /**
     * 
     * @type {string}
     * @memberof BulkGetBillingNotificationsError
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof BulkGetBillingNotificationsError
     */
    advertiserId: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum BulkGetBillingNotificationsErrorCodes {
    BadRequest = 'BAD_REQUEST',
    NotFound = 'NOT_FOUND',
    NotAuthorized = 'NOT_AUTHORIZED',
    InternalError = 'INTERNAL_ERROR'
}

/**
 * 
 * @export
 * @interface BulkGetBillingNotificationsErrorResponse
 */
export interface BulkGetBillingNotificationsErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof BulkGetBillingNotificationsErrorResponse
     */
    message?: string;
}
/**
 * The properties needed to get the billing notifications for a set of advertisers.
 * @export
 * @interface BulkGetBillingNotificationsRequestBody
 */
export interface BulkGetBillingNotificationsRequestBody {
    /**
     * 
     * @type {Array<AdvertiserMarketplace>}
     * @memberof BulkGetBillingNotificationsRequestBody
     */
    advertiserMarketplaces: Array<AdvertiserMarketplace>;
    /**
     * 
     * @type {Locale}
     * @memberof BulkGetBillingNotificationsRequestBody
     */
    locale?: Locale;
}
/**
 * 
 * @export
 * @interface BulkGetBillingNotificationsResponse
 */
export interface BulkGetBillingNotificationsResponse {
    /**
     * 
     * @type {Array<BulkGetBillingNotificationsSuccess>}
     * @memberof BulkGetBillingNotificationsResponse
     */
    success: Array<BulkGetBillingNotificationsSuccess>;
    /**
     * 
     * @type {Array<BulkGetBillingNotificationsError>}
     * @memberof BulkGetBillingNotificationsResponse
     */
    error: Array<BulkGetBillingNotificationsError>;
}
/**
 * 
 * @export
 * @interface BulkGetBillingNotificationsSuccess
 */
export interface BulkGetBillingNotificationsSuccess {
    /**
     * 
     * @type {Array<BillingNotification>}
     * @memberof BulkGetBillingNotificationsSuccess
     */
    billingNotifications: Array<BillingNotification>;
    /**
     * 
     * @type {number}
     * @memberof BulkGetBillingNotificationsSuccess
     */
    index: number;
    /**
     * 
     * @type {string}
     * @memberof BulkGetBillingNotificationsSuccess
     */
    advertiserId: string;
}
/**
 * 
 * @export
 * @interface BulkGetBillingStatusError
 */
export interface BulkGetBillingStatusError {
    /**
     * 
     * @type {number}
     * @memberof BulkGetBillingStatusError
     */
    index: number;
    /**
     * 
     * @type {BulkGetBillingStatusErrorCodes}
     * @memberof BulkGetBillingStatusError
     */
    errorCode?: BulkGetBillingStatusErrorCodes;
    /**
     * 
     * @type {string}
     * @memberof BulkGetBillingStatusError
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof BulkGetBillingStatusError
     */
    advertiserId: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum BulkGetBillingStatusErrorCodes {
    BadRequest = 'BAD_REQUEST',
    NotFound = 'NOT_FOUND',
    NotAuthorized = 'NOT_AUTHORIZED',
    InternalError = 'INTERNAL_ERROR'
}

/**
 * 
 * @export
 * @interface BulkGetBillingStatusErrorResponse
 */
export interface BulkGetBillingStatusErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof BulkGetBillingStatusErrorResponse
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface BulkGetBillingStatusResponse
 */
export interface BulkGetBillingStatusResponse {
    /**
     * 
     * @type {Array<BulkGetBillingStatusSuccess>}
     * @memberof BulkGetBillingStatusResponse
     */
    success: Array<BulkGetBillingStatusSuccess>;
    /**
     * 
     * @type {Array<BulkGetBillingStatusError>}
     * @memberof BulkGetBillingStatusResponse
     */
    error: Array<BulkGetBillingStatusError>;
}
/**
 * 
 * @export
 * @interface BulkGetBillingStatusSuccess
 */
export interface BulkGetBillingStatusSuccess {
    /**
     * 
     * @type {number}
     * @memberof BulkGetBillingStatusSuccess
     */
    index: number;
    /**
     * 
     * @type {BillingStatus}
     * @memberof BulkGetBillingStatusSuccess
     */
    billingStatus: BillingStatus;
    /**
     * 
     * @type {string}
     * @memberof BulkGetBillingStatusSuccess
     */
    advertiserId: string;
}
/**
 * The properties needed to get the billing statuses for a set of advertisers.
 * @export
 * @interface BulkGetBillingStatusesRequestBody
 */
export interface BulkGetBillingStatusesRequestBody {
    /**
     * 
     * @type {Array<AdvertiserMarketplace>}
     * @memberof BulkGetBillingStatusesRequestBody
     */
    advertiserMarketplaces: Array<AdvertiserMarketplace>;
    /**
     * 
     * @type {Locale}
     * @memberof BulkGetBillingStatusesRequestBody
     */
    locale?: Locale;
}
/**
 * 
 * @export
 * @interface ContactInfo
 */
export interface ContactInfo {
    /**
     * 
     * @type {Address}
     * @memberof ContactInfo
     */
    address: Address;
    /**
     * 
     * @type {Email}
     * @memberof ContactInfo
     */
    email: Email;
}
/**
 * 
 * @export
 * @interface CurrencyAmount
 */
export interface CurrencyAmount {
    /**
     * 
     * @type {number}
     * @memberof CurrencyAmount
     */
    amount?: number;
    /**
     * 
     * @type {CurrencyCode}
     * @memberof CurrencyAmount
     */
    currencyCode?: CurrencyCode;
}
/**
 * The currency used for all monetary values for entities under this profile |Region|`countryCode`|Country Name|`currencyCode`| |-|-|-|-| |NA|US|United States|USD| |NA|CA|Canada|CAD| |NA|MX|Mexico|MXN| |NA|BR|Brazil|BRL| |EU|UK|United Kingdom|GBP| |EU|DE|Germany|EUR| |EU|FR|France|EUR| |EU|ES|Spain|EUR| |EU|IT|Italy|EUR| |EU|NL|Netherlands|EUR| |EU|AE|United Arab Emirates|AED| |EU|SA|Saudi Arabia|SAR| |EU|TR|Turkey|TRY| |EU|SE|Sweden|SEK| |EU|EG|Egypt|EGP| |EU|PL|Poland|PLN| |IN|IN|India|INR| |FE|JP|Japan|JPY| |FE|SG|Singapore|SGD| |FE|AU|Australia|AUD|
 * @export
 * @enum {string}
 */

export enum CurrencyCode {
    Usd = 'USD',
    Cad = 'CAD',
    Mxn = 'MXN',
    Brl = 'BRL',
    Gbp = 'GBP',
    Eur = 'EUR',
    Aed = 'AED',
    Sar = 'SAR',
    Inr = 'INR',
    Jpy = 'JPY',
    Aud = 'AUD',
    Sgd = 'SGD',
    Try = 'TRY',
    Sek = 'SEK',
    Egp = 'EGP',
    Pln = 'PLN'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum DocumentType {
    Invoice = 'INVOICE',
    CreditNote = 'CREDIT_NOTE'
}

/**
 * 
 * @export
 * @interface Email
 */
export interface Email {
    /**
     * 
     * @type {string}
     * @memberof Email
     */
    emailAddress: string;
    /**
     * Customer name used in email communication. 
     * @type {string}
     * @memberof Email
     */
    displayName: string;
}
/**
 * 
 * @export
 * @interface Fee
 */
export interface Fee {
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof Fee
     */
    cost: CurrencyAmount;
    /**
     * 
     * @type {FeeIdentifiers}
     * @memberof Fee
     */
    feeIdentifiers?: FeeIdentifiers;
    /**
     * * `PLATFORM_FEE`: Billable fee set at the Rodeo Entity level by internal users which reflects the cost of using the Amazon DSP   * Supply Cost * Platform Fee % * `AGENCY_FEE`: Non-billable fee set at the Rodeo Order level by external users which reflects the fee that the agency is charging the end customer   * Total Cost * Agency Fee % * `AUDIENCE_FEE`: Billable fee automatically calculated at the Rodeo Line Item level when external users choose Amazon 1P data segments for campaign targeting   * Impressions with Audience Fees * Audience Fee (CPM)/1000 * `3P_[AUTO_]NON_ABSORBED_FEE`: Billable fee automatically calculated at the Rodeo Line Item level when external users choose Automotive data segments and/or DMP data segments for campaign targeting   * Impressions * Billable 3p Fee / 1000 * `REGULATORY_ADVERTISING_FEE`: Fees derive from ads serving in specific countries and/or for ads purchased from advertisers in specific countries during the period in which you are billed. 
     * @type {string}
     * @memberof Fee
     */
    feeType: FeeFeeTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FeeFeeTypeEnum {
    AudienceFee = 'AUDIENCE_FEE',
    _3PAutoNonAbsorbedFee = '3P_AUTO_NON_ABSORBED_FEE',
    _3PNonAbsorbedFee = '3P_NON_ABSORBED_FEE',
    PlatformFee = 'PLATFORM_FEE',
    RegulatoryAdvertisingFee = 'REGULATORY_ADVERTISING_FEE'
}

/**
 * Identifiers describing attributes for different fee types. * countryCode: ISO 3611 country code for country specific Regulatory Advertising Fees. 
 * @export
 * @interface FeeIdentifiers
 */
export interface FeeIdentifiers {
    /**
     * ISO 3611 country code
     * @type {string}
     * @memberof FeeIdentifiers
     */
    countryCode?: string;
}
/**
 * Government invoice data is provided in marketplaces (such as Italy or India) that require a government-assigned invoice ID. This object contains this identifier, along with the type of transaction from a government standpoint (which will always be a debit in the case of an invoice). 
 * @export
 * @interface GovernmentInvoiceInformation
 */
export interface GovernmentInvoiceInformation {
    /**
     * 
     * @type {string}
     * @memberof GovernmentInvoiceInformation
     */
    transactionType?: GovernmentInvoiceInformationTransactionTypeEnum;
    /**
     * ISO 3611 country code
     * @type {string}
     * @memberof GovernmentInvoiceInformation
     */
    countryCode?: string;
    /**
     * Government generated ID
     * @type {string}
     * @memberof GovernmentInvoiceInformation
     */
    governmentInvoiceId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum GovernmentInvoiceInformationTransactionTypeEnum {
    Debit = 'DEBIT',
    Credit = 'CREDIT'
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * This will be null when at the end of your result set.  This will be present even if the original query had a startIndex and count
     * @type {string}
     * @memberof InlineResponse200
     */
    nextCursor?: string;
    /**
     * Optional parameter that links to the previous data set if relevant
     * @type {string}
     * @memberof InlineResponse200
     */
    previousCursor?: string;
    /**
     * 
     * @type {Array<InvoiceSummary>}
     * @memberof InlineResponse200
     */
    invoiceSummaries?: Array<InvoiceSummary>;
}
/**
 * 
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * List of promotions applied to the charges in this invoice.
     * @type {Array<Promotion>}
     * @memberof Invoice
     */
    promotions: Array<Promotion>;
    /**
     * 
     * @type {GovernmentInvoiceInformation}
     * @memberof Invoice
     */
    governmentInvoiceInformation?: GovernmentInvoiceInformation;
    /**
     * 
     * @type {ContactInfo}
     * @memberof Invoice
     */
    payerContactInfo: ContactInfo;
    /**
     * 
     * @type {TaxDetail}
     * @memberof Invoice
     */
    taxDetail: TaxDetail;
    /**
     * List of adjustments (positive and negative) applied to this invoice.
     * @type {Array<Adjustment>}
     * @memberof Invoice
     */
    adjustments: Array<Adjustment>;
    /**
     * Line items for this invoice. For Sponsored Ads, this will be a per-campaign breakdown of charges. For DSP, this will be the line items for the campaign getting invoiced.
     * @type {Array<InvoiceLine>}
     * @memberof Invoice
     */
    invoiceLines: Array<InvoiceLine>;
    /**
     * 
     * @type {InvoiceSummary}
     * @memberof Invoice
     */
    invoiceSummary: InvoiceSummary;
    /**
     * 
     * @type {ContactInfo}
     * @memberof Invoice
     */
    issuerContactInfo: ContactInfo;
    /**
     * Additional contacts. This field is used in cases such as Loi Sapin in France where both advertiser and agency addresses need to be provided. 
     * @type {Array<ContactInfo>}
     * @memberof Invoice
     */
    thirdPartyContactInfo: Array<ContactInfo>;
    /**
     * List of payments made against the invoice.
     * @type {Array<Payment>}
     * @memberof Invoice
     */
    payments: Array<Payment>;
    /**
     * Sponsored Ads only. This is a list of portfolios with their name, ID and the total cost of the campaign(s) they contain. This totalAmount corresponds to the sum of the invoice lines tagged with the ID of this portfolio. 
     * @type {Array<Portfolio>}
     * @memberof Invoice
     */
    portfolios: Array<Portfolio>;
}
/**
 * 
 * @export
 * @interface InvoiceLine
 */
export interface InvoiceLine {
    /**
     * Campaign tags in the form of string key-value pairs.
     * @type {{ [key: string]: string; }}
     * @memberof InvoiceLine
     */
    campaignTags?: { [key: string]: string; };
    /**
     * Type of event charged (clicks or impressions)
     * @type {string}
     * @memberof InvoiceLine
     */
    costEventType: InvoiceLineCostEventTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof InvoiceLine
     */
    commissionRate?: number;
    /**
     * Charges can include different fees (see feeType below). 
     * @type {Array<Fee>}
     * @memberof InvoiceLine
     */
    fees?: Array<Fee>;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof InvoiceLine
     */
    cost: CurrencyAmount;
    /**
     * 
     * @type {number}
     * @memberof InvoiceLine
     */
    campaignId?: number;
    /**
     * Metric used for performance measurement.
     * @type {string}
     * @memberof InvoiceLine
     */
    priceType: InvoiceLinePriceTypeEnum;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof InvoiceLine
     */
    supplyCost?: CurrencyAmount;
    /**
     * Sponsored Ads only. This identifier maps to one of the portfolios listed in the portfolios section. 
     * @type {number}
     * @memberof InvoiceLine
     */
    portfolioId?: number;
    /**
     * Ad spends cost (Cost exclusive of adjustments/promotions/fees/etc) per unit (thousand impressions/clicks). 
     * @type {number}
     * @memberof InvoiceLine
     */
    costPerEventType?: number;
    /**
     * 
     * @type {AdProgram}
     * @memberof InvoiceLine
     */
    programName?: AdProgram;
    /**
     * Number of clicks/impressions charged
     * @type {number}
     * @memberof InvoiceLine
     */
    costEventCount: number;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLine
     */
    purchaseOrderNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLine
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceLine
     */
    campaignName?: string;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof InvoiceLine
     */
    promotionAmount?: CurrencyAmount;
    /**
     * 
     * @type {number}
     * @memberof InvoiceLine
     */
    costPerUnit: number;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof InvoiceLine
     */
    commissionAmount?: CurrencyAmount;
}

/**
    * @export
    * @enum {string}
    */
export enum InvoiceLineCostEventTypeEnum {
    Clicks = 'CLICKS',
    Impressions = 'IMPRESSIONS'
}
/**
    * @export
    * @enum {string}
    */
export enum InvoiceLinePriceTypeEnum {
    Cpc = 'CPC',
    Cpm = 'CPM'
}

/**
 * * `ISSUED`: An invoice is issued when its charges are finalized and tax is computed on the total amount.  * `PAID_IN_PART`: When a partial payment is received, the invoice status will change to paid in part. * `PAID_IN_PART`: One full payment has been received, the invoice will be paid in full. * `WRITTEN_OFF`: If an invoice is written off because of an error, the status will be updated to written off. 
 * @export
 * @enum {string}
 */

export enum InvoiceStatus {
    Accumulating = 'ACCUMULATING',
    Processing = 'PROCESSING',
    Issued = 'ISSUED',
    PaidInPart = 'PAID_IN_PART',
    PaidInFull = 'PAID_IN_FULL',
    WrittenOff = 'WRITTEN_OFF'
}

/**
 * 
 * @export
 * @interface InvoiceSummary
 */
export interface InvoiceSummary {
    /**
     * Regulatory Advertising Fees. 
     * @type {Array<Fee>}
     * @memberof InvoiceSummary
     */
    fees?: Array<Fee>;
    /**
     * 
     * @type {number}
     * @memberof InvoiceSummary
     */
    paymentTermsDays?: number;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof InvoiceSummary
     */
    taxAmountDue?: CurrencyAmount;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof InvoiceSummary
     */
    remainingTaxAmountDue?: CurrencyAmount;
    /**
     * Remaining Regulatory Advertising Fees. 
     * @type {Array<Fee>}
     * @memberof InvoiceSummary
     */
    remainingFees?: Array<Fee>;
    /**
     * Date in YYYYMMDD format
     * @type {string}
     * @memberof InvoiceSummary
     */
    toDate: string;
    /**
     * Date in YYYYMMDD format
     * @type {string}
     * @memberof InvoiceSummary
     */
    dueDate: string;
    /**
     * Date in YYYYMMDD format
     * @type {string}
     * @memberof InvoiceSummary
     */
    invoiceDate: string;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof InvoiceSummary
     */
    remainingAmountDue: CurrencyAmount;
    /**
     * Date in YYYYMMDD format
     * @type {string}
     * @memberof InvoiceSummary
     */
    fromDate: string;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof InvoiceSummary
     */
    amountDue: CurrencyAmount;
    /**
     * 
     * @type {number}
     * @memberof InvoiceSummary
     */
    taxRate?: number;
    /**
     * 
     * @type {string}
     * @memberof InvoiceSummary
     */
    purchaseOrderNumber: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceSummary
     */
    paymentTermsType?: InvoiceSummaryPaymentTermsTypeEnum;
    /**
     * 
     * @type {PaymentMethod}
     * @memberof InvoiceSummary
     */
    paymentMethod: PaymentMethod;
    /**
     * 
     * @type {string}
     * @memberof InvoiceSummary
     */
    id: string;
    /**
     * List of downloadable documents associated with this invoice and accessible from the advertising console. 
     * @type {Array<DocumentType>}
     * @memberof InvoiceSummary
     */
    downloadableDocuments?: Array<DocumentType>;
    /**
     * 
     * @type {InvoiceStatus}
     * @memberof InvoiceSummary
     */
    status: InvoiceStatus;
}

/**
    * @export
    * @enum {string}
    */
export enum InvoiceSummaryPaymentTermsTypeEnum {
    Eom = 'EOM',
    Net = 'NET'
}

/**
 * 
 * @export
 * @interface IssuerTaxRegistrationInfo
 */
export interface IssuerTaxRegistrationInfo {
    /**
     * Tax registration with government (Ex: VAT ID, GST ID) 
     * @type {string}
     * @memberof IssuerTaxRegistrationInfo
     */
    taxId: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum Locale {
    ArAe = 'ar_AE',
    CsCz = 'cs_CZ',
    DeDe = 'de_DE',
    EnAu = 'en_AU',
    EnCa = 'en_CA',
    EnGb = 'en_GB',
    EnIn = 'en_IN',
    EnSg = 'en_SG',
    EsEs = 'es_ES',
    EsMx = 'es_MX',
    FrCa = 'fr_CA',
    FrFr = 'fr_FR',
    HeIl = 'he_IL',
    HiIn = 'hi_IN',
    ItIt = 'it_IT',
    JaJp = 'ja_JP',
    KoKr = 'ko_KR',
    NlNl = 'nl_NL',
    PlPl = 'pl_PL',
    PtBr = 'pt_BR',
    SvSe = 'sv_SE',
    TaIn = 'ta_IN',
    TrTr = 'tr_TR',
    ZhCn = 'zh_CN',
    ZhTw = 'zh_TW'
}

/**
 * 
 * @export
 * @interface PayerTaxRegistrationInfo
 */
export interface PayerTaxRegistrationInfo {
    /**
     * Tax registration with government (Ex: VAT ID, GST ID) 
     * @type {string}
     * @memberof PayerTaxRegistrationInfo
     */
    taxId?: string;
}
/**
 * 
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * Date in YYYYMMDD format
     * @type {string}
     * @memberof Payment
     */
    nextPaymentAttemptDate?: string;
    /**
     * Provides additional details and reason for the payment status
     * @type {string}
     * @memberof Payment
     */
    reason?: string;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof Payment
     */
    amount: CurrencyAmount;
    /**
     * 
     * @type {PaymentMethod}
     * @memberof Payment
     */
    paymentMethod: PaymentMethod;
    /**
     * Date in YYYYMMDD format
     * @type {string}
     * @memberof Payment
     */
    currentPaymentAttemptDate?: string;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    id: number;
    /**
     * Date in YYYYMMDD format
     * @type {string}
     * @memberof Payment
     */
    lastPaymentAttemptDate?: string;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof Payment
     */
    refundedAmount?: CurrencyAmount;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    status: PaymentStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PaymentStatusEnum {
    Processing = 'PROCESSING',
    Succeeded = 'SUCCEEDED',
    Failed = 'FAILED',
    VerificationRequired = 'VERIFICATION_REQUIRED',
    Refunded = 'REFUNDED',
    Voided = 'VOIDED'
}

/**
 * 
 * @export
 * @interface PaymentDetail
 */
export interface PaymentDetail {
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof PaymentDetail
     */
    amount: CurrencyAmount;
    /**
     * 
     * @type {PaymentMethod}
     * @memberof PaymentDetail
     */
    paymentMethod?: PaymentMethod;
    /**
     * Date in YYYYMMDD format
     * @type {string}
     * @memberof PaymentDetail
     */
    receivedDate: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentDetail
     */
    status: PaymentDetailStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PaymentDetailStatusEnum {
    Pending = 'PENDING',
    Bounced = 'BOUNCED',
    Voided = 'VOIDED',
    Successful = 'SUCCESSFUL'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum PaymentMethod {
    CreditCard = 'CREDIT_CARD',
    ElectronicFundsTransfer = 'ELECTRONIC_FUNDS_TRANSFER',
    DeductFromPayment = 'DEDUCT_FROM_PAYMENT',
    UnifiedBilling = 'UNIFIED_BILLING',
    DirectDebit = 'DIRECT_DEBIT',
    Prepay = 'PREPAY'
}

/**
 * 
 * @export
 * @interface Portfolio
 */
export interface Portfolio {
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof Portfolio
     */
    totalAmount: CurrencyAmount;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof Portfolio
     */
    feeAmount?: CurrencyAmount;
    /**
     * 
     * @type {string}
     * @memberof Portfolio
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Portfolio
     */
    id: number;
}
/**
 * 
 * @export
 * @interface Promotion
 */
export interface Promotion {
    /**
     * Date in YYYYMMDD format
     * @type {string}
     * @memberof Promotion
     */
    lastConsumedDate: string;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof Promotion
     */
    amount: CurrencyAmount;
    /**
     * 
     * @type {string}
     * @memberof Promotion
     */
    description: string;
}
/**
 * 
 * @export
 * @interface TaxBreakup
 */
export interface TaxBreakup {
    /**
     * Tax jurisdiction of payer (billed customer) 
     * @type {string}
     * @memberof TaxBreakup
     */
    payerJurisdiction?: string;
    /**
     * 
     * @type {number}
     * @memberof TaxBreakup
     */
    taxRate: number;
    /**
     * 
     * @type {IssuerTaxRegistrationInfo}
     * @memberof TaxBreakup
     */
    issuerTaxInformation: IssuerTaxRegistrationInfo;
    /**
     * 
     * @type {ThirdPartyTaxRegistrationInfo}
     * @memberof TaxBreakup
     */
    thirdPartyTaxInformation?: ThirdPartyTaxRegistrationInfo;
    /**
     * Tax jurisdiction of issuer (Amazon billing entity) 
     * @type {string}
     * @memberof TaxBreakup
     */
    issuerJurisdiction: string;
    /**
     * 
     * @type {PayerTaxRegistrationInfo}
     * @memberof TaxBreakup
     */
    payerTaxInformation: PayerTaxRegistrationInfo;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof TaxBreakup
     */
    taxAmount: CurrencyAmount;
    /**
     * 
     * @type {string}
     * @memberof TaxBreakup
     */
    taxName: string;
    /**
     * Tax jurisdiction for which tax applies, this can be at the country, state or local level. 
     * @type {string}
     * @memberof TaxBreakup
     */
    taxedJurisdictionName: string;
}
/**
 * 
 * @export
 * @interface TaxDetail
 */
export interface TaxDetail {
    /**
     * **IN only** field that represents the tax account number of the billed entity entered on AMS portal. 
     * @type {string}
     * @memberof TaxDetail
     */
    permanentAccountNumber?: string;
    /**
     * Date in YYYYMMDD format
     * @type {string}
     * @memberof TaxDetail
     */
    taxCalculationDate: string;
    /**
     * List of taxes applied on the transaction for this invoice.
     * @type {Array<TaxBreakup>}
     * @memberof TaxDetail
     */
    taxBreakups: Array<TaxBreakup>;
}
/**
 * 
 * @export
 * @interface ThirdPartyTaxRegistrationInfo
 */
export interface ThirdPartyTaxRegistrationInfo {
    /**
     * Tax registration with government (Ex: VAT ID, GST ID) 
     * @type {string}
     * @memberof ThirdPartyTaxRegistrationInfo
     */
    taxId: string;
}

/**
 * BillingNotificationsApi - axios parameter creator
 * @export
 */
export const BillingNotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets an array of all currently valid billing notifications associated for each advertising account.  **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
         * @summary Get the billing notifications for a list advertising accounts.
         * @param {BulkGetBillingNotificationsRequestBody} bulkGetBillingNotificationsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkGetBillingNotifications: async (bulkGetBillingNotificationsRequestBody: BulkGetBillingNotificationsRequestBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkGetBillingNotificationsRequestBody' is not null or undefined
            assertParamExists('bulkGetBillingNotifications', 'bulkGetBillingNotificationsRequestBody', bulkGetBillingNotificationsRequestBody)
            const localVarPath = `/billing/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.billingnotifications.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkGetBillingNotificationsRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillingNotificationsApi - functional programming interface
 * @export
 */
export const BillingNotificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BillingNotificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets an array of all currently valid billing notifications associated for each advertising account.  **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
         * @summary Get the billing notifications for a list advertising accounts.
         * @param {BulkGetBillingNotificationsRequestBody} bulkGetBillingNotificationsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkGetBillingNotifications(bulkGetBillingNotificationsRequestBody: BulkGetBillingNotificationsRequestBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkGetBillingNotificationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkGetBillingNotifications(bulkGetBillingNotificationsRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BillingNotificationsApi - factory interface
 * @export
 */
export const BillingNotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BillingNotificationsApiFp(configuration)
    return {
        /**
         * Gets an array of all currently valid billing notifications associated for each advertising account.  **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
         * @summary Get the billing notifications for a list advertising accounts.
         * @param {BulkGetBillingNotificationsRequestBody} bulkGetBillingNotificationsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkGetBillingNotifications(bulkGetBillingNotificationsRequestBody: BulkGetBillingNotificationsRequestBody, options?: any): AxiosPromise<BulkGetBillingNotificationsResponse> {
            return localVarFp.bulkGetBillingNotifications(bulkGetBillingNotificationsRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for bulkGetBillingNotifications operation in BillingNotificationsApi.
 * @export
 * @interface BillingNotificationsApiBulkGetBillingNotificationsRequest
 */
export interface BillingNotificationsApiBulkGetBillingNotificationsRequest {
    /**
     * 
     * @type {BulkGetBillingNotificationsRequestBody}
     * @memberof BillingNotificationsApiBulkGetBillingNotifications
     */
    readonly bulkGetBillingNotificationsRequestBody: BulkGetBillingNotificationsRequestBody
}

/**
 * BillingNotificationsApi - object-oriented interface
 * @export
 * @class BillingNotificationsApi
 * @extends {BaseAPI}
 */
export class BillingNotificationsApi extends BaseAPI {
    /**
     * Gets an array of all currently valid billing notifications associated for each advertising account.  **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
     * @summary Get the billing notifications for a list advertising accounts.
     * @param {BillingNotificationsApiBulkGetBillingNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingNotificationsApi
     */
    public bulkGetBillingNotifications(requestParameters: BillingNotificationsApiBulkGetBillingNotificationsRequest, options?: any) {
        return BillingNotificationsApiFp(this.configuration).bulkGetBillingNotifications(requestParameters.bulkGetBillingNotificationsRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BillingStatusApi - axios parameter creator
 * @export
 */
export const BillingStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets the current billing status associated for each advertising account.  **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
         * @summary Get the billing status for a list of advertising accounts.
         * @param {BulkGetBillingStatusesRequestBody} bulkGetBillingStatusesRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkGetBillingStatus: async (bulkGetBillingStatusesRequestBody: BulkGetBillingStatusesRequestBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkGetBillingStatusesRequestBody' is not null or undefined
            assertParamExists('bulkGetBillingStatus', 'bulkGetBillingStatusesRequestBody', bulkGetBillingStatusesRequestBody)
            const localVarPath = `/billing/statuses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.bulkgetbillingstatusrequestbody.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkGetBillingStatusesRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillingStatusApi - functional programming interface
 * @export
 */
export const BillingStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BillingStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets the current billing status associated for each advertising account.  **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
         * @summary Get the billing status for a list of advertising accounts.
         * @param {BulkGetBillingStatusesRequestBody} bulkGetBillingStatusesRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkGetBillingStatus(bulkGetBillingStatusesRequestBody: BulkGetBillingStatusesRequestBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkGetBillingStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkGetBillingStatus(bulkGetBillingStatusesRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BillingStatusApi - factory interface
 * @export
 */
export const BillingStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BillingStatusApiFp(configuration)
    return {
        /**
         * Gets the current billing status associated for each advertising account.  **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
         * @summary Get the billing status for a list of advertising accounts.
         * @param {BulkGetBillingStatusesRequestBody} bulkGetBillingStatusesRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkGetBillingStatus(bulkGetBillingStatusesRequestBody: BulkGetBillingStatusesRequestBody, options?: any): AxiosPromise<BulkGetBillingStatusResponse> {
            return localVarFp.bulkGetBillingStatus(bulkGetBillingStatusesRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for bulkGetBillingStatus operation in BillingStatusApi.
 * @export
 * @interface BillingStatusApiBulkGetBillingStatusRequest
 */
export interface BillingStatusApiBulkGetBillingStatusRequest {
    /**
     * 
     * @type {BulkGetBillingStatusesRequestBody}
     * @memberof BillingStatusApiBulkGetBillingStatus
     */
    readonly bulkGetBillingStatusesRequestBody: BulkGetBillingStatusesRequestBody
}

/**
 * BillingStatusApi - object-oriented interface
 * @export
 * @class BillingStatusApi
 * @extends {BaseAPI}
 */
export class BillingStatusApi extends BaseAPI {
    /**
     * Gets the current billing status associated for each advertising account.  **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
     * @summary Get the billing status for a list of advertising accounts.
     * @param {BillingStatusApiBulkGetBillingStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingStatusApi
     */
    public bulkGetBillingStatus(requestParameters: BillingStatusApiBulkGetBillingStatusRequest, options?: any) {
        return BillingStatusApiFp(this.configuration).bulkGetBillingStatus(requestParameters.bulkGetBillingStatusesRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InvoiceApi - axios parameter creator
 * @export
 */
export const InvoiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *   **Requires one of these permissions**: [\"nemo_transactions_view\",\"nemo_transactions_edit\"]
         * @summary Get invoices for advertiser
         * @param {Array<'ISSUED' | 'PAID_IN_PART' | 'PAID_IN_FULL' | 'WRITTEN_OFF'>} [invoiceStatuses] * &#x60;ISSUED&#x60;: An invoice is issued when its charges are finalized and tax is computed on the total amount.  * &#x60;PAID_IN_PART&#x60;: When a partial payment is received, the invoice status will change to paid in part. * &#x60;PAID_IN_PART&#x60;: One full payment has been received, the invoice will be paid in full. * &#x60;WRITTEN_OFF&#x60;: If an invoice is written off because of an error, the status will be updated to written off. 
         * @param {number} [count] Number of records to include in the paged response. Defaults to 100. Cannot be combined with the cursor parameter.
         * @param {string} [cursor] A cursor representing how far into a result set this query should begin. In the absence of a cursor the request will default to start index of 0 and page size of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdvertiserInvoices: async (invoiceStatuses?: Array<'ISSUED' | 'PAID_IN_PART' | 'PAID_IN_FULL' | 'WRITTEN_OFF'>, count?: number, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (invoiceStatuses) {
                localVarQueryParameter['invoiceStatuses'] = invoiceStatuses.join(COLLECTION_FORMATS.csv);
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *   **Requires one of these permissions**: [\"nemo_transactions_view\",\"nemo_transactions_edit\"]
         * @summary Get invoice data by invoice ID
         * @param {string} invoiceId ID of invoice to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoice: async (invoiceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('getInvoice', 'invoiceId', invoiceId)
            const localVarPath = `/invoices/{invoiceId}`
                .replace(`{${"invoiceId"}}`, encodeURIComponent(String(invoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoiceApi - functional programming interface
 * @export
 */
export const InvoiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoiceApiAxiosParamCreator(configuration)
    return {
        /**
         *   **Requires one of these permissions**: [\"nemo_transactions_view\",\"nemo_transactions_edit\"]
         * @summary Get invoices for advertiser
         * @param {Array<'ISSUED' | 'PAID_IN_PART' | 'PAID_IN_FULL' | 'WRITTEN_OFF'>} [invoiceStatuses] * &#x60;ISSUED&#x60;: An invoice is issued when its charges are finalized and tax is computed on the total amount.  * &#x60;PAID_IN_PART&#x60;: When a partial payment is received, the invoice status will change to paid in part. * &#x60;PAID_IN_PART&#x60;: One full payment has been received, the invoice will be paid in full. * &#x60;WRITTEN_OFF&#x60;: If an invoice is written off because of an error, the status will be updated to written off. 
         * @param {number} [count] Number of records to include in the paged response. Defaults to 100. Cannot be combined with the cursor parameter.
         * @param {string} [cursor] A cursor representing how far into a result set this query should begin. In the absence of a cursor the request will default to start index of 0 and page size of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdvertiserInvoices(invoiceStatuses?: Array<'ISSUED' | 'PAID_IN_PART' | 'PAID_IN_FULL' | 'WRITTEN_OFF'>, count?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdvertiserInvoices(invoiceStatuses, count, cursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *   **Requires one of these permissions**: [\"nemo_transactions_view\",\"nemo_transactions_edit\"]
         * @summary Get invoice data by invoice ID
         * @param {string} invoiceId ID of invoice to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoice(invoiceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoice(invoiceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoiceApi - factory interface
 * @export
 */
export const InvoiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoiceApiFp(configuration)
    return {
        /**
         *   **Requires one of these permissions**: [\"nemo_transactions_view\",\"nemo_transactions_edit\"]
         * @summary Get invoices for advertiser
         * @param {Array<'ISSUED' | 'PAID_IN_PART' | 'PAID_IN_FULL' | 'WRITTEN_OFF'>} [invoiceStatuses] * &#x60;ISSUED&#x60;: An invoice is issued when its charges are finalized and tax is computed on the total amount.  * &#x60;PAID_IN_PART&#x60;: When a partial payment is received, the invoice status will change to paid in part. * &#x60;PAID_IN_PART&#x60;: One full payment has been received, the invoice will be paid in full. * &#x60;WRITTEN_OFF&#x60;: If an invoice is written off because of an error, the status will be updated to written off. 
         * @param {number} [count] Number of records to include in the paged response. Defaults to 100. Cannot be combined with the cursor parameter.
         * @param {string} [cursor] A cursor representing how far into a result set this query should begin. In the absence of a cursor the request will default to start index of 0 and page size of 100.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdvertiserInvoices(invoiceStatuses?: Array<'ISSUED' | 'PAID_IN_PART' | 'PAID_IN_FULL' | 'WRITTEN_OFF'>, count?: number, cursor?: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getAdvertiserInvoices(invoiceStatuses, count, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         *   **Requires one of these permissions**: [\"nemo_transactions_view\",\"nemo_transactions_edit\"]
         * @summary Get invoice data by invoice ID
         * @param {string} invoiceId ID of invoice to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoice(invoiceId: string, options?: any): AxiosPromise<Invoice> {
            return localVarFp.getInvoice(invoiceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAdvertiserInvoices operation in InvoiceApi.
 * @export
 * @interface InvoiceApiGetAdvertiserInvoicesRequest
 */
export interface InvoiceApiGetAdvertiserInvoicesRequest {
    /**
     * * &#x60;ISSUED&#x60;: An invoice is issued when its charges are finalized and tax is computed on the total amount.  * &#x60;PAID_IN_PART&#x60;: When a partial payment is received, the invoice status will change to paid in part. * &#x60;PAID_IN_PART&#x60;: One full payment has been received, the invoice will be paid in full. * &#x60;WRITTEN_OFF&#x60;: If an invoice is written off because of an error, the status will be updated to written off. 
     * @type {Array<'ISSUED' | 'PAID_IN_PART' | 'PAID_IN_FULL' | 'WRITTEN_OFF'>}
     * @memberof InvoiceApiGetAdvertiserInvoices
     */
    readonly invoiceStatuses?: Array<'ISSUED' | 'PAID_IN_PART' | 'PAID_IN_FULL' | 'WRITTEN_OFF'>

    /**
     * Number of records to include in the paged response. Defaults to 100. Cannot be combined with the cursor parameter.
     * @type {number}
     * @memberof InvoiceApiGetAdvertiserInvoices
     */
    readonly count?: number

    /**
     * A cursor representing how far into a result set this query should begin. In the absence of a cursor the request will default to start index of 0 and page size of 100.
     * @type {string}
     * @memberof InvoiceApiGetAdvertiserInvoices
     */
    readonly cursor?: string
}

/**
 * Request parameters for getInvoice operation in InvoiceApi.
 * @export
 * @interface InvoiceApiGetInvoiceRequest
 */
export interface InvoiceApiGetInvoiceRequest {
    /**
     * ID of invoice to fetch
     * @type {string}
     * @memberof InvoiceApiGetInvoice
     */
    readonly invoiceId: string
}

/**
 * InvoiceApi - object-oriented interface
 * @export
 * @class InvoiceApi
 * @extends {BaseAPI}
 */
export class InvoiceApi extends BaseAPI {
    /**
     *   **Requires one of these permissions**: [\"nemo_transactions_view\",\"nemo_transactions_edit\"]
     * @summary Get invoices for advertiser
     * @param {InvoiceApiGetAdvertiserInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    public getAdvertiserInvoices(requestParameters: InvoiceApiGetAdvertiserInvoicesRequest = {}, options?: any) {
        return InvoiceApiFp(this.configuration).getAdvertiserInvoices(requestParameters.invoiceStatuses, requestParameters.count, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *   **Requires one of these permissions**: [\"nemo_transactions_view\",\"nemo_transactions_edit\"]
     * @summary Get invoice data by invoice ID
     * @param {InvoiceApiGetInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    public getInvoice(requestParameters: InvoiceApiGetInvoiceRequest, options?: any) {
        return InvoiceApiFp(this.configuration).getInvoice(requestParameters.invoiceId, options).then((request) => request(this.axios, this.basePath));
    }
}


