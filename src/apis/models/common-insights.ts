/* tslint:disable */
/* eslint-disable */
/**
 * Insights
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { createRequestFunction } from "../../helpers";

/**
 * Contains metadata for the provided audience and its overlapping audiences.
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * The list of overlapping audiences.
     * @type {Array<InsightsAudiencesOverlapEntryV2>}
     * @memberof InlineResponse200
     */
    overlappingAudiences: Array<InsightsAudiencesOverlapEntryV2>;
    /**
     * The locale used to generate the overlapping audiences.
     * @type {string}
     * @memberof InlineResponse200
     */
    marketplace: string;
    /**
     * If present, there are more overlapping audiences than initially returned. Use this token to call the operation again and have the additional overlapping audiences returned. The token is valid for 8 hours from the initial request. Note: subsequent calls must be made using the same parameters as used in previous requests.
     * @type {string}
     * @memberof InlineResponse200
     */
    nextToken?: string;
    /**
     * 
     * @type {InsightsAudiencesOverlapAudienceMetadataV2}
     * @memberof InlineResponse200
     */
    requestedAudienceMetadata: InsightsAudiencesOverlapAudienceMetadataV2;
}
/**
 * Information about any audience included in the response.
 * @export
 * @interface InsightsAudiencesOverlapAudienceMetadata
 */
export interface InsightsAudiencesOverlapAudienceMetadata {
    /**
     * Audience size is a relative measure of how large the overlapping audience is compared to all Amazon audiences. A size of 6 indicates that the audience is larger than 60% of all Amazon audiences.
     * @type {number}
     * @memberof InsightsAudiencesOverlapAudienceMetadata
     */
    size: number;
    /**
     * Audience name
     * @type {string}
     * @memberof InsightsAudiencesOverlapAudienceMetadata
     */
    name: string;
    /**
     * The identifier of an audience.
     * @type {string}
     * @memberof InsightsAudiencesOverlapAudienceMetadata
     */
    audienceId: string;
    /**
     * The type of the overlapping audience.
     * @type {string}
     * @memberof InsightsAudiencesOverlapAudienceMetadata
     */
    category: string;
    /**
     * 
     * @type {InsightsAudiencesOverlapAudienceMetadataImpressionsForecastRange}
     * @memberof InsightsAudiencesOverlapAudienceMetadata
     */
    impressionsForecastRange?: InsightsAudiencesOverlapAudienceMetadataImpressionsForecastRange;
}
/**
 * 30-day impression forecast provides an estimated range of how many times an ad could be displayed using the audience over the next 30 days. The impression forecast is for the individual audience. It can be defined by both upper and lower bound, or just by one of the bounds.
 * @export
 * @interface InsightsAudiencesOverlapAudienceMetadataImpressionsForecastRange
 */
export interface InsightsAudiencesOverlapAudienceMetadataImpressionsForecastRange {
    /**
     * 
     * @type {number}
     * @memberof InsightsAudiencesOverlapAudienceMetadataImpressionsForecastRange
     */
    upperBound?: number;
    /**
     * 
     * @type {number}
     * @memberof InsightsAudiencesOverlapAudienceMetadataImpressionsForecastRange
     */
    lowerBound?: number;
}
/**
 * Information about any audience included in the response.
 * @export
 * @interface InsightsAudiencesOverlapAudienceMetadataV2
 */
export interface InsightsAudiencesOverlapAudienceMetadataV2 {
    /**
     * 
     * @type {InsightsAudiencesOverlapAudienceMetadataV2AudienceForecast}
     * @memberof InsightsAudiencesOverlapAudienceMetadataV2
     */
    audienceForecast?: InsightsAudiencesOverlapAudienceMetadataV2AudienceForecast;
    /**
     * Audience name
     * @type {string}
     * @memberof InsightsAudiencesOverlapAudienceMetadataV2
     */
    name: string;
    /**
     * The identifier of an audience.
     * @type {string}
     * @memberof InsightsAudiencesOverlapAudienceMetadataV2
     */
    audienceId: string;
    /**
     * The type of the overlapping audience.
     * @type {string}
     * @memberof InsightsAudiencesOverlapAudienceMetadataV2
     */
    category: string;
}
/**
 * 
 * @export
 * @interface InsightsAudiencesOverlapAudienceMetadataV2AudienceForecast
 */
export interface InsightsAudiencesOverlapAudienceMetadataV2AudienceForecast {
    /**
     * 
     * @type {InsightsAudiencesOverlapAudienceMetadataV2AudienceForecastDailyReach}
     * @memberof InsightsAudiencesOverlapAudienceMetadataV2AudienceForecast
     */
    dailyReach?: InsightsAudiencesOverlapAudienceMetadataV2AudienceForecastDailyReach;
    /**
     * 
     * @type {InsightsAudiencesOverlapAudienceMetadataV2AudienceForecastDailyImpressions}
     * @memberof InsightsAudiencesOverlapAudienceMetadataV2AudienceForecast
     */
    dailyImpressions?: InsightsAudiencesOverlapAudienceMetadataV2AudienceForecastDailyImpressions;
}
/**
 * The available impressions across all inventory types (e.g. display, video, and mobile). This is an estimate and is not guaranteed. It will take at least 2 weeks for the impressions to become available for new audiences. Note: forecasted daily impressions are not available when SD adType is selected.
 * @export
 * @interface InsightsAudiencesOverlapAudienceMetadataV2AudienceForecastDailyImpressions
 */
export interface InsightsAudiencesOverlapAudienceMetadataV2AudienceForecastDailyImpressions {
    /**
     * 
     * @type {number}
     * @memberof InsightsAudiencesOverlapAudienceMetadataV2AudienceForecastDailyImpressions
     */
    upperBound?: number;
    /**
     * 
     * @type {number}
     * @memberof InsightsAudiencesOverlapAudienceMetadataV2AudienceForecastDailyImpressions
     */
    lowerBound?: number;
}
/**
 * The unique devices reachable across all inventory types (e.g. display, video, and mobile). This is an estimate and is not guaranteed. It will take at least 2 weeks for the reach to become available for new audiences.
 * @export
 * @interface InsightsAudiencesOverlapAudienceMetadataV2AudienceForecastDailyReach
 */
export interface InsightsAudiencesOverlapAudienceMetadataV2AudienceForecastDailyReach {
    /**
     * 
     * @type {number}
     * @memberof InsightsAudiencesOverlapAudienceMetadataV2AudienceForecastDailyReach
     */
    upperBound?: number;
    /**
     * 
     * @type {number}
     * @memberof InsightsAudiencesOverlapAudienceMetadataV2AudienceForecastDailyReach
     */
    lowerBound?: number;
}
/**
 * Contains information about the overlapping audiences and their affinity with the audience requested.
 * @export
 * @interface InsightsAudiencesOverlapEntry
 */
export interface InsightsAudiencesOverlapEntry {
    /**
     * 
     * @type {InsightsAudiencesOverlapAudienceMetadata}
     * @memberof InsightsAudiencesOverlapEntry
     */
    audienceMetadata?: InsightsAudiencesOverlapAudienceMetadata;
    /**
     * Affinity is a measure of how similar the overlapping audience is to the audience selected to generate the audience overlap insights. An affinity of 2 indicates that the overlapping audience is twice as likely to fall into the audience selected than the average audience on Amazon.
     * @type {number}
     * @memberof InsightsAudiencesOverlapEntry
     */
    affinity?: number;
}
/**
 * Contains information about the overlapping audiences and their affinity with the provided audience.
 * @export
 * @interface InsightsAudiencesOverlapEntryV2
 */
export interface InsightsAudiencesOverlapEntryV2 {
    /**
     * 
     * @type {InsightsAudiencesOverlapAudienceMetadataV2}
     * @memberof InsightsAudiencesOverlapEntryV2
     */
    audienceMetadata?: InsightsAudiencesOverlapAudienceMetadataV2;
    /**
     * Affinity is a measure of how similar the overlapping audience is to the audience selected to generate the audience overlap insights. An affinity of 2 indicates that the overlapping audience is twice as likely to fall into the audience selected than the average audience on Amazon.
     * @type {number}
     * @memberof InsightsAudiencesOverlapEntryV2
     */
    affinity?: number;
}
/**
 * An object describing a brand\'s properties. The combination of a `transientBrandId` and a `marketplaceId` uniquely identifies a brand, but it is limited to a dataset token. With a different dataset token the combination may not be available or it may represent a different brand. The usage of the `transientBrandId` is limited to the `/insights/...` operations.
 * @export
 * @interface InsightsBrand
 */
export interface InsightsBrand {
    /**
     * The identifier of the marketplace for the brand.
     * @type {string}
     * @memberof InsightsBrand
     */
    marketplaceId: string;
    /**
     * The name of the brand.
     * @type {string}
     * @memberof InsightsBrand
     */
    name: string;
    /**
     * The identifier of the brand.
     * @type {string}
     * @memberof InsightsBrand
     */
    transientBrandId: string;
}
/**
 * An object describing a browse node\'s properties and its mapping to a brand. Therefore, every browse node can be returned multiple times with different brands. The combination of a `browseNodeId` and `marketplaceId` uniquely identifies a browse node, but it is limited to a dataset token. With a different dataset token the combination may not be available or it may represent a different browse node.
 * @export
 * @interface InsightsBrandBrowseNode
 */
export interface InsightsBrandBrowseNode {
    /**
     * The identifier of the marketplace for the browse node.
     * @type {string}
     * @memberof InsightsBrandBrowseNode
     */
    marketplaceId: string;
    /**
     * The identifier of the browse node.
     * @type {string}
     * @memberof InsightsBrandBrowseNode
     */
    browseNodeId: string;
    /**
     * The name of the browse node.
     * @type {string}
     * @memberof InsightsBrandBrowseNode
     */
    name: string;
    /**
     * The brand identifier for which the retail browse node is present.
     * @type {string}
     * @memberof InsightsBrandBrowseNode
     */
    transientBrandId: string;
    /**
     * Identifier of a parent browse node if there is one.
     * @type {string}
     * @memberof InsightsBrandBrowseNode
     */
    parentBrowseNodeId?: string;
}
/**
 * The consideration period insight provides reports to help understanding the time period between a customer starts considering a purchase and the actual purchase.
 * @export
 * @interface InsightsConsiderationPeriodInsight
 */
export interface InsightsConsiderationPeriodInsight {
    /**
     * The marketplace the report is for.
     * @type {string}
     * @memberof InsightsConsiderationPeriodInsight
     */
    marketplaceId: string;
    /**
     * 
     * @type {string}
     * @memberof InsightsConsiderationPeriodInsight
     */
    reportType: InsightsConsiderationPeriodInsightReportTypeEnum;
    /**
     * The browse node the report is for. It is a browse node from the specified marketplace.
     * @type {string}
     * @memberof InsightsConsiderationPeriodInsight
     */
    browseNodeId: string;
    /**
     * 
     * @type {InsightsConsiderationPeriodInsightBrandBased}
     * @memberof InsightsConsiderationPeriodInsight
     */
    brandBased?: InsightsConsiderationPeriodInsightBrandBased;
    /**
     * 
     * @type {InsightsConsiderationPeriodInsightBrowseNodeBased}
     * @memberof InsightsConsiderationPeriodInsight
     */
    browseNodeBased?: InsightsConsiderationPeriodInsightBrowseNodeBased;
    /**
     * The brand the report is for. It is a brand from the specified marketplace.
     * @type {string}
     * @memberof InsightsConsiderationPeriodInsight
     */
    transientBrandId: string;
    /**
     * The end date of data used to generate this report.
     * @type {string}
     * @memberof InsightsConsiderationPeriodInsight
     */
    reportEndDate: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InsightsConsiderationPeriodInsightReportTypeEnum {
    ConsiderationPeriod = 'considerationPeriod'
}

/**
 * The brand based consideration period is a distribution of consideration periods for purchases where we consider view of the specified brand in the category as the start of a purchase period. We consider consideration periods only for purchases of the specified brand in the specified browse node that happened in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsConsiderationPeriodInsightBrandBased
 */
export interface InsightsConsiderationPeriodInsightBrandBased {
    /**
     * A dataset which provides consideration period bucketed by the length of the consideration period.
     * @type {Array<object>}
     * @memberof InsightsConsiderationPeriodInsightBrandBased
     */
    baselineDataset?: Array<object>;
    /**
     * A dataset which provides consideration period bucketed by the length of the consideration period.
     * @type {Array<object>}
     * @memberof InsightsConsiderationPeriodInsightBrandBased
     */
    brandDataset: Array<object>;
}
/**
 * The browse node based consideration period is a distribution of consideration periods for purchases where we consider any view in the category as the start of a purchase period. We consider consideration periods only for purchases of the specified brand in the specified browse node that happened in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsConsiderationPeriodInsightBrowseNodeBased
 */
export interface InsightsConsiderationPeriodInsightBrowseNodeBased {
    /**
     * A dataset which provides consideration period bucketed by the length of the consideration period.
     * @type {Array<object>}
     * @memberof InsightsConsiderationPeriodInsightBrowseNodeBased
     */
    baselineDataset?: Array<object>;
    /**
     * A dataset which provides consideration period bucketed by the length of the consideration period.
     * @type {Array<object>}
     * @memberof InsightsConsiderationPeriodInsightBrowseNodeBased
     */
    brandDataset: Array<object>;
}
/**
 * A dataset which provides distribution of events bucketed by day of week.
 * @export
 * @interface InsightsDayOfWeekDataset
 */
export interface InsightsDayOfWeekDataset {
    /**
     * Percentage of events that occured on Thursday.
     * @type {number}
     * @memberof InsightsDayOfWeekDataset
     */
    thu: number;
    /**
     * Percentage of events that occured on Tuesday.
     * @type {number}
     * @memberof InsightsDayOfWeekDataset
     */
    tue: number;
    /**
     * Percentage of events that occured on Wednesday.
     * @type {number}
     * @memberof InsightsDayOfWeekDataset
     */
    wed: number;
    /**
     * Percentage of events that occured on Saturday.
     * @type {number}
     * @memberof InsightsDayOfWeekDataset
     */
    sat: number;
    /**
     * Percentage of events that occured on Friday.
     * @type {number}
     * @memberof InsightsDayOfWeekDataset
     */
    fri: number;
    /**
     * Percentage of events that occured on Monday.
     * @type {number}
     * @memberof InsightsDayOfWeekDataset
     */
    mon: number;
    /**
     * Percentage of events that occured on Sunday.
     * @type {number}
     * @memberof InsightsDayOfWeekDataset
     */
    sun: number;
}
/**
 * The demographics insight provides reports for the distributions of customers based on their demographics.
 * @export
 * @interface InsightsDemographicsInsight
 */
export interface InsightsDemographicsInsight {
    /**
     * The marketplace the report is for.
     * @type {string}
     * @memberof InsightsDemographicsInsight
     */
    marketplaceId: string;
    /**
     * 
     * @type {string}
     * @memberof InsightsDemographicsInsight
     */
    reportType: InsightsDemographicsInsightReportTypeEnum;
    /**
     * 
     * @type {InsightsDemographicsInsightAgeMetrics}
     * @memberof InsightsDemographicsInsight
     */
    ageMetrics?: InsightsDemographicsInsightAgeMetrics;
    /**
     * The browse node the report is for. It is a browse node from the specified marketplace.
     * @type {string}
     * @memberof InsightsDemographicsInsight
     */
    browseNodeId: string;
    /**
     * 
     * @type {InsightsDemographicsInsightResidentialStatus}
     * @memberof InsightsDemographicsInsight
     */
    residentialStatus?: InsightsDemographicsInsightResidentialStatus;
    /**
     * 
     * @type {InsightsDemographicsInsightRelationshipStatus}
     * @memberof InsightsDemographicsInsight
     */
    relationshipStatus?: InsightsDemographicsInsightRelationshipStatus;
    /**
     * 
     * @type {InsightsDemographicsInsightGenderMetrics}
     * @memberof InsightsDemographicsInsight
     */
    genderMetrics?: InsightsDemographicsInsightGenderMetrics;
    /**
     * 
     * @type {InsightsDemographicsInsightIncomeMetrics}
     * @memberof InsightsDemographicsInsight
     */
    incomeMetrics?: InsightsDemographicsInsightIncomeMetrics;
    /**
     * The brand the report is for. It is a brand from the specified marketplace.
     * @type {string}
     * @memberof InsightsDemographicsInsight
     */
    transientBrandId: string;
    /**
     * The end date of data used to generate this report.
     * @type {string}
     * @memberof InsightsDemographicsInsight
     */
    reportEndDate: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InsightsDemographicsInsightReportTypeEnum {
    Demographics = 'demographics'
}

/**
 * The age metrics provides the distribution based on the age of customers.
 * @export
 * @interface InsightsDemographicsInsightAgeMetrics
 */
export interface InsightsDemographicsInsightAgeMetrics {
    /**
     * 
     * @type {InsightsDemographicsInsightAgeMetricsOrders}
     * @memberof InsightsDemographicsInsightAgeMetrics
     */
    orders?: InsightsDemographicsInsightAgeMetricsOrders;
    /**
     * 
     * @type {InsightsDemographicsInsightAgeMetricsViews}
     * @memberof InsightsDemographicsInsightAgeMetrics
     */
    views?: InsightsDemographicsInsightAgeMetricsViews;
}
/**
 * The distribution of customers that has purchased an item of the specified brand in the specified browse node in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsDemographicsInsightAgeMetricsOrders
 */
export interface InsightsDemographicsInsightAgeMetricsOrders {
    /**
     * A dataset which provides distribution of customers bucketed by age range.
     * @type {Array<object>}
     * @memberof InsightsDemographicsInsightAgeMetricsOrders
     */
    baselineDataset?: Array<object>;
    /**
     * A dataset which provides distribution of customers bucketed by age range.
     * @type {Array<object>}
     * @memberof InsightsDemographicsInsightAgeMetricsOrders
     */
    brandDataset: Array<object>;
}
/**
 * The distribution of customers that has viewed an item of the specified brand in the specified browse node in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsDemographicsInsightAgeMetricsViews
 */
export interface InsightsDemographicsInsightAgeMetricsViews {
    /**
     * A dataset which provides distribution of customers bucketed by age range.
     * @type {Array<object>}
     * @memberof InsightsDemographicsInsightAgeMetricsViews
     */
    baselineDataset?: Array<object>;
    /**
     * A dataset which provides distribution of customers bucketed by age range.
     * @type {Array<object>}
     * @memberof InsightsDemographicsInsightAgeMetricsViews
     */
    brandDataset: Array<object>;
}
/**
 * The gender metrics provides the distribution based on the gender of customers.
 * @export
 * @interface InsightsDemographicsInsightGenderMetrics
 */
export interface InsightsDemographicsInsightGenderMetrics {
    /**
     * 
     * @type {InsightsDemographicsInsightGenderMetricsOrders}
     * @memberof InsightsDemographicsInsightGenderMetrics
     */
    orders?: InsightsDemographicsInsightGenderMetricsOrders;
    /**
     * 
     * @type {InsightsDemographicsInsightGenderMetricsViews}
     * @memberof InsightsDemographicsInsightGenderMetrics
     */
    views?: InsightsDemographicsInsightGenderMetricsViews;
}
/**
 * The distribution of customers that has purchased an item of the specified brand in the specified browse node in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsDemographicsInsightGenderMetricsOrders
 */
export interface InsightsDemographicsInsightGenderMetricsOrders {
    /**
     * 
     * @type {InsightsGenderDataset}
     * @memberof InsightsDemographicsInsightGenderMetricsOrders
     */
    baselineDataset?: InsightsGenderDataset;
    /**
     * 
     * @type {InsightsGenderDataset}
     * @memberof InsightsDemographicsInsightGenderMetricsOrders
     */
    brandDataset: InsightsGenderDataset;
}
/**
 * The distribution of customers that has viewed an item of the specified brand in the specified browse node in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsDemographicsInsightGenderMetricsViews
 */
export interface InsightsDemographicsInsightGenderMetricsViews {
    /**
     * 
     * @type {InsightsGenderDataset}
     * @memberof InsightsDemographicsInsightGenderMetricsViews
     */
    baselineDataset?: InsightsGenderDataset;
    /**
     * 
     * @type {InsightsGenderDataset}
     * @memberof InsightsDemographicsInsightGenderMetricsViews
     */
    brandDataset: InsightsGenderDataset;
}
/**
 * The gender metrics provides the distribution based on the income of customers.
 * @export
 * @interface InsightsDemographicsInsightIncomeMetrics
 */
export interface InsightsDemographicsInsightIncomeMetrics {
    /**
     * 
     * @type {InsightsDemographicsInsightIncomeMetricsOrders}
     * @memberof InsightsDemographicsInsightIncomeMetrics
     */
    orders?: InsightsDemographicsInsightIncomeMetricsOrders;
    /**
     * The ISO 4217 alphabetic code of the currency.
     * @type {string}
     * @memberof InsightsDemographicsInsightIncomeMetrics
     */
    currency: string;
    /**
     * 
     * @type {InsightsDemographicsInsightIncomeMetricsViews}
     * @memberof InsightsDemographicsInsightIncomeMetrics
     */
    views?: InsightsDemographicsInsightIncomeMetricsViews;
}
/**
 * The distribution of customers that has purchased an item of the specified brand in the specified browse node in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsDemographicsInsightIncomeMetricsOrders
 */
export interface InsightsDemographicsInsightIncomeMetricsOrders {
    /**
     * A dataset which provides distribution of customers bucketed by their income range.
     * @type {Array<object>}
     * @memberof InsightsDemographicsInsightIncomeMetricsOrders
     */
    baselineDataset?: Array<object>;
    /**
     * A dataset which provides distribution of customers bucketed by their income range.
     * @type {Array<object>}
     * @memberof InsightsDemographicsInsightIncomeMetricsOrders
     */
    brandDataset: Array<object>;
}
/**
 * The distribution of customers that has viewed an item of the specified brand in the specified browse node in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsDemographicsInsightIncomeMetricsViews
 */
export interface InsightsDemographicsInsightIncomeMetricsViews {
    /**
     * A dataset which provides distribution of customers bucketed by their income range.
     * @type {Array<object>}
     * @memberof InsightsDemographicsInsightIncomeMetricsViews
     */
    baselineDataset?: Array<object>;
    /**
     * A dataset which provides distribution of customers bucketed by their income range.
     * @type {Array<object>}
     * @memberof InsightsDemographicsInsightIncomeMetricsViews
     */
    brandDataset: Array<object>;
}
/**
 * The relationship status metrics provides the distribution based on the relationship status of customers.
 * @export
 * @interface InsightsDemographicsInsightRelationshipStatus
 */
export interface InsightsDemographicsInsightRelationshipStatus {
    /**
     * 
     * @type {InsightsDemographicsInsightRelationshipStatusOrders}
     * @memberof InsightsDemographicsInsightRelationshipStatus
     */
    orders?: InsightsDemographicsInsightRelationshipStatusOrders;
    /**
     * 
     * @type {InsightsDemographicsInsightRelationshipStatusViews}
     * @memberof InsightsDemographicsInsightRelationshipStatus
     */
    views?: InsightsDemographicsInsightRelationshipStatusViews;
}
/**
 * The distribution of customers that has purchased an item of the specified brand in the specified browse node in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsDemographicsInsightRelationshipStatusOrders
 */
export interface InsightsDemographicsInsightRelationshipStatusOrders {
    /**
     * 
     * @type {InsightsRelationshipStatusDataset}
     * @memberof InsightsDemographicsInsightRelationshipStatusOrders
     */
    baselineDataset?: InsightsRelationshipStatusDataset;
    /**
     * 
     * @type {InsightsRelationshipStatusDataset}
     * @memberof InsightsDemographicsInsightRelationshipStatusOrders
     */
    brandDataset: InsightsRelationshipStatusDataset;
}
/**
 * The distribution of customers that has viewed an item of the specified brand in the specified browse node in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsDemographicsInsightRelationshipStatusViews
 */
export interface InsightsDemographicsInsightRelationshipStatusViews {
    /**
     * 
     * @type {InsightsRelationshipStatusDataset}
     * @memberof InsightsDemographicsInsightRelationshipStatusViews
     */
    baselineDataset?: InsightsRelationshipStatusDataset;
    /**
     * 
     * @type {InsightsRelationshipStatusDataset}
     * @memberof InsightsDemographicsInsightRelationshipStatusViews
     */
    brandDataset: InsightsRelationshipStatusDataset;
}
/**
 * The residential status metrics provides the distribution based on the residential status of customers.
 * @export
 * @interface InsightsDemographicsInsightResidentialStatus
 */
export interface InsightsDemographicsInsightResidentialStatus {
    /**
     * 
     * @type {InsightsDemographicsInsightResidentialStatusOrders}
     * @memberof InsightsDemographicsInsightResidentialStatus
     */
    orders?: InsightsDemographicsInsightResidentialStatusOrders;
    /**
     * 
     * @type {InsightsDemographicsInsightResidentialStatusViews}
     * @memberof InsightsDemographicsInsightResidentialStatus
     */
    views?: InsightsDemographicsInsightResidentialStatusViews;
}
/**
 * The distribution of customers that has purchased an item of the specified brand in the specified browse node in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsDemographicsInsightResidentialStatusOrders
 */
export interface InsightsDemographicsInsightResidentialStatusOrders {
    /**
     * 
     * @type {InsightsResidentialStatusDataset}
     * @memberof InsightsDemographicsInsightResidentialStatusOrders
     */
    baselineDataset?: InsightsResidentialStatusDataset;
    /**
     * 
     * @type {InsightsResidentialStatusDataset}
     * @memberof InsightsDemographicsInsightResidentialStatusOrders
     */
    brandDataset: InsightsResidentialStatusDataset;
}
/**
 * The distribution of customers that has viewed an item of the specified brand in the specified browse node in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsDemographicsInsightResidentialStatusViews
 */
export interface InsightsDemographicsInsightResidentialStatusViews {
    /**
     * 
     * @type {InsightsResidentialStatusDataset}
     * @memberof InsightsDemographicsInsightResidentialStatusViews
     */
    baselineDataset?: InsightsResidentialStatusDataset;
    /**
     * 
     * @type {InsightsResidentialStatusDataset}
     * @memberof InsightsDemographicsInsightResidentialStatusViews
     */
    brandDataset: InsightsResidentialStatusDataset;
}
/**
 * The error returned from the server.
 * @export
 * @interface InsightsError
 */
export interface InsightsError {
    /**
     * A unique value generated by the server to identify the request.
     * @type {string}
     * @memberof InsightsError
     */
    requestId: string;
    /**
     * Detailed information about the error that occurred.
     * @type {string}
     * @memberof InsightsError
     */
    message: string;
}
/**
 * A dataset which provides distribution of customers bucketed by their gender.
 * @export
 * @interface InsightsGenderDataset
 */
export interface InsightsGenderDataset {
    /**
     * Percentage of customers identified as female.
     * @type {number}
     * @memberof InsightsGenderDataset
     */
    female: number;
    /**
     * Percentage of customers identified as male.
     * @type {number}
     * @memberof InsightsGenderDataset
     */
    male: number;
}
/**
 * The purchase frequency insight provides reports related to customers brand loyalty and repeat purchases.
 * @export
 * @interface InsightsPurchaseFrequencyInsight
 */
export interface InsightsPurchaseFrequencyInsight {
    /**
     * The marketplace the report is for.
     * @type {string}
     * @memberof InsightsPurchaseFrequencyInsight
     */
    marketplaceId: string;
    /**
     * 
     * @type {string}
     * @memberof InsightsPurchaseFrequencyInsight
     */
    reportType: InsightsPurchaseFrequencyInsightReportTypeEnum;
    /**
     * The browse node the report is for. It is a browse node from the specified marketplace.
     * @type {string}
     * @memberof InsightsPurchaseFrequencyInsight
     */
    browseNodeId: string;
    /**
     * 
     * @type {InsightsPurchaseFrequencyInsightPurchaseCount}
     * @memberof InsightsPurchaseFrequencyInsight
     */
    purchaseCount?: InsightsPurchaseFrequencyInsightPurchaseCount;
    /**
     * The brand the report is for. It is a brand from the specified marketplace.
     * @type {string}
     * @memberof InsightsPurchaseFrequencyInsight
     */
    transientBrandId: string;
    /**
     * The end date of data used to generate this report.
     * @type {string}
     * @memberof InsightsPurchaseFrequencyInsight
     */
    reportEndDate: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InsightsPurchaseFrequencyInsightReportTypeEnum {
    PurchaseFrequency = 'purchaseFrequency'
}

/**
 * The distribution of customers that has purchased an item of the specified brand in the specified browse node in the last 28 days (ending at `reportEndDate`). The customers are bucketed by how many purchases from the same brand and browse node they made in the past year (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsPurchaseFrequencyInsightPurchaseCount
 */
export interface InsightsPurchaseFrequencyInsightPurchaseCount {
    /**
     * A dataset which provides distribution of customers bucketed by the count of purchases that a customer has placed in the last 12 months.
     * @type {Array<object>}
     * @memberof InsightsPurchaseFrequencyInsightPurchaseCount
     */
    baselineDataset?: Array<object>;
    /**
     * A dataset which provides distribution of customers bucketed by the count of purchases that a customer has placed in the last 12 months.
     * @type {Array<object>}
     * @memberof InsightsPurchaseFrequencyInsightPurchaseCount
     */
    brandDataset: Array<object>;
}
/**
 * A dataset which provides distribution of customers bucketed by their relationship status.
 * @export
 * @interface InsightsRelationshipStatusDataset
 */
export interface InsightsRelationshipStatusDataset {
    /**
     * Percentage of customers identified as living single.
     * @type {number}
     * @memberof InsightsRelationshipStatusDataset
     */
    single: number;
    /**
     * Percentage of customers identified as living in a relationship.
     * @type {number}
     * @memberof InsightsRelationshipStatusDataset
     */
    couple: number;
}
/**
 * A dataset which provides distribution of customers bucketed by their residential status.
 * @export
 * @interface InsightsResidentialStatusDataset
 */
export interface InsightsResidentialStatusDataset {
    /**
     * Percentage of customers identified as property owners.
     * @type {number}
     * @memberof InsightsResidentialStatusDataset
     */
    owning: number;
    /**
     * Percentage of customers identified as property renters.
     * @type {number}
     * @memberof InsightsResidentialStatusDataset
     */
    renting: number;
}
/**
 * The timing insight provides reports for the distribution of customer views or purchases in different time periods.
 * @export
 * @interface InsightsTimingInsight
 */
export interface InsightsTimingInsight {
    /**
     * The marketplace the report is for.
     * @type {string}
     * @memberof InsightsTimingInsight
     */
    marketplaceId: string;
    /**
     * 
     * @type {string}
     * @memberof InsightsTimingInsight
     */
    reportType: InsightsTimingInsightReportTypeEnum;
    /**
     * 
     * @type {InsightsTimingInsightMonthOfYear}
     * @memberof InsightsTimingInsight
     */
    monthOfYear?: InsightsTimingInsightMonthOfYear;
    /**
     * 
     * @type {InsightsTimingInsightDayOfWeek}
     * @memberof InsightsTimingInsight
     */
    dayOfWeek?: InsightsTimingInsightDayOfWeek;
    /**
     * 
     * @type {InsightsTimingInsightWeekOfYear}
     * @memberof InsightsTimingInsight
     */
    weekOfYear?: InsightsTimingInsightWeekOfYear;
    /**
     * The browse node the report is for. It is a browse node from the specified marketplace.
     * @type {string}
     * @memberof InsightsTimingInsight
     */
    browseNodeId: string;
    /**
     * 
     * @type {InsightsTimingInsightHourOfDay}
     * @memberof InsightsTimingInsight
     */
    hourOfDay?: InsightsTimingInsightHourOfDay;
    /**
     * The brand the report is for. It is a brand from the specified marketplace.
     * @type {string}
     * @memberof InsightsTimingInsight
     */
    transientBrandId: string;
    /**
     * The end date of data used to generate this report.
     * @type {string}
     * @memberof InsightsTimingInsight
     */
    reportEndDate: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InsightsTimingInsightReportTypeEnum {
    Timing = 'timing'
}

/**
 * The hour of day of week provides distribution of customer views or purchases bucketed day of week.
 * @export
 * @interface InsightsTimingInsightDayOfWeek
 */
export interface InsightsTimingInsightDayOfWeek {
    /**
     * 
     * @type {InsightsTimingInsightDayOfWeekOrders}
     * @memberof InsightsTimingInsightDayOfWeek
     */
    orders?: InsightsTimingInsightDayOfWeekOrders;
    /**
     * 
     * @type {InsightsTimingInsightDayOfWeekViews}
     * @memberof InsightsTimingInsightDayOfWeek
     */
    views?: InsightsTimingInsightDayOfWeekViews;
}
/**
 * The distribution of item purchases of the specified brand in the specified browse node in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsTimingInsightDayOfWeekOrders
 */
export interface InsightsTimingInsightDayOfWeekOrders {
    /**
     * 
     * @type {InsightsDayOfWeekDataset}
     * @memberof InsightsTimingInsightDayOfWeekOrders
     */
    baselineDataset?: InsightsDayOfWeekDataset;
    /**
     * 
     * @type {InsightsDayOfWeekDataset}
     * @memberof InsightsTimingInsightDayOfWeekOrders
     */
    brandDataset: InsightsDayOfWeekDataset;
}
/**
 * The distribution of item views of the specified brand in the specified browse node in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsTimingInsightDayOfWeekViews
 */
export interface InsightsTimingInsightDayOfWeekViews {
    /**
     * 
     * @type {InsightsDayOfWeekDataset}
     * @memberof InsightsTimingInsightDayOfWeekViews
     */
    baselineDataset?: InsightsDayOfWeekDataset;
    /**
     * 
     * @type {InsightsDayOfWeekDataset}
     * @memberof InsightsTimingInsightDayOfWeekViews
     */
    brandDataset: InsightsDayOfWeekDataset;
}
/**
 * The hour of day metrics provides distribution of customer views or purchases bucketed by hour of a day.
 * @export
 * @interface InsightsTimingInsightHourOfDay
 */
export interface InsightsTimingInsightHourOfDay {
    /**
     * 
     * @type {InsightsTimingInsightHourOfDayOrders}
     * @memberof InsightsTimingInsightHourOfDay
     */
    orders?: InsightsTimingInsightHourOfDayOrders;
    /**
     * 
     * @type {InsightsTimingInsightHourOfDayViews}
     * @memberof InsightsTimingInsightHourOfDay
     */
    views?: InsightsTimingInsightHourOfDayViews;
}
/**
 * The distribution of item purchases of the specified brand in the specified browse node in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsTimingInsightHourOfDayOrders
 */
export interface InsightsTimingInsightHourOfDayOrders {
    /**
     * A dataset which provides distribution of events bucketed by hour (in customers local time).
     * @type {Array<object>}
     * @memberof InsightsTimingInsightHourOfDayOrders
     */
    baselineDataset?: Array<object>;
    /**
     * A dataset which provides distribution of events bucketed by hour (in customers local time).
     * @type {Array<object>}
     * @memberof InsightsTimingInsightHourOfDayOrders
     */
    brandDataset: Array<object>;
}
/**
 * The distribution of item views of the specified brand in the specified browse node in the last 28 days (ending at `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsTimingInsightHourOfDayViews
 */
export interface InsightsTimingInsightHourOfDayViews {
    /**
     * A dataset which provides distribution of events bucketed by hour (in customers local time).
     * @type {Array<object>}
     * @memberof InsightsTimingInsightHourOfDayViews
     */
    baselineDataset?: Array<object>;
    /**
     * A dataset which provides distribution of events bucketed by hour (in customers local time).
     * @type {Array<object>}
     * @memberof InsightsTimingInsightHourOfDayViews
     */
    brandDataset: Array<object>;
}
/**
 * The month of year provides distribution of customer views or purchases bucketed into last 12 months.
 * @export
 * @interface InsightsTimingInsightMonthOfYear
 */
export interface InsightsTimingInsightMonthOfYear {
    /**
     * 
     * @type {InsightsTimingInsightMonthOfYearOrders}
     * @memberof InsightsTimingInsightMonthOfYear
     */
    orders?: InsightsTimingInsightMonthOfYearOrders;
    /**
     * 
     * @type {InsightsTimingInsightMonthOfYearViews}
     * @memberof InsightsTimingInsightMonthOfYear
     */
    views?: InsightsTimingInsightMonthOfYearViews;
}
/**
 * The distribution of item purchases of the specified brand in the specified browse node in the last 12 months (before `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsTimingInsightMonthOfYearOrders
 */
export interface InsightsTimingInsightMonthOfYearOrders {
    /**
     * A dataset which provides distribution of events bucketed into last 12 months (in customers local time).
     * @type {Array<object>}
     * @memberof InsightsTimingInsightMonthOfYearOrders
     */
    baselineDataset?: Array<object>;
    /**
     * A dataset which provides distribution of events bucketed into last 12 months (in customers local time).
     * @type {Array<object>}
     * @memberof InsightsTimingInsightMonthOfYearOrders
     */
    brandDataset: Array<object>;
}
/**
 * The distribution of item views of the specified brand in the specified browse node in the last 12 months (before `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsTimingInsightMonthOfYearViews
 */
export interface InsightsTimingInsightMonthOfYearViews {
    /**
     * A dataset which provides distribution of events bucketed into last 12 months (in customers local time).
     * @type {Array<object>}
     * @memberof InsightsTimingInsightMonthOfYearViews
     */
    baselineDataset?: Array<object>;
    /**
     * A dataset which provides distribution of events bucketed into last 12 months (in customers local time).
     * @type {Array<object>}
     * @memberof InsightsTimingInsightMonthOfYearViews
     */
    brandDataset: Array<object>;
}
/**
 * The week of year provides distribution of customer views or purchases bucketed into last 12 months.
 * @export
 * @interface InsightsTimingInsightWeekOfYear
 */
export interface InsightsTimingInsightWeekOfYear {
    /**
     * 
     * @type {InsightsTimingInsightWeekOfYearOrders}
     * @memberof InsightsTimingInsightWeekOfYear
     */
    orders?: InsightsTimingInsightWeekOfYearOrders;
    /**
     * 
     * @type {InsightsTimingInsightWeekOfYearViews}
     * @memberof InsightsTimingInsightWeekOfYear
     */
    views?: InsightsTimingInsightWeekOfYearViews;
}
/**
 * The distribution of item purchases of the specified brand in the specified browse node in the last 53 weeks (before `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsTimingInsightWeekOfYearOrders
 */
export interface InsightsTimingInsightWeekOfYearOrders {
    /**
     * A dataset which provides distribution of events bucketed into last 53 weeks (in customers local time).
     * @type {Array<object>}
     * @memberof InsightsTimingInsightWeekOfYearOrders
     */
    baselineDataset?: Array<object>;
    /**
     * A dataset which provides distribution of events bucketed into last 53 weeks (in customers local time).
     * @type {Array<object>}
     * @memberof InsightsTimingInsightWeekOfYearOrders
     */
    brandDataset: Array<object>;
}
/**
 * The distribution of item views of the specified brand in the specified browse node in the last 53 weeks (before `reportEndDate`). It provides data for both the specified brand and the baseline determined from similar brands\' data.
 * @export
 * @interface InsightsTimingInsightWeekOfYearViews
 */
export interface InsightsTimingInsightWeekOfYearViews {
    /**
     * A dataset which provides distribution of events bucketed into last 53 weeks (in customers local time).
     * @type {Array<object>}
     * @memberof InsightsTimingInsightWeekOfYearViews
     */
    baselineDataset?: Array<object>;
    /**
     * A dataset which provides distribution of events bucketed into last 53 weeks (in customers local time).
     * @type {Array<object>}
     * @memberof InsightsTimingInsightWeekOfYearViews
     */
    brandDataset: Array<object>;
}

/**
 * AudienceInsightsApi - axios parameter creator
 * @export
 */
export const AudienceInsightsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Retrieves the top audiences that overlap with the provided audience.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} audienceId The identifier of an audience.
         * @param {'DSP' | 'SD'} adType The advertising program.
         * @param {string} [advertiserId] The identifier of the advertiser you\&#39;d like to retrieve overlapping audiences for. This parameter is required for the DSP adType, but is optional for the SD adType.
         * @param {number} [minimumAudienceSize] If specified, the sizes of all returned overlapping audiences will be at least the provided size. This parameter is supported only for request to return &#x60;application/vnd.insightsaudiencesoverlap.v1+json&#x60;.
         * @param {number} [maximumAudienceSize] If specified, the sizes of all returned overlapping audiences will be at most the provided size. This parameter is supported only for request to return &#x60;application/vnd.insightsaudiencesoverlap.v1+json&#x60;.
         * @param {number} [minimumOverlapAffinity] If specified, the affinities of all returned overlapping audiences will be at least the provided affinity.
         * @param {number} [maximumOverlapAffinity] If specified, the affinities of all returned overlapping audiences will be at most the provided affinity.
         * @param {Array<string>} [audienceCategory] If specified, the categories of all returned overlapping audiences will be one of the provided categories.
         * @param {number} [maxResults] Sets the maximum number of overlapping audiences in the response. This parameter is supported only for request to return &#x60;application/vnd.insightsaudiencesoverlap.v2+json&#x60;.
         * @param {string} [nextToken] Token to be used to request additional overlapping audiences. If not provided, the top 30 overlapping audiences are returned. Note: subsequent calls must be made using the same parameters as used in previous requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightsGetAudiencesOverlappingAudiences: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, audienceId: string, adType: 'DSP' | 'SD', advertiserId?: string, minimumAudienceSize?: number, maximumAudienceSize?: number, minimumOverlapAffinity?: number, maximumOverlapAffinity?: number, audienceCategory?: Array<string>, maxResults?: number, nextToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('insightsGetAudiencesOverlappingAudiences', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('insightsGetAudiencesOverlappingAudiences', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'audienceId' is not null or undefined
            assertParamExists('insightsGetAudiencesOverlappingAudiences', 'audienceId', audienceId)
            // verify required parameter 'adType' is not null or undefined
            assertParamExists('insightsGetAudiencesOverlappingAudiences', 'adType', adType)
            const localVarPath = `/insights/audiences/{audienceId}/overlappingAudiences`
                .replace(`{${"audienceId"}}`, encodeURIComponent(String(audienceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (adType !== undefined) {
                localVarQueryParameter['adType'] = adType;
            }

            if (advertiserId !== undefined) {
                localVarQueryParameter['advertiserId'] = advertiserId;
            }

            if (minimumAudienceSize !== undefined) {
                localVarQueryParameter['minimumAudienceSize'] = minimumAudienceSize;
            }

            if (maximumAudienceSize !== undefined) {
                localVarQueryParameter['maximumAudienceSize'] = maximumAudienceSize;
            }

            if (minimumOverlapAffinity !== undefined) {
                localVarQueryParameter['minimumOverlapAffinity'] = minimumOverlapAffinity;
            }

            if (maximumOverlapAffinity !== undefined) {
                localVarQueryParameter['maximumOverlapAffinity'] = maximumOverlapAffinity;
            }

            if (audienceCategory) {
                localVarQueryParameter['audienceCategory'] = audienceCategory.join(COLLECTION_FORMATS.csv);
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AudienceInsightsApi - functional programming interface
 * @export
 */
export const AudienceInsightsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AudienceInsightsApiAxiosParamCreator(configuration)
    return {
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Retrieves the top audiences that overlap with the provided audience.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} audienceId The identifier of an audience.
         * @param {'DSP' | 'SD'} adType The advertising program.
         * @param {string} [advertiserId] The identifier of the advertiser you\&#39;d like to retrieve overlapping audiences for. This parameter is required for the DSP adType, but is optional for the SD adType.
         * @param {number} [minimumAudienceSize] If specified, the sizes of all returned overlapping audiences will be at least the provided size. This parameter is supported only for request to return &#x60;application/vnd.insightsaudiencesoverlap.v1+json&#x60;.
         * @param {number} [maximumAudienceSize] If specified, the sizes of all returned overlapping audiences will be at most the provided size. This parameter is supported only for request to return &#x60;application/vnd.insightsaudiencesoverlap.v1+json&#x60;.
         * @param {number} [minimumOverlapAffinity] If specified, the affinities of all returned overlapping audiences will be at least the provided affinity.
         * @param {number} [maximumOverlapAffinity] If specified, the affinities of all returned overlapping audiences will be at most the provided affinity.
         * @param {Array<string>} [audienceCategory] If specified, the categories of all returned overlapping audiences will be one of the provided categories.
         * @param {number} [maxResults] Sets the maximum number of overlapping audiences in the response. This parameter is supported only for request to return &#x60;application/vnd.insightsaudiencesoverlap.v2+json&#x60;.
         * @param {string} [nextToken] Token to be used to request additional overlapping audiences. If not provided, the top 30 overlapping audiences are returned. Note: subsequent calls must be made using the same parameters as used in previous requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insightsGetAudiencesOverlappingAudiences(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, audienceId: string, adType: 'DSP' | 'SD', advertiserId?: string, minimumAudienceSize?: number, maximumAudienceSize?: number, minimumOverlapAffinity?: number, maximumOverlapAffinity?: number, audienceCategory?: Array<string>, maxResults?: number, nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insightsGetAudiencesOverlappingAudiences(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, audienceId, adType, advertiserId, minimumAudienceSize, maximumAudienceSize, minimumOverlapAffinity, maximumOverlapAffinity, audienceCategory, maxResults, nextToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AudienceInsightsApi - factory interface
 * @export
 */
export const AudienceInsightsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AudienceInsightsApiFp(configuration)
    return {
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Retrieves the top audiences that overlap with the provided audience.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} audienceId The identifier of an audience.
         * @param {'DSP' | 'SD'} adType The advertising program.
         * @param {string} [advertiserId] The identifier of the advertiser you\&#39;d like to retrieve overlapping audiences for. This parameter is required for the DSP adType, but is optional for the SD adType.
         * @param {number} [minimumAudienceSize] If specified, the sizes of all returned overlapping audiences will be at least the provided size. This parameter is supported only for request to return &#x60;application/vnd.insightsaudiencesoverlap.v1+json&#x60;.
         * @param {number} [maximumAudienceSize] If specified, the sizes of all returned overlapping audiences will be at most the provided size. This parameter is supported only for request to return &#x60;application/vnd.insightsaudiencesoverlap.v1+json&#x60;.
         * @param {number} [minimumOverlapAffinity] If specified, the affinities of all returned overlapping audiences will be at least the provided affinity.
         * @param {number} [maximumOverlapAffinity] If specified, the affinities of all returned overlapping audiences will be at most the provided affinity.
         * @param {Array<string>} [audienceCategory] If specified, the categories of all returned overlapping audiences will be one of the provided categories.
         * @param {number} [maxResults] Sets the maximum number of overlapping audiences in the response. This parameter is supported only for request to return &#x60;application/vnd.insightsaudiencesoverlap.v2+json&#x60;.
         * @param {string} [nextToken] Token to be used to request additional overlapping audiences. If not provided, the top 30 overlapping audiences are returned. Note: subsequent calls must be made using the same parameters as used in previous requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insightsGetAudiencesOverlappingAudiences(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, audienceId: string, adType: 'DSP' | 'SD', advertiserId?: string, minimumAudienceSize?: number, maximumAudienceSize?: number, minimumOverlapAffinity?: number, maximumOverlapAffinity?: number, audienceCategory?: Array<string>, maxResults?: number, nextToken?: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.insightsGetAudiencesOverlappingAudiences(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, audienceId, adType, advertiserId, minimumAudienceSize, maximumAudienceSize, minimumOverlapAffinity, maximumOverlapAffinity, audienceCategory, maxResults, nextToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for insightsGetAudiencesOverlappingAudiences operation in AudienceInsightsApi.
 * @export
 * @interface AudienceInsightsApiInsightsGetAudiencesOverlappingAudiencesRequest
 */
export interface AudienceInsightsApiInsightsGetAudiencesOverlappingAudiencesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AudienceInsightsApiInsightsGetAudiencesOverlappingAudiences
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AudienceInsightsApiInsightsGetAudiencesOverlappingAudiences
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of an audience.
     * @type {string}
     * @memberof AudienceInsightsApiInsightsGetAudiencesOverlappingAudiences
     */
    readonly audienceId: string

    /**
     * The advertising program.
     * @type {'DSP' | 'SD'}
     * @memberof AudienceInsightsApiInsightsGetAudiencesOverlappingAudiences
     */
    readonly adType: 'DSP' | 'SD'

    /**
     * The identifier of the advertiser you\&#39;d like to retrieve overlapping audiences for. This parameter is required for the DSP adType, but is optional for the SD adType.
     * @type {string}
     * @memberof AudienceInsightsApiInsightsGetAudiencesOverlappingAudiences
     */
    readonly advertiserId?: string

    /**
     * If specified, the sizes of all returned overlapping audiences will be at least the provided size. This parameter is supported only for request to return &#x60;application/vnd.insightsaudiencesoverlap.v1+json&#x60;.
     * @type {number}
     * @memberof AudienceInsightsApiInsightsGetAudiencesOverlappingAudiences
     */
    readonly minimumAudienceSize?: number

    /**
     * If specified, the sizes of all returned overlapping audiences will be at most the provided size. This parameter is supported only for request to return &#x60;application/vnd.insightsaudiencesoverlap.v1+json&#x60;.
     * @type {number}
     * @memberof AudienceInsightsApiInsightsGetAudiencesOverlappingAudiences
     */
    readonly maximumAudienceSize?: number

    /**
     * If specified, the affinities of all returned overlapping audiences will be at least the provided affinity.
     * @type {number}
     * @memberof AudienceInsightsApiInsightsGetAudiencesOverlappingAudiences
     */
    readonly minimumOverlapAffinity?: number

    /**
     * If specified, the affinities of all returned overlapping audiences will be at most the provided affinity.
     * @type {number}
     * @memberof AudienceInsightsApiInsightsGetAudiencesOverlappingAudiences
     */
    readonly maximumOverlapAffinity?: number

    /**
     * If specified, the categories of all returned overlapping audiences will be one of the provided categories.
     * @type {Array<string>}
     * @memberof AudienceInsightsApiInsightsGetAudiencesOverlappingAudiences
     */
    readonly audienceCategory?: Array<string>

    /**
     * Sets the maximum number of overlapping audiences in the response. This parameter is supported only for request to return &#x60;application/vnd.insightsaudiencesoverlap.v2+json&#x60;.
     * @type {number}
     * @memberof AudienceInsightsApiInsightsGetAudiencesOverlappingAudiences
     */
    readonly maxResults?: number

    /**
     * Token to be used to request additional overlapping audiences. If not provided, the top 30 overlapping audiences are returned. Note: subsequent calls must be made using the same parameters as used in previous requests.
     * @type {string}
     * @memberof AudienceInsightsApiInsightsGetAudiencesOverlappingAudiences
     */
    readonly nextToken?: string
}

/**
 * AudienceInsightsApi - object-oriented interface
 * @export
 * @class AudienceInsightsApi
 * @extends {BaseAPI}
 */
export class AudienceInsightsApi extends BaseAPI {
    /**
     *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @summary Retrieves the top audiences that overlap with the provided audience.
     * @param {AudienceInsightsApiInsightsGetAudiencesOverlappingAudiencesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudienceInsightsApi
     */
    public insightsGetAudiencesOverlappingAudiences(requestParameters: AudienceInsightsApiInsightsGetAudiencesOverlappingAudiencesRequest, options?: any) {
        return AudienceInsightsApiFp(this.configuration).insightsGetAudiencesOverlappingAudiences(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.audienceId, requestParameters.adType, requestParameters.advertiserId, requestParameters.minimumAudienceSize, requestParameters.maximumAudienceSize, requestParameters.minimumOverlapAffinity, requestParameters.maximumOverlapAffinity, requestParameters.audienceCategory, requestParameters.maxResults, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }
}


