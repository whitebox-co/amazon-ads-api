/* tslint:disable */
/* eslint-disable */
/**
 * Amazon Common Portfolios
 * Portfolios consist of campaigns that are grouped together and linked to a distinct Advertiser Account. The term \'advertiser\' refers to a brand, entity, account ID, or claim ID. An integrator can create multiple portfolios within an Advertiser Account.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { createRequestFunction } from "../../helpers";

/**
 * 
 * @export
 * @interface ListPortfolioResponse
 */
export interface ListPortfolioResponse {
    /**
     * The identifier of the report.
     * @type {number}
     * @memberof ListPortfolioResponse
     */
    portfolioId?: number;
    /**
     * The name of the portfolio.
     * @type {string}
     * @memberof ListPortfolioResponse
     */
    name?: string;
    /**
     * 
     * @type {ListPortfolioResponseBudget}
     * @memberof ListPortfolioResponse
     */
    budget?: ListPortfolioResponseBudget;
    /**
     * Determines if the portfolio is in budget
     * @type {boolean}
     * @memberof ListPortfolioResponse
     */
    inBudget?: boolean;
    /**
     * The state of the portfolio.
     * @type {string}
     * @memberof ListPortfolioResponse
     */
    state?: ListPortfolioResponseStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ListPortfolioResponseStateEnum {
    Enabled = 'enabled',
    Disabled = 'disabled'
}

/**
 * 
 * @export
 * @interface ListPortfolioResponseBudget
 */
export interface ListPortfolioResponseBudget {
    /**
     * The build status of the report.
     * @type {number}
     * @memberof ListPortfolioResponseBudget
     */
    amount?: number;
    /**
     * The portfolios currency code.
     * @type {string}
     * @memberof ListPortfolioResponseBudget
     */
    currencyCode?: string;
    /**
     * The portfolios policy name
     * @type {string}
     * @memberof ListPortfolioResponseBudget
     */
    policy?: string;
    /**
     * The start date of the portfolio.
     * @type {string}
     * @memberof ListPortfolioResponseBudget
     */
    startDate?: string;
    /**
     * The end date of the portfolio.
     * @type {string}
     * @memberof ListPortfolioResponseBudget
     */
    endDate?: string;
}
/**
 * The error response object.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof ModelError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}

/**
 * PortfoliosApi - axios parameter creator
 * @export
 */
export const PortfoliosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of up to 100 portfolios using the specified filters.
         * @summary Retrieve a list of up to 100 portfolios using the specified filters.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [portfolioIdFilter] The portfolio id to filter on.
         * @param {string} [portfolioNameFilter] The portfolio name to filter on.
         * @param {string} [portfolioStateFilter] The portfolio state to filter on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPortfolios: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, portfolioIdFilter?: number, portfolioNameFilter?: string, portfolioStateFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listPortfolios', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listPortfolios', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/portfolios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (portfolioIdFilter !== undefined) {
                localVarQueryParameter['portfolioIdFilter'] = portfolioIdFilter;
            }

            if (portfolioNameFilter !== undefined) {
                localVarQueryParameter['portfolioNameFilter'] = portfolioNameFilter;
            }

            if (portfolioStateFilter !== undefined) {
                localVarQueryParameter['portfolioStateFilter'] = portfolioStateFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortfoliosApi - functional programming interface
 * @export
 */
export const PortfoliosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortfoliosApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of up to 100 portfolios using the specified filters.
         * @summary Retrieve a list of up to 100 portfolios using the specified filters.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [portfolioIdFilter] The portfolio id to filter on.
         * @param {string} [portfolioNameFilter] The portfolio name to filter on.
         * @param {string} [portfolioStateFilter] The portfolio state to filter on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPortfolios(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, portfolioIdFilter?: number, portfolioNameFilter?: string, portfolioStateFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListPortfolioResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPortfolios(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, portfolioIdFilter, portfolioNameFilter, portfolioStateFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PortfoliosApi - factory interface
 * @export
 */
export const PortfoliosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortfoliosApiFp(configuration)
    return {
        /**
         * Retrieve a list of up to 100 portfolios using the specified filters.
         * @summary Retrieve a list of up to 100 portfolios using the specified filters.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [portfolioIdFilter] The portfolio id to filter on.
         * @param {string} [portfolioNameFilter] The portfolio name to filter on.
         * @param {string} [portfolioStateFilter] The portfolio state to filter on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPortfolios(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, portfolioIdFilter?: number, portfolioNameFilter?: string, portfolioStateFilter?: string, options?: any): AxiosPromise<Array<ListPortfolioResponse>> {
            return localVarFp.listPortfolios(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, portfolioIdFilter, portfolioNameFilter, portfolioStateFilter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listPortfolios operation in PortfoliosApi.
 * @export
 * @interface PortfoliosApiListPortfoliosRequest
 */
export interface PortfoliosApiListPortfoliosRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof PortfoliosApiListPortfolios
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof PortfoliosApiListPortfolios
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The portfolio id to filter on.
     * @type {number}
     * @memberof PortfoliosApiListPortfolios
     */
    readonly portfolioIdFilter?: number

    /**
     * The portfolio name to filter on.
     * @type {string}
     * @memberof PortfoliosApiListPortfolios
     */
    readonly portfolioNameFilter?: string

    /**
     * The portfolio state to filter on.
     * @type {string}
     * @memberof PortfoliosApiListPortfolios
     */
    readonly portfolioStateFilter?: string
}

/**
 * PortfoliosApi - object-oriented interface
 * @export
 * @class PortfoliosApi
 * @extends {BaseAPI}
 */
export class PortfoliosApi extends BaseAPI {
    /**
     * Retrieve a list of up to 100 portfolios using the specified filters.
     * @summary Retrieve a list of up to 100 portfolios using the specified filters.
     * @param {PortfoliosApiListPortfoliosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApi
     */
    public listPortfolios(requestParameters: PortfoliosApiListPortfoliosRequest, options?: any) {
        return PortfoliosApiFp(this.configuration).listPortfolios(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.portfolioIdFilter, requestParameters.portfolioNameFilter, requestParameters.portfolioStateFilter, options).then((request) => request(this.axios, this.basePath));
    }
}


