/* tslint:disable */
/* eslint-disable */
/**
 * Amazon Ads API for Sponsored Display
 * This API enables programmatic access for campaign creation, management, and reporting for Sponsored Display campaigns. For more information on the functionality, see the [Sponsored Display Support Center](https://advertising.amazon.com/help#GTPPHE6RAWC2C4LZ). For API onboarding information, see the [account setup](https://advertising.amazon.com/API/docs/en-us/setting-up/account-setup) topic.<br/><br/> > This specification is available for download from the **[Advertising API developer portal](https://d3a0d0y2hgofx6.cloudfront.net/openapi/en-us/sponsored-display/3-0/openapi.yaml).**
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { createRequestFunction } from "../../helpers";

/**
 * 
 * @export
 * @interface AdGroup
 */
export interface AdGroup {
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof AdGroup
     */
    name?: string;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof AdGroup
     */
    campaignId?: number;
    /**
     * The amount of the default bid associated with the ad group. Used if no bid is specified.
     * @type {number}
     * @memberof AdGroup
     */
    defaultBid?: number;
    /**
     * Bid Optimization for the Adgroup. Default behavior is to optimize for clicks.  |Name|CostType|Supported Tactics|Description| |----|----------|-----------|-----------| |clicks |cpc|T00020 T00030|[Default] Optimize for page visits| |conversions |cpc|T00020 T00030|Optimize for conversion| |reach |vcpm|T00020 T00030|Optimize for viewable impressions. We recommend starting with $5 USD bids for each target to begin testing with this awareness strategy. $1 is the minimum bid for vCPM.|
     * @type {string}
     * @memberof AdGroup
     */
    bidOptimization?: AdGroupBidOptimizationEnum;
    /**
     * The state of the ad group.
     * @type {string}
     * @memberof AdGroup
     */
    state?: AdGroupStateEnum;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroup
     */
    adGroupId?: number;
    /**
     * 
     * @type {Tactic}
     * @memberof AdGroup
     */
    tactic?: Tactic;
}

/**
    * @export
    * @enum {string}
    */
export enum AdGroupBidOptimizationEnum {
    Clicks = 'clicks',
    Conversions = 'conversions',
    Reach = 'reach'
}
/**
    * @export
    * @enum {string}
    */
export enum AdGroupStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface AdGroupAllOf
 */
export interface AdGroupAllOf {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroupAllOf
     */
    adGroupId?: number;
    /**
     * 
     * @type {Tactic}
     * @memberof AdGroupAllOf
     */
    tactic?: Tactic;
}
/**
 * 
 * @export
 * @interface AdGroupResponse
 */
export interface AdGroupResponse {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof AdGroupResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof AdGroupResponse
     */
    description?: string;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroupResponse
     */
    adGroupId?: number;
}
/**
 * Object containing an extended set of data fields for an Ad Group.
 * @export
 * @interface AdGroupResponseEx
 */
export interface AdGroupResponseEx {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroupResponseEx
     */
    adGroupId?: number;
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof AdGroupResponseEx
     */
    name?: string;
    /**
     * The identifier of the campaign that this ad group is associated with.
     * @type {number}
     * @memberof AdGroupResponseEx
     */
    campaignId?: number;
    /**
     * The amount of the default bid associated with the ad group. Used if no bid is specified.
     * @type {number}
     * @memberof AdGroupResponseEx
     */
    defaultBid?: number;
    /**
     * The delivery state of the ad group.
     * @type {string}
     * @memberof AdGroupResponseEx
     */
    state?: AdGroupResponseExStateEnum;
    /**
     * The status of the ad group.
     * @type {string}
     * @memberof AdGroupResponseEx
     */
    servingStatus?: AdGroupResponseExServingStatusEnum;
    /**
     * Bid optimization type for the Adgroup. Default behavior is to optimize for clicks.   |Name|CostType|Supported Tactics|Description| |----|----------|-----------|-----------| |clicks [Default]|cpc|T00020 T00030|Optimize for page visits| |conversions|cpc|T00020 T00030|Optimize for conversion| |reach|vcpm|T00020 T00030|Optimize for viewable impressions. We recommend starting with $5 USD bids for each target to begin testing with this awareness strategy. $1 is the minimum bid for vCPM.|
     * @type {string}
     * @memberof AdGroupResponseEx
     */
    bidOptimization?: AdGroupResponseExBidOptimizationEnum;
    /**
     * Epoch time the ad group was created.
     * @type {number}
     * @memberof AdGroupResponseEx
     */
    creationDate?: number;
    /**
     * Epoch time any property in the ad group was last updated.
     * @type {number}
     * @memberof AdGroupResponseEx
     */
    lastUpdatedDate?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum AdGroupResponseExStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum AdGroupResponseExServingStatusEnum {
    AdvertiserStatusEnabled = 'ADVERTISER_STATUS_ENABLED',
    StatusUnavailable = 'STATUS_UNAVAILABLE',
    AdvertiserPaused = 'ADVERTISER_PAUSED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    AdvertiserPaymentFailure = 'ADVERTISER_PAYMENT_FAILURE',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    PendingStartDate = 'PENDING_START_DATE',
    Ended = 'ENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupStatusEnabled = 'AD_GROUP_STATUS_ENABLED',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    AdGroupIncomplete = 'AD_GROUP_INCOMPLETE',
    AdGroupLowBid = 'AD_GROUP_LOW_BID',
    AdgroupPolicingPendingReview = 'ADGROUP_POLICING_PENDING_REVIEW',
    AdgroupPolicingCreativeRejected = 'ADGROUP_POLICING_CREATIVE_REJECTED'
}
/**
    * @export
    * @enum {string}
    */
export enum AdGroupResponseExBidOptimizationEnum {
    Clicks = 'clicks',
    Conversions = 'conversions',
    Reach = 'reach'
}

/**
 * 
 * @export
 * @interface BaseAdGroup
 */
export interface BaseAdGroup {
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof BaseAdGroup
     */
    name?: string;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof BaseAdGroup
     */
    campaignId?: number;
    /**
     * The amount of the default bid associated with the ad group. Used if no bid is specified.
     * @type {number}
     * @memberof BaseAdGroup
     */
    defaultBid?: number;
    /**
     * Bid Optimization for the Adgroup. Default behavior is to optimize for clicks.  |Name|CostType|Supported Tactics|Description| |----|----------|-----------|-----------| |clicks |cpc|T00020 T00030|[Default] Optimize for page visits| |conversions |cpc|T00020 T00030|Optimize for conversion| |reach |vcpm|T00020 T00030|Optimize for viewable impressions. We recommend starting with $5 USD bids for each target to begin testing with this awareness strategy. $1 is the minimum bid for vCPM.|
     * @type {string}
     * @memberof BaseAdGroup
     */
    bidOptimization?: BaseAdGroupBidOptimizationEnum;
    /**
     * The state of the ad group.
     * @type {string}
     * @memberof BaseAdGroup
     */
    state?: BaseAdGroupStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseAdGroupBidOptimizationEnum {
    Clicks = 'clicks',
    Conversions = 'conversions',
    Reach = 'reach'
}
/**
    * @export
    * @enum {string}
    */
export enum BaseAdGroupStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface BaseCampaign
 */
export interface BaseCampaign {
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof BaseCampaign
     */
    name?: string;
    /**
     * The time period over which the amount specified in the `budget` property is allocated.
     * @type {string}
     * @memberof BaseCampaign
     */
    budgetType?: BaseCampaignBudgetTypeEnum;
    /**
     * The amount of the budget.
     * @type {number}
     * @memberof BaseCampaign
     */
    budget?: number;
    /**
     * The YYYYMMDD start date of the campaign. The date must be today or in the future.
     * @type {string}
     * @memberof BaseCampaign
     */
    startDate?: string;
    /**
     * The YYYYMMDD end date of the campaign.
     * @type {string}
     * @memberof BaseCampaign
     */
    endDate?: string | null;
    /**
     * Determines how the campaign will bid and charge. |Name|Supported Tactics|Description| |----|----------|-----------| |cpc |T00020 T00030|[Default] The performance of this campaign is measured by the clicks triggered by the ad.| |vcpm |T00020 T00030|The performance of this campaign is measured by the viewed impressions triggered by the ad. We recommend starting with $5 USD bids for each target to begin testing with this awareness strategy. $1 is the minimum bid for vCPM.|
     * @type {string}
     * @memberof BaseCampaign
     */
    costType?: BaseCampaignCostTypeEnum;
    /**
     * The state of the campaign.
     * @type {string}
     * @memberof BaseCampaign
     */
    state?: BaseCampaignStateEnum;
    /**
     * Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.
     * @type {number}
     * @memberof BaseCampaign
     */
    portfolioId?: number | null;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseCampaignBudgetTypeEnum {
    Daily = 'daily'
}
/**
    * @export
    * @enum {string}
    */
export enum BaseCampaignCostTypeEnum {
    Cpc = 'cpc',
    Vcpm = 'vcpm'
}
/**
    * @export
    * @enum {string}
    */
export enum BaseCampaignStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface BaseNegativeTargetingClause
 */
export interface BaseNegativeTargetingClause {
    /**
     * 
     * @type {string}
     * @memberof BaseNegativeTargetingClause
     */
    state?: BaseNegativeTargetingClauseStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseNegativeTargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface BaseProductAd
 */
export interface BaseProductAd {
    /**
     * The state of the campaign associated with the product ad.
     * @type {string}
     * @memberof BaseProductAd
     */
    state?: BaseProductAdStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseProductAdStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface BaseTargetingClause
 */
export interface BaseTargetingClause {
    /**
     * 
     * @type {string}
     * @memberof BaseTargetingClause
     */
    state?: BaseTargetingClauseStateEnum;
    /**
     * The bid will override the adGroup bid if specified. This field is not used for negative targeting clauses. The bid must be less than the maximum allowable bid for the campaign\'s marketplace; for a list of maximum allowable bids, find the [\"Bid constraints by marketplace\" table in our documentation overview](https://advertising.amazon.com/API/docs/en-us/get-started/overview).
     * @type {number}
     * @memberof BaseTargetingClause
     */
    bid?: number | null;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseTargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface BrandSafetyDenyListDomain
 */
export interface BrandSafetyDenyListDomain {
    /**
     * The website or app identifier. This can be in the form of full domain (eg. \'example.com\' or \'example.net\'), or mobile app identifier (eg. \'com.example.app\' for Android apps or \'1234567890\' for iOS apps) 
     * @type {string}
     * @memberof BrandSafetyDenyListDomain
     */
    name: string;
    /**
     * 
     * @type {BrandSafetyDenyListDomainType}
     * @memberof BrandSafetyDenyListDomain
     */
    type: BrandSafetyDenyListDomainType;
}
/**
 * The state of the domain.
 * @export
 * @enum {string}
 */

export enum BrandSafetyDenyListDomainState {
    Enabled = 'ENABLED',
    Archived = 'ARCHIVED'
}

/**
 * The domain type.
 * @export
 * @enum {string}
 */

export enum BrandSafetyDenyListDomainType {
    Website = 'WEBSITE',
    App = 'APP'
}

/**
 * The state of the domain.
 * @export
 * @enum {string}
 */

export enum BrandSafetyDenyListDomainUpdateResultStatus {
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * 
 * @export
 * @interface BrandSafetyDenyListProcessedDomain
 */
export interface BrandSafetyDenyListProcessedDomain {
    /**
     * The identifier of the Brand Safety List domain.
     * @type {number}
     * @memberof BrandSafetyDenyListProcessedDomain
     */
    domainId?: number;
    /**
     * The website or app identifier. This can be in the form of full domain (eg. \'example.com\' or \'example.net\'), or mobile app identifier (eg. \'com.example.app\' for Android apps or \'1234567890\' for iOS apps) 
     * @type {string}
     * @memberof BrandSafetyDenyListProcessedDomain
     */
    name?: string;
    /**
     * 
     * @type {BrandSafetyDenyListDomainType}
     * @memberof BrandSafetyDenyListProcessedDomain
     */
    type?: BrandSafetyDenyListDomainType;
    /**
     * 
     * @type {BrandSafetyDenyListDomainState}
     * @memberof BrandSafetyDenyListProcessedDomain
     */
    state?: BrandSafetyDenyListDomainState;
    /**
     * The date time the domain was created at. Format YYYY-MM-ddT:HH:mm:ssZ
     * @type {string}
     * @memberof BrandSafetyDenyListProcessedDomain
     */
    createdAt?: string;
    /**
     * The date time the domain was last modified. Format YYYY-MM-ddT:HH:mm:ssZ
     * @type {string}
     * @memberof BrandSafetyDenyListProcessedDomain
     */
    lastModified?: string;
}
/**
 * Response for Brand Safety Deny List GET requests
 * @export
 * @interface BrandSafetyGetResponse
 */
export interface BrandSafetyGetResponse {
    /**
     * 
     * @type {BrandSafetyGetResponsePagination}
     * @memberof BrandSafetyGetResponse
     */
    pagination?: BrandSafetyGetResponsePagination;
    /**
     * List of Brand Safety Deny List Domains
     * @type {Array<BrandSafetyDenyListProcessedDomain>}
     * @memberof BrandSafetyGetResponse
     */
    domains?: Array<BrandSafetyDenyListProcessedDomain>;
}
/**
 * Response pagination info for Brand Safety Deny List GET requests
 * @export
 * @interface BrandSafetyGetResponsePagination
 */
export interface BrandSafetyGetResponsePagination {
    /**
     * The total number of deny list domains created by the advertiser
     * @type {number}
     * @memberof BrandSafetyGetResponsePagination
     */
    total?: number;
    /**
     * The maximum number of deny list domains returned from GET request
     * @type {number}
     * @memberof BrandSafetyGetResponsePagination
     */
    limit?: number;
    /**
     * The number of deny list domains skipped
     * @type {number}
     * @memberof BrandSafetyGetResponsePagination
     */
    offset?: number;
}
/**
 * List of all requests\' status.
 * @export
 * @interface BrandSafetyListRequestStatusResponse
 */
export interface BrandSafetyListRequestStatusResponse {
    /**
     * List of all requests\' status.
     * @type {Array<BrandSafetyRequestStatus>}
     * @memberof BrandSafetyListRequestStatusResponse
     */
    requestStatusList?: Array<BrandSafetyRequestStatus>;
}
/**
 * POST Request for Brand Safety
 * @export
 * @interface BrandSafetyPostRequest
 */
export interface BrandSafetyPostRequest {
    /**
     * 
     * @type {Array<BrandSafetyDenyListDomain>}
     * @memberof BrandSafetyPostRequest
     */
    domains: Array<BrandSafetyDenyListDomain>;
}
/**
 * 
 * @export
 * @interface BrandSafetyRequestResult
 */
export interface BrandSafetyRequestResult {
    /**
     * 
     * @type {BrandSafetyDenyListDomainUpdateResultStatus}
     * @memberof BrandSafetyRequestResult
     */
    status?: BrandSafetyDenyListDomainUpdateResultStatus;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof BrandSafetyRequestResult
     */
    details?: string;
    /**
     * The identifier of the Brand Safety Deny List Domain.
     * @type {number}
     * @memberof BrandSafetyRequestResult
     */
    domainId?: number;
    /**
     * The website or app identifier.
     * @type {string}
     * @memberof BrandSafetyRequestResult
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface BrandSafetyRequestResultsResponse
 */
export interface BrandSafetyRequestResultsResponse {
    /**
     * A list of results for the given requestId
     * @type {Array<BrandSafetyRequestResult>}
     * @memberof BrandSafetyRequestResultsResponse
     */
    results?: Array<BrandSafetyRequestResult>;
}
/**
 * 
 * @export
 * @interface BrandSafetyRequestStatus
 */
export interface BrandSafetyRequestStatus {
    /**
     * Request ID
     * @type {string}
     * @memberof BrandSafetyRequestStatus
     */
    requestId?: string;
    /**
     * Request timestamp
     * @type {string}
     * @memberof BrandSafetyRequestStatus
     */
    timestamp?: string;
    /**
     * The status of the request
     * @type {string}
     * @memberof BrandSafetyRequestStatus
     */
    status?: BrandSafetyRequestStatusStatusEnum;
    /**
     * Details related to the request status
     * @type {string}
     * @memberof BrandSafetyRequestStatus
     */
    statusDetails?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BrandSafetyRequestStatusStatusEnum {
    InProgress = 'IN_PROGRESS',
    Completed = 'COMPLETED',
    Failure = 'FAILURE'
}

/**
 * The status of the request.
 * @export
 * @interface BrandSafetyRequestStatusResponse
 */
export interface BrandSafetyRequestStatusResponse {
    /**
     * 
     * @type {BrandSafetyRequestStatus}
     * @memberof BrandSafetyRequestStatusResponse
     */
    requestStatus?: BrandSafetyRequestStatus;
}
/**
 * Response for Brand Safety POST and DELETE requests
 * @export
 * @interface BrandSafetyUpdateResponse
 */
export interface BrandSafetyUpdateResponse {
    /**
     * The identifier of the request
     * @type {string}
     * @memberof BrandSafetyUpdateResponse
     */
    requestId?: string;
}
/**
 * 
 * @export
 * @interface Campaign
 */
export interface Campaign {
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof Campaign
     */
    name?: string;
    /**
     * The time period over which the amount specified in the `budget` property is allocated.
     * @type {string}
     * @memberof Campaign
     */
    budgetType?: CampaignBudgetTypeEnum;
    /**
     * The amount of the budget.
     * @type {number}
     * @memberof Campaign
     */
    budget?: number;
    /**
     * The YYYYMMDD start date of the campaign. The date must be today or in the future.
     * @type {string}
     * @memberof Campaign
     */
    startDate?: string;
    /**
     * The YYYYMMDD end date of the campaign.
     * @type {string}
     * @memberof Campaign
     */
    endDate?: string | null;
    /**
     * Determines how the campaign will bid and charge. |Name|Supported Tactics|Description| |----|----------|-----------| |cpc |T00020 T00030|[Default] The performance of this campaign is measured by the clicks triggered by the ad.| |vcpm |T00020 T00030|The performance of this campaign is measured by the viewed impressions triggered by the ad. We recommend starting with $5 USD bids for each target to begin testing with this awareness strategy. $1 is the minimum bid for vCPM.|
     * @type {string}
     * @memberof Campaign
     */
    costType?: CampaignCostTypeEnum;
    /**
     * The state of the campaign.
     * @type {string}
     * @memberof Campaign
     */
    state?: CampaignStateEnum;
    /**
     * Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.
     * @type {number}
     * @memberof Campaign
     */
    portfolioId?: number | null;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof Campaign
     */
    campaignId?: number;
    /**
     * 
     * @type {Tactic}
     * @memberof Campaign
     */
    tactic?: Tactic;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    deliveryProfile?: CampaignDeliveryProfileEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CampaignBudgetTypeEnum {
    Daily = 'daily'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignCostTypeEnum {
    Cpc = 'cpc',
    Vcpm = 'vcpm'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignDeliveryProfileEnum {
    AsSoonAsPossible = 'as_soon_as_possible'
}

/**
 * 
 * @export
 * @interface CampaignAllOf
 */
export interface CampaignAllOf {
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CampaignAllOf
     */
    campaignId?: number;
    /**
     * 
     * @type {Tactic}
     * @memberof CampaignAllOf
     */
    tactic?: Tactic;
    /**
     * 
     * @type {string}
     * @memberof CampaignAllOf
     */
    deliveryProfile?: CampaignAllOfDeliveryProfileEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CampaignAllOfDeliveryProfileEnum {
    AsSoonAsPossible = 'as_soon_as_possible'
}

/**
 * 
 * @export
 * @interface CampaignResponse
 */
export interface CampaignResponse {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof CampaignResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof CampaignResponse
     */
    description?: string;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CampaignResponse
     */
    campaignId?: number;
}
/**
 * 
 * @export
 * @interface CampaignResponseEx
 */
export interface CampaignResponseEx {
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CampaignResponseEx
     */
    campaignId?: number;
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof CampaignResponseEx
     */
    name?: string;
    /**
     * 
     * @type {Tactic}
     * @memberof CampaignResponseEx
     */
    tactic?: Tactic;
    /**
     * The time period over which the amount specified in the `budget` property is allocated.
     * @type {string}
     * @memberof CampaignResponseEx
     */
    budgetType?: CampaignResponseExBudgetTypeEnum;
    /**
     * The amount of the budget.
     * @type {number}
     * @memberof CampaignResponseEx
     */
    budget?: number;
    /**
     * The YYYYMMDD start date of the campaign. The date must be today or in the future.
     * @type {string}
     * @memberof CampaignResponseEx
     */
    startDate?: string;
    /**
     * The YYYYMMDD end date of the campaign.
     * @type {string}
     * @memberof CampaignResponseEx
     */
    endDate?: string;
    /**
     * The state of the campaign.
     * @type {string}
     * @memberof CampaignResponseEx
     */
    state?: CampaignResponseExStateEnum;
    /**
     * Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.
     * @type {number}
     * @memberof CampaignResponseEx
     */
    portfolioId?: number;
    /**
     * The status of the campaign.
     * @type {string}
     * @memberof CampaignResponseEx
     */
    servingStatus?: CampaignResponseExServingStatusEnum;
    /**
     * Determines how the campaign will bid and charge. **Note that some cost types are not currently supported. This note will be removed when this operation is available.** |Name|Supported Tactics|Description| |----|----------|-----------| |cpc |T00020 T00030|[Default] The performance of this campaign is measured by the clicks triggered by the ad.| |vcpm|T00020 T00030|The performance of this campaign is measured by the viewed impressions triggered by the ad. We recommend starting with $5 USD bids for each target to begin testing with this awareness strategy. $1 is the minimum bid for vCPM.|
     * @type {string}
     * @memberof CampaignResponseEx
     */
    costType?: CampaignResponseExCostTypeEnum;
    /**
     * Epoch date the campaign was created.
     * @type {number}
     * @memberof CampaignResponseEx
     */
    creationDate?: number;
    /**
     * Epoch date of the last update to any property associated with the campaign.
     * @type {number}
     * @memberof CampaignResponseEx
     */
    lastUpdatedDate?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum CampaignResponseExBudgetTypeEnum {
    Daily = 'daily'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignResponseExStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignResponseExServingStatusEnum {
    AdvertiserStatusEnabled = 'ADVERTISER_STATUS_ENABLED',
    StatusUnavailable = 'STATUS_UNAVAILABLE',
    AdvertiserPaused = 'ADVERTISER_PAUSED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    AdvertiserPaymentFailure = 'ADVERTISER_PAYMENT_FAILURE',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    PendingStartDate = 'PENDING_START_DATE',
    Ended = 'ENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignResponseExCostTypeEnum {
    Cpc = 'cpc',
    Vcpm = 'vcpm'
}

/**
 * 
 * @export
 * @interface CreateAdGroup
 */
export interface CreateAdGroup {
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof CreateAdGroup
     */
    name: string;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CreateAdGroup
     */
    campaignId: number;
    /**
     * The amount of the default bid associated with the ad group. Used if no bid is specified.
     * @type {number}
     * @memberof CreateAdGroup
     */
    defaultBid?: number;
    /**
     * Bid Optimization for the Adgroup. Default behavior is to optimize for clicks.  |Name|CostType|Supported Tactics|Description| |----|----------|-----------|-----------| |clicks |cpc|T00020 T00030|[Default] Optimize for page visits| |conversions |cpc|T00020 T00030|Optimize for conversion| |reach |vcpm|T00020 T00030|Optimize for viewable impressions. We recommend starting with $5 USD bids for each target to begin testing with this awareness strategy. $1 is the minimum bid for vCPM.|
     * @type {string}
     * @memberof CreateAdGroup
     */
    bidOptimization?: CreateAdGroupBidOptimizationEnum;
    /**
     * The state of the ad group.
     * @type {string}
     * @memberof CreateAdGroup
     */
    state: CreateAdGroupStateEnum;
    /**
     * 
     * @type {Tactic}
     * @memberof CreateAdGroup
     */
    tactic?: Tactic;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateAdGroupBidOptimizationEnum {
    Clicks = 'clicks',
    Conversions = 'conversions',
    Reach = 'reach'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateAdGroupStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface CreateCampaign
 */
export interface CreateCampaign {
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof CreateCampaign
     */
    name?: string;
    /**
     * The time period over which the amount specified in the `budget` property is allocated.
     * @type {string}
     * @memberof CreateCampaign
     */
    budgetType?: CreateCampaignBudgetTypeEnum;
    /**
     * The amount of the budget.
     * @type {number}
     * @memberof CreateCampaign
     */
    budget?: number;
    /**
     * The YYYYMMDD start date of the campaign. The date must be today or in the future.
     * @type {string}
     * @memberof CreateCampaign
     */
    startDate?: string;
    /**
     * The YYYYMMDD end date of the campaign.
     * @type {string}
     * @memberof CreateCampaign
     */
    endDate?: string | null;
    /**
     * Determines how the campaign will bid and charge. |Name|Supported Tactics|Description| |----|----------|-----------| |cpc |T00020 T00030|[Default] The performance of this campaign is measured by the clicks triggered by the ad.| |vcpm |T00020 T00030|The performance of this campaign is measured by the viewed impressions triggered by the ad. We recommend starting with $5 USD bids for each target to begin testing with this awareness strategy. $1 is the minimum bid for vCPM.|
     * @type {string}
     * @memberof CreateCampaign
     */
    costType?: CreateCampaignCostTypeEnum;
    /**
     * The state of the campaign.
     * @type {string}
     * @memberof CreateCampaign
     */
    state?: CreateCampaignStateEnum;
    /**
     * Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.
     * @type {number}
     * @memberof CreateCampaign
     */
    portfolioId?: number | null;
    /**
     * 
     * @type {Tactic}
     * @memberof CreateCampaign
     */
    tactic?: Tactic;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateCampaignBudgetTypeEnum {
    Daily = 'daily'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateCampaignCostTypeEnum {
    Cpc = 'cpc',
    Vcpm = 'vcpm'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateCampaignStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface CreateCampaignAllOf
 */
export interface CreateCampaignAllOf {
    /**
     * 
     * @type {Tactic}
     * @memberof CreateCampaignAllOf
     */
    tactic?: Tactic;
}
/**
 * Creative create model.
 * @export
 * @interface CreateCreative
 */
export interface CreateCreative {
    /**
     * Unqiue identifier for the ad group associated with the creative.
     * @type {number}
     * @memberof CreateCreative
     */
    adGroupId: number;
    /**
     * 
     * @type {CreativeProperties}
     * @memberof CreateCreative
     */
    properties: CreativeProperties;
}
/**
 * 
 * @export
 * @interface CreateNegativeTargetingClause
 */
export interface CreateNegativeTargetingClause {
    /**
     * 
     * @type {string}
     * @memberof CreateNegativeTargetingClause
     */
    state: CreateNegativeTargetingClauseStateEnum;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof CreateNegativeTargetingClause
     */
    adGroupId: number;
    /**
     * The expression to negatively match against. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.
     * @type {Array<NegativeTargetingExpression>}
     * @memberof CreateNegativeTargetingClause
     */
    expression: Array<NegativeTargetingExpression>;
    /**
     * 
     * @type {string}
     * @memberof CreateNegativeTargetingClause
     */
    expressionType: CreateNegativeTargetingClauseExpressionTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateNegativeTargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateNegativeTargetingClauseExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface CreateNegativeTargetingClauseAllOf
 */
export interface CreateNegativeTargetingClauseAllOf {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof CreateNegativeTargetingClauseAllOf
     */
    adGroupId?: number;
    /**
     * The expression to negatively match against. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.
     * @type {Array<NegativeTargetingExpression>}
     * @memberof CreateNegativeTargetingClauseAllOf
     */
    expression?: Array<NegativeTargetingExpression>;
    /**
     * 
     * @type {string}
     * @memberof CreateNegativeTargetingClauseAllOf
     */
    expressionType?: CreateNegativeTargetingClauseAllOfExpressionTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateNegativeTargetingClauseAllOfExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface CreateProductAd
 */
export interface CreateProductAd {
    /**
     * The state of the campaign associated with the product ad.
     * @type {string}
     * @memberof CreateProductAd
     */
    state: CreateProductAdStateEnum;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof CreateProductAd
     */
    adGroupId: number;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CreateProductAd
     */
    campaignId: number;
    /**
     * The ASIN of the product advertised by the product ad.
     * @type {string}
     * @memberof CreateProductAd
     */
    asin?: string;
    /**
     * The SKU of the product advertised by the product ad.
     * @type {string}
     * @memberof CreateProductAd
     */
    sku?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateProductAdStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface CreateProductAdAllOf
 */
export interface CreateProductAdAllOf {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof CreateProductAdAllOf
     */
    adGroupId?: number;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CreateProductAdAllOf
     */
    campaignId?: number;
    /**
     * The ASIN of the product advertised by the product ad.
     * @type {string}
     * @memberof CreateProductAdAllOf
     */
    asin?: string;
    /**
     * The SKU of the product advertised by the product ad.
     * @type {string}
     * @memberof CreateProductAdAllOf
     */
    sku?: string;
}
/**
 * 
 * @export
 * @interface CreateTargetingClause
 */
export interface CreateTargetingClause {
    /**
     * 
     * @type {string}
     * @memberof CreateTargetingClause
     */
    state?: CreateTargetingClauseStateEnum;
    /**
     * The bid will override the adGroup bid if specified. This field is not used for negative targeting clauses. The bid must be less than the maximum allowable bid for the campaign\'s marketplace; for a list of maximum allowable bids, find the [\"Bid constraints by marketplace\" table in our documentation overview](https://advertising.amazon.com/API/docs/en-us/get-started/overview).
     * @type {number}
     * @memberof CreateTargetingClause
     */
    bid?: number | null;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof CreateTargetingClause
     */
    adGroupId: number;
    /**
     * Tactic T00020 ad groups only allow manual targeting.
     * @type {string}
     * @memberof CreateTargetingClause
     */
    expressionType: CreateTargetingClauseExpressionTypeEnum;
    /**
     * The targeting expression to match against.  ------- Applicable to Product targeting (T00020) ------- * A \'TargetingExpression\' in a Product targeting Campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to Audience targeting (T00030) ------- * A \'TargetingExpression\' in an Audience Campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify either auto ASIN-grain (exact products), manual ASIN-grain (similar products), or manual category-grain targeting. * **Future** To exclude parts of an audience, specify a TargetingPredicateNested component that contains a negative TargetingPredicate type.
     * @type {Array<TargetingPredicate | TargetingPredicateNested>}
     * @memberof CreateTargetingClause
     */
    expression: Array<TargetingPredicate | TargetingPredicateNested>;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateTargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateTargetingClauseExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface CreateTargetingClauseAllOf
 */
export interface CreateTargetingClauseAllOf {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof CreateTargetingClauseAllOf
     */
    adGroupId?: number;
    /**
     * Tactic T00020 ad groups only allow manual targeting.
     * @type {string}
     * @memberof CreateTargetingClauseAllOf
     */
    expressionType?: CreateTargetingClauseAllOfExpressionTypeEnum;
    /**
     * The targeting expression to match against.  ------- Applicable to Product targeting (T00020) ------- * A \'TargetingExpression\' in a Product targeting Campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to Audience targeting (T00030) ------- * A \'TargetingExpression\' in an Audience Campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify either auto ASIN-grain (exact products), manual ASIN-grain (similar products), or manual category-grain targeting. * **Future** To exclude parts of an audience, specify a TargetingPredicateNested component that contains a negative TargetingPredicate type.
     * @type {Array<TargetingPredicate | TargetingPredicateNested>}
     * @memberof CreateTargetingClauseAllOf
     */
    expression?: Array<TargetingPredicate | TargetingPredicateNested>;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateTargetingClauseAllOfExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * Creative model.
 * @export
 * @interface Creative
 */
export interface Creative {
    /**
     * Unique identifier of the creative.
     * @type {number}
     * @memberof Creative
     */
    creativeId: number;
    /**
     * 
     * @type {CreativeProperties}
     * @memberof Creative
     */
    properties: CreativeProperties;
    /**
     * The moderation status of the creative
     * @type {string}
     * @memberof Creative
     */
    moderationStatus: CreativeModerationStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CreativeModerationStatusEnum {
    Approved = 'APPROVED',
    PendingReview = 'PENDING_REVIEW',
    Rejected = 'REJECTED'
}

/**
 * System generated Creative moderation.
 * @export
 * @interface CreativeModeration
 */
export interface CreativeModeration {
    /**
     * Unique identifier of the creative.
     * @type {number}
     * @memberof CreativeModeration
     */
    creativeId: number;
    /**
     * The moderation status of the creative. |Status|Description| |------|-----------| |APPROVED|Moderation for the creative is complete.| |IN_PROGRESS|Moderation for the creative is in progress. The expected date and time for completion are specfied in the `etaForModeration` field.| |REJECTED|The creative has failed moderation. Specific information about the content that violated policy is available in `policyViolations`.|
     * @type {string}
     * @memberof CreativeModeration
     */
    moderationStatus: CreativeModerationModerationStatusEnum;
    /**
     * Expected date and time by which moderation will be complete.
     * @type {string}
     * @memberof CreativeModeration
     */
    etaForModeration: string;
    /**
     * This contentType is same as what you specified when you create/update the creative. For brand logo creative, this field is optional. If this field is not set, creative API will treat it as a brand logo creative. For other creative types, this field is required and must be set to the corresponding enum value.
     * @type {string}
     * @memberof CreativeModeration
     */
    contentType?: CreativeModerationContentTypeEnum;
    /**
     * A list of policy violations for a creative that has failed moderation.
     * @type {Array<CreativeModerationPolicyViolations>}
     * @memberof CreativeModeration
     */
    policyViolations: Array<CreativeModerationPolicyViolations>;
}

/**
    * @export
    * @enum {string}
    */
export enum CreativeModerationModerationStatusEnum {
    Approved = 'APPROVED',
    PendingReview = 'PENDING_REVIEW',
    Rejected = 'REJECTED'
}
/**
    * @export
    * @enum {string}
    */
export enum CreativeModerationContentTypeEnum {
    Hl = 'HL',
    CustomImage = 'CUSTOM_IMAGE'
}

/**
 * 
 * @export
 * @interface CreativeModerationImageEvidences
 */
export interface CreativeModerationImageEvidences {
    /**
     * 
     * @type {CreativeModerationViolatingImageCrop}
     * @memberof CreativeModerationImageEvidences
     */
    violatingImageCrop?: CreativeModerationViolatingImageCrop;
}
/**
 * 
 * @export
 * @interface CreativeModerationPolicyViolations
 */
export interface CreativeModerationPolicyViolations {
    /**
     * A human-readable description of the policy.
     * @type {string}
     * @memberof CreativeModerationPolicyViolations
     */
    policyDescription?: string;
    /**
     * Address of the policy documentation. Follow the link to learn more about the specified policy.
     * @type {string}
     * @memberof CreativeModerationPolicyViolations
     */
    policyLinkUrl?: string;
    /**
     * Information about the headline text that violates the specified policy.
     * @type {Array<CreativeModerationViolatingHeadlineContents>}
     * @memberof CreativeModerationPolicyViolations
     */
    violatingHeadlineContents?: Array<CreativeModerationViolatingHeadlineContents>;
    /**
     * Information about the brand logo that violates the specified policy.
     * @type {Array<CreativeModerationViolatingBrandLogoContents>}
     * @memberof CreativeModerationPolicyViolations
     */
    violatingBrandLogoContents?: Array<CreativeModerationViolatingBrandLogoContents>;
    /**
     * Information about the custom image that violates the specified policy.
     * @type {Array<CreativeModerationViolatingBrandLogoContents>}
     * @memberof CreativeModerationPolicyViolations
     */
    violatingCustomImageContents?: Array<CreativeModerationViolatingBrandLogoContents>;
}
/**
 * 
 * @export
 * @interface CreativeModerationTextEvidence
 */
export interface CreativeModerationTextEvidence {
    /**
     * The specific text determined to violate the specified policy in reviewedText
     * @type {string}
     * @memberof CreativeModerationTextEvidence
     */
    violatingText?: string;
    /**
     * 
     * @type {CreativeModerationViolatingTextPosition}
     * @memberof CreativeModerationTextEvidence
     */
    violatingTextPosition?: CreativeModerationViolatingTextPosition;
}
/**
 * 
 * @export
 * @interface CreativeModerationViolatingBrandLogoContents
 */
export interface CreativeModerationViolatingBrandLogoContents {
    /**
     * Address of the image reviewed during moderation.
     * @type {string}
     * @memberof CreativeModerationViolatingBrandLogoContents
     */
    reviewedImageUrl?: string;
    /**
     * 
     * @type {Array<CreativeModerationImageEvidences>}
     * @memberof CreativeModerationViolatingBrandLogoContents
     */
    imageEvidences?: Array<CreativeModerationImageEvidences>;
}
/**
 * 
 * @export
 * @interface CreativeModerationViolatingHeadlineContents
 */
export interface CreativeModerationViolatingHeadlineContents {
    /**
     * The specific text reviewed during moderation.
     * @type {string}
     * @memberof CreativeModerationViolatingHeadlineContents
     */
    reviewedText?: string;
    /**
     * 
     * @type {Array<CreativeModerationTextEvidence>}
     * @memberof CreativeModerationViolatingHeadlineContents
     */
    textEvidence?: Array<CreativeModerationTextEvidence>;
}
/**
 * 
 * @export
 * @interface CreativeModerationViolatingImageCrop
 */
export interface CreativeModerationViolatingImageCrop {
    /**
     * The top left X-coordinate of the content that violates the specfied policy within the image.
     * @type {number}
     * @memberof CreativeModerationViolatingImageCrop
     */
    topLeftX?: number;
    /**
     * The top left Y-coordinate of the content that violates the specfied policy within the image.
     * @type {number}
     * @memberof CreativeModerationViolatingImageCrop
     */
    topLeftY?: number;
    /**
     * The height of the content that violates the specfied policy within the image.
     * @type {number}
     * @memberof CreativeModerationViolatingImageCrop
     */
    height?: number;
    /**
     * The width of the content that violates the specfied policy within the image.
     * @type {number}
     * @memberof CreativeModerationViolatingImageCrop
     */
    width?: number;
}
/**
 * 
 * @export
 * @interface CreativeModerationViolatingTextPosition
 */
export interface CreativeModerationViolatingTextPosition {
    /**
     * Zero-based index into the text in reviewedText where the text specified in violatingText starts
     * @type {number}
     * @memberof CreativeModerationViolatingTextPosition
     */
    start?: number;
    /**
     * Zero-based index into the text in reviewedText where the text specified in violatingText ends
     * @type {number}
     * @memberof CreativeModerationViolatingTextPosition
     */
    end?: number;
}
/**
 * Optional configuration for creative preview.
 * @export
 * @interface CreativePreviewConfiguration
 */
export interface CreativePreviewConfiguration {
    /**
     * 
     * @type {CreativePreviewConfigurationSize}
     * @memberof CreativePreviewConfiguration
     */
    size?: CreativePreviewConfigurationSize;
    /**
     * The products to preview. Currently only the first product is previewable.
     * @type {Array<CreativePreviewConfigurationProducts>}
     * @memberof CreativePreviewConfiguration
     */
    products?: Array<CreativePreviewConfigurationProducts>;
    /**
     * Preview the creative as if it is on a mobile environment.
     * @type {boolean}
     * @memberof CreativePreviewConfiguration
     */
    isMobile?: boolean;
    /**
     * Preview the creative as if it is on an amazon site or third party site. The main difference is whether the preview will contain an AdChoices icon.
     * @type {boolean}
     * @memberof CreativePreviewConfiguration
     */
    isOnAmazon?: boolean;
}
/**
 * 
 * @export
 * @interface CreativePreviewConfigurationProducts
 */
export interface CreativePreviewConfigurationProducts {
    /**
     * The ASIN of the product.
     * @type {string}
     * @memberof CreativePreviewConfigurationProducts
     */
    asin?: string;
}
/**
 * The slot dimension to render the creative. Sponsored Display creatives are responsive to a limited list of width and height pairs, including 300x250, 650x130, 245x250, 414x125, 600x160, 600x300, 728x90, 980x55, 320x50, 970x250 and 270x150.
 * @export
 * @interface CreativePreviewConfigurationSize
 */
export interface CreativePreviewConfigurationSize {
    /**
     * 
     * @type {number}
     * @memberof CreativePreviewConfigurationSize
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof CreativePreviewConfigurationSize
     */
    height?: number;
}
/**
 * 
 * @export
 * @interface CreativePreviewRequest
 */
export interface CreativePreviewRequest {
    /**
     * 
     * @type {PreviewCreativeModel}
     * @memberof CreativePreviewRequest
     */
    creative: PreviewCreativeModel;
    /**
     * 
     * @type {CreativePreviewConfiguration}
     * @memberof CreativePreviewRequest
     */
    previewConfiguration: CreativePreviewConfiguration;
}
/**
 * 
 * @export
 * @interface CreativePreviewResponse
 */
export interface CreativePreviewResponse {
    /**
     * 
     * @type {string}
     * @memberof CreativePreviewResponse
     */
    previewHtml: string;
}
/**
 * @type CreativeProperties
 * @export
 */
export type CreativeProperties = CustomImageCreativeProperties | HeadlineLogoCreativeProperties;

/**
 * 
 * @export
 * @interface CreativeResponse
 */
export interface CreativeResponse {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof CreativeResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof CreativeResponse
     */
    description?: string;
    /**
     * The identifier of the creative.
     * @type {number}
     * @memberof CreativeResponse
     */
    creativeId?: number;
}
/**
 * Creative update model.
 * @export
 * @interface CreativeUpdate
 */
export interface CreativeUpdate {
    /**
     * Unique identifier of the creative.
     * @type {number}
     * @memberof CreativeUpdate
     */
    creativeId: number;
    /**
     * 
     * @type {CreativeProperties}
     * @memberof CreativeUpdate
     */
    properties: CreativeProperties;
}
/**
 * User customizable properties of a custom image creative.
 * @export
 * @interface CustomImageCreativeProperties
 */
export interface CustomImageCreativeProperties {
    /**
     * The content type of the image. For custom image creative, this field is required and must be set to the custom image enum value. |Value|Description| |------|-----------| |CUSTOM_IMAGE| The creative will display a custom image with the product description. Either both rectCustomImage and squareCustomImage are available or none of them are available will be considered as a valid Custom Image Creative|
     * @type {string}
     * @memberof CustomImageCreativeProperties
     */
    contentType?: CustomImageCreativePropertiesContentTypeEnum;
    /**
     * 
     * @type {Image}
     * @memberof CustomImageCreativeProperties
     */
    rectCustomImage?: Image;
    /**
     * 
     * @type {Image}
     * @memberof CustomImageCreativeProperties
     */
    squareCustomImage?: Image;
}

/**
    * @export
    * @enum {string}
    */
export enum CustomImageCreativePropertiesContentTypeEnum {
    CustomImage = 'CUSTOM_IMAGE'
}

/**
 * A product an advertisers wants to advertise. Recommendations will be made for specified goal products.
 * @export
 * @interface GoalProduct
 */
export interface GoalProduct {
    /**
     * Amazon Standard Identification Number
     * @type {string}
     * @memberof GoalProduct
     */
    asin: string;
}
/**
 * User customizable properties of a headline logo creative.
 * @export
 * @interface HeadlineLogoCreativeProperties
 */
export interface HeadlineLogoCreativeProperties {
    /**
     * The content type of the image. For brand logo creative, this field is optional. If this field is not set, creative API will treat it as a brand logo creative. |Value|Description| |------|-----------| |HL|The creative will display a brand logo along with the headline. Headline and logo both need to exist together. |
     * @type {string}
     * @memberof HeadlineLogoCreativeProperties
     */
    contentType?: HeadlineLogoCreativePropertiesContentTypeEnum;
    /**
     * A marketing phrase to display on the ad. This field is optional and mutable. A headline must be specified along with a brandLogo, otherwise both fields must be set to null. Maximum number of characters allowed is 50.
     * @type {string}
     * @memberof HeadlineLogoCreativeProperties
     */
    headline?: string;
    /**
     * 
     * @type {Image}
     * @memberof HeadlineLogoCreativeProperties
     */
    brandLogo?: Image;
}

/**
    * @export
    * @enum {string}
    */
export enum HeadlineLogoCreativePropertiesContentTypeEnum {
    Hl = 'HL'
}

/**
 * This field denotes image which is displayed on the ad. They can either be a brand logo or a custom image. This field is optional and mutable. A brand logo must be specified along with a headline, otherwise both fields must be set to null. For custom image both rectCustomImage and squareCustomImage should use the same asset id and asset version. Specific restrictions based on the Image type are listed in the following table. |Image type|Maximum file size|Minimum width|Minimum height|Accepted file formats| |------|-----------|-----------|-----------|-----------| |Custom Image|5MB|1200|628|JPEG, JPG, PNG, GIF| |Brand Logo|1MB|600|100|JPEG, JPG, PNG| Note: For square custom images the cropped image should be 628x628 at minimum.
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * The unique identifier of the image asset.
     * @type {string}
     * @memberof Image
     */
    assetId: string;
    /**
     * The identifier of the particular image assetversion.
     * @type {string}
     * @memberof Image
     */
    assetVersion: string;
    /**
     * 
     * @type {ImageCroppingCoordinates}
     * @memberof Image
     */
    croppingCoordinates?: ImageCroppingCoordinates;
}
/**
 * Optional cropping coordinates to apply to the image.
 * @export
 * @interface ImageCroppingCoordinates
 */
export interface ImageCroppingCoordinates {
    /**
     * Pixel distance from the top edge of the cropping zone to the top edge of the original image.
     * @type {number}
     * @memberof ImageCroppingCoordinates
     */
    top: number;
    /**
     * Pixel distance from the left edge of the cropping zone to the left edge of the original image.
     * @type {number}
     * @memberof ImageCroppingCoordinates
     */
    left: number;
    /**
     * Pixel width of the cropping zone.
     * @type {number}
     * @memberof ImageCroppingCoordinates
     */
    width: number;
    /**
     * Pixel height of the cropping zone.
     * @type {number}
     * @memberof ImageCroppingCoordinates
     */
    height: number;
}
/**
 * Locale string as described in [BCP 47](https://tools.ietf.org/html/bcp47). For example, `en-US`
 * @export
 * @enum {string}
 */

export enum Locale {
    EnUs = 'en-US',
    EsMx = 'es-MX',
    ZhCn = 'zh-CN',
    EsEs = 'es-ES',
    ItIt = 'it-IT',
    FrFr = 'fr-FR',
    FrCa = 'fr-CA',
    DeDe = 'de-DE',
    JaJp = 'ja-JP',
    KoKr = 'ko-KR',
    EnGb = 'en-GB',
    EnCa = 'en-CA',
    HiIn = 'hi-IN',
    EnIn = 'en-IN',
    EnDe = 'en-DE',
    EnEs = 'en-ES',
    EnFr = 'en-FR',
    EnIt = 'en-IT',
    EnJp = 'en-JP',
    EnAe = 'en-AE',
    ArAe = 'ar-AE'
}

/**
 * The error response object.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof ModelError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface NegativeTargetingClause
 */
export interface NegativeTargetingClause {
    /**
     * 
     * @type {string}
     * @memberof NegativeTargetingClause
     */
    state?: NegativeTargetingClauseStateEnum;
    /**
     * 
     * @type {number}
     * @memberof NegativeTargetingClause
     */
    targetId?: number;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof NegativeTargetingClause
     */
    adGroupId?: number;
    /**
     * 
     * @type {string}
     * @memberof NegativeTargetingClause
     */
    expressionType?: NegativeTargetingClauseExpressionTypeEnum;
    /**
     * The expression to negatively match against. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.
     * @type {Array<NegativeTargetingExpression>}
     * @memberof NegativeTargetingClause
     */
    expression?: Array<NegativeTargetingExpression>;
    /**
     * The resolved negative targeting expression.
     * @type {Array<NegativeTargetingExpression>}
     * @memberof NegativeTargetingClause
     */
    resolvedExpression?: Array<NegativeTargetingExpression>;
}

/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface NegativeTargetingClauseAllOf
 */
export interface NegativeTargetingClauseAllOf {
    /**
     * 
     * @type {number}
     * @memberof NegativeTargetingClauseAllOf
     */
    targetId?: number;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof NegativeTargetingClauseAllOf
     */
    adGroupId?: number;
    /**
     * 
     * @type {string}
     * @memberof NegativeTargetingClauseAllOf
     */
    expressionType?: NegativeTargetingClauseAllOfExpressionTypeEnum;
    /**
     * The expression to negatively match against. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.
     * @type {Array<NegativeTargetingExpression>}
     * @memberof NegativeTargetingClauseAllOf
     */
    expression?: Array<NegativeTargetingExpression>;
    /**
     * The resolved negative targeting expression.
     * @type {Array<NegativeTargetingExpression>}
     * @memberof NegativeTargetingClauseAllOf
     */
    resolvedExpression?: Array<NegativeTargetingExpression>;
}

/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseAllOfExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface NegativeTargetingClauseEx
 */
export interface NegativeTargetingClauseEx {
    /**
     * 
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    targetId?: number;
    /**
     * 
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    adGroupId?: number;
    /**
     * 
     * @type {string}
     * @memberof NegativeTargetingClauseEx
     */
    state?: NegativeTargetingClauseExStateEnum;
    /**
     * 
     * @type {string}
     * @memberof NegativeTargetingClauseEx
     */
    expressionType?: NegativeTargetingClauseExExpressionTypeEnum;
    /**
     * The expression to negatively match against. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.
     * @type {Array<NegativeTargetingClauseExExpression>}
     * @memberof NegativeTargetingClauseEx
     */
    expression?: Array<NegativeTargetingClauseExExpression>;
    /**
     * The status of the target.
     * @type {string}
     * @memberof NegativeTargetingClauseEx
     */
    servingStatus?: NegativeTargetingClauseExServingStatusEnum;
    /**
     * Epoch date the target was created.
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    creationDate?: number;
    /**
     * Epoch date of the last update to any property associated with the target.
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    lastUpdatedDate?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseExStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseExExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}
/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseExServingStatusEnum {
    AdvertiserStatusEnabled = 'ADVERTISER_STATUS_ENABLED',
    StatusUnavailable = 'STATUS_UNAVAILABLE',
    AdvertiserPaused = 'ADVERTISER_PAUSED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    AdvertiserPaymentFailure = 'ADVERTISER_PAYMENT_FAILURE',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    PendingStartDate = 'PENDING_START_DATE',
    Ended = 'ENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupStatusEnabled = 'AD_GROUP_STATUS_ENABLED',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    AdGroupIncomplete = 'AD_GROUP_INCOMPLETE',
    AdGroupLowBid = 'AD_GROUP_LOW_BID',
    TargetStatusLive = 'TARGET_STATUS_LIVE',
    TargetStatusPaused = 'TARGET_STATUS_PAUSED',
    TargetStatusArchived = 'TARGET_STATUS_ARCHIVED'
}

/**
 * 
 * @export
 * @interface NegativeTargetingClauseExExpression
 */
export interface NegativeTargetingClauseExExpression {
    /**
     * The intent type. See the [targeting topic](https://advertising.amazon.com/help#GQCBASRVERXSARL3) in the Amazon Ads support center for more information.
     * @type {string}
     * @memberof NegativeTargetingClauseExExpression
     */
    type?: NegativeTargetingClauseExExpressionTypeEnum;
    /**
     * The value to be negatively targeted. Used only in manual expressions.
     * @type {string}
     * @memberof NegativeTargetingClauseExExpression
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseExExpressionTypeEnum {
    AsinSameAs = 'asinSameAs',
    AsinBrandSameAs = 'asinBrandSameAs'
}

/**
 * 
 * @export
 * @interface NegativeTargetingExpression
 */
export interface NegativeTargetingExpression {
    /**
     * The intent type. See the [targeting topic](https://advertising.amazon.com/help#GQCBASRVERXSARL3) in the Amazon Ads support center for more information.
     * @type {string}
     * @memberof NegativeTargetingExpression
     */
    type?: NegativeTargetingExpressionTypeEnum;
    /**
     * The value to be negatively targeted. Used only in manual expressions.
     * @type {string}
     * @memberof NegativeTargetingExpression
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingExpressionTypeEnum {
    AsinSameAs = 'asinSameAs',
    AsinBrandSameAs = 'asinBrandSameAs'
}

/**
 * JSONPatch request document.
 * @export
 * @interface PatchDocument
 */
export interface PatchDocument {
    /**
     * The JSONPatch operation type.
     * @type {string}
     * @memberof PatchDocument
     */
    op: PatchDocumentOpEnum;
    /**
     * A path constructed from the JSON object to be updated.
     * @type {string}
     * @memberof PatchDocument
     */
    path: string;
    /**
     * The value used by the operation specified in the `op` field.
     * @type {string | number | boolean | Array<any> | object}
     * @memberof PatchDocument
     */
    value?: string | number | boolean | Array<any> | object;
}

/**
    * @export
    * @enum {string}
    */
export enum PatchDocumentOpEnum {
    Add = 'add',
    Remove = 'remove',
    Replace = 'replace'
}

/**
 * JSONPatch request request object.
 * @export
 * @interface PatchRequest
 */
export interface PatchRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchRequest
     */
    id: string;
    /**
     * 
     * @type {Array<PatchDocument>}
     * @memberof PatchRequest
     */
    request: Array<PatchDocument>;
}
/**
 * Creative model for preview.
 * @export
 * @interface PreviewCreativeModel
 */
export interface PreviewCreativeModel {
    /**
     * 
     * @type {CreativeProperties}
     * @memberof PreviewCreativeModel
     */
    properties?: CreativeProperties;
}
/**
 * 
 * @export
 * @interface ProductAd
 */
export interface ProductAd {
    /**
     * The state of the campaign associated with the product ad.
     * @type {string}
     * @memberof ProductAd
     */
    state?: ProductAdStateEnum;
    /**
     * The identifier of the product ad.
     * @type {number}
     * @memberof ProductAd
     */
    adId?: number;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof ProductAd
     */
    adGroupId?: number;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof ProductAd
     */
    campaignId?: number;
    /**
     * The ASIN of the product advertised by the product ad.
     * @type {string}
     * @memberof ProductAd
     */
    asin?: string;
    /**
     * The SKU of the product advertised by the product ad.
     * @type {string}
     * @memberof ProductAd
     */
    sku?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ProductAdStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface ProductAdAllOf
 */
export interface ProductAdAllOf {
    /**
     * The identifier of the product ad.
     * @type {number}
     * @memberof ProductAdAllOf
     */
    adId?: number;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof ProductAdAllOf
     */
    adGroupId?: number;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof ProductAdAllOf
     */
    campaignId?: number;
    /**
     * The ASIN of the product advertised by the product ad.
     * @type {string}
     * @memberof ProductAdAllOf
     */
    asin?: string;
    /**
     * The SKU of the product advertised by the product ad.
     * @type {string}
     * @memberof ProductAdAllOf
     */
    sku?: string;
}
/**
 * 
 * @export
 * @interface ProductAdResponse
 */
export interface ProductAdResponse {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof ProductAdResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof ProductAdResponse
     */
    description?: string;
    /**
     * The identifier of the ad.
     * @type {number}
     * @memberof ProductAdResponse
     */
    adId?: number;
}
/**
 * 
 * @export
 * @interface ProductAdResponseEx
 */
export interface ProductAdResponseEx {
    /**
     * The identifier of the ad.
     * @type {number}
     * @memberof ProductAdResponseEx
     */
    adId?: number;
    /**
     * The identifier of the ad group associated with the ad.
     * @type {number}
     * @memberof ProductAdResponseEx
     */
    adGroupId?: number;
    /**
     * The identifier of the campaign associated with the ad.
     * @type {number}
     * @memberof ProductAdResponseEx
     */
    campaignId?: number;
    /**
     * The ASIN of the product being advertised.
     * @type {string}
     * @memberof ProductAdResponseEx
     */
    asin?: string;
    /**
     * The SKU of the product being advertised.
     * @type {string}
     * @memberof ProductAdResponseEx
     */
    sku?: string;
    /**
     * The state of the product ad.
     * @type {string}
     * @memberof ProductAdResponseEx
     */
    state?: ProductAdResponseExStateEnum;
    /**
     * The status of the product ad.
     * @type {string}
     * @memberof ProductAdResponseEx
     */
    servingStatus?: ProductAdResponseExServingStatusEnum;
    /**
     * Epoch date the product ad was created.
     * @type {number}
     * @memberof ProductAdResponseEx
     */
    creationDate?: number;
    /**
     * Epoch date of the last update to any property associated with the product ad.
     * @type {number}
     * @memberof ProductAdResponseEx
     */
    lastUpdatedDate?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ProductAdResponseExStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum ProductAdResponseExServingStatusEnum {
    AdvertiserStatusEnabled = 'ADVERTISER_STATUS_ENABLED',
    StatusUnavailable = 'STATUS_UNAVAILABLE',
    AdvertiserPaused = 'ADVERTISER_PAUSED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    AdvertiserPaymentFailure = 'ADVERTISER_PAYMENT_FAILURE',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    PendingStartDate = 'PENDING_START_DATE',
    Ended = 'ENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupStatusEnabled = 'AD_GROUP_STATUS_ENABLED',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    AdGroupIncomplete = 'AD_GROUP_INCOMPLETE',
    AdGroupLowBid = 'AD_GROUP_LOW_BID',
    AdStatusLive = 'AD_STATUS_LIVE',
    AdStatusPaused = 'AD_STATUS_PAUSED',
    AdStatusArchived = 'AD_STATUS_ARCHIVED',
    MissingImage = 'MISSING_IMAGE',
    MissingDecoration = 'MISSING_DECORATION',
    NotBuyable = 'NOT_BUYABLE',
    NotInBuybox = 'NOT_IN_BUYBOX',
    OutOfStock = 'OUT_OF_STOCK',
    NotInPolicy = 'NOT_IN_POLICY'
}

/**
 * A recommended product to target ads on
 * @export
 * @interface ProductRecommendation
 */
export interface ProductRecommendation {
    /**
     * Amazon Standard Identification Number
     * @type {string}
     * @memberof ProductRecommendation
     */
    asin?: string;
    /**
     * A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
     * @type {number}
     * @memberof ProductRecommendation
     */
    rank?: number;
}
/**
 * Signifies a type of recommendation
 * @export
 * @enum {string}
 */

export enum RecommendationType {
    Product = 'PRODUCT'
}

/**
 * 
 * @export
 * @interface ReportRequest
 */
export interface ReportRequest {
    /**
     * Date in YYYYMMDD format. The report contains only metrics generated on the specified date. Note that the time zone used for date calculation is the one associated with the profile used to make the request.
     * @type {string}
     * @memberof ReportRequest
     */
    reportDate?: string;
    /**
     * 
     * @type {TacticReport}
     * @memberof ReportRequest
     */
    tactic?: TacticReport;
    /**
     * 
     * @type {Segment}
     * @memberof ReportRequest
     */
    segment?: Segment;
    /**
     * A comma-separated list of the metrics to be included in the report.   Each report type supports different metrics. **To understand supported metrics for each report type, see [Report types](/API/docs/en-us/concepts/reporting/report-types).**  **Note**: Campaigns with vCPM costType should use view+click based metrics (viewAttributedConversions14d, viewAttributedDetailPageView14d, viewAttributedSales14d, viewAttributedUnitsOrdered14d, viewImpressions).  **Note**: Detail page view metrics (attributedDetailPageView14d, viewAttributedDetailPageView14d) have an SLA of 3 days.  **Tip**: Use new-to-brand (NTB) metrics to calculate how efficient your campaigns are at driving new shoppers:    1. Percentage of NTB orders = attributedOrdersNewToBrand14d / attributedConversions14d    2. Percentage NTB sales = attributedSalesNewToBrand14d / attributedSales14d    3. Percentage NTB units = attributedUnitsOrderedNewToBrand14d / attributedUnitsOrdered14d    4. NTB order rate = attributedOrdersNewToBrand14 / impressions 
     * @type {string}
     * @memberof ReportRequest
     */
    metrics?: string;
}
/**
 * 
 * @export
 * @interface ReportResponse
 */
export interface ReportResponse {
    /**
     * The identifier of the report.
     * @type {string}
     * @memberof ReportResponse
     */
    reportId?: string;
    /**
     * The type of report requested.
     * @type {string}
     * @memberof ReportResponse
     */
    recordType?: ReportResponseRecordTypeEnum;
    /**
     * The build status of the report.
     * @type {string}
     * @memberof ReportResponse
     */
    status?: ReportResponseStatusEnum;
    /**
     * A human-readable description of the current status.
     * @type {string}
     * @memberof ReportResponse
     */
    statusDetails?: string;
    /**
     * The URI location of the report.
     * @type {string}
     * @memberof ReportResponse
     */
    location?: string;
    /**
     * The size of the report file, in bytes.
     * @type {number}
     * @memberof ReportResponse
     */
    fileSize?: number;
    /**
     * Epoch date of the expiration of the URI in the `location` property.
     * @type {number}
     * @memberof ReportResponse
     */
    expiration?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ReportResponseRecordTypeEnum {
    Campaign = 'CAMPAIGN',
    AdGroup = 'AD_GROUP',
    ProductAd = 'PRODUCT_AD'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportResponseStatusEnum {
    InProgress = 'IN_PROGRESS',
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * Determines what the recommended bids will be optimized for.   |Name|CostType|Supported Tactics|Description| |----|----------|-----------|-----------| |clicks|cpc|T00020 T00030|Optimize for page visits| |conversions|cpc|T00020 T00030|Optimize for conversion| |reach|vcpm|T00020 T00030|Optimize for viewable impressions. We recommend starting with $5 USD bids for each target to begin testing with this awareness strategy. $1 is the minimum bid for vCPM.|
 * @export
 * @enum {string}
 */

export enum SDBidOptimizationV32 {
    Clicks = 'clicks',
    Conversions = 'conversions',
    Reach = 'reach'
}

/**
 * A recommended bid range to use for a target.
 * @export
 * @interface SDBidRecommendationV31
 */
export interface SDBidRecommendationV31 {
    /**
     * The lowest recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDBidRecommendationV31
     */
    rangeLower: number;
    /**
     * The highest recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDBidRecommendationV31
     */
    rangeUpper: number;
    /**
     * The recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDBidRecommendationV31
     */
    recommended: number;
}
/**
 * A recommended category to target ads on
 * @export
 * @interface SDCategoryRecommendation
 */
export interface SDCategoryRecommendation {
    /**
     * The category identifier
     * @type {number}
     * @memberof SDCategoryRecommendation
     */
    category?: number;
    /**
     * The category name
     * @type {string}
     * @memberof SDCategoryRecommendation
     */
    name?: string;
    /**
     *  The path of the category within the category catalogue
     * @type {Array<string>}
     * @memberof SDCategoryRecommendation
     */
    path?: Array<string>;
    /**
     * 
     * @type {SDCategoryRecommendationTargetableAsinCountRange}
     * @memberof SDCategoryRecommendation
     */
    targetableAsinCountRange?: SDCategoryRecommendationTargetableAsinCountRange;
    /**
     * A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
     * @type {number}
     * @memberof SDCategoryRecommendation
     */
    rank?: number;
}
/**
 * The range of ASINs available within the category catalogue. If no targetable ASIN counts are available then the targetableAsinCountRange value will be null without any properties.
 * @export
 * @interface SDCategoryRecommendationTargetableAsinCountRange
 */
export interface SDCategoryRecommendationTargetableAsinCountRange {
    /**
     * 
     * @type {number}
     * @memberof SDCategoryRecommendationTargetableAsinCountRange
     */
    rangeLower?: number;
    /**
     * 
     * @type {number}
     * @memberof SDCategoryRecommendationTargetableAsinCountRange
     */
    rangeUpper?: number;
}
/**
 * Determines what performance metric the bid recommendations will be optimized for. |Name|Supported Tactics|Description| |----|----------|-----------| |cpc|T00020 T00030|The bid recommendations will be optimized for clicks triggered by the ad.| |vcpm|T00020 T00030|The bid recommendations will be optimized for viewed impressions triggered by the ad. We recommend starting with $5 USD bids for each target to begin testing with this awareness strategy. $1 is the minimum bid for vCPM.|
 * @export
 * @enum {string}
 */

export enum SDCostTypeV31 {
    Cpc = 'cpc',
    Vcpm = 'vcpm'
}

/**
 * 
 * @export
 * @interface SDErrorResponse
 */
export interface SDErrorResponse {
    /**
     * The HTTP status code of the response
     * @type {string}
     * @memberof SDErrorResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof SDErrorResponse
     */
    details?: string;
}
/**
 * A product an advertisers wants to advertise. Recommendations will be made for specified goal products.
 * @export
 * @interface SDGoalProduct
 */
export interface SDGoalProduct {
    /**
     * Amazon Standard Identification Number
     * @type {string}
     * @memberof SDGoalProduct
     */
    asin: string;
}
/**
 * A recommended product to target ads on
 * @export
 * @interface SDProductRecommendation
 */
export interface SDProductRecommendation {
    /**
     * Amazon Standard Identification Number
     * @type {string}
     * @memberof SDProductRecommendation
     */
    asin?: string;
    /**
     * A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
     * @type {number}
     * @memberof SDProductRecommendation
     */
    rank?: number;
}
/**
 * Signifies a type of recommendation
 * @export
 * @enum {string}
 */

export enum SDRecommendationType {
    Product = 'PRODUCT'
}

/**
 * Signifies a type of recommendation
 * @export
 * @enum {string}
 */

export enum SDRecommendationTypeV31 {
    Product = 'PRODUCT',
    Category = 'CATEGORY'
}

/**
 * The advertising tactic associated with the campaign. The following table lists available tactic names: |Tactic Name|Type|Description|         |-----------|-----|-----------|         |T00020 &nbsp;    |Products&nbsp;| Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.
 * @export
 * @enum {string}
 */

export enum SDTactic {
    T00020 = 'T00020'
}

/**
 * The advertising tactic associated with the campaign. The following table lists available tactic names: |Tactic Name|Type|Description|         |-----------|-----|-----------|         |T00020 &nbsp;    |Products&nbsp;| Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.|         |T00030&nbsp;|Audiences &nbsp;|Select individual audiences to show your ads.
 * @export
 * @enum {string}
 */

export enum SDTacticV31 {
    T00020 = 'T00020',
    T00030 = 'T00030'
}

/**
 * @type SDTargetExpressionV31
 * @export
 */
export type SDTargetExpressionV31 = SDTargetingPredicateNestedV31 | SDTargetingPredicateV31;

/**
 * Request for targeting bid recommendations.
 * @export
 * @interface SDTargetingBidRecommendationsRequestV31
 */
export interface SDTargetingBidRecommendationsRequestV31 {
    /**
     * A list of products to tailor bid recommendations for category and audience based targeting clauses.
     * @type {Array<SDGoalProduct>}
     * @memberof SDTargetingBidRecommendationsRequestV31
     */
    products?: Array<SDGoalProduct>;
    /**
     * A list of targeting clauses to receive bid recommendations for.
     * @type {Array<SDTargetingBidRecommendationsRequestV31TargetingClauses>}
     * @memberof SDTargetingBidRecommendationsRequestV31
     */
    targetingClauses: Array<SDTargetingBidRecommendationsRequestV31TargetingClauses>;
}
/**
 * 
 * @export
 * @interface SDTargetingBidRecommendationsRequestV31TargetingClauses
 */
export interface SDTargetingBidRecommendationsRequestV31TargetingClauses {
    /**
     * 
     * @type {SDTargetingClauseV31}
     * @memberof SDTargetingBidRecommendationsRequestV31TargetingClauses
     */
    targetingClause: SDTargetingClauseV31;
}
/**
 * Request for targeting bid recommendations.
 * @export
 * @interface SDTargetingBidRecommendationsRequestV32
 */
export interface SDTargetingBidRecommendationsRequestV32 {
    /**
     * A list of products to tailor bid recommendations for category and audience based targeting clauses.
     * @type {Array<SDGoalProduct>}
     * @memberof SDTargetingBidRecommendationsRequestV32
     */
    products?: Array<SDGoalProduct>;
    /**
     * 
     * @type {SDBidOptimizationV32}
     * @memberof SDTargetingBidRecommendationsRequestV32
     */
    bidOptimization: SDBidOptimizationV32;
    /**
     * 
     * @type {SDCostTypeV31}
     * @memberof SDTargetingBidRecommendationsRequestV32
     */
    costType: SDCostTypeV31;
    /**
     * A list of targeting clauses to receive bid recommendations for.
     * @type {Array<SDTargetingBidRecommendationsRequestV31TargetingClauses>}
     * @memberof SDTargetingBidRecommendationsRequestV32
     */
    targetingClauses: Array<SDTargetingBidRecommendationsRequestV31TargetingClauses>;
}
/**
 * Failed bid recommendation response.
 * @export
 * @interface SDTargetingBidRecommendationsResponseItemFailureV31
 */
export interface SDTargetingBidRecommendationsResponseItemFailureV31 {
    /**
     * The HTTP status code of this item.
     * @type {string}
     * @memberof SDTargetingBidRecommendationsResponseItemFailureV31
     */
    code: string;
    /**
     * A human-readable description of this item on error.
     * @type {string}
     * @memberof SDTargetingBidRecommendationsResponseItemFailureV31
     */
    details: string;
}
/**
 * A recommended bid range to use for a target.
 * @export
 * @interface SDTargetingBidRecommendationsResponseItemSuccessV31
 */
export interface SDTargetingBidRecommendationsResponseItemSuccessV31 {
    /**
     * The HTTP status code of this item.
     * @type {string}
     * @memberof SDTargetingBidRecommendationsResponseItemSuccessV31
     */
    code: string;
    /**
     * The lowest recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDTargetingBidRecommendationsResponseItemSuccessV31
     */
    rangeLower: number;
    /**
     * The highest recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDTargetingBidRecommendationsResponseItemSuccessV31
     */
    rangeUpper: number;
    /**
     * The recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDTargetingBidRecommendationsResponseItemSuccessV31
     */
    recommended: number;
}
/**
 * Success response for corresponding targeting clause on the request.
 * @export
 * @interface SDTargetingBidRecommendationsResponseItemSuccessV31AllOf
 */
export interface SDTargetingBidRecommendationsResponseItemSuccessV31AllOf {
    /**
     * The HTTP status code of this item.
     * @type {string}
     * @memberof SDTargetingBidRecommendationsResponseItemSuccessV31AllOf
     */
    code?: string;
}
/**
 * Response to a request for targeting bid recommendations.
 * @export
 * @interface SDTargetingBidRecommendationsResponseV31
 */
export interface SDTargetingBidRecommendationsResponseV31 {
    /**
     * 
     * @type {SDCostTypeV31}
     * @memberof SDTargetingBidRecommendationsResponseV31
     */
    costType: SDCostTypeV31;
    /**
     * 
     * @type {Array<SDTargetingBidRecommendationsResponseItemSuccessV31 | SDTargetingBidRecommendationsResponseItemFailureV31>}
     * @memberof SDTargetingBidRecommendationsResponseV31
     */
    bidRecommendations: Array<SDTargetingBidRecommendationsResponseItemSuccessV31 | SDTargetingBidRecommendationsResponseItemFailureV31>;
}
/**
 * Response to a request for targeting bid recommendations.
 * @export
 * @interface SDTargetingBidRecommendationsResponseV32
 */
export interface SDTargetingBidRecommendationsResponseV32 {
    /**
     * 
     * @type {SDBidOptimizationV32}
     * @memberof SDTargetingBidRecommendationsResponseV32
     */
    bidOptimization: SDBidOptimizationV32;
    /**
     * 
     * @type {SDCostTypeV31}
     * @memberof SDTargetingBidRecommendationsResponseV32
     */
    costType: SDCostTypeV31;
    /**
     * 
     * @type {Array<SDTargetingBidRecommendationsResponseItemSuccessV31 | SDTargetingBidRecommendationsResponseItemFailureV31>}
     * @memberof SDTargetingBidRecommendationsResponseV32
     */
    bidRecommendations: Array<SDTargetingBidRecommendationsResponseItemSuccessV31 | SDTargetingBidRecommendationsResponseItemFailureV31>;
}
/**
 * The targeting clause
 * @export
 * @interface SDTargetingClauseV31
 */
export interface SDTargetingClauseV31 {
    /**
     * Tactic T00020 ad groups only allow manual targeting.
     * @type {string}
     * @memberof SDTargetingClauseV31
     */
    expressionType: SDTargetingClauseV31ExpressionTypeEnum;
    /**
     * The targeting expression to match against.  ------- Applicable to Product targeting (T00020) ------- * A \'TargetingExpression\' in a Product targeting Campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to Audience targeting (T00030) ------- * A \'TargetingExpression\' in an Audience Campaign can only contain \'TargetingPredicateNested\' components. * **Future** To exclude parts of an audience, specify a TargetingPredicateNested component that contains a negative TargetingPredicate type.
     * @type {Array<SDTargetExpressionV31>}
     * @memberof SDTargetingClauseV31
     */
    expression: Array<SDTargetExpressionV31>;
}

/**
    * @export
    * @enum {string}
    */
export enum SDTargetingClauseV31ExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * A predicate to match against inside the TargetingPredicateNested component (only applicable to Audience targeting - T00030).  * All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system. * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the â€˜betweenâ€™ strings to construct a targeting expression the format of the string is â€˜double-doubleâ€™ where the first double must be smaller than the second double. Prices are not inclusive. * The exactProduct, similarProduct, and negative types do not utilize the value field. * The only type currently applicable to Amazon Audiences targeting is \'audienceSameAs\'. * **Future** A \'negative\' TargetingPredicateBase will exclude that TargetingPredicateNested from the overall audience.
 * @export
 * @interface SDTargetingPredicateBaseV31
 */
export interface SDTargetingPredicateBaseV31 {
    /**
     * 
     * @type {string}
     * @memberof SDTargetingPredicateBaseV31
     */
    type: SDTargetingPredicateBaseV31TypeEnum;
    /**
     * The value to be targeted.
     * @type {string}
     * @memberof SDTargetingPredicateBaseV31
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SDTargetingPredicateBaseV31TypeEnum {
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    SimilarProduct = 'similarProduct',
    ExactProduct = 'exactProduct',
    AsinIsPrimeShippingEligible = 'asinIsPrimeShippingEligible',
    AsinAgeRangeSameAs = 'asinAgeRangeSameAs',
    AsinGenreSameAs = 'asinGenreSameAs',
    AudienceSameAs = 'audienceSameAs',
    Lookback = 'lookback'
}

/**
 * A behavioral event and list of targeting predicates that represents an Audience to target (only applicable to Audience targeting - T00030).  * For manual ASIN-grain targeting, the value array must contain only, \'exactProduct\', \'similarProduct\', \'releatedProduct\' and \'lookback\' TargetingPredicateBase components. The \'lookback\' is mandatory and the value should be set to \'7\', \'14\', \'30\', \'60\', \'90\', \'180\' or \'365\'. * For manual Category-grain targeting, the value array must contain a \'lookback\' and \'asinCategorySameAs\' TargetingPredicateBase component, which can be further refined with optional brand, price, star-rating and shipping eligibility refinements. The \'lookback\' is mandatory and the value should be set to \'7\', \'14\', \'30\', \'60\', \'90\', \'180\' or \'365\'. * For manual Category-grain targeting, the value array must contain a \'lookback\' and \'asinCategorySameAs\' TargetingPredicateBase component, which can be further refined with optional brand, price, star-rating and shipping eligibility refinements. * For Amazon Audiences targeting, the TargetingPredicateNested type should be set to \'audience\' and the value array should include one TargetingPredicateBase component with type set to \'audienceSameAs\'. * **Future** For manual Category-grain targeting, adding a \'negative\' TargetingPredicateBase will exclude that TargetingPredicateNested from the overall audience.
 * @export
 * @interface SDTargetingPredicateNestedV31
 */
export interface SDTargetingPredicateNestedV31 {
    /**
     * 
     * @type {string}
     * @memberof SDTargetingPredicateNestedV31
     */
    type: SDTargetingPredicateNestedV31TypeEnum;
    /**
     * 
     * @type {Array<SDTargetingPredicateBaseV31>}
     * @memberof SDTargetingPredicateNestedV31
     */
    value: Array<SDTargetingPredicateBaseV31>;
}

/**
    * @export
    * @enum {string}
    */
export enum SDTargetingPredicateNestedV31TypeEnum {
    Views = 'views',
    Audience = 'audience',
    Purchases = 'purchases'
}

/**
 * A predicate to match against in the Targeting Expression (only applicable to Product targeting - T00020).  * All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system. * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the â€˜betweenâ€™ strings to construct a targeting expression the format of the string is â€˜double-doubleâ€™ where the first double must be smaller than the second double. Prices are not inclusive.
 * @export
 * @interface SDTargetingPredicateV31
 */
export interface SDTargetingPredicateV31 {
    /**
     * 
     * @type {string}
     * @memberof SDTargetingPredicateV31
     */
    type: SDTargetingPredicateV31TypeEnum;
    /**
     * The value to be targeted.
     * @type {string}
     * @memberof SDTargetingPredicateV31
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SDTargetingPredicateV31TypeEnum {
    AsinSameAs = 'asinSameAs',
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    AsinIsPrimeShippingEligible = 'asinIsPrimeShippingEligible',
    AsinAgeRangeSameAs = 'asinAgeRangeSameAs',
    AsinGenreSameAs = 'asinGenreSameAs'
}

/**
 * A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.
 * @export
 * @interface SDTargetingRecommendations
 */
export interface SDTargetingRecommendations {
    /**
     * List of recommended product targets
     * @type {Array<SDProductRecommendation>}
     * @memberof SDTargetingRecommendations
     */
    products?: Array<SDProductRecommendation>;
}
/**
 * Request for targeting recommendations
 * @export
 * @interface SDTargetingRecommendationsRequest
 */
export interface SDTargetingRecommendationsRequest {
    /**
     * 
     * @type {SDTactic}
     * @memberof SDTargetingRecommendationsRequest
     */
    tactic: SDTactic;
    /**
     * A list of products for which to get targeting recommendations
     * @type {Array<SDGoalProduct>}
     * @memberof SDTargetingRecommendationsRequest
     */
    products: Array<SDGoalProduct>;
    /**
     * A filter to indicate which types of recommendations to request.
     * @type {Array<SDRecommendationType>}
     * @memberof SDTargetingRecommendationsRequest
     */
    typeFilter: Array<SDRecommendationType>;
}
/**
 * Request for targeting recommendations
 * @export
 * @interface SDTargetingRecommendationsRequestV31
 */
export interface SDTargetingRecommendationsRequestV31 {
    /**
     * 
     * @type {SDTacticV31}
     * @memberof SDTargetingRecommendationsRequestV31
     */
    tactic: SDTacticV31;
    /**
     * A list of products for which to get targeting recommendations
     * @type {Array<SDGoalProduct>}
     * @memberof SDTargetingRecommendationsRequestV31
     */
    products: Array<SDGoalProduct>;
    /**
     * A filter to indicate which types of recommendations to request.
     * @type {Array<SDRecommendationTypeV31>}
     * @memberof SDTargetingRecommendationsRequestV31
     */
    typeFilter: Array<SDRecommendationTypeV31>;
}
/**
 * Response to a request for targeting recommendations
 * @export
 * @interface SDTargetingRecommendationsResponse
 */
export interface SDTargetingRecommendationsResponse {
    /**
     * 
     * @type {SDTargetingRecommendations}
     * @memberof SDTargetingRecommendationsResponse
     */
    recommendations?: SDTargetingRecommendations;
}
/**
 * Response to a request for targeting recommendations
 * @export
 * @interface SDTargetingRecommendationsResponseV31
 */
export interface SDTargetingRecommendationsResponseV31 {
    /**
     * 
     * @type {SDTargetingRecommendationsV31}
     * @memberof SDTargetingRecommendationsResponseV31
     */
    recommendations?: SDTargetingRecommendationsV31;
}
/**
 * 
 * @export
 * @interface SDTargetingRecommendationsV31
 */
export interface SDTargetingRecommendationsV31 {
    /**
     * List of recommended product targets
     * @type {Array<SDProductRecommendation>}
     * @memberof SDTargetingRecommendationsV31
     */
    products?: Array<SDProductRecommendation>;
    /**
     * List of recommended category targets
     * @type {Array<SDCategoryRecommendation>}
     * @memberof SDTargetingRecommendationsV31
     */
    categories?: Array<SDCategoryRecommendation>;
}
/**
 * 
 * @export
 * @interface SDTargetingRecommendationsV31AllOf
 */
export interface SDTargetingRecommendationsV31AllOf {
    /**
     * List of recommended category targets
     * @type {Array<SDCategoryRecommendation>}
     * @memberof SDTargetingRecommendationsV31AllOf
     */
    categories?: Array<SDCategoryRecommendation>;
}
/**
 * Optional. A dimension used to further segment certain types of reports.  Note: matchedTarget reports only return targets that have generated at least one click. | Dimension | Report types | Tactics | Metrics | Description | |---------|------------------|-------------|-------------|------------| | matchedTarget | campaigns, adGroups, targets | T00020, T00030 | Existing metrics for each report type are accepted. |  Segments a report based on the ASIN of the product page where the ad appeared.|
 * @export
 * @enum {string}
 */

export enum Segment {
    MatchedTarget = 'matchedTarget'
}

/**
 * 
 * @export
 * @interface SnapshotRequest
 */
export interface SnapshotRequest {
    /**
     * Optional. Restricts results to entities with state within the specified comma-separated list. Default behavior is to include enabled and paused.
     * @type {string}
     * @memberof SnapshotRequest
     */
    stateFilter?: SnapshotRequestStateFilterEnum;
    /**
     * 
     * @type {TacticFilter}
     * @memberof SnapshotRequest
     */
    tacticFilter?: TacticFilter;
}

/**
    * @export
    * @enum {string}
    */
export enum SnapshotRequestStateFilterEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived',
    Enabledpaused = 'enabled,paused',
    Enabledarchived = 'enabled,archived',
    Enabledpausedarchived = 'enabled,paused,archived'
}

/**
 * 
 * @export
 * @interface SnapshotResponse
 */
export interface SnapshotResponse {
    /**
     * The identifier of the snapshot that was requested.
     * @type {string}
     * @memberof SnapshotResponse
     */
    snapshotId?: string;
    /**
     * The record type of the snapshot file.
     * @type {string}
     * @memberof SnapshotResponse
     */
    recordType?: SnapshotResponseRecordTypeEnum;
    /**
     * The status of the generation of the snapshot.
     * @type {string}
     * @memberof SnapshotResponse
     */
    status?: SnapshotResponseStatusEnum;
    /**
     * Optional description of the status.
     * @type {string}
     * @memberof SnapshotResponse
     */
    statusDetails?: string;
    /**
     * The URI for the snapshot. It\'s only available if status is SUCCESS.
     * @type {string}
     * @memberof SnapshotResponse
     */
    location?: string;
    /**
     * The size of the snapshot file in bytes. It\'s only available if status is SUCCESS.
     * @type {number}
     * @memberof SnapshotResponse
     */
    fileSize?: number;
    /**
     * The epoch time for expiration of the snapshot file and each snapshot file will be expired in 30 mins after generated. It\'s only available if status is SUCCESS.
     * @type {number}
     * @memberof SnapshotResponse
     */
    expiration?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum SnapshotResponseRecordTypeEnum {
    Campaigns = 'campaigns',
    Adgroups = 'adgroups',
    ProductAds = 'productAds',
    Targets = 'targets'
}
/**
    * @export
    * @enum {string}
    */
export enum SnapshotResponseStatusEnum {
    InProgress = 'IN_PROGRESS',
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * The advertising tactic associated with the campaign. The following table lists available tactic names: |Tactic Name|Type|Description| |-----------|-----|-----------| |T00020     |Product| Choose individual products to show your ads in placements related to those products.<br>[Categories] Categories: Choose individual categories to show your ads in placements related to those categories.| |T00030     |Audiences| Select individual audiences to show your ads.|
 * @export
 * @enum {string}
 */

export enum Tactic {
    T00020 = 'T00020',
    T00030 = 'T00030'
}

/**
 * Optional. Restricts results to entities with the advertising tactic associated with the campaign. Must be one of the following table lists available tactic names: |Tactic Name|Type|Description| |-----------|-----|-----------| |T00020     |Product| Choose individual products to show your ads in placements related to those products.<br>[Categories] Categories: Choose individual categories to show your ads in placements related to those categories.| |T00030     |Audiences| Select individual audiences to show your ads.|
 * @export
 * @enum {string}
 */

export enum TacticFilter {
    T00020 = 'T00020',
    T00030 = 'T00030',
    T00020T00030 = 'T00020,T00030'
}

/**
 * The advertising tactic associated with the campaign. The following table lists available tactic names: |Tactic Name|Type|Description| |-----------|-----|-----------| |T00020     |Product| Choose individual products to show your ads in placements related to those products.<br>[Categories] Categories: Choose individual categories to show your ads in placements related to those categories.| |T00030     |Audiences| Select individual audiences to show your ads.|
 * @export
 * @enum {string}
 */

export enum TacticReport {
    T00020 = 'T00020',
    T00030 = 'T00030'
}

/**
 * 
 * @export
 * @interface TargetResponse
 */
export interface TargetResponse {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof TargetResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof TargetResponse
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof TargetResponse
     */
    targetId?: number;
}
/**
 * 
 * @export
 * @interface TargetingClause
 */
export interface TargetingClause {
    /**
     * 
     * @type {string}
     * @memberof TargetingClause
     */
    state?: TargetingClauseStateEnum;
    /**
     * The bid will override the adGroup bid if specified. This field is not used for negative targeting clauses. The bid must be less than the maximum allowable bid for the campaign\'s marketplace; for a list of maximum allowable bids, find the [\"Bid constraints by marketplace\" table in our documentation overview](https://advertising.amazon.com/API/docs/en-us/get-started/overview).
     * @type {number}
     * @memberof TargetingClause
     */
    bid?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TargetingClause
     */
    targetId?: number;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof TargetingClause
     */
    adGroupId?: number;
    /**
     * Tactic T00020 & T00030 ad groups should use \'manual\' targeting.
     * @type {string}
     * @memberof TargetingClause
     */
    expressionType?: TargetingClauseExpressionTypeEnum;
    /**
     * The targeting expression to match against.  ------- Applicable to Product targeting (T00020) ------- * A \'TargetingExpression\' in a Product targeting Campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to Audience targeting (T00030) ------- * A \'TargetingExpression\' in an Audience Campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify ASIN-grain (\'exactProduct\'), manual ASIN-grain (\'relatedProducts\' or \'relatedProducts\'), or category-grain targeting. * **Future** To exclude parts of an audience, specify a TargetingPredicateNested component that contains a negative TargetingPredicate type.
     * @type {Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>}
     * @memberof TargetingClause
     */
    expression?: Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>;
    /**
     * The targeting expression to match against.  ------- Applicable to Product targeting (T00020) ------- * A \'TargetingExpression\' in a Product targeting Campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to Audience targeting (T00030) ------- * A \'TargetingExpression\' in an Audience Campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify ASIN-grain (\'exactProduct\'), manual ASIN-grain (\'relatedProducts\' or \'relatedProducts\'), or category-grain targeting. * **Future** To exclude parts of an audience, specify a TargetingPredicateNested component that contains a negative TargetingPredicate type.
     * @type {Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>}
     * @memberof TargetingClause
     */
    resolvedExpression?: Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum TargetingClauseExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface TargetingClauseAllOf
 */
export interface TargetingClauseAllOf {
    /**
     * 
     * @type {number}
     * @memberof TargetingClauseAllOf
     */
    targetId?: number;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof TargetingClauseAllOf
     */
    adGroupId?: number;
    /**
     * Tactic T00020 & T00030 ad groups should use \'manual\' targeting.
     * @type {string}
     * @memberof TargetingClauseAllOf
     */
    expressionType?: TargetingClauseAllOfExpressionTypeEnum;
    /**
     * The targeting expression to match against.  ------- Applicable to Product targeting (T00020) ------- * A \'TargetingExpression\' in a Product targeting Campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to Audience targeting (T00030) ------- * A \'TargetingExpression\' in an Audience Campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify ASIN-grain (\'exactProduct\'), manual ASIN-grain (\'relatedProducts\' or \'relatedProducts\'), or category-grain targeting. * **Future** To exclude parts of an audience, specify a TargetingPredicateNested component that contains a negative TargetingPredicate type.
     * @type {Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>}
     * @memberof TargetingClauseAllOf
     */
    expression?: Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>;
    /**
     * The targeting expression to match against.  ------- Applicable to Product targeting (T00020) ------- * A \'TargetingExpression\' in a Product targeting Campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to Audience targeting (T00030) ------- * A \'TargetingExpression\' in an Audience Campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify ASIN-grain (\'exactProduct\'), manual ASIN-grain (\'relatedProducts\' or \'relatedProducts\'), or category-grain targeting. * **Future** To exclude parts of an audience, specify a TargetingPredicateNested component that contains a negative TargetingPredicate type.
     * @type {Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>}
     * @memberof TargetingClauseAllOf
     */
    resolvedExpression?: Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingClauseAllOfExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface TargetingClauseEx
 */
export interface TargetingClauseEx {
    /**
     * 
     * @type {number}
     * @memberof TargetingClauseEx
     */
    targetId?: number;
    /**
     * 
     * @type {number}
     * @memberof TargetingClauseEx
     */
    adGroupId?: number;
    /**
     * 
     * @type {string}
     * @memberof TargetingClauseEx
     */
    state?: TargetingClauseExStateEnum;
    /**
     * 
     * @type {string}
     * @memberof TargetingClauseEx
     */
    expressionType?: TargetingClauseExExpressionTypeEnum;
    /**
     * If a value for `bid` is specified, it overrides the current adGroup bid. When using vcpm costType, we recommend starting with $5 USD bids for target to begin testing with this awareness strategy. $1 is the minimum bid for vCPM. Note that this field is ignored for negative targeting clauses.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    bid?: number;
    /**
     * The targeting expression to match against.  ------- Applicable to Product targeting (T00020) ------- * A \'TargetingExpression\' in a Product targeting Campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to Audience targeting (T00030) ------- * A \'TargetingExpression\' in an Audience Campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify ASIN-grain (\'exactProduct\'), manual ASIN-grain (\'relatedProducts\' or \'relatedProducts\'), or category-grain targeting. * **Future** To exclude parts of an audience, specify a TargetingPredicateNested component that contains a negative TargetingPredicate type.
     * @type {Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>}
     * @memberof TargetingClauseEx
     */
    expression?: Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>;
    /**
     * The status of the target.
     * @type {string}
     * @memberof TargetingClauseEx
     */
    servingStatus?: TargetingClauseExServingStatusEnum;
    /**
     * Epoch date the target was created.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    creationDate?: number;
    /**
     * Epoch date of the last update to any property associated with the target.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    lastUpdatedDate?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingClauseExStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum TargetingClauseExExpressionTypeEnum {
    Auto = 'auto',
    Manual = 'manual'
}
/**
    * @export
    * @enum {string}
    */
export enum TargetingClauseExServingStatusEnum {
    AdvertiserStatusEnabled = 'ADVERTISER_STATUS_ENABLED',
    StatusUnavailable = 'STATUS_UNAVAILABLE',
    AdvertiserPaused = 'ADVERTISER_PAUSED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    AdvertiserPaymentFailure = 'ADVERTISER_PAYMENT_FAILURE',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    PendingStartDate = 'PENDING_START_DATE',
    Ended = 'ENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupStatusEnabled = 'AD_GROUP_STATUS_ENABLED',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    AdGroupIncomplete = 'AD_GROUP_INCOMPLETE',
    AdGroupLowBid = 'AD_GROUP_LOW_BID',
    TargetStatusLive = 'TARGET_STATUS_LIVE',
    TargetStatusPaused = 'TARGET_STATUS_PAUSED',
    TargetStatusArchived = 'TARGET_STATUS_ARCHIVED'
}

/**
 * A predicate to match against in the Targeting Expression (only applicable to Product targeting - T00020).  * All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system. * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the \'between\' strings to construct a targeting expression the format of the string is \'double-double\' where the first double must be smaller than the second double. Prices are not inclusive.
 * @export
 * @interface TargetingPredicate
 */
export interface TargetingPredicate {
    /**
     * 
     * @type {string}
     * @memberof TargetingPredicate
     */
    type?: TargetingPredicateTypeEnum;
    /**
     * The value to be targeted.
     * @type {string}
     * @memberof TargetingPredicate
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingPredicateTypeEnum {
    AsinSameAs = 'asinSameAs',
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    AsinIsPrimeShippingEligible = 'asinIsPrimeShippingEligible',
    AsinAgeRangeSameAs = 'asinAgeRangeSameAs',
    AsinGenreSameAs = 'asinGenreSameAs',
    SimilarProduct = 'similarProduct'
}

/**
 * A predicate to match against inside the TargetingPredicateNested component (only applicable to Audience targeting - T00030).  * All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system. * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the \'between\' strings to construct a targeting expression the format of the string is \'double-double\' where the first double must be smaller than the second double. Prices are not inclusive. * The \'exactProduct\', \'similarProduct\', \'relatedProduct\', and \'negative\' types do not utilize the value field. * The only type currently applicable to Amazon Audiences targeting is \'audienceSameAs\'. * A \'relatedProduct\' TargetingPredicateBase will Target an audience that has purchased a related product in the past 7,14,30,60,90,180, or 365 days. * **Future** A \'negative\' TargetingPredicateBase will exclude that TargetingPredicateNested from the overall audience.
 * @export
 * @interface TargetingPredicateBase
 */
export interface TargetingPredicateBase {
    /**
     * 
     * @type {string}
     * @memberof TargetingPredicateBase
     */
    type?: TargetingPredicateBaseTypeEnum;
    /**
     * The value to be targeted. 
     * @type {string}
     * @memberof TargetingPredicateBase
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingPredicateBaseTypeEnum {
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    SimilarProduct = 'similarProduct',
    ExactProduct = 'exactProduct',
    AsinIsPrimeShippingEligible = 'asinIsPrimeShippingEligible',
    AsinAgeRangeSameAs = 'asinAgeRangeSameAs',
    AsinGenreSameAs = 'asinGenreSameAs',
    AudienceSameAs = 'audienceSameAs',
    Lookback = 'lookback',
    Negative = 'negative',
    RelatedProduct = 'relatedProduct'
}

/**
 * 
 * @export
 * @interface TargetingPredicateLegacy
 */
export interface TargetingPredicateLegacy {
    /**
     * 
     * @type {string}
     * @memberof TargetingPredicateLegacy
     */
    type?: TargetingPredicateLegacyTypeEnum;
    /**
     * The value to be targeted.
     * @type {string}
     * @memberof TargetingPredicateLegacy
     */
    value?: string;
    /**
     * The type of event that the value applies to. Only available for similarProduct and exactProduct currently. * views event type corresponds to a customer who viewed the detail page of the product(s).
     * @type {string}
     * @memberof TargetingPredicateLegacy
     */
    eventType?: TargetingPredicateLegacyEventTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingPredicateLegacyTypeEnum {
    AsinSameAs = 'asinSameAs',
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    SimilarProduct = 'similarProduct',
    ExactProduct = 'exactProduct',
    AsinIsPrimeShippingEligible = 'asinIsPrimeShippingEligible',
    AsinAgeRangeSameAs = 'asinAgeRangeSameAs',
    AsinGenreSameAs = 'asinGenreSameAs'
}
/**
    * @export
    * @enum {string}
    */
export enum TargetingPredicateLegacyEventTypeEnum {
    Views = 'views'
}

/**
 * A behavioral event and list of targeting predicates that represents an Audience to target (only applicable to Audience targeting - T00030).  * For manual ASIN-grain targeting, the value array must contain only, \'exactProduct\', \'similarProduct\', \'releatedProduct\' and \'lookback\' TargetingPredicateBase components. The \'lookback\' is mandatory and the value should be set to \'7\', \'14\', \'30\', \'60\', \'90\', \'180\' or \'365\'. * For manual Category-grain targeting, the value array must contain a \'lookback\' and \'asinCategorySameAs\' TargetingPredicateBase component, which can be further refined with optional brand, price, star-rating and shipping eligibility refinements. The \'lookback\' is mandatory and the value should be set to \'7\', \'14\', \'30\', \'60\', \'90\', \'180\' or \'365\'. * For Amazon Audiences targeting, the TargetingPredicateNested type should be set to \'audience\' and the value array should include one TargetingPredicateBase component with type set to \'audienceSameAs\'. * **Future** For manual Category-grain targeting, adding a \'negative\' TargetingPredicateBase will exclude that TargetingPredicateNested from the overall audience.
 * @export
 * @interface TargetingPredicateNested
 */
export interface TargetingPredicateNested {
    /**
     * 
     * @type {string}
     * @memberof TargetingPredicateNested
     */
    type?: TargetingPredicateNestedTypeEnum;
    /**
     * 
     * @type {Array<TargetingPredicateBase>}
     * @memberof TargetingPredicateNested
     */
    value?: Array<TargetingPredicateBase>;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingPredicateNestedTypeEnum {
    Views = 'views',
    Audience = 'audience',
    Purchases = 'purchases'
}

/**
 * A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.
 * @export
 * @interface TargetingRecommendations
 */
export interface TargetingRecommendations {
    /**
     * List of recommended product targets
     * @type {Array<ProductRecommendation>}
     * @memberof TargetingRecommendations
     */
    products?: Array<ProductRecommendation>;
}
/**
 * Request for targeting recommendations
 * @export
 * @interface TargetingRecommendationsRequest
 */
export interface TargetingRecommendationsRequest {
    /**
     * 
     * @type {Tactic}
     * @memberof TargetingRecommendationsRequest
     */
    tactic: Tactic;
    /**
     * A list of products for which to get targeting recommendations
     * @type {Array<GoalProduct>}
     * @memberof TargetingRecommendationsRequest
     */
    products: Array<GoalProduct>;
    /**
     * A filter to indicate which types of recommendations to request. T00030 only allow \"CATEGORY\".
     * @type {Array<RecommendationType>}
     * @memberof TargetingRecommendationsRequest
     */
    typeFilter: Array<RecommendationType>;
}
/**
 * Response to a request for targeting recommendations
 * @export
 * @interface TargetingRecommendationsResponse
 */
export interface TargetingRecommendationsResponse {
    /**
     * 
     * @type {TargetingRecommendations}
     * @memberof TargetingRecommendationsResponse
     */
    recommendations?: TargetingRecommendations;
}
/**
 * 
 * @export
 * @interface UpdateAdGroup
 */
export interface UpdateAdGroup {
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof UpdateAdGroup
     */
    name?: string;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof UpdateAdGroup
     */
    campaignId?: number;
    /**
     * The amount of the default bid associated with the ad group. Used if no bid is specified.
     * @type {number}
     * @memberof UpdateAdGroup
     */
    defaultBid?: number;
    /**
     * Bid Optimization for the Adgroup. Default behavior is to optimize for clicks.  |Name|CostType|Supported Tactics|Description| |----|----------|-----------|-----------| |clicks |cpc|T00020 T00030|[Default] Optimize for page visits| |conversions |cpc|T00020 T00030|Optimize for conversion| |reach |vcpm|T00020 T00030|Optimize for viewable impressions. We recommend starting with $5 USD bids for each target to begin testing with this awareness strategy. $1 is the minimum bid for vCPM.|
     * @type {string}
     * @memberof UpdateAdGroup
     */
    bidOptimization?: UpdateAdGroupBidOptimizationEnum;
    /**
     * The state of the ad group.
     * @type {string}
     * @memberof UpdateAdGroup
     */
    state?: UpdateAdGroupStateEnum;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof UpdateAdGroup
     */
    adGroupId: number;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateAdGroupBidOptimizationEnum {
    Clicks = 'clicks',
    Conversions = 'conversions',
    Reach = 'reach'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateAdGroupStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface UpdateAdGroupAllOf
 */
export interface UpdateAdGroupAllOf {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof UpdateAdGroupAllOf
     */
    adGroupId?: number;
}
/**
 * 
 * @export
 * @interface UpdateCampaign
 */
export interface UpdateCampaign {
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof UpdateCampaign
     */
    name?: string;
    /**
     * The time period over which the amount specified in the `budget` property is allocated.
     * @type {string}
     * @memberof UpdateCampaign
     */
    budgetType?: UpdateCampaignBudgetTypeEnum;
    /**
     * The amount of the budget.
     * @type {number}
     * @memberof UpdateCampaign
     */
    budget?: number;
    /**
     * The YYYYMMDD start date of the campaign. The date must be today or in the future.
     * @type {string}
     * @memberof UpdateCampaign
     */
    startDate?: string;
    /**
     * The YYYYMMDD end date of the campaign.
     * @type {string}
     * @memberof UpdateCampaign
     */
    endDate?: string | null;
    /**
     * Determines how the campaign will bid and charge. |Name|Supported Tactics|Description| |----|----------|-----------| |cpc |T00020 T00030|[Default] The performance of this campaign is measured by the clicks triggered by the ad.| |vcpm |T00020 T00030|The performance of this campaign is measured by the viewed impressions triggered by the ad. We recommend starting with $5 USD bids for each target to begin testing with this awareness strategy. $1 is the minimum bid for vCPM.|
     * @type {string}
     * @memberof UpdateCampaign
     */
    costType?: UpdateCampaignCostTypeEnum;
    /**
     * The state of the campaign.
     * @type {string}
     * @memberof UpdateCampaign
     */
    state?: UpdateCampaignStateEnum;
    /**
     * Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.
     * @type {number}
     * @memberof UpdateCampaign
     */
    portfolioId?: number | null;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof UpdateCampaign
     */
    campaignId: number;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateCampaignBudgetTypeEnum {
    Daily = 'daily'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateCampaignCostTypeEnum {
    Cpc = 'cpc',
    Vcpm = 'vcpm'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateCampaignStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface UpdateCampaignAllOf
 */
export interface UpdateCampaignAllOf {
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof UpdateCampaignAllOf
     */
    campaignId?: number;
}
/**
 * 
 * @export
 * @interface UpdateNegativeTargetingClause
 */
export interface UpdateNegativeTargetingClause {
    /**
     * 
     * @type {string}
     * @memberof UpdateNegativeTargetingClause
     */
    state?: UpdateNegativeTargetingClauseStateEnum;
    /**
     * 
     * @type {number}
     * @memberof UpdateNegativeTargetingClause
     */
    targetId: number;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateNegativeTargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface UpdateProductAd
 */
export interface UpdateProductAd {
    /**
     * The state of the campaign associated with the product ad.
     * @type {string}
     * @memberof UpdateProductAd
     */
    state?: UpdateProductAdStateEnum;
    /**
     * The identifier of the product ad.
     * @type {number}
     * @memberof UpdateProductAd
     */
    adId: number;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateProductAdStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface UpdateProductAdAllOf
 */
export interface UpdateProductAdAllOf {
    /**
     * The identifier of the product ad.
     * @type {number}
     * @memberof UpdateProductAdAllOf
     */
    adId?: number;
}
/**
 * 
 * @export
 * @interface UpdateTargetingClause
 */
export interface UpdateTargetingClause {
    /**
     * 
     * @type {string}
     * @memberof UpdateTargetingClause
     */
    state?: UpdateTargetingClauseStateEnum;
    /**
     * The bid will override the adGroup bid if specified. This field is not used for negative targeting clauses. The bid must be less than the maximum allowable bid for the campaign\'s marketplace; for a list of maximum allowable bids, find the [\"Bid constraints by marketplace\" table in our documentation overview](https://advertising.amazon.com/API/docs/en-us/get-started/overview).
     * @type {number}
     * @memberof UpdateTargetingClause
     */
    bid?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateTargetingClause
     */
    targetId: number;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateTargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface UpdateTargetingClauseAllOf
 */
export interface UpdateTargetingClauseAllOf {
    /**
     * 
     * @type {number}
     * @memberof UpdateTargetingClauseAllOf
     */
    targetId?: number;
}

/**
 * AdGroupsApi - axios parameter creator
 * @export
 */
export const AdGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.
         * @summary Sets the ad group status to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveAdGroup: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveAdGroup', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveAdGroup', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('archiveAdGroup', 'adGroupId', adGroupId)
            const localVarPath = `/sd/adGroups/{adGroupId}`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates one or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateAdGroup>} [createAdGroup] An array of AdGroup objects. For each object, specify required fields and their values. Required fields are &#x60;campaignId&#x60;, &#x60;name&#x60;, &#x60;state&#x60;, and &#x60;defaultBid&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdGroups: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createAdGroup?: Array<CreateAdGroup>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createAdGroups', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createAdGroups', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/adGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAdGroup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an AdGroup object for a requested campaign. Note that the AdGroup object is designed for performance, with a small set of commonly used ad group fields to reduce size. If the extended set of fields is required, use the campaign operations that return the AdGroupResponseEx object.
         * @summary Gets a requested ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroup: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAdGroup', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAdGroup', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('getAdGroup', 'adGroupId', adGroupId)
            const localVarPath = `/sd/adGroups/{adGroupId}`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets extended information for a requested ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupResponseEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAdGroupResponseEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAdGroupResponseEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('getAdGroupResponseEx', 'adGroupId', adGroupId)
            const localVarPath = `/sd/adGroups/extended/{adGroupId}`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of AdGroup objects for a requested set of Sponsored Display ad groups. Note that the AdGroup object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the ad group operations that return the AdGroupResponseEx object.
         * @summary Gets a list of ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of AdGroup objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten ad groups set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten ad groups, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only ad groups with state set to one of the values in the specified comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the specified comma-delimited list.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only ad groups with the specified name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdGroups: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, name?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listAdGroups', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listAdGroups', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/adGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of AdGroupResponseEx objects for a set of requested ad groups.
         * @summary Gets a list of ad groups with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of ad groups. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the comma-delimited list.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only ad groups with the specified name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdGroupsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, name?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listAdGroupsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listAdGroupsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/adGroups/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates on or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateAdGroup>} [updateAdGroup] An array of AdGroup objects. For each object, specify an ad group identifier and mutable fields with their updated values. The mutable fields are \&#39;name\&#39;, \&#39;defaultBid\&#39;, and \&#39;state\&#39;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdGroups: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateAdGroup?: Array<UpdateAdGroup>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateAdGroups', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateAdGroups', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/adGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAdGroup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdGroupsApi - functional programming interface
 * @export
 */
export const AdGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.
         * @summary Sets the ad group status to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveAdGroup(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveAdGroup(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates one or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateAdGroup>} [createAdGroup] An array of AdGroup objects. For each object, specify required fields and their values. Required fields are &#x60;campaignId&#x60;, &#x60;name&#x60;, &#x60;state&#x60;, and &#x60;defaultBid&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createAdGroup?: Array<CreateAdGroup>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdGroupResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createAdGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns an AdGroup object for a requested campaign. Note that the AdGroup object is designed for performance, with a small set of commonly used ad group fields to reduce size. If the extended set of fields is required, use the campaign operations that return the AdGroupResponseEx object.
         * @summary Gets a requested ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdGroup(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdGroup(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets extended information for a requested ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdGroupResponseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdGroupResponseEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdGroupResponseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of AdGroup objects for a requested set of Sponsored Display ad groups. Note that the AdGroup object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the ad group operations that return the AdGroupResponseEx object.
         * @summary Gets a list of ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of AdGroup objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten ad groups set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten ad groups, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only ad groups with state set to one of the values in the specified comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the specified comma-delimited list.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only ad groups with the specified name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, name?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of AdGroupResponseEx objects for a set of requested ad groups.
         * @summary Gets a list of ad groups with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of ad groups. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the comma-delimited list.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only ad groups with the specified name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdGroupsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, name?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdGroupResponseEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAdGroupsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates on or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateAdGroup>} [updateAdGroup] An array of AdGroup objects. For each object, specify an ad group identifier and mutable fields with their updated values. The mutable fields are \&#39;name\&#39;, \&#39;defaultBid\&#39;, and \&#39;state\&#39;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateAdGroup?: Array<UpdateAdGroup>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdGroupResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateAdGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdGroupsApi - factory interface
 * @export
 */
export const AdGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdGroupsApiFp(configuration)
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.
         * @summary Sets the ad group status to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveAdGroup(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): AxiosPromise<AdGroupResponse> {
            return localVarFp.archiveAdGroup(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates one or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateAdGroup>} [createAdGroup] An array of AdGroup objects. For each object, specify required fields and their values. Required fields are &#x60;campaignId&#x60;, &#x60;name&#x60;, &#x60;state&#x60;, and &#x60;defaultBid&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createAdGroup?: Array<CreateAdGroup>, options?: any): AxiosPromise<Array<AdGroupResponse>> {
            return localVarFp.createAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createAdGroup, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an AdGroup object for a requested campaign. Note that the AdGroup object is designed for performance, with a small set of commonly used ad group fields to reduce size. If the extended set of fields is required, use the campaign operations that return the AdGroupResponseEx object.
         * @summary Gets a requested ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroup(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): AxiosPromise<AdGroup> {
            return localVarFp.getAdGroup(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets extended information for a requested ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupResponseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): AxiosPromise<AdGroupResponseEx> {
            return localVarFp.getAdGroupResponseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of AdGroup objects for a requested set of Sponsored Display ad groups. Note that the AdGroup object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the ad group operations that return the AdGroupResponseEx object.
         * @summary Gets a list of ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of AdGroup objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten ad groups set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten ad groups, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only ad groups with state set to one of the values in the specified comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the specified comma-delimited list.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only ad groups with the specified name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, name?: string, options?: any): AxiosPromise<Array<AdGroup>> {
            return localVarFp.listAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of AdGroupResponseEx objects for a set of requested ad groups.
         * @summary Gets a list of ad groups with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of ad groups. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the comma-delimited list.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only ad groups with the specified name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdGroupsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, name?: string, options?: any): AxiosPromise<Array<AdGroupResponseEx>> {
            return localVarFp.listAdGroupsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates on or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateAdGroup>} [updateAdGroup] An array of AdGroup objects. For each object, specify an ad group identifier and mutable fields with their updated values. The mutable fields are \&#39;name\&#39;, \&#39;defaultBid\&#39;, and \&#39;state\&#39;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateAdGroup?: Array<UpdateAdGroup>, options?: any): AxiosPromise<Array<AdGroupResponse>> {
            return localVarFp.updateAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateAdGroup, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveAdGroup operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiArchiveAdGroupRequest
 */
export interface AdGroupsApiArchiveAdGroupRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AdGroupsApiArchiveAdGroup
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiArchiveAdGroup
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested ad group.
     * @type {number}
     * @memberof AdGroupsApiArchiveAdGroup
     */
    readonly adGroupId: number
}

/**
 * Request parameters for createAdGroups operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiCreateAdGroupsRequest
 */
export interface AdGroupsApiCreateAdGroupsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AdGroupsApiCreateAdGroups
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiCreateAdGroups
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of AdGroup objects. For each object, specify required fields and their values. Required fields are &#x60;campaignId&#x60;, &#x60;name&#x60;, &#x60;state&#x60;, and &#x60;defaultBid&#x60;. Maximum length of the array is 100 objects.
     * @type {Array<CreateAdGroup>}
     * @memberof AdGroupsApiCreateAdGroups
     */
    readonly createAdGroup?: Array<CreateAdGroup>
}

/**
 * Request parameters for getAdGroup operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiGetAdGroupRequest
 */
export interface AdGroupsApiGetAdGroupRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroup
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroup
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested ad group.
     * @type {number}
     * @memberof AdGroupsApiGetAdGroup
     */
    readonly adGroupId: number
}

/**
 * Request parameters for getAdGroupResponseEx operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiGetAdGroupResponseExRequest
 */
export interface AdGroupsApiGetAdGroupResponseExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroupResponseEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroupResponseEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested ad group.
     * @type {number}
     * @memberof AdGroupsApiGetAdGroupResponseEx
     */
    readonly adGroupId: number
}

/**
 * Request parameters for listAdGroups operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiListAdGroupsRequest
 */
export interface AdGroupsApiListAdGroupsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of AdGroup objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten ad groups set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten ad groups, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly count?: number

    /**
     * Optional. The returned array is filtered to include only ad groups with state set to one of the values in the specified comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the specified comma-delimited list.
     * @type {string}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly campaignIdFilter?: string

    /**
     * Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
     * @type {string}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. The returned array includes only ad groups with the specified name.
     * @type {string}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly name?: string
}

/**
 * Request parameters for listAdGroupsEx operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiListAdGroupsExRequest
 */
export interface AdGroupsApiListAdGroupsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of ad groups. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly count?: number

    /**
     * Optional. The returned array is filtered to include only campaigns with state set to one of the values in the comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the comma-delimited list.
     * @type {string}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly campaignIdFilter?: string

    /**
     * Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
     * @type {string}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. The returned array includes only ad groups with the specified name.
     * @type {string}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly name?: string
}

/**
 * Request parameters for updateAdGroups operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiUpdateAdGroupsRequest
 */
export interface AdGroupsApiUpdateAdGroupsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AdGroupsApiUpdateAdGroups
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiUpdateAdGroups
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of AdGroup objects. For each object, specify an ad group identifier and mutable fields with their updated values. The mutable fields are \&#39;name\&#39;, \&#39;defaultBid\&#39;, and \&#39;state\&#39;. Maximum length of the array is 100 objects.
     * @type {Array<UpdateAdGroup>}
     * @memberof AdGroupsApiUpdateAdGroups
     */
    readonly updateAdGroup?: Array<UpdateAdGroup>
}

/**
 * AdGroupsApi - object-oriented interface
 * @export
 * @class AdGroupsApi
 * @extends {BaseAPI}
 */
export class AdGroupsApi extends BaseAPI {
    /**
     * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.
     * @summary Sets the ad group status to archived.
     * @param {AdGroupsApiArchiveAdGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public archiveAdGroup(requestParameters: AdGroupsApiArchiveAdGroupRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).archiveAdGroup(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates one or more ad groups.
     * @param {AdGroupsApiCreateAdGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public createAdGroups(requestParameters: AdGroupsApiCreateAdGroupsRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).createAdGroups(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createAdGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an AdGroup object for a requested campaign. Note that the AdGroup object is designed for performance, with a small set of commonly used ad group fields to reduce size. If the extended set of fields is required, use the campaign operations that return the AdGroupResponseEx object.
     * @summary Gets a requested ad group.
     * @param {AdGroupsApiGetAdGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public getAdGroup(requestParameters: AdGroupsApiGetAdGroupRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).getAdGroup(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets extended information for a requested ad group.
     * @param {AdGroupsApiGetAdGroupResponseExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public getAdGroupResponseEx(requestParameters: AdGroupsApiGetAdGroupResponseExRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).getAdGroupResponseEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of AdGroup objects for a requested set of Sponsored Display ad groups. Note that the AdGroup object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the ad group operations that return the AdGroupResponseEx object.
     * @summary Gets a list of ad groups.
     * @param {AdGroupsApiListAdGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public listAdGroups(requestParameters: AdGroupsApiListAdGroupsRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).listAdGroups(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.campaignIdFilter, requestParameters.adGroupIdFilter, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of AdGroupResponseEx objects for a set of requested ad groups.
     * @summary Gets a list of ad groups with extended fields.
     * @param {AdGroupsApiListAdGroupsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public listAdGroupsEx(requestParameters: AdGroupsApiListAdGroupsExRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).listAdGroupsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.campaignIdFilter, requestParameters.adGroupIdFilter, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates on or more ad groups.
     * @param {AdGroupsApiUpdateAdGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public updateAdGroups(requestParameters: AdGroupsApiUpdateAdGroupsRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).updateAdGroups(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateAdGroup, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BidRecommendationsApi - axios parameter creator
 * @export
 */
export const BidRecommendationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses.  The recommended bids are derrived from the last 7 days of winning auction bids for the related targeting clause.   Receive bid recommendations using the following: Product targeting clause|Description| |-----------|----| |asinSameAs=B0123456789|Receive a bid recommendation for this target product |asinCategorySameAs=12345|Receive a bid recommendation for this target category |similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.   Audience targeting clause|Description| |-----------|----| |views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category |views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins |views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins   #### Notes: - Bid recommendations for purchases and audiences are **not currently supported**. This note will be removed when these operations are available. - Refinements are currently not supported and if included will not impact the bid recommendation for the target.   #### Advertised ASIN Notes: - For asinSameAs targets the advertised asins will not impact the bid recommendation - For asinCategrySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation - For similarProduct & exactProduct targets the advertised asins are required
         * @summary Returns a set of bid recommendations for targeting clauses
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingBidRecommendationsRequestV32} [sDTargetingBidRecommendationsRequestV32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetBidRecommendations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDTargetingBidRecommendationsRequestV32?: SDTargetingBidRecommendationsRequestV32, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getTargetBidRecommendations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getTargetBidRecommendations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/targets/bid/recommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.sdtargetingrecommendations.v3.2+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sDTargetingBidRecommendationsRequestV32, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BidRecommendationsApi - functional programming interface
 * @export
 */
export const BidRecommendationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BidRecommendationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses.  The recommended bids are derrived from the last 7 days of winning auction bids for the related targeting clause.   Receive bid recommendations using the following: Product targeting clause|Description| |-----------|----| |asinSameAs=B0123456789|Receive a bid recommendation for this target product |asinCategorySameAs=12345|Receive a bid recommendation for this target category |similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.   Audience targeting clause|Description| |-----------|----| |views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category |views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins |views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins   #### Notes: - Bid recommendations for purchases and audiences are **not currently supported**. This note will be removed when these operations are available. - Refinements are currently not supported and if included will not impact the bid recommendation for the target.   #### Advertised ASIN Notes: - For asinSameAs targets the advertised asins will not impact the bid recommendation - For asinCategrySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation - For similarProduct & exactProduct targets the advertised asins are required
         * @summary Returns a set of bid recommendations for targeting clauses
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingBidRecommendationsRequestV32} [sDTargetingBidRecommendationsRequestV32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargetBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDTargetingBidRecommendationsRequestV32?: SDTargetingBidRecommendationsRequestV32, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDTargetingBidRecommendationsResponseV32>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargetBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDTargetingBidRecommendationsRequestV32, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BidRecommendationsApi - factory interface
 * @export
 */
export const BidRecommendationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BidRecommendationsApiFp(configuration)
    return {
        /**
         * Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses.  The recommended bids are derrived from the last 7 days of winning auction bids for the related targeting clause.   Receive bid recommendations using the following: Product targeting clause|Description| |-----------|----| |asinSameAs=B0123456789|Receive a bid recommendation for this target product |asinCategorySameAs=12345|Receive a bid recommendation for this target category |similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.   Audience targeting clause|Description| |-----------|----| |views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category |views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins |views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins   #### Notes: - Bid recommendations for purchases and audiences are **not currently supported**. This note will be removed when these operations are available. - Refinements are currently not supported and if included will not impact the bid recommendation for the target.   #### Advertised ASIN Notes: - For asinSameAs targets the advertised asins will not impact the bid recommendation - For asinCategrySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation - For similarProduct & exactProduct targets the advertised asins are required
         * @summary Returns a set of bid recommendations for targeting clauses
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingBidRecommendationsRequestV32} [sDTargetingBidRecommendationsRequestV32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDTargetingBidRecommendationsRequestV32?: SDTargetingBidRecommendationsRequestV32, options?: any): AxiosPromise<SDTargetingBidRecommendationsResponseV32> {
            return localVarFp.getTargetBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDTargetingBidRecommendationsRequestV32, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTargetBidRecommendations operation in BidRecommendationsApi.
 * @export
 * @interface BidRecommendationsApiGetTargetBidRecommendationsRequest
 */
export interface BidRecommendationsApiGetTargetBidRecommendationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BidRecommendationsApiGetTargetBidRecommendations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BidRecommendationsApiGetTargetBidRecommendations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {SDTargetingBidRecommendationsRequestV32}
     * @memberof BidRecommendationsApiGetTargetBidRecommendations
     */
    readonly sDTargetingBidRecommendationsRequestV32?: SDTargetingBidRecommendationsRequestV32
}

/**
 * BidRecommendationsApi - object-oriented interface
 * @export
 * @class BidRecommendationsApi
 * @extends {BaseAPI}
 */
export class BidRecommendationsApi extends BaseAPI {
    /**
     * Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses.  The recommended bids are derrived from the last 7 days of winning auction bids for the related targeting clause.   Receive bid recommendations using the following: Product targeting clause|Description| |-----------|----| |asinSameAs=B0123456789|Receive a bid recommendation for this target product |asinCategorySameAs=12345|Receive a bid recommendation for this target category |similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.   Audience targeting clause|Description| |-----------|----| |views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category |views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins |views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins   #### Notes: - Bid recommendations for purchases and audiences are **not currently supported**. This note will be removed when these operations are available. - Refinements are currently not supported and if included will not impact the bid recommendation for the target.   #### Advertised ASIN Notes: - For asinSameAs targets the advertised asins will not impact the bid recommendation - For asinCategrySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation - For similarProduct & exactProduct targets the advertised asins are required
     * @summary Returns a set of bid recommendations for targeting clauses
     * @param {BidRecommendationsApiGetTargetBidRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidRecommendationsApi
     */
    public getTargetBidRecommendations(requestParameters: BidRecommendationsApiGetTargetBidRecommendationsRequest, options?: any) {
        return BidRecommendationsApiFp(this.configuration).getTargetBidRecommendations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.sDTargetingBidRecommendationsRequestV32, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BrandSafetyListOpenBetaApi - axios parameter creator
 * @export
 */
export const BrandSafetyListOpenBetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list. 
         * @summary Creates one or more domains to add to a Brand Safety Deny List. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {BrandSafetyPostRequest} brandSafetyPostRequest An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrandSafetyDenyListDomains: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, brandSafetyPostRequest: BrandSafetyPostRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createBrandSafetyDenyListDomains', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createBrandSafetyDenyListDomains', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'brandSafetyPostRequest' is not null or undefined
            assertParamExists('createBrandSafetyDenyListDomains', 'brandSafetyPostRequest', brandSafetyPostRequest)
            const localVarPath = `/sd/brandSafety/deny`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(brandSafetyPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is \"COMPLETED\", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted. 
         * @summary Archives all of the domains in the Brand Safety Deny List. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandSafetyDenyList: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('deleteBrandSafetyDenyList', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('deleteBrandSafetyDenyList', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/brandSafety/deny`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests. 
         * @summary Gets the results for the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} requestId The ID of the request previously submitted.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 results, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestResults: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, startIndex?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getRequestResults', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getRequestResults', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('getRequestResults', 'requestId', requestId)
            const localVarPath = `/sd/brandSafety/{requestId}/results`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted. 
         * @summary Gets the status of the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} requestId The ID of the request previously submitted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestStatus: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getRequestStatus', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getRequestStatus', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('getRequestStatus', 'requestId', requestId)
            const localVarPath = `/sd/brandSafety/{requestId}/status`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of websites/apps that are on the advertiser\'s Brand Safety Deny List. It can take up to 15 minutes from the time a domain is added/deleted to the time it is reflected in the deny list.
         * @summary Gets a list of websites/apps that are on the advertiser\'s Brand Safety Deny List.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 domains, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomains: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listDomains', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listDomains', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/brandSafety/deny`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days. 
         * @summary List status of all requests
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRequestStatus: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listRequestStatus', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listRequestStatus', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/brandSafety/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrandSafetyListOpenBetaApi - functional programming interface
 * @export
 */
export const BrandSafetyListOpenBetaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrandSafetyListOpenBetaApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list. 
         * @summary Creates one or more domains to add to a Brand Safety Deny List. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {BrandSafetyPostRequest} brandSafetyPostRequest An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrandSafetyDenyListDomains(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, brandSafetyPostRequest: BrandSafetyPostRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandSafetyUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrandSafetyDenyListDomains(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, brandSafetyPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is \"COMPLETED\", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted. 
         * @summary Archives all of the domains in the Brand Safety Deny List. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrandSafetyDenyList(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandSafetyUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrandSafetyDenyList(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests. 
         * @summary Gets the results for the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} requestId The ID of the request previously submitted.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 results, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestResults(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, startIndex?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandSafetyRequestResultsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestResults(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, requestId, startIndex, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted. 
         * @summary Gets the status of the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} requestId The ID of the request previously submitted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandSafetyRequestStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of websites/apps that are on the advertiser\'s Brand Safety Deny List. It can take up to 15 minutes from the time a domain is added/deleted to the time it is reflected in the deny list.
         * @summary Gets a list of websites/apps that are on the advertiser\'s Brand Safety Deny List.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 domains, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDomains(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandSafetyGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDomains(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days. 
         * @summary List status of all requests
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRequestStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandSafetyListRequestStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRequestStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BrandSafetyListOpenBetaApi - factory interface
 * @export
 */
export const BrandSafetyListOpenBetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrandSafetyListOpenBetaApiFp(configuration)
    return {
        /**
         * Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list. 
         * @summary Creates one or more domains to add to a Brand Safety Deny List. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {BrandSafetyPostRequest} brandSafetyPostRequest An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrandSafetyDenyListDomains(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, brandSafetyPostRequest: BrandSafetyPostRequest, options?: any): AxiosPromise<BrandSafetyUpdateResponse> {
            return localVarFp.createBrandSafetyDenyListDomains(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, brandSafetyPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is \"COMPLETED\", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted. 
         * @summary Archives all of the domains in the Brand Safety Deny List. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandSafetyDenyList(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): AxiosPromise<BrandSafetyUpdateResponse> {
            return localVarFp.deleteBrandSafetyDenyList(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options).then((request) => request(axios, basePath));
        },
        /**
         * When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests. 
         * @summary Gets the results for the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} requestId The ID of the request previously submitted.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 results, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestResults(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, startIndex?: number, count?: number, options?: any): AxiosPromise<BrandSafetyRequestResultsResponse> {
            return localVarFp.getRequestResults(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, requestId, startIndex, count, options).then((request) => request(axios, basePath));
        },
        /**
         * When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted. 
         * @summary Gets the status of the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} requestId The ID of the request previously submitted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, options?: any): AxiosPromise<BrandSafetyRequestStatusResponse> {
            return localVarFp.getRequestStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of websites/apps that are on the advertiser\'s Brand Safety Deny List. It can take up to 15 minutes from the time a domain is added/deleted to the time it is reflected in the deny list.
         * @summary Gets a list of websites/apps that are on the advertiser\'s Brand Safety Deny List.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 domains, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomains(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, options?: any): AxiosPromise<BrandSafetyGetResponse> {
            return localVarFp.listDomains(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, options).then((request) => request(axios, basePath));
        },
        /**
         * List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days. 
         * @summary List status of all requests
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRequestStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): AxiosPromise<BrandSafetyListRequestStatusResponse> {
            return localVarFp.listRequestStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBrandSafetyDenyListDomains operation in BrandSafetyListOpenBetaApi.
 * @export
 * @interface BrandSafetyListOpenBetaApiCreateBrandSafetyDenyListDomainsRequest
 */
export interface BrandSafetyListOpenBetaApiCreateBrandSafetyDenyListDomainsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyListOpenBetaApiCreateBrandSafetyDenyListDomains
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BrandSafetyListOpenBetaApiCreateBrandSafetyDenyListDomains
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects. 
     * @type {BrandSafetyPostRequest}
     * @memberof BrandSafetyListOpenBetaApiCreateBrandSafetyDenyListDomains
     */
    readonly brandSafetyPostRequest: BrandSafetyPostRequest
}

/**
 * Request parameters for deleteBrandSafetyDenyList operation in BrandSafetyListOpenBetaApi.
 * @export
 * @interface BrandSafetyListOpenBetaApiDeleteBrandSafetyDenyListRequest
 */
export interface BrandSafetyListOpenBetaApiDeleteBrandSafetyDenyListRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyListOpenBetaApiDeleteBrandSafetyDenyList
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BrandSafetyListOpenBetaApiDeleteBrandSafetyDenyList
     */
    readonly amazonAdvertisingAPIScope: string
}

/**
 * Request parameters for getRequestResults operation in BrandSafetyListOpenBetaApi.
 * @export
 * @interface BrandSafetyListOpenBetaApiGetRequestResultsRequest
 */
export interface BrandSafetyListOpenBetaApiGetRequestResultsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyListOpenBetaApiGetRequestResults
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BrandSafetyListOpenBetaApiGetRequestResults
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The ID of the request previously submitted.
     * @type {string}
     * @memberof BrandSafetyListOpenBetaApiGetRequestResults
     */
    readonly requestId: string

    /**
     * Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
     * @type {number}
     * @memberof BrandSafetyListOpenBetaApiGetRequestResults
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 results, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
     * @type {number}
     * @memberof BrandSafetyListOpenBetaApiGetRequestResults
     */
    readonly count?: number
}

/**
 * Request parameters for getRequestStatus operation in BrandSafetyListOpenBetaApi.
 * @export
 * @interface BrandSafetyListOpenBetaApiGetRequestStatusRequest
 */
export interface BrandSafetyListOpenBetaApiGetRequestStatusRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyListOpenBetaApiGetRequestStatus
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BrandSafetyListOpenBetaApiGetRequestStatus
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The ID of the request previously submitted.
     * @type {string}
     * @memberof BrandSafetyListOpenBetaApiGetRequestStatus
     */
    readonly requestId: string
}

/**
 * Request parameters for listDomains operation in BrandSafetyListOpenBetaApi.
 * @export
 * @interface BrandSafetyListOpenBetaApiListDomainsRequest
 */
export interface BrandSafetyListOpenBetaApiListDomainsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyListOpenBetaApiListDomains
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BrandSafetyListOpenBetaApiListDomains
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
     * @type {number}
     * @memberof BrandSafetyListOpenBetaApiListDomains
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 domains, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
     * @type {number}
     * @memberof BrandSafetyListOpenBetaApiListDomains
     */
    readonly count?: number
}

/**
 * Request parameters for listRequestStatus operation in BrandSafetyListOpenBetaApi.
 * @export
 * @interface BrandSafetyListOpenBetaApiListRequestStatusRequest
 */
export interface BrandSafetyListOpenBetaApiListRequestStatusRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyListOpenBetaApiListRequestStatus
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BrandSafetyListOpenBetaApiListRequestStatus
     */
    readonly amazonAdvertisingAPIScope: string
}

/**
 * BrandSafetyListOpenBetaApi - object-oriented interface
 * @export
 * @class BrandSafetyListOpenBetaApi
 * @extends {BaseAPI}
 */
export class BrandSafetyListOpenBetaApi extends BaseAPI {
    /**
     * Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list. 
     * @summary Creates one or more domains to add to a Brand Safety Deny List. 
     * @param {BrandSafetyListOpenBetaApiCreateBrandSafetyDenyListDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyListOpenBetaApi
     */
    public createBrandSafetyDenyListDomains(requestParameters: BrandSafetyListOpenBetaApiCreateBrandSafetyDenyListDomainsRequest, options?: any) {
        return BrandSafetyListOpenBetaApiFp(this.configuration).createBrandSafetyDenyListDomains(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.brandSafetyPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is \"COMPLETED\", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted. 
     * @summary Archives all of the domains in the Brand Safety Deny List. 
     * @param {BrandSafetyListOpenBetaApiDeleteBrandSafetyDenyListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyListOpenBetaApi
     */
    public deleteBrandSafetyDenyList(requestParameters: BrandSafetyListOpenBetaApiDeleteBrandSafetyDenyListRequest, options?: any) {
        return BrandSafetyListOpenBetaApiFp(this.configuration).deleteBrandSafetyDenyList(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests. 
     * @summary Gets the results for the given request
     * @param {BrandSafetyListOpenBetaApiGetRequestResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyListOpenBetaApi
     */
    public getRequestResults(requestParameters: BrandSafetyListOpenBetaApiGetRequestResultsRequest, options?: any) {
        return BrandSafetyListOpenBetaApiFp(this.configuration).getRequestResults(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.requestId, requestParameters.startIndex, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted. 
     * @summary Gets the status of the given request
     * @param {BrandSafetyListOpenBetaApiGetRequestStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyListOpenBetaApi
     */
    public getRequestStatus(requestParameters: BrandSafetyListOpenBetaApiGetRequestStatusRequest, options?: any) {
        return BrandSafetyListOpenBetaApiFp(this.configuration).getRequestStatus(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of websites/apps that are on the advertiser\'s Brand Safety Deny List. It can take up to 15 minutes from the time a domain is added/deleted to the time it is reflected in the deny list.
     * @summary Gets a list of websites/apps that are on the advertiser\'s Brand Safety Deny List.
     * @param {BrandSafetyListOpenBetaApiListDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyListOpenBetaApi
     */
    public listDomains(requestParameters: BrandSafetyListOpenBetaApiListDomainsRequest, options?: any) {
        return BrandSafetyListOpenBetaApiFp(this.configuration).listDomains(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days. 
     * @summary List status of all requests
     * @param {BrandSafetyListOpenBetaApiListRequestStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyListOpenBetaApi
     */
    public listRequestStatus(requestParameters: BrandSafetyListOpenBetaApiListRequestStatusRequest, options?: any) {
        return BrandSafetyListOpenBetaApiFp(this.configuration).listRequestStatus(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CampaignsApi - axios parameter creator
 * @export
 */
export const CampaignsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.
         * @summary Sets the campaign status to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveCampaign: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveCampaign', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveCampaign', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('archiveCampaign', 'campaignId', campaignId)
            const localVarPath = `/sd/campaigns/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCampaign>} [createCampaign] An array of Campaign objects. For each object, specify required fields and their values. Required fields are &#x60;name&#x60;, &#x60;tactic&#x60;, &#x60;state&#x60;, &#x60;budget&#x60;, and &#x60;startDate&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCampaign?: Array<CreateCampaign>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCampaign, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Campaign object for a requested campaign. Note that the Campaign object is designed for performance, with a small set of commonly used campaign fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
         * @summary Gets a requested campaign.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the requested campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaign: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getCampaign', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getCampaign', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaign', 'campaignId', campaignId)
            const localVarPath = `/sd/campaigns/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a CampaignResponseEx object for a requested campaign. The CampaignResponseEx includes the extended set of available fields.
         * @summary Gets extended information for a requested campaign.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the requested campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignResponseEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getCampaignResponseEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getCampaignResponseEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaignResponseEx', 'campaignId', campaignId)
            const localVarPath = `/sd/campaigns/extended/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of Campaign objects for a requested set of Sponsored Display campaigns. Note that the Campaign object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
         * @summary Gets a list of campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only campaign with the specified name using an exact string match.
         * @param {string} [campaignIdFilter] Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
         * @param {string} [portfolioIdFilter] Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, portfolioIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (portfolioIdFilter !== undefined) {
                localVarQueryParameter['portfolioIdFilter'] = portfolioIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of CampaignResponseEx objects for a set of requested campaigns.
         * @summary Gets a list of campaigns with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only campaign with the specified name using an exact string match.
         * @param {string} [campaignIdFilter] Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
         * @param {string} [portfolioIdFilter] Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, portfolioIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listCampaignsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listCampaignsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/campaigns/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (portfolioIdFilter !== undefined) {
                localVarQueryParameter['portfolioIdFilter'] = portfolioIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateCampaign>} [updateCampaign] An array of Campaign objects. For each object, specify a campaign identifier and mutable fields with their updated values. The mutable fields are &#x60;name&#x60;, &#x60;state&#x60;, &#x60;budget&#x60;, &#x60;startDate&#x60;, and &#x60;endDate&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateCampaign?: Array<UpdateCampaign>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCampaign, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignsApi - functional programming interface
 * @export
 */
export const CampaignsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampaignsApiAxiosParamCreator(configuration)
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.
         * @summary Sets the campaign status to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveCampaign(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveCampaign(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCampaign>} [createCampaign] An array of Campaign objects. For each object, specify required fields and their values. Required fields are &#x60;name&#x60;, &#x60;tactic&#x60;, &#x60;state&#x60;, &#x60;budget&#x60;, and &#x60;startDate&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCampaign?: Array<CreateCampaign>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createCampaign, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a Campaign object for a requested campaign. Note that the Campaign object is designed for performance, with a small set of commonly used campaign fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
         * @summary Gets a requested campaign.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the requested campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaign(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaign(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a CampaignResponseEx object for a requested campaign. The CampaignResponseEx includes the extended set of available fields.
         * @summary Gets extended information for a requested campaign.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the requested campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignResponseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignResponseEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignResponseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of Campaign objects for a requested set of Sponsored Display campaigns. Note that the Campaign object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
         * @summary Gets a list of campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only campaign with the specified name using an exact string match.
         * @param {string} [campaignIdFilter] Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
         * @param {string} [portfolioIdFilter] Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, portfolioIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Campaign>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, name, campaignIdFilter, portfolioIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of CampaignResponseEx objects for a set of requested campaigns.
         * @summary Gets a list of campaigns with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only campaign with the specified name using an exact string match.
         * @param {string} [campaignIdFilter] Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
         * @param {string} [portfolioIdFilter] Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaignsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, portfolioIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignResponseEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCampaignsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, name, campaignIdFilter, portfolioIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateCampaign>} [updateCampaign] An array of Campaign objects. For each object, specify a campaign identifier and mutable fields with their updated values. The mutable fields are &#x60;name&#x60;, &#x60;state&#x60;, &#x60;budget&#x60;, &#x60;startDate&#x60;, and &#x60;endDate&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateCampaign?: Array<UpdateCampaign>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateCampaign, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CampaignsApi - factory interface
 * @export
 */
export const CampaignsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampaignsApiFp(configuration)
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.
         * @summary Sets the campaign status to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveCampaign(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): AxiosPromise<CampaignResponse> {
            return localVarFp.archiveCampaign(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCampaign>} [createCampaign] An array of Campaign objects. For each object, specify required fields and their values. Required fields are &#x60;name&#x60;, &#x60;tactic&#x60;, &#x60;state&#x60;, &#x60;budget&#x60;, and &#x60;startDate&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCampaign?: Array<CreateCampaign>, options?: any): AxiosPromise<Array<CampaignResponse>> {
            return localVarFp.createCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createCampaign, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a Campaign object for a requested campaign. Note that the Campaign object is designed for performance, with a small set of commonly used campaign fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
         * @summary Gets a requested campaign.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the requested campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaign(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): AxiosPromise<Campaign> {
            return localVarFp.getCampaign(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a CampaignResponseEx object for a requested campaign. The CampaignResponseEx includes the extended set of available fields.
         * @summary Gets extended information for a requested campaign.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the requested campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignResponseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): AxiosPromise<CampaignResponseEx> {
            return localVarFp.getCampaignResponseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of Campaign objects for a requested set of Sponsored Display campaigns. Note that the Campaign object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
         * @summary Gets a list of campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only campaign with the specified name using an exact string match.
         * @param {string} [campaignIdFilter] Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
         * @param {string} [portfolioIdFilter] Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, portfolioIdFilter?: string, options?: any): AxiosPromise<Array<Campaign>> {
            return localVarFp.listCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, name, campaignIdFilter, portfolioIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of CampaignResponseEx objects for a set of requested campaigns.
         * @summary Gets a list of campaigns with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only campaign with the specified name using an exact string match.
         * @param {string} [campaignIdFilter] Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
         * @param {string} [portfolioIdFilter] Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, portfolioIdFilter?: string, options?: any): AxiosPromise<Array<CampaignResponseEx>> {
            return localVarFp.listCampaignsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, name, campaignIdFilter, portfolioIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateCampaign>} [updateCampaign] An array of Campaign objects. For each object, specify a campaign identifier and mutable fields with their updated values. The mutable fields are &#x60;name&#x60;, &#x60;state&#x60;, &#x60;budget&#x60;, &#x60;startDate&#x60;, and &#x60;endDate&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateCampaign?: Array<UpdateCampaign>, options?: any): AxiosPromise<Array<CampaignResponse>> {
            return localVarFp.updateCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateCampaign, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveCampaign operation in CampaignsApi.
 * @export
 * @interface CampaignsApiArchiveCampaignRequest
 */
export interface CampaignsApiArchiveCampaignRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CampaignsApiArchiveCampaign
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiArchiveCampaign
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CampaignsApiArchiveCampaign
     */
    readonly campaignId: number
}

/**
 * Request parameters for createCampaigns operation in CampaignsApi.
 * @export
 * @interface CampaignsApiCreateCampaignsRequest
 */
export interface CampaignsApiCreateCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CampaignsApiCreateCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiCreateCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of Campaign objects. For each object, specify required fields and their values. Required fields are &#x60;name&#x60;, &#x60;tactic&#x60;, &#x60;state&#x60;, &#x60;budget&#x60;, and &#x60;startDate&#x60;. Maximum length of the array is 100 objects.
     * @type {Array<CreateCampaign>}
     * @memberof CampaignsApiCreateCampaigns
     */
    readonly createCampaign?: Array<CreateCampaign>
}

/**
 * Request parameters for getCampaign operation in CampaignsApi.
 * @export
 * @interface CampaignsApiGetCampaignRequest
 */
export interface CampaignsApiGetCampaignRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CampaignsApiGetCampaign
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiGetCampaign
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested campaign.
     * @type {number}
     * @memberof CampaignsApiGetCampaign
     */
    readonly campaignId: number
}

/**
 * Request parameters for getCampaignResponseEx operation in CampaignsApi.
 * @export
 * @interface CampaignsApiGetCampaignResponseExRequest
 */
export interface CampaignsApiGetCampaignResponseExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CampaignsApiGetCampaignResponseEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiGetCampaignResponseEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested campaign.
     * @type {number}
     * @memberof CampaignsApiGetCampaignResponseEx
     */
    readonly campaignId: number
}

/**
 * Request parameters for listCampaigns operation in CampaignsApi.
 * @export
 * @interface CampaignsApiListCampaignsRequest
 */
export interface CampaignsApiListCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CampaignsApiListCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiListCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof CampaignsApiListCampaigns
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof CampaignsApiListCampaigns
     */
    readonly count?: number

    /**
     * Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof CampaignsApiListCampaigns
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. The returned array includes only campaign with the specified name using an exact string match.
     * @type {string}
     * @memberof CampaignsApiListCampaigns
     */
    readonly name?: string

    /**
     * Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
     * @type {string}
     * @memberof CampaignsApiListCampaigns
     */
    readonly campaignIdFilter?: string

    /**
     * Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
     * @type {string}
     * @memberof CampaignsApiListCampaigns
     */
    readonly portfolioIdFilter?: string
}

/**
 * Request parameters for listCampaignsEx operation in CampaignsApi.
 * @export
 * @interface CampaignsApiListCampaignsExRequest
 */
export interface CampaignsApiListCampaignsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly count?: number

    /**
     * Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. The returned array includes only campaign with the specified name using an exact string match.
     * @type {string}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly name?: string

    /**
     * Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
     * @type {string}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly campaignIdFilter?: string

    /**
     * Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
     * @type {string}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly portfolioIdFilter?: string
}

/**
 * Request parameters for updateCampaigns operation in CampaignsApi.
 * @export
 * @interface CampaignsApiUpdateCampaignsRequest
 */
export interface CampaignsApiUpdateCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CampaignsApiUpdateCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiUpdateCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of Campaign objects. For each object, specify a campaign identifier and mutable fields with their updated values. The mutable fields are &#x60;name&#x60;, &#x60;state&#x60;, &#x60;budget&#x60;, &#x60;startDate&#x60;, and &#x60;endDate&#x60;. Maximum length of the array is 100 objects.
     * @type {Array<UpdateCampaign>}
     * @memberof CampaignsApiUpdateCampaigns
     */
    readonly updateCampaign?: Array<UpdateCampaign>
}

/**
 * CampaignsApi - object-oriented interface
 * @export
 * @class CampaignsApi
 * @extends {BaseAPI}
 */
export class CampaignsApi extends BaseAPI {
    /**
     * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.
     * @summary Sets the campaign status to archived.
     * @param {CampaignsApiArchiveCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public archiveCampaign(requestParameters: CampaignsApiArchiveCampaignRequest, options?: any) {
        return CampaignsApiFp(this.configuration).archiveCampaign(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates one or more campaigns.
     * @param {CampaignsApiCreateCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public createCampaigns(requestParameters: CampaignsApiCreateCampaignsRequest, options?: any) {
        return CampaignsApiFp(this.configuration).createCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createCampaign, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a Campaign object for a requested campaign. Note that the Campaign object is designed for performance, with a small set of commonly used campaign fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
     * @summary Gets a requested campaign.
     * @param {CampaignsApiGetCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaign(requestParameters: CampaignsApiGetCampaignRequest, options?: any) {
        return CampaignsApiFp(this.configuration).getCampaign(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a CampaignResponseEx object for a requested campaign. The CampaignResponseEx includes the extended set of available fields.
     * @summary Gets extended information for a requested campaign.
     * @param {CampaignsApiGetCampaignResponseExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaignResponseEx(requestParameters: CampaignsApiGetCampaignResponseExRequest, options?: any) {
        return CampaignsApiFp(this.configuration).getCampaignResponseEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of Campaign objects for a requested set of Sponsored Display campaigns. Note that the Campaign object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
     * @summary Gets a list of campaigns.
     * @param {CampaignsApiListCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public listCampaigns(requestParameters: CampaignsApiListCampaignsRequest, options?: any) {
        return CampaignsApiFp(this.configuration).listCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.name, requestParameters.campaignIdFilter, requestParameters.portfolioIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of CampaignResponseEx objects for a set of requested campaigns.
     * @summary Gets a list of campaigns with extended fields.
     * @param {CampaignsApiListCampaignsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public listCampaignsEx(requestParameters: CampaignsApiListCampaignsExRequest, options?: any) {
        return CampaignsApiFp(this.configuration).listCampaignsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.name, requestParameters.campaignIdFilter, requestParameters.portfolioIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates one or more campaigns.
     * @param {CampaignsApiUpdateCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public updateCampaigns(requestParameters: CampaignsApiUpdateCampaignsRequest, options?: any) {
        return CampaignsApiFp(this.configuration).updateCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateCampaign, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CreativesApi - axios parameter creator
 * @export
 */
export const CreativesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary A POST request of one or more creatives.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCreative>} [createCreative] An array of Creative objects to create. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCreatives: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCreative?: Array<CreateCreative>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createCreatives', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createCreatives', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/creatives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCreative, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of creative moderations
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Locale} language The language of the returned creative moderation metadata.
         * @param {number} [startIndex] Sets a cursor into the requested set of creative moderations. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creative moderations set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creative moderations, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {string} [adGroupIdFilter] The returned array includes only creative moderations associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
         * @param {string} [creativeIdFilter] The returned array includes only creative moderations with creative identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCreativeModerations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, language: Locale, startIndex?: number, count?: number, adGroupIdFilter?: string, creativeIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listCreativeModerations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listCreativeModerations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('listCreativeModerations', 'language', language)
            const localVarPath = `/sd/moderation/creatives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (creativeIdFilter !== undefined) {
                localVarQueryParameter['creativeIdFilter'] = creativeIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of creatives
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Sets a cursor into the requested set of creatives. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creatives set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creatives, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {string} [adGroupIdFilter] The returned array includes only creatives associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
         * @param {string} [creativeIdFilter] The returned array includes only creatives with identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCreatives: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, adGroupIdFilter?: string, creativeIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listCreatives', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listCreatives', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/creatives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (creativeIdFilter !== undefined) {
                localVarQueryParameter['creativeIdFilter'] = creativeIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets creative preview HTML.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {CreativePreviewRequest} [creativePreviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreativePreview: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativePreviewRequest?: CreativePreviewRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('postCreativePreview', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('postCreativePreview', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/creatives/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creativePreviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates one or more creatives.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreativeUpdate>} [creativeUpdate] An array of creative objects to update. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCreatives: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeUpdate?: Array<CreativeUpdate>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateCreatives', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateCreatives', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/creatives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creativeUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreativesApi - functional programming interface
 * @export
 */
export const CreativesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreativesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary A POST request of one or more creatives.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCreative>} [createCreative] An array of Creative objects to create. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCreative?: Array<CreateCreative>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreativeResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createCreative, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of creative moderations
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Locale} language The language of the returned creative moderation metadata.
         * @param {number} [startIndex] Sets a cursor into the requested set of creative moderations. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creative moderations set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creative moderations, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {string} [adGroupIdFilter] The returned array includes only creative moderations associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
         * @param {string} [creativeIdFilter] The returned array includes only creative moderations with creative identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCreativeModerations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, language: Locale, startIndex?: number, count?: number, adGroupIdFilter?: string, creativeIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreativeModeration>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCreativeModerations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, language, startIndex, count, adGroupIdFilter, creativeIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of creatives
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Sets a cursor into the requested set of creatives. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creatives set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creatives, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {string} [adGroupIdFilter] The returned array includes only creatives associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
         * @param {string} [creativeIdFilter] The returned array includes only creatives with identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, adGroupIdFilter?: string, creativeIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Creative>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, adGroupIdFilter, creativeIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets creative preview HTML.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {CreativePreviewRequest} [creativePreviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreativePreview(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativePreviewRequest?: CreativePreviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreativePreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreativePreview(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativePreviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates one or more creatives.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreativeUpdate>} [creativeUpdate] An array of creative objects to update. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeUpdate?: Array<CreativeUpdate>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreativeResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativeUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreativesApi - factory interface
 * @export
 */
export const CreativesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreativesApiFp(configuration)
    return {
        /**
         * 
         * @summary A POST request of one or more creatives.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCreative>} [createCreative] An array of Creative objects to create. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCreative?: Array<CreateCreative>, options?: any): AxiosPromise<Array<CreativeResponse>> {
            return localVarFp.createCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createCreative, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of creative moderations
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Locale} language The language of the returned creative moderation metadata.
         * @param {number} [startIndex] Sets a cursor into the requested set of creative moderations. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creative moderations set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creative moderations, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {string} [adGroupIdFilter] The returned array includes only creative moderations associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
         * @param {string} [creativeIdFilter] The returned array includes only creative moderations with creative identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCreativeModerations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, language: Locale, startIndex?: number, count?: number, adGroupIdFilter?: string, creativeIdFilter?: string, options?: any): AxiosPromise<Array<CreativeModeration>> {
            return localVarFp.listCreativeModerations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, language, startIndex, count, adGroupIdFilter, creativeIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of creatives
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Sets a cursor into the requested set of creatives. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creatives set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creatives, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {string} [adGroupIdFilter] The returned array includes only creatives associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
         * @param {string} [creativeIdFilter] The returned array includes only creatives with identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, adGroupIdFilter?: string, creativeIdFilter?: string, options?: any): AxiosPromise<Array<Creative>> {
            return localVarFp.listCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, adGroupIdFilter, creativeIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets creative preview HTML.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {CreativePreviewRequest} [creativePreviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreativePreview(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativePreviewRequest?: CreativePreviewRequest, options?: any): AxiosPromise<CreativePreviewResponse> {
            return localVarFp.postCreativePreview(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativePreviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates one or more creatives.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreativeUpdate>} [creativeUpdate] An array of creative objects to update. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeUpdate?: Array<CreativeUpdate>, options?: any): AxiosPromise<Array<CreativeResponse>> {
            return localVarFp.updateCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativeUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCreatives operation in CreativesApi.
 * @export
 * @interface CreativesApiCreateCreativesRequest
 */
export interface CreativesApiCreateCreativesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CreativesApiCreateCreatives
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CreativesApiCreateCreatives
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of Creative objects to create. Maximum length of the array is 100 objects.
     * @type {Array<CreateCreative>}
     * @memberof CreativesApiCreateCreatives
     */
    readonly createCreative?: Array<CreateCreative>
}

/**
 * Request parameters for listCreativeModerations operation in CreativesApi.
 * @export
 * @interface CreativesApiListCreativeModerationsRequest
 */
export interface CreativesApiListCreativeModerationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CreativesApiListCreativeModerations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CreativesApiListCreativeModerations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The language of the returned creative moderation metadata.
     * @type {Locale}
     * @memberof CreativesApiListCreativeModerations
     */
    readonly language: Locale

    /**
     * Sets a cursor into the requested set of creative moderations. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof CreativesApiListCreativeModerations
     */
    readonly startIndex?: number

    /**
     * Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creative moderations set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creative moderations, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof CreativesApiListCreativeModerations
     */
    readonly count?: number

    /**
     * The returned array includes only creative moderations associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
     * @type {string}
     * @memberof CreativesApiListCreativeModerations
     */
    readonly adGroupIdFilter?: string

    /**
     * The returned array includes only creative moderations with creative identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
     * @type {string}
     * @memberof CreativesApiListCreativeModerations
     */
    readonly creativeIdFilter?: string
}

/**
 * Request parameters for listCreatives operation in CreativesApi.
 * @export
 * @interface CreativesApiListCreativesRequest
 */
export interface CreativesApiListCreativesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CreativesApiListCreatives
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CreativesApiListCreatives
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Sets a cursor into the requested set of creatives. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof CreativesApiListCreatives
     */
    readonly startIndex?: number

    /**
     * Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creatives set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creatives, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof CreativesApiListCreatives
     */
    readonly count?: number

    /**
     * The returned array includes only creatives associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
     * @type {string}
     * @memberof CreativesApiListCreatives
     */
    readonly adGroupIdFilter?: string

    /**
     * The returned array includes only creatives with identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
     * @type {string}
     * @memberof CreativesApiListCreatives
     */
    readonly creativeIdFilter?: string
}

/**
 * Request parameters for postCreativePreview operation in CreativesApi.
 * @export
 * @interface CreativesApiPostCreativePreviewRequest
 */
export interface CreativesApiPostCreativePreviewRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CreativesApiPostCreativePreview
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CreativesApiPostCreativePreview
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {CreativePreviewRequest}
     * @memberof CreativesApiPostCreativePreview
     */
    readonly creativePreviewRequest?: CreativePreviewRequest
}

/**
 * Request parameters for updateCreatives operation in CreativesApi.
 * @export
 * @interface CreativesApiUpdateCreativesRequest
 */
export interface CreativesApiUpdateCreativesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CreativesApiUpdateCreatives
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CreativesApiUpdateCreatives
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of creative objects to update. Maximum length of the array is 100 objects.
     * @type {Array<CreativeUpdate>}
     * @memberof CreativesApiUpdateCreatives
     */
    readonly creativeUpdate?: Array<CreativeUpdate>
}

/**
 * CreativesApi - object-oriented interface
 * @export
 * @class CreativesApi
 * @extends {BaseAPI}
 */
export class CreativesApi extends BaseAPI {
    /**
     * 
     * @summary A POST request of one or more creatives.
     * @param {CreativesApiCreateCreativesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativesApi
     */
    public createCreatives(requestParameters: CreativesApiCreateCreativesRequest, options?: any) {
        return CreativesApiFp(this.configuration).createCreatives(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createCreative, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of creative moderations
     * @param {CreativesApiListCreativeModerationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativesApi
     */
    public listCreativeModerations(requestParameters: CreativesApiListCreativeModerationsRequest, options?: any) {
        return CreativesApiFp(this.configuration).listCreativeModerations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.language, requestParameters.startIndex, requestParameters.count, requestParameters.adGroupIdFilter, requestParameters.creativeIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of creatives
     * @param {CreativesApiListCreativesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativesApi
     */
    public listCreatives(requestParameters: CreativesApiListCreativesRequest, options?: any) {
        return CreativesApiFp(this.configuration).listCreatives(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.adGroupIdFilter, requestParameters.creativeIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets creative preview HTML.
     * @param {CreativesApiPostCreativePreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativesApi
     */
    public postCreativePreview(requestParameters: CreativesApiPostCreativePreviewRequest, options?: any) {
        return CreativesApiFp(this.configuration).postCreativePreview(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.creativePreviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates one or more creatives.
     * @param {CreativesApiUpdateCreativesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativesApi
     */
    public updateCreatives(requestParameters: CreativesApiUpdateCreativesRequest, options?: any) {
        return CreativesApiFp(this.configuration).updateCreatives(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.creativeUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegativeTargetingApi - axios parameter creator
 * @export
 */
export const NegativeTargetingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Equivalent to using the updateNegativeTargetingClauses operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
         * @summary Sets the `state` of a negative targeting clause to `archived`.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The identifier of a negative targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveNegativeTargetingClause: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveNegativeTargetingClause', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveNegativeTargetingClause', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'negativeTargetId' is not null or undefined
            assertParamExists('archiveNegativeTargetingClause', 'negativeTargetId', negativeTargetId)
            const localVarPath = `/sd/negativeTargets/{negativeTargetId}`
                .replace(`{${"negativeTargetId"}}`, encodeURIComponent(String(negativeTargetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Successfully created negative targeting clauses associated with an ad group are assigned a unique target identifier. Product negative targeing clause examples: | Negative targeting clause | Description | |---------------------------|-------------| | asinSameAs=B0123456789 | Negatively target this product.| | asinBrandSameAs=12345 | Negatively target products in the brand.|
         * @summary Creates one or more negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateNegativeTargetingClause>} [createNegativeTargetingClause] A list of up to 100 negative targeting clauses for creation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNegativeTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createNegativeTargetingClause?: Array<CreateNegativeTargetingClause>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createNegativeTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createNegativeTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/negativeTargets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createNegativeTargetingClause, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This call returns the minimal set of negative targeting clause fields, but is more efficient than getNegativeTargetsEx.
         * @summary Gets a negative targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The negative targeting clause identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeTargets: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getNegativeTargets', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getNegativeTargets', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'negativeTargetId' is not null or undefined
            assertParamExists('getNegativeTargets', 'negativeTargetId', negativeTargetId)
            const localVarPath = `/sd/negativeTargets/{negativeTargetId}`
                .replace(`{${"negativeTargetId"}}`, encodeURIComponent(String(negativeTargetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a negative targeting clause with extended fields. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTarget.
         * @summary Gets extended information for a negative targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The negative targeting clause identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeTargetsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getNegativeTargetsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getNegativeTargetsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'negativeTargetId' is not null or undefined
            assertParamExists('getNegativeTargetsEx', 'negativeTargetId', negativeTargetId)
            const localVarPath = `/sd/negativeTargets/extended/{negativeTargetId}`
                .replace(`{${"negativeTargetId"}}`, encodeURIComponent(String(negativeTargetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of negative targeting clauses objects for a requested set of Sponsored Display negative targets. Note that the Negative Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the negative target operations that return the NegativeTargetingClauseEx object.
         * @summary Gets a list of negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adGroupIdFilter?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listNegativeTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listNegativeTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/negativeTargets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of NegativeTargetingClauseEx objects for a set of requested negative targets. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTargets.
         * @summary Gets a list of negative targeting clause objects with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include &#x60;enabled&#x60;, &#x60;paused&#x60;, and &#x60;archived&#x60;.
         * @param {string} [targetIdFilter] Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to ads within campaigns specified in the comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeTargetingClausesEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', targetIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listNegativeTargetingClausesEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listNegativeTargetingClausesEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/negativeTargets/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (targetIdFilter !== undefined) {
                localVarQueryParameter['targetIdFilter'] = targetIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates one or more negative targeting clauses. Negative targeting clauses are identified using their targetId. The mutable field is `state`. Maximum length of the array is 100 objects.
         * @summary Updates one or more negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateNegativeTargetingClause>} [updateNegativeTargetingClause] A list of up to 100 negative targeting clauses. Note that the only mutable field is &#x60;state&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNegativeTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateNegativeTargetingClause?: Array<UpdateNegativeTargetingClause>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateNegativeTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateNegativeTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/negativeTargets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateNegativeTargetingClause, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegativeTargetingApi - functional programming interface
 * @export
 */
export const NegativeTargetingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegativeTargetingApiAxiosParamCreator(configuration)
    return {
        /**
         * Equivalent to using the updateNegativeTargetingClauses operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
         * @summary Sets the `state` of a negative targeting clause to `archived`.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The identifier of a negative targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveNegativeTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveNegativeTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, negativeTargetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Successfully created negative targeting clauses associated with an ad group are assigned a unique target identifier. Product negative targeing clause examples: | Negative targeting clause | Description | |---------------------------|-------------| | asinSameAs=B0123456789 | Negatively target this product.| | asinBrandSameAs=12345 | Negatively target products in the brand.|
         * @summary Creates one or more negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateNegativeTargetingClause>} [createNegativeTargetingClause] A list of up to 100 negative targeting clauses for creation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createNegativeTargetingClause?: Array<CreateNegativeTargetingClause>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createNegativeTargetingClause, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This call returns the minimal set of negative targeting clause fields, but is more efficient than getNegativeTargetsEx.
         * @summary Gets a negative targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The negative targeting clause identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNegativeTargets(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NegativeTargetingClause>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNegativeTargets(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, negativeTargetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a negative targeting clause with extended fields. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTarget.
         * @summary Gets extended information for a negative targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The negative targeting clause identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNegativeTargetsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NegativeTargetingClauseEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNegativeTargetsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, negativeTargetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a list of negative targeting clauses objects for a requested set of Sponsored Display negative targets. Note that the Negative Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the negative target operations that return the NegativeTargetingClauseEx object.
         * @summary Gets a list of negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NegativeTargetingClause>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adGroupIdFilter, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of NegativeTargetingClauseEx objects for a set of requested negative targets. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTargets.
         * @summary Gets a list of negative targeting clause objects with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include &#x60;enabled&#x60;, &#x60;paused&#x60;, and &#x60;archived&#x60;.
         * @param {string} [targetIdFilter] Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to ads within campaigns specified in the comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNegativeTargetingClausesEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', targetIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NegativeTargetingClauseEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNegativeTargetingClausesEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, targetIdFilter, adGroupIdFilter, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates one or more negative targeting clauses. Negative targeting clauses are identified using their targetId. The mutable field is `state`. Maximum length of the array is 100 objects.
         * @summary Updates one or more negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateNegativeTargetingClause>} [updateNegativeTargetingClause] A list of up to 100 negative targeting clauses. Note that the only mutable field is &#x60;state&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateNegativeTargetingClause?: Array<UpdateNegativeTargetingClause>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateNegativeTargetingClause, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegativeTargetingApi - factory interface
 * @export
 */
export const NegativeTargetingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegativeTargetingApiFp(configuration)
    return {
        /**
         * Equivalent to using the updateNegativeTargetingClauses operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
         * @summary Sets the `state` of a negative targeting clause to `archived`.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The identifier of a negative targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveNegativeTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options?: any): AxiosPromise<TargetResponse> {
            return localVarFp.archiveNegativeTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, negativeTargetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Successfully created negative targeting clauses associated with an ad group are assigned a unique target identifier. Product negative targeing clause examples: | Negative targeting clause | Description | |---------------------------|-------------| | asinSameAs=B0123456789 | Negatively target this product.| | asinBrandSameAs=12345 | Negatively target products in the brand.|
         * @summary Creates one or more negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateNegativeTargetingClause>} [createNegativeTargetingClause] A list of up to 100 negative targeting clauses for creation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createNegativeTargetingClause?: Array<CreateNegativeTargetingClause>, options?: any): AxiosPromise<Array<TargetResponse>> {
            return localVarFp.createNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createNegativeTargetingClause, options).then((request) => request(axios, basePath));
        },
        /**
         * This call returns the minimal set of negative targeting clause fields, but is more efficient than getNegativeTargetsEx.
         * @summary Gets a negative targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The negative targeting clause identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeTargets(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options?: any): AxiosPromise<NegativeTargetingClause> {
            return localVarFp.getNegativeTargets(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, negativeTargetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a negative targeting clause with extended fields. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTarget.
         * @summary Gets extended information for a negative targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The negative targeting clause identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeTargetsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options?: any): AxiosPromise<NegativeTargetingClauseEx> {
            return localVarFp.getNegativeTargetsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, negativeTargetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of negative targeting clauses objects for a requested set of Sponsored Display negative targets. Note that the Negative Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the negative target operations that return the NegativeTargetingClauseEx object.
         * @summary Gets a list of negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<NegativeTargetingClause>> {
            return localVarFp.listNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adGroupIdFilter, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of NegativeTargetingClauseEx objects for a set of requested negative targets. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTargets.
         * @summary Gets a list of negative targeting clause objects with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include &#x60;enabled&#x60;, &#x60;paused&#x60;, and &#x60;archived&#x60;.
         * @param {string} [targetIdFilter] Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to ads within campaigns specified in the comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeTargetingClausesEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', targetIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<NegativeTargetingClauseEx>> {
            return localVarFp.listNegativeTargetingClausesEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, targetIdFilter, adGroupIdFilter, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates one or more negative targeting clauses. Negative targeting clauses are identified using their targetId. The mutable field is `state`. Maximum length of the array is 100 objects.
         * @summary Updates one or more negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateNegativeTargetingClause>} [updateNegativeTargetingClause] A list of up to 100 negative targeting clauses. Note that the only mutable field is &#x60;state&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateNegativeTargetingClause?: Array<UpdateNegativeTargetingClause>, options?: any): AxiosPromise<Array<TargetResponse>> {
            return localVarFp.updateNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateNegativeTargetingClause, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveNegativeTargetingClause operation in NegativeTargetingApi.
 * @export
 * @interface NegativeTargetingApiArchiveNegativeTargetingClauseRequest
 */
export interface NegativeTargetingApiArchiveNegativeTargetingClauseRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof NegativeTargetingApiArchiveNegativeTargetingClause
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeTargetingApiArchiveNegativeTargetingClause
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of a negative targeting clause.
     * @type {number}
     * @memberof NegativeTargetingApiArchiveNegativeTargetingClause
     */
    readonly negativeTargetId: number
}

/**
 * Request parameters for createNegativeTargetingClauses operation in NegativeTargetingApi.
 * @export
 * @interface NegativeTargetingApiCreateNegativeTargetingClausesRequest
 */
export interface NegativeTargetingApiCreateNegativeTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof NegativeTargetingApiCreateNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeTargetingApiCreateNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of up to 100 negative targeting clauses for creation.
     * @type {Array<CreateNegativeTargetingClause>}
     * @memberof NegativeTargetingApiCreateNegativeTargetingClauses
     */
    readonly createNegativeTargetingClause?: Array<CreateNegativeTargetingClause>
}

/**
 * Request parameters for getNegativeTargets operation in NegativeTargetingApi.
 * @export
 * @interface NegativeTargetingApiGetNegativeTargetsRequest
 */
export interface NegativeTargetingApiGetNegativeTargetsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof NegativeTargetingApiGetNegativeTargets
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeTargetingApiGetNegativeTargets
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The negative targeting clause identifier.
     * @type {number}
     * @memberof NegativeTargetingApiGetNegativeTargets
     */
    readonly negativeTargetId: number
}

/**
 * Request parameters for getNegativeTargetsEx operation in NegativeTargetingApi.
 * @export
 * @interface NegativeTargetingApiGetNegativeTargetsExRequest
 */
export interface NegativeTargetingApiGetNegativeTargetsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof NegativeTargetingApiGetNegativeTargetsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeTargetingApiGetNegativeTargetsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The negative targeting clause identifier.
     * @type {number}
     * @memberof NegativeTargetingApiGetNegativeTargetsEx
     */
    readonly negativeTargetId: number
}

/**
 * Request parameters for listNegativeTargetingClauses operation in NegativeTargetingApi.
 * @export
 * @interface NegativeTargetingApiListNegativeTargetingClausesRequest
 */
export interface NegativeTargetingApiListNegativeTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. 0-indexed record offset for the result set. Defaults to 0.
     * @type {number}
     * @memberof NegativeTargetingApiListNegativeTargetingClauses
     */
    readonly startIndex?: number

    /**
     * Optional. Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof NegativeTargetingApiListNegativeTargetingClauses
     */
    readonly count?: number

    /**
     * Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof NegativeTargetingApiListNegativeTargetingClauses
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClauses
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClauses
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for listNegativeTargetingClausesEx operation in NegativeTargetingApi.
 * @export
 * @interface NegativeTargetingApiListNegativeTargetingClausesExRequest
 */
export interface NegativeTargetingApiListNegativeTargetingClausesExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. 0-indexed record offset for the result set. Defaults to 0.
     * @type {number}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly startIndex?: number

    /**
     * Optional. Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly count?: number

    /**
     * Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include &#x60;enabled&#x60;, &#x60;paused&#x60;, and &#x60;archived&#x60;.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly targetIdFilter?: string

    /**
     * Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. Restricts results to ads within campaigns specified in the comma-separated list.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for updateNegativeTargetingClauses operation in NegativeTargetingApi.
 * @export
 * @interface NegativeTargetingApiUpdateNegativeTargetingClausesRequest
 */
export interface NegativeTargetingApiUpdateNegativeTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof NegativeTargetingApiUpdateNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeTargetingApiUpdateNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of up to 100 negative targeting clauses. Note that the only mutable field is &#x60;state&#x60;.
     * @type {Array<UpdateNegativeTargetingClause>}
     * @memberof NegativeTargetingApiUpdateNegativeTargetingClauses
     */
    readonly updateNegativeTargetingClause?: Array<UpdateNegativeTargetingClause>
}

/**
 * NegativeTargetingApi - object-oriented interface
 * @export
 * @class NegativeTargetingApi
 * @extends {BaseAPI}
 */
export class NegativeTargetingApi extends BaseAPI {
    /**
     * Equivalent to using the updateNegativeTargetingClauses operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
     * @summary Sets the `state` of a negative targeting clause to `archived`.
     * @param {NegativeTargetingApiArchiveNegativeTargetingClauseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeTargetingApi
     */
    public archiveNegativeTargetingClause(requestParameters: NegativeTargetingApiArchiveNegativeTargetingClauseRequest, options?: any) {
        return NegativeTargetingApiFp(this.configuration).archiveNegativeTargetingClause(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.negativeTargetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Successfully created negative targeting clauses associated with an ad group are assigned a unique target identifier. Product negative targeing clause examples: | Negative targeting clause | Description | |---------------------------|-------------| | asinSameAs=B0123456789 | Negatively target this product.| | asinBrandSameAs=12345 | Negatively target products in the brand.|
     * @summary Creates one or more negative targeting clauses.
     * @param {NegativeTargetingApiCreateNegativeTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeTargetingApi
     */
    public createNegativeTargetingClauses(requestParameters: NegativeTargetingApiCreateNegativeTargetingClausesRequest, options?: any) {
        return NegativeTargetingApiFp(this.configuration).createNegativeTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createNegativeTargetingClause, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This call returns the minimal set of negative targeting clause fields, but is more efficient than getNegativeTargetsEx.
     * @summary Gets a negative targeting clause specified by identifier.
     * @param {NegativeTargetingApiGetNegativeTargetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeTargetingApi
     */
    public getNegativeTargets(requestParameters: NegativeTargetingApiGetNegativeTargetsRequest, options?: any) {
        return NegativeTargetingApiFp(this.configuration).getNegativeTargets(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.negativeTargetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a negative targeting clause with extended fields. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTarget.
     * @summary Gets extended information for a negative targeting clause.
     * @param {NegativeTargetingApiGetNegativeTargetsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeTargetingApi
     */
    public getNegativeTargetsEx(requestParameters: NegativeTargetingApiGetNegativeTargetsExRequest, options?: any) {
        return NegativeTargetingApiFp(this.configuration).getNegativeTargetsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.negativeTargetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of negative targeting clauses objects for a requested set of Sponsored Display negative targets. Note that the Negative Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the negative target operations that return the NegativeTargetingClauseEx object.
     * @summary Gets a list of negative targeting clauses.
     * @param {NegativeTargetingApiListNegativeTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeTargetingApi
     */
    public listNegativeTargetingClauses(requestParameters: NegativeTargetingApiListNegativeTargetingClausesRequest, options?: any) {
        return NegativeTargetingApiFp(this.configuration).listNegativeTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.adGroupIdFilter, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of NegativeTargetingClauseEx objects for a set of requested negative targets. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTargets.
     * @summary Gets a list of negative targeting clause objects with extended fields.
     * @param {NegativeTargetingApiListNegativeTargetingClausesExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeTargetingApi
     */
    public listNegativeTargetingClausesEx(requestParameters: NegativeTargetingApiListNegativeTargetingClausesExRequest, options?: any) {
        return NegativeTargetingApiFp(this.configuration).listNegativeTargetingClausesEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.targetIdFilter, requestParameters.adGroupIdFilter, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates one or more negative targeting clauses. Negative targeting clauses are identified using their targetId. The mutable field is `state`. Maximum length of the array is 100 objects.
     * @summary Updates one or more negative targeting clauses.
     * @param {NegativeTargetingApiUpdateNegativeTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeTargetingApi
     */
    public updateNegativeTargetingClauses(requestParameters: NegativeTargetingApiUpdateNegativeTargetingClausesRequest, options?: any) {
        return NegativeTargetingApiFp(this.configuration).updateNegativeTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateNegativeTargetingClause, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductAdsApi - axios parameter creator
 * @export
 */
export const ProductAdsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.
         * @summary Sets the status of a sproduct ad to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the produce ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveProductAd: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveProductAd', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveProductAd', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('archiveProductAd', 'adId', adId)
            const localVarPath = `/sd/productAds/{adId}`
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates one or more product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateProductAd>} [createProductAd] An array of ProductAd objects. For each object, specify required fields and their values. Required fields are &#x60;adGroupId&#x60;, &#x60;SKU&#x60; (for sellers) or &#x60;ASIN&#x60; (for vendors), and &#x60;state&#x60;\&#39;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductAds: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createProductAd?: Array<CreateProductAd>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createProductAds', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createProductAds', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/productAds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductAd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operations that returns the ProductAdResponseEx object.
         * @summary Gets a requested product ad.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the requested product ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductAd: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getProductAd', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getProductAd', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('getProductAd', 'adId', adId)
            const localVarPath = `/sd/productAds/{adId}`
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets extended information for a product ad.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the requested product ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductAdResponseEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getProductAdResponseEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getProductAdResponseEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('getProductAdResponseEx', 'adId', adId)
            const localVarPath = `/sd/productAds/extended/{adId}`
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of ProductAd objects for a requested set of Sponsored Display product ads. Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operation that returns the ProductAdResponseEx object.
         * @summary Gets a list of product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of ProductAd objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ad set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten product ads, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only products ads associated with campaigns that have state set to one of the values in the comma-delimited list.
         * @param {string} [adIdFilter] Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductAds: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listProductAds', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listProductAds', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/productAds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (adIdFilter !== undefined) {
                localVarQueryParameter['adIdFilter'] = adIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of ProductAdResponseEx objects for a set of requested ad groups. The ProductAdResponseEx object includes the extended set of available fields.
         * @summary Gets a list of product ads with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of ProduceAdEx objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ads set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [adIdFilter] Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductAdsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listProductAdsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listProductAdsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/productAds/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (adIdFilter !== undefined) {
                localVarQueryParameter['adIdFilter'] = adIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates one or more product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateProductAd>} [updateProductAd] An array of ProductAd objects. For each object, specify a product ad identifier and the only mutable field, &#x60;state&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductAds: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateProductAd?: Array<UpdateProductAd>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateProductAds', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateProductAds', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/productAds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductAd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductAdsApi - functional programming interface
 * @export
 */
export const ProductAdsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductAdsApiAxiosParamCreator(configuration)
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.
         * @summary Sets the status of a sproduct ad to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the produce ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveProductAd(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveProductAd(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates one or more product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateProductAd>} [createProductAd] An array of ProductAd objects. For each object, specify required fields and their values. Required fields are &#x60;adGroupId&#x60;, &#x60;SKU&#x60; (for sellers) or &#x60;ASIN&#x60; (for vendors), and &#x60;state&#x60;\&#39;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createProductAd?: Array<CreateProductAd>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAdResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createProductAd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operations that returns the ProductAdResponseEx object.
         * @summary Gets a requested product ad.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the requested product ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductAd(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAd>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductAd(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets extended information for a product ad.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the requested product ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductAdResponseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAdResponseEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductAdResponseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of ProductAd objects for a requested set of Sponsored Display product ads. Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operation that returns the ProductAdResponseEx object.
         * @summary Gets a list of product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of ProductAd objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ad set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten product ads, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only products ads associated with campaigns that have state set to one of the values in the comma-delimited list.
         * @param {string} [adIdFilter] Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAd>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adIdFilter, adGroupIdFilter, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of ProductAdResponseEx objects for a set of requested ad groups. The ProductAdResponseEx object includes the extended set of available fields.
         * @summary Gets a list of product ads with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of ProduceAdEx objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ads set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [adIdFilter] Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductAdsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAdResponseEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProductAdsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adIdFilter, adGroupIdFilter, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates one or more product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateProductAd>} [updateProductAd] An array of ProductAd objects. For each object, specify a product ad identifier and the only mutable field, &#x60;state&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateProductAd?: Array<UpdateProductAd>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAdResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateProductAd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductAdsApi - factory interface
 * @export
 */
export const ProductAdsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductAdsApiFp(configuration)
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.
         * @summary Sets the status of a sproduct ad to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the produce ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveProductAd(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): AxiosPromise<ProductAdResponse> {
            return localVarFp.archiveProductAd(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates one or more product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateProductAd>} [createProductAd] An array of ProductAd objects. For each object, specify required fields and their values. Required fields are &#x60;adGroupId&#x60;, &#x60;SKU&#x60; (for sellers) or &#x60;ASIN&#x60; (for vendors), and &#x60;state&#x60;\&#39;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createProductAd?: Array<CreateProductAd>, options?: any): AxiosPromise<Array<ProductAdResponse>> {
            return localVarFp.createProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createProductAd, options).then((request) => request(axios, basePath));
        },
        /**
         * Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operations that returns the ProductAdResponseEx object.
         * @summary Gets a requested product ad.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the requested product ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductAd(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): AxiosPromise<ProductAd> {
            return localVarFp.getProductAd(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets extended information for a product ad.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the requested product ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductAdResponseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): AxiosPromise<ProductAdResponseEx> {
            return localVarFp.getProductAdResponseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of ProductAd objects for a requested set of Sponsored Display product ads. Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operation that returns the ProductAdResponseEx object.
         * @summary Gets a list of product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of ProductAd objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ad set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten product ads, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only products ads associated with campaigns that have state set to one of the values in the comma-delimited list.
         * @param {string} [adIdFilter] Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<ProductAd>> {
            return localVarFp.listProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adIdFilter, adGroupIdFilter, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of ProductAdResponseEx objects for a set of requested ad groups. The ProductAdResponseEx object includes the extended set of available fields.
         * @summary Gets a list of product ads with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of ProduceAdEx objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ads set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [adIdFilter] Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductAdsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<ProductAdResponseEx>> {
            return localVarFp.listProductAdsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adIdFilter, adGroupIdFilter, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates one or more product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateProductAd>} [updateProductAd] An array of ProductAd objects. For each object, specify a product ad identifier and the only mutable field, &#x60;state&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateProductAd?: Array<UpdateProductAd>, options?: any): AxiosPromise<Array<ProductAdResponse>> {
            return localVarFp.updateProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateProductAd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveProductAd operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiArchiveProductAdRequest
 */
export interface ProductAdsApiArchiveProductAdRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProductAdsApiArchiveProductAd
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiArchiveProductAd
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the produce ad.
     * @type {number}
     * @memberof ProductAdsApiArchiveProductAd
     */
    readonly adId: number
}

/**
 * Request parameters for createProductAds operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiCreateProductAdsRequest
 */
export interface ProductAdsApiCreateProductAdsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProductAdsApiCreateProductAds
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiCreateProductAds
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of ProductAd objects. For each object, specify required fields and their values. Required fields are &#x60;adGroupId&#x60;, &#x60;SKU&#x60; (for sellers) or &#x60;ASIN&#x60; (for vendors), and &#x60;state&#x60;\&#39;. Maximum length of the array is 100 objects.
     * @type {Array<CreateProductAd>}
     * @memberof ProductAdsApiCreateProductAds
     */
    readonly createProductAd?: Array<CreateProductAd>
}

/**
 * Request parameters for getProductAd operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiGetProductAdRequest
 */
export interface ProductAdsApiGetProductAdRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProductAdsApiGetProductAd
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiGetProductAd
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested product ad.
     * @type {number}
     * @memberof ProductAdsApiGetProductAd
     */
    readonly adId: number
}

/**
 * Request parameters for getProductAdResponseEx operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiGetProductAdResponseExRequest
 */
export interface ProductAdsApiGetProductAdResponseExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProductAdsApiGetProductAdResponseEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiGetProductAdResponseEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested product ad.
     * @type {number}
     * @memberof ProductAdsApiGetProductAdResponseEx
     */
    readonly adId: number
}

/**
 * Request parameters for listProductAds operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiListProductAdsRequest
 */
export interface ProductAdsApiListProductAdsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProductAdsApiListProductAds
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiListProductAds
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof ProductAdsApiListProductAds
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of ProductAd objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ad set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten product ads, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof ProductAdsApiListProductAds
     */
    readonly count?: number

    /**
     * Optional. The returned array is filtered to include only products ads associated with campaigns that have state set to one of the values in the comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof ProductAdsApiListProductAds
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
     * @type {string}
     * @memberof ProductAdsApiListProductAds
     */
    readonly adIdFilter?: string

    /**
     * Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
     * @type {string}
     * @memberof ProductAdsApiListProductAds
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
     * @type {string}
     * @memberof ProductAdsApiListProductAds
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for listProductAdsEx operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiListProductAdsExRequest
 */
export interface ProductAdsApiListProductAdsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of ProduceAdEx objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ads set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly count?: number

    /**
     * Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
     * @type {string}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly adIdFilter?: string

    /**
     * Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
     * @type {string}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
     * @type {string}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for updateProductAds operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiUpdateProductAdsRequest
 */
export interface ProductAdsApiUpdateProductAdsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProductAdsApiUpdateProductAds
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiUpdateProductAds
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of ProductAd objects. For each object, specify a product ad identifier and the only mutable field, &#x60;state&#x60;. Maximum length of the array is 100 objects.
     * @type {Array<UpdateProductAd>}
     * @memberof ProductAdsApiUpdateProductAds
     */
    readonly updateProductAd?: Array<UpdateProductAd>
}

/**
 * ProductAdsApi - object-oriented interface
 * @export
 * @class ProductAdsApi
 * @extends {BaseAPI}
 */
export class ProductAdsApi extends BaseAPI {
    /**
     * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.
     * @summary Sets the status of a sproduct ad to archived.
     * @param {ProductAdsApiArchiveProductAdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public archiveProductAd(requestParameters: ProductAdsApiArchiveProductAdRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).archiveProductAd(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates one or more product ads.
     * @param {ProductAdsApiCreateProductAdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public createProductAds(requestParameters: ProductAdsApiCreateProductAdsRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).createProductAds(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createProductAd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operations that returns the ProductAdResponseEx object.
     * @summary Gets a requested product ad.
     * @param {ProductAdsApiGetProductAdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public getProductAd(requestParameters: ProductAdsApiGetProductAdRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).getProductAd(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets extended information for a product ad.
     * @param {ProductAdsApiGetProductAdResponseExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public getProductAdResponseEx(requestParameters: ProductAdsApiGetProductAdResponseExRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).getProductAdResponseEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of ProductAd objects for a requested set of Sponsored Display product ads. Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operation that returns the ProductAdResponseEx object.
     * @summary Gets a list of product ads.
     * @param {ProductAdsApiListProductAdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public listProductAds(requestParameters: ProductAdsApiListProductAdsRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).listProductAds(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.adIdFilter, requestParameters.adGroupIdFilter, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of ProductAdResponseEx objects for a set of requested ad groups. The ProductAdResponseEx object includes the extended set of available fields.
     * @summary Gets a list of product ads with extended fields.
     * @param {ProductAdsApiListProductAdsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public listProductAdsEx(requestParameters: ProductAdsApiListProductAdsExRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).listProductAdsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.adIdFilter, requestParameters.adGroupIdFilter, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates one or more product ads.
     * @param {ProductAdsApiUpdateProductAdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public updateProductAds(requestParameters: ProductAdsApiUpdateProductAdsRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).updateProductAds(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateProductAd, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a `307 Temporary Redirect` response that includes a `location` header with the value set to an AWS S3 path where the report is located. The path expires after 30 seconds. If the path expires before the report is downloaded, a new report request must be created.   **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/concepts/reporting/sponsored-ads).**
         * @summary Downloads a previously requested report identified by reportId.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} reportId The identifier of the requested report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadReport: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('downloadReport', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('downloadReport', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('downloadReport', 'reportId', reportId)
            const localVarPath = `/v2/reports/{reportId}/download`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uses the `reportId` value from the response of a report previously requested via `POST` method of the `/sd/{recordType}/report` operation.   **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/concepts/reporting/sponsored-ads).**
         * @summary Gets the status of a report previously requested.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} reportId The identifier of the requested report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportStatus: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getReportStatus', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getReportStatus', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('getReportStatus', 'reportId', reportId)
            const localVarPath = `/v2/reports/{reportId}`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/concepts/reporting/sponsored-ads).**  The Sponsored Display API supports creation of reports for campaigns, ad groups, product ads, targets, and asins. Create a ReportRequest object specifying the fields corresponding to performance data metrics to include in the report. 
         * @summary Creates a report request.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins'} recordType The type of report to generate, either &#x60;campaigns&#x60;, &#x60;adGroups&#x60;, &#x60;productAds&#x60;, &#x60;targets&#x60;, or &#x60;asins&#x60;. The \&#39;asins\&#39; report, also known as the Purchased products report, is only available for seller brand owners.
         * @param {ReportRequest} [reportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestReport: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins', reportRequest?: ReportRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('requestReport', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('requestReport', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'recordType' is not null or undefined
            assertParamExists('requestReport', 'recordType', recordType)
            const localVarPath = `/sd/{recordType}/report`
                .replace(`{${"recordType"}}`, encodeURIComponent(String(recordType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets a `307 Temporary Redirect` response that includes a `location` header with the value set to an AWS S3 path where the report is located. The path expires after 30 seconds. If the path expires before the report is downloaded, a new report request must be created.   **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/concepts/reporting/sponsored-ads).**
         * @summary Downloads a previously requested report identified by reportId.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} reportId The identifier of the requested report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadReport(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadReport(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, reportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Uses the `reportId` value from the response of a report previously requested via `POST` method of the `/sd/{recordType}/report` operation.   **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/concepts/reporting/sponsored-ads).**
         * @summary Gets the status of a report previously requested.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} reportId The identifier of the requested report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, reportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/concepts/reporting/sponsored-ads).**  The Sponsored Display API supports creation of reports for campaigns, ad groups, product ads, targets, and asins. Create a ReportRequest object specifying the fields corresponding to performance data metrics to include in the report. 
         * @summary Creates a report request.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins'} recordType The type of report to generate, either &#x60;campaigns&#x60;, &#x60;adGroups&#x60;, &#x60;productAds&#x60;, &#x60;targets&#x60;, or &#x60;asins&#x60;. The \&#39;asins\&#39; report, also known as the Purchased products report, is only available for seller brand owners.
         * @param {ReportRequest} [reportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestReport(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins', reportRequest?: ReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestReport(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, reportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * Gets a `307 Temporary Redirect` response that includes a `location` header with the value set to an AWS S3 path where the report is located. The path expires after 30 seconds. If the path expires before the report is downloaded, a new report request must be created.   **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/concepts/reporting/sponsored-ads).**
         * @summary Downloads a previously requested report identified by reportId.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} reportId The identifier of the requested report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadReport(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportId: string, options?: any): AxiosPromise<void> {
            return localVarFp.downloadReport(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, reportId, options).then((request) => request(axios, basePath));
        },
        /**
         * Uses the `reportId` value from the response of a report previously requested via `POST` method of the `/sd/{recordType}/report` operation.   **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/concepts/reporting/sponsored-ads).**
         * @summary Gets the status of a report previously requested.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} reportId The identifier of the requested report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportId: string, options?: any): AxiosPromise<ReportResponse> {
            return localVarFp.getReportStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, reportId, options).then((request) => request(axios, basePath));
        },
        /**
         * **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/concepts/reporting/sponsored-ads).**  The Sponsored Display API supports creation of reports for campaigns, ad groups, product ads, targets, and asins. Create a ReportRequest object specifying the fields corresponding to performance data metrics to include in the report. 
         * @summary Creates a report request.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins'} recordType The type of report to generate, either &#x60;campaigns&#x60;, &#x60;adGroups&#x60;, &#x60;productAds&#x60;, &#x60;targets&#x60;, or &#x60;asins&#x60;. The \&#39;asins\&#39; report, also known as the Purchased products report, is only available for seller brand owners.
         * @param {ReportRequest} [reportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestReport(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins', reportRequest?: ReportRequest, options?: any): AxiosPromise<ReportResponse> {
            return localVarFp.requestReport(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, reportRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for downloadReport operation in ReportsApi.
 * @export
 * @interface ReportsApiDownloadReportRequest
 */
export interface ReportsApiDownloadReportRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ReportsApiDownloadReport
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ReportsApiDownloadReport
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested report.
     * @type {string}
     * @memberof ReportsApiDownloadReport
     */
    readonly reportId: string
}

/**
 * Request parameters for getReportStatus operation in ReportsApi.
 * @export
 * @interface ReportsApiGetReportStatusRequest
 */
export interface ReportsApiGetReportStatusRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ReportsApiGetReportStatus
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ReportsApiGetReportStatus
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested report.
     * @type {string}
     * @memberof ReportsApiGetReportStatus
     */
    readonly reportId: string
}

/**
 * Request parameters for requestReport operation in ReportsApi.
 * @export
 * @interface ReportsApiRequestReportRequest
 */
export interface ReportsApiRequestReportRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ReportsApiRequestReport
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ReportsApiRequestReport
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The type of report to generate, either &#x60;campaigns&#x60;, &#x60;adGroups&#x60;, &#x60;productAds&#x60;, &#x60;targets&#x60;, or &#x60;asins&#x60;. The \&#39;asins\&#39; report, also known as the Purchased products report, is only available for seller brand owners.
     * @type {'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins'}
     * @memberof ReportsApiRequestReport
     */
    readonly recordType: 'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins'

    /**
     * 
     * @type {ReportRequest}
     * @memberof ReportsApiRequestReport
     */
    readonly reportRequest?: ReportRequest
}

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
    /**
     * Gets a `307 Temporary Redirect` response that includes a `location` header with the value set to an AWS S3 path where the report is located. The path expires after 30 seconds. If the path expires before the report is downloaded, a new report request must be created.   **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/concepts/reporting/sponsored-ads).**
     * @summary Downloads a previously requested report identified by reportId.
     * @param {ReportsApiDownloadReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public downloadReport(requestParameters: ReportsApiDownloadReportRequest, options?: any) {
        return ReportsApiFp(this.configuration).downloadReport(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.reportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uses the `reportId` value from the response of a report previously requested via `POST` method of the `/sd/{recordType}/report` operation.   **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/concepts/reporting/sponsored-ads).**
     * @summary Gets the status of a report previously requested.
     * @param {ReportsApiGetReportStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public getReportStatus(requestParameters: ReportsApiGetReportStatusRequest, options?: any) {
        return ReportsApiFp(this.configuration).getReportStatus(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.reportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/concepts/reporting/sponsored-ads).**  The Sponsored Display API supports creation of reports for campaigns, ad groups, product ads, targets, and asins. Create a ReportRequest object specifying the fields corresponding to performance data metrics to include in the report. 
     * @summary Creates a report request.
     * @param {ReportsApiRequestReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public requestReport(requestParameters: ReportsApiRequestReportRequest, options?: any) {
        return ReportsApiFp(this.configuration).requestReport(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.recordType, requestParameters.reportRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SnapshotsApi - axios parameter creator
 * @export
 */
export const SnapshotsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/concepts/snapshots/sponsored-ads).**
         * @summary Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} recordType The type of entity for which the snapshot should be gnerated. Must be one of: &#x60;campaigns&#x60;, &#x60;adgroups&#x60;, &#x60;prodcutAds&#x60;, or &#x60;targets&#x60;.
         * @param {SnapshotRequest} [snapshotRequest] Request a snapshot file for all entities of a single record type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSnapshot: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: string, snapshotRequest?: SnapshotRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createSnapshot', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createSnapshot', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'recordType' is not null or undefined
            assertParamExists('createSnapshot', 'recordType', recordType)
            const localVarPath = `/sd/{recordType}/snapshot`
                .replace(`{${"recordType"}}`, encodeURIComponent(String(recordType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(snapshotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/concepts/snapshots/sponsored-ads).**
         * @summary Download previously requested snapshot
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId The Snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadSnapshot: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('downloadSnapshot', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('downloadSnapshot', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('downloadSnapshot', 'snapshotId', snapshotId)
            const localVarPath = `/sd/snapshots/{snapshotId}/download`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/concepts/snapshots/sponsored-ads).**
         * @summary Retrieve status, metadata, and location of previously requested snapshot
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId The Snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSnapshot: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getSnapshot', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getSnapshot', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSnapshot', 'snapshotId', snapshotId)
            const localVarPath = `/sd/snapshots/{snapshotId}`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SnapshotsApi - functional programming interface
 * @export
 */
export const SnapshotsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SnapshotsApiAxiosParamCreator(configuration)
    return {
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/concepts/snapshots/sponsored-ads).**
         * @summary Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} recordType The type of entity for which the snapshot should be gnerated. Must be one of: &#x60;campaigns&#x60;, &#x60;adgroups&#x60;, &#x60;prodcutAds&#x60;, or &#x60;targets&#x60;.
         * @param {SnapshotRequest} [snapshotRequest] Request a snapshot file for all entities of a single record type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: string, snapshotRequest?: SnapshotRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, snapshotRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/concepts/snapshots/sponsored-ads).**
         * @summary Download previously requested snapshot
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId The Snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/concepts/snapshots/sponsored-ads).**
         * @summary Retrieve status, metadata, and location of previously requested snapshot
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId The Snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SnapshotsApi - factory interface
 * @export
 */
export const SnapshotsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SnapshotsApiFp(configuration)
    return {
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/concepts/snapshots/sponsored-ads).**
         * @summary Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} recordType The type of entity for which the snapshot should be gnerated. Must be one of: &#x60;campaigns&#x60;, &#x60;adgroups&#x60;, &#x60;prodcutAds&#x60;, or &#x60;targets&#x60;.
         * @param {SnapshotRequest} [snapshotRequest] Request a snapshot file for all entities of a single record type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: string, snapshotRequest?: SnapshotRequest, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.createSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, snapshotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/concepts/snapshots/sponsored-ads).**
         * @summary Download previously requested snapshot
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId The Snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options?: any): AxiosPromise<void> {
            return localVarFp.downloadSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options).then((request) => request(axios, basePath));
        },
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/concepts/snapshots/sponsored-ads).**
         * @summary Retrieve status, metadata, and location of previously requested snapshot
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId The Snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.getSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSnapshot operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiCreateSnapshotRequest
 */
export interface SnapshotsApiCreateSnapshotRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof SnapshotsApiCreateSnapshot
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SnapshotsApiCreateSnapshot
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The type of entity for which the snapshot should be gnerated. Must be one of: &#x60;campaigns&#x60;, &#x60;adgroups&#x60;, &#x60;prodcutAds&#x60;, or &#x60;targets&#x60;.
     * @type {string}
     * @memberof SnapshotsApiCreateSnapshot
     */
    readonly recordType: string

    /**
     * Request a snapshot file for all entities of a single record type.
     * @type {SnapshotRequest}
     * @memberof SnapshotsApiCreateSnapshot
     */
    readonly snapshotRequest?: SnapshotRequest
}

/**
 * Request parameters for downloadSnapshot operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiDownloadSnapshotRequest
 */
export interface SnapshotsApiDownloadSnapshotRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof SnapshotsApiDownloadSnapshot
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SnapshotsApiDownloadSnapshot
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The Snapshot identifier.
     * @type {string}
     * @memberof SnapshotsApiDownloadSnapshot
     */
    readonly snapshotId: string
}

/**
 * Request parameters for getSnapshot operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiGetSnapshotRequest
 */
export interface SnapshotsApiGetSnapshotRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof SnapshotsApiGetSnapshot
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SnapshotsApiGetSnapshot
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The Snapshot identifier.
     * @type {string}
     * @memberof SnapshotsApiGetSnapshot
     */
    readonly snapshotId: string
}

/**
 * SnapshotsApi - object-oriented interface
 * @export
 * @class SnapshotsApi
 * @extends {BaseAPI}
 */
export class SnapshotsApi extends BaseAPI {
    /**
     * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/concepts/snapshots/sponsored-ads).**
     * @summary Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria
     * @param {SnapshotsApiCreateSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    public createSnapshot(requestParameters: SnapshotsApiCreateSnapshotRequest, options?: any) {
        return SnapshotsApiFp(this.configuration).createSnapshot(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.recordType, requestParameters.snapshotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/concepts/snapshots/sponsored-ads).**
     * @summary Download previously requested snapshot
     * @param {SnapshotsApiDownloadSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    public downloadSnapshot(requestParameters: SnapshotsApiDownloadSnapshotRequest, options?: any) {
        return SnapshotsApiFp(this.configuration).downloadSnapshot(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.snapshotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/concepts/snapshots/sponsored-ads).**
     * @summary Retrieve status, metadata, and location of previously requested snapshot
     * @param {SnapshotsApiGetSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    public getSnapshot(requestParameters: SnapshotsApiGetSnapshotRequest, options?: any) {
        return SnapshotsApiFp(this.configuration).getSnapshot(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.snapshotId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TargetingApi - axios parameter creator
 * @export
 */
export const TargetingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Equivalent to using the `updateTargetingClauses` operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
         * @summary Sets the `state` of a targeting clause to `archived`.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifer of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveTargetingClause: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveTargetingClause', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveTargetingClause', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('archiveTargetingClause', 'targetId', targetId)
            const localVarPath = `/sd/targets/{targetId}`
                .replace(`{${"targetId"}}`, encodeURIComponent(String(targetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Successfully created targeting clauses are assigned a unique `targetId` value.  Create new targeting clauses for campaigns with tactic \'T00020\' using the following: | Product targeting clause | Description | |------------------|-------------| | similarProduct | Dynamic segment to target products that are similar to the advertised asin. We recommend using \'similarProduct\' targeting for all adGroups. | | asinSameAs=B0123456789 | Target this product. | | asinCategorySameAs=12345 | Target products in the category. | | asinCategorySameAs=12345 asinBrandSameAs=45678 | Target products in the category and brand. |  **Refinements:** - asinBrandSameAs - asinPriceBetween - asinPriceGreaterThan - asinPriceLessThan - asinReviewRatingLessThan - asinReviewRatingGreaterThan - asinReviewRatingBetween - asinIsPrimeShippingEligible - asinAgeRangeSameAs - asinGenreSameAs  **Refinement Notes:** * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the \'between\' strings to construct a targeting expression the format of the string is \'double-double\' where the first double must be smaller than the second double. Prices are not inclusive. * \'similarProduct\' has no expression value or refinements.   Create new targeting clauses for campaigns with tactic \'T00030\' using the following: | Audience targeting clause | Description | |------------------|-------------| | views(exactProduct lookback=30) | Target an audience that has viewed the advertised asins in the past 7,14,30,60, or 90 days. | | views(similarProduct lookback=60) | Target an audience that has viewed similar products to the advertised asins in the past 7,14,30,60, or 90 days. | | views(asinCategorySameAs=12345 lookback=90) | Target an audience that has viewed products in the given category in the past 7,14,30,60, or 90 days. | | views(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=60) | Target an audience that has viewed products in the given category, brand, and price range in the past 7,14,30,60, or 90 days. | | purchases(relatedProduct lookback=180) | Target an audience that has purchased a related product in the past 7,14,30,60,90,180 or 365 days| | purchases(exactProduct lookback=365) | Target an audience that has purchased the advertised asins in the past 7,14,30,60,90,180 or 365 days| | purchases(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=90) | Target an audience that has purchased products in the given category, brand, and price range in the past 7,14,30,60,90,180 or 365 days |          Note:  1. There is a limit of 20 targeting clauses per request for T00030. 2. There is a limit of 100 targeting clauses per request for T00020.         3. If you receive the error of \"Cannot create targeting clause: audience size is too small\", please expand or broaden your targeting clause to increase the audience size.
         * @summary Creates one or more targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateTargetingClause>} [createTargetingClause] A list of targeting clauses for creation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createTargetingClause?: Array<CreateTargetingClause>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/targets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTargetingClause, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This call returns the minimal set of targeting clause fields.
         * @summary Gets a targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifier of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargets: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getTargets', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getTargets', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('getTargets', 'targetId', targetId)
            const localVarPath = `/sd/targets/{targetId}`
                .replace(`{${"targetId"}}`, encodeURIComponent(String(targetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a targeting clause object with extended fields. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTarget.
         * @summary Gets extended information for a targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifier of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getTargetsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getTargetsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('getTargetsEx', 'targetId', targetId)
            const localVarPath = `/sd/targets/extended/{targetId}`
                .replace(`{${"targetId"}}`, encodeURIComponent(String(targetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of targeting clauses objects for a requested set of Sponsored Display targets. Note that the Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the target operations that return the TargetingClauseEx object.
         * @summary Gets a list of targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to those with &#x60;state&#x60; set to values in the specified comma-separated list. 
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adGroupIdFilter?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/targets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of TargetingClauseEx objects for a set of requested targets. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTargets.
         * @summary Gets a list of targeting clause objects with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
         * @param {string} [targetIdFilter] Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to ads within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTargetingClausesEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', targetIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listTargetingClausesEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listTargetingClausesEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/targets/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (targetIdFilter !== undefined) {
                localVarQueryParameter['targetIdFilter'] = targetIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates one or more targeting clauses. Targeting clauses are identified using their targetId. The mutable fields are `bid` and `state`. Maximum length of the array is 100 objects. 
         * @summary Updates one or more targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateTargetingClause>} [updateTargetingClause] A list of up to 100 targeting clauses. Mutable fields:  * &#x60;state&#x60; * &#x60;bid&#x60;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateTargetingClause?: Array<UpdateTargetingClause>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/targets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTargetingClause, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TargetingApi - functional programming interface
 * @export
 */
export const TargetingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TargetingApiAxiosParamCreator(configuration)
    return {
        /**
         * Equivalent to using the `updateTargetingClauses` operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
         * @summary Sets the `state` of a targeting clause to `archived`.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifer of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Successfully created targeting clauses are assigned a unique `targetId` value.  Create new targeting clauses for campaigns with tactic \'T00020\' using the following: | Product targeting clause | Description | |------------------|-------------| | similarProduct | Dynamic segment to target products that are similar to the advertised asin. We recommend using \'similarProduct\' targeting for all adGroups. | | asinSameAs=B0123456789 | Target this product. | | asinCategorySameAs=12345 | Target products in the category. | | asinCategorySameAs=12345 asinBrandSameAs=45678 | Target products in the category and brand. |  **Refinements:** - asinBrandSameAs - asinPriceBetween - asinPriceGreaterThan - asinPriceLessThan - asinReviewRatingLessThan - asinReviewRatingGreaterThan - asinReviewRatingBetween - asinIsPrimeShippingEligible - asinAgeRangeSameAs - asinGenreSameAs  **Refinement Notes:** * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the \'between\' strings to construct a targeting expression the format of the string is \'double-double\' where the first double must be smaller than the second double. Prices are not inclusive. * \'similarProduct\' has no expression value or refinements.   Create new targeting clauses for campaigns with tactic \'T00030\' using the following: | Audience targeting clause | Description | |------------------|-------------| | views(exactProduct lookback=30) | Target an audience that has viewed the advertised asins in the past 7,14,30,60, or 90 days. | | views(similarProduct lookback=60) | Target an audience that has viewed similar products to the advertised asins in the past 7,14,30,60, or 90 days. | | views(asinCategorySameAs=12345 lookback=90) | Target an audience that has viewed products in the given category in the past 7,14,30,60, or 90 days. | | views(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=60) | Target an audience that has viewed products in the given category, brand, and price range in the past 7,14,30,60, or 90 days. | | purchases(relatedProduct lookback=180) | Target an audience that has purchased a related product in the past 7,14,30,60,90,180 or 365 days| | purchases(exactProduct lookback=365) | Target an audience that has purchased the advertised asins in the past 7,14,30,60,90,180 or 365 days| | purchases(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=90) | Target an audience that has purchased products in the given category, brand, and price range in the past 7,14,30,60,90,180 or 365 days |          Note:  1. There is a limit of 20 targeting clauses per request for T00030. 2. There is a limit of 100 targeting clauses per request for T00020.         3. If you receive the error of \"Cannot create targeting clause: audience size is too small\", please expand or broaden your targeting clause to increase the audience size.
         * @summary Creates one or more targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateTargetingClause>} [createTargetingClause] A list of targeting clauses for creation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createTargetingClause?: Array<CreateTargetingClause>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createTargetingClause, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This call returns the minimal set of targeting clause fields.
         * @summary Gets a targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifier of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargets(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetingClause>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargets(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a targeting clause object with extended fields. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTarget.
         * @summary Gets extended information for a targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifier of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargetsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetingClauseEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargetsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a list of targeting clauses objects for a requested set of Sponsored Display targets. Note that the Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the target operations that return the TargetingClauseEx object.
         * @summary Gets a list of targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to those with &#x60;state&#x60; set to values in the specified comma-separated list. 
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetingClause>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adGroupIdFilter, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of TargetingClauseEx objects for a set of requested targets. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTargets.
         * @summary Gets a list of targeting clause objects with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
         * @param {string} [targetIdFilter] Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to ads within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTargetingClausesEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', targetIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetingClauseEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTargetingClausesEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, targetIdFilter, adGroupIdFilter, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates one or more targeting clauses. Targeting clauses are identified using their targetId. The mutable fields are `bid` and `state`. Maximum length of the array is 100 objects. 
         * @summary Updates one or more targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateTargetingClause>} [updateTargetingClause] A list of up to 100 targeting clauses. Mutable fields:  * &#x60;state&#x60; * &#x60;bid&#x60;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateTargetingClause?: Array<UpdateTargetingClause>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateTargetingClause, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TargetingApi - factory interface
 * @export
 */
export const TargetingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TargetingApiFp(configuration)
    return {
        /**
         * Equivalent to using the `updateTargetingClauses` operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
         * @summary Sets the `state` of a targeting clause to `archived`.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifer of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): AxiosPromise<TargetResponse> {
            return localVarFp.archiveTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Successfully created targeting clauses are assigned a unique `targetId` value.  Create new targeting clauses for campaigns with tactic \'T00020\' using the following: | Product targeting clause | Description | |------------------|-------------| | similarProduct | Dynamic segment to target products that are similar to the advertised asin. We recommend using \'similarProduct\' targeting for all adGroups. | | asinSameAs=B0123456789 | Target this product. | | asinCategorySameAs=12345 | Target products in the category. | | asinCategorySameAs=12345 asinBrandSameAs=45678 | Target products in the category and brand. |  **Refinements:** - asinBrandSameAs - asinPriceBetween - asinPriceGreaterThan - asinPriceLessThan - asinReviewRatingLessThan - asinReviewRatingGreaterThan - asinReviewRatingBetween - asinIsPrimeShippingEligible - asinAgeRangeSameAs - asinGenreSameAs  **Refinement Notes:** * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the \'between\' strings to construct a targeting expression the format of the string is \'double-double\' where the first double must be smaller than the second double. Prices are not inclusive. * \'similarProduct\' has no expression value or refinements.   Create new targeting clauses for campaigns with tactic \'T00030\' using the following: | Audience targeting clause | Description | |------------------|-------------| | views(exactProduct lookback=30) | Target an audience that has viewed the advertised asins in the past 7,14,30,60, or 90 days. | | views(similarProduct lookback=60) | Target an audience that has viewed similar products to the advertised asins in the past 7,14,30,60, or 90 days. | | views(asinCategorySameAs=12345 lookback=90) | Target an audience that has viewed products in the given category in the past 7,14,30,60, or 90 days. | | views(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=60) | Target an audience that has viewed products in the given category, brand, and price range in the past 7,14,30,60, or 90 days. | | purchases(relatedProduct lookback=180) | Target an audience that has purchased a related product in the past 7,14,30,60,90,180 or 365 days| | purchases(exactProduct lookback=365) | Target an audience that has purchased the advertised asins in the past 7,14,30,60,90,180 or 365 days| | purchases(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=90) | Target an audience that has purchased products in the given category, brand, and price range in the past 7,14,30,60,90,180 or 365 days |          Note:  1. There is a limit of 20 targeting clauses per request for T00030. 2. There is a limit of 100 targeting clauses per request for T00020.         3. If you receive the error of \"Cannot create targeting clause: audience size is too small\", please expand or broaden your targeting clause to increase the audience size.
         * @summary Creates one or more targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateTargetingClause>} [createTargetingClause] A list of targeting clauses for creation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createTargetingClause?: Array<CreateTargetingClause>, options?: any): AxiosPromise<Array<TargetResponse>> {
            return localVarFp.createTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createTargetingClause, options).then((request) => request(axios, basePath));
        },
        /**
         * This call returns the minimal set of targeting clause fields.
         * @summary Gets a targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifier of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargets(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): AxiosPromise<TargetingClause> {
            return localVarFp.getTargets(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a targeting clause object with extended fields. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTarget.
         * @summary Gets extended information for a targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifier of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): AxiosPromise<TargetingClauseEx> {
            return localVarFp.getTargetsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of targeting clauses objects for a requested set of Sponsored Display targets. Note that the Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the target operations that return the TargetingClauseEx object.
         * @summary Gets a list of targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to those with &#x60;state&#x60; set to values in the specified comma-separated list. 
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<TargetingClause>> {
            return localVarFp.listTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adGroupIdFilter, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of TargetingClauseEx objects for a set of requested targets. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTargets.
         * @summary Gets a list of targeting clause objects with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
         * @param {string} [targetIdFilter] Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to ads within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTargetingClausesEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', targetIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<TargetingClauseEx>> {
            return localVarFp.listTargetingClausesEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, targetIdFilter, adGroupIdFilter, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates one or more targeting clauses. Targeting clauses are identified using their targetId. The mutable fields are `bid` and `state`. Maximum length of the array is 100 objects. 
         * @summary Updates one or more targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateTargetingClause>} [updateTargetingClause] A list of up to 100 targeting clauses. Mutable fields:  * &#x60;state&#x60; * &#x60;bid&#x60;\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateTargetingClause?: Array<UpdateTargetingClause>, options?: any): AxiosPromise<Array<TargetResponse>> {
            return localVarFp.updateTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateTargetingClause, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveTargetingClause operation in TargetingApi.
 * @export
 * @interface TargetingApiArchiveTargetingClauseRequest
 */
export interface TargetingApiArchiveTargetingClauseRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingApiArchiveTargetingClause
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingApiArchiveTargetingClause
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifer of a targeting clause.
     * @type {number}
     * @memberof TargetingApiArchiveTargetingClause
     */
    readonly targetId: number
}

/**
 * Request parameters for createTargetingClauses operation in TargetingApi.
 * @export
 * @interface TargetingApiCreateTargetingClausesRequest
 */
export interface TargetingApiCreateTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingApiCreateTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingApiCreateTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of targeting clauses for creation.
     * @type {Array<CreateTargetingClause>}
     * @memberof TargetingApiCreateTargetingClauses
     */
    readonly createTargetingClause?: Array<CreateTargetingClause>
}

/**
 * Request parameters for getTargets operation in TargetingApi.
 * @export
 * @interface TargetingApiGetTargetsRequest
 */
export interface TargetingApiGetTargetsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingApiGetTargets
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingApiGetTargets
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of a targeting clause.
     * @type {number}
     * @memberof TargetingApiGetTargets
     */
    readonly targetId: number
}

/**
 * Request parameters for getTargetsEx operation in TargetingApi.
 * @export
 * @interface TargetingApiGetTargetsExRequest
 */
export interface TargetingApiGetTargetsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingApiGetTargetsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingApiGetTargetsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of a targeting clause.
     * @type {number}
     * @memberof TargetingApiGetTargetsEx
     */
    readonly targetId: number
}

/**
 * Request parameters for listTargetingClauses operation in TargetingApi.
 * @export
 * @interface TargetingApiListTargetingClausesRequest
 */
export interface TargetingApiListTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingApiListTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingApiListTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. 0-indexed record offset for the result set. Defaults to 0.
     * @type {number}
     * @memberof TargetingApiListTargetingClauses
     */
    readonly startIndex?: number

    /**
     * Optional. Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof TargetingApiListTargetingClauses
     */
    readonly count?: number

    /**
     * Optional. Restricts results to those with &#x60;state&#x60; set to values in the specified comma-separated list. 
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof TargetingApiListTargetingClauses
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
     * @type {string}
     * @memberof TargetingApiListTargetingClauses
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
     * @type {string}
     * @memberof TargetingApiListTargetingClauses
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for listTargetingClausesEx operation in TargetingApi.
 * @export
 * @interface TargetingApiListTargetingClausesExRequest
 */
export interface TargetingApiListTargetingClausesExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. 0-indexed record offset for the result set. Defaults to 0.
     * @type {number}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly startIndex?: number

    /**
     * Optional. Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly count?: number

    /**
     * Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
     * @type {string}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly targetIdFilter?: string

    /**
     * Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
     * @type {string}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. Restricts results to ads within campaigns specified in comma-separated list.
     * @type {string}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for updateTargetingClauses operation in TargetingApi.
 * @export
 * @interface TargetingApiUpdateTargetingClausesRequest
 */
export interface TargetingApiUpdateTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingApiUpdateTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingApiUpdateTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of up to 100 targeting clauses. Mutable fields:  * &#x60;state&#x60; * &#x60;bid&#x60;\&#39;
     * @type {Array<UpdateTargetingClause>}
     * @memberof TargetingApiUpdateTargetingClauses
     */
    readonly updateTargetingClause?: Array<UpdateTargetingClause>
}

/**
 * TargetingApi - object-oriented interface
 * @export
 * @class TargetingApi
 * @extends {BaseAPI}
 */
export class TargetingApi extends BaseAPI {
    /**
     * Equivalent to using the `updateTargetingClauses` operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
     * @summary Sets the `state` of a targeting clause to `archived`.
     * @param {TargetingApiArchiveTargetingClauseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingApi
     */
    public archiveTargetingClause(requestParameters: TargetingApiArchiveTargetingClauseRequest, options?: any) {
        return TargetingApiFp(this.configuration).archiveTargetingClause(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.targetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Successfully created targeting clauses are assigned a unique `targetId` value.  Create new targeting clauses for campaigns with tactic \'T00020\' using the following: | Product targeting clause | Description | |------------------|-------------| | similarProduct | Dynamic segment to target products that are similar to the advertised asin. We recommend using \'similarProduct\' targeting for all adGroups. | | asinSameAs=B0123456789 | Target this product. | | asinCategorySameAs=12345 | Target products in the category. | | asinCategorySameAs=12345 asinBrandSameAs=45678 | Target products in the category and brand. |  **Refinements:** - asinBrandSameAs - asinPriceBetween - asinPriceGreaterThan - asinPriceLessThan - asinReviewRatingLessThan - asinReviewRatingGreaterThan - asinReviewRatingBetween - asinIsPrimeShippingEligible - asinAgeRangeSameAs - asinGenreSameAs  **Refinement Notes:** * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the \'between\' strings to construct a targeting expression the format of the string is \'double-double\' where the first double must be smaller than the second double. Prices are not inclusive. * \'similarProduct\' has no expression value or refinements.   Create new targeting clauses for campaigns with tactic \'T00030\' using the following: | Audience targeting clause | Description | |------------------|-------------| | views(exactProduct lookback=30) | Target an audience that has viewed the advertised asins in the past 7,14,30,60, or 90 days. | | views(similarProduct lookback=60) | Target an audience that has viewed similar products to the advertised asins in the past 7,14,30,60, or 90 days. | | views(asinCategorySameAs=12345 lookback=90) | Target an audience that has viewed products in the given category in the past 7,14,30,60, or 90 days. | | views(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=60) | Target an audience that has viewed products in the given category, brand, and price range in the past 7,14,30,60, or 90 days. | | purchases(relatedProduct lookback=180) | Target an audience that has purchased a related product in the past 7,14,30,60,90,180 or 365 days| | purchases(exactProduct lookback=365) | Target an audience that has purchased the advertised asins in the past 7,14,30,60,90,180 or 365 days| | purchases(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=90) | Target an audience that has purchased products in the given category, brand, and price range in the past 7,14,30,60,90,180 or 365 days |          Note:  1. There is a limit of 20 targeting clauses per request for T00030. 2. There is a limit of 100 targeting clauses per request for T00020.         3. If you receive the error of \"Cannot create targeting clause: audience size is too small\", please expand or broaden your targeting clause to increase the audience size.
     * @summary Creates one or more targeting clauses.
     * @param {TargetingApiCreateTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingApi
     */
    public createTargetingClauses(requestParameters: TargetingApiCreateTargetingClausesRequest, options?: any) {
        return TargetingApiFp(this.configuration).createTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createTargetingClause, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This call returns the minimal set of targeting clause fields.
     * @summary Gets a targeting clause specified by identifier.
     * @param {TargetingApiGetTargetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingApi
     */
    public getTargets(requestParameters: TargetingApiGetTargetsRequest, options?: any) {
        return TargetingApiFp(this.configuration).getTargets(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.targetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a targeting clause object with extended fields. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTarget.
     * @summary Gets extended information for a targeting clause.
     * @param {TargetingApiGetTargetsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingApi
     */
    public getTargetsEx(requestParameters: TargetingApiGetTargetsExRequest, options?: any) {
        return TargetingApiFp(this.configuration).getTargetsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.targetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of targeting clauses objects for a requested set of Sponsored Display targets. Note that the Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the target operations that return the TargetingClauseEx object.
     * @summary Gets a list of targeting clauses.
     * @param {TargetingApiListTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingApi
     */
    public listTargetingClauses(requestParameters: TargetingApiListTargetingClausesRequest, options?: any) {
        return TargetingApiFp(this.configuration).listTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.adGroupIdFilter, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of TargetingClauseEx objects for a set of requested targets. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTargets.
     * @summary Gets a list of targeting clause objects with extended fields.
     * @param {TargetingApiListTargetingClausesExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingApi
     */
    public listTargetingClausesEx(requestParameters: TargetingApiListTargetingClausesExRequest, options?: any) {
        return TargetingApiFp(this.configuration).listTargetingClausesEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.targetIdFilter, requestParameters.adGroupIdFilter, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates one or more targeting clauses. Targeting clauses are identified using their targetId. The mutable fields are `bid` and `state`. Maximum length of the array is 100 objects. 
     * @summary Updates one or more targeting clauses.
     * @param {TargetingApiUpdateTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingApi
     */
    public updateTargetingClauses(requestParameters: TargetingApiUpdateTargetingClausesRequest, options?: any) {
        return TargetingApiFp(this.configuration).updateTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateTargetingClause, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TargetingRecommendationsApi - axios parameter creator
 * @export
 */
export const TargetingRecommendationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **Note that version `application/vnd.sdtargetingrecommendations.v3.1+json` is now supported.**          Provides a list of products to target based on the list of input ASINs. Allow 1 week for our systems to process data for any new ASINs listed on Amazon before using this service.   Currently the API will return up to 100 recommended products and categories.   The currently available tactic identifiers are:  |Tactic Name|Type|Description| |-----------|----|-----------| |T00020&nbsp;|Product Targeting|Products: Choose individual products to show your ads in placements related to those products.| |T00030&nbsp;|Audience Targeting|Audiences: Select individual audiences to show your ads.|        
         * @summary Returns a set of recommended products and categories to target
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingRecommendationsRequestV31} [sDTargetingRecommendationsRequestV31] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetRecommendations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDTargetingRecommendationsRequestV31?: SDTargetingRecommendationsRequestV31, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getTargetRecommendations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getTargetRecommendations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/targets/recommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.sdtargetingrecommendations.v3.1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sDTargetingRecommendationsRequestV31, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TargetingRecommendationsApi - functional programming interface
 * @export
 */
export const TargetingRecommendationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TargetingRecommendationsApiAxiosParamCreator(configuration)
    return {
        /**
         * **Note that version `application/vnd.sdtargetingrecommendations.v3.1+json` is now supported.**          Provides a list of products to target based on the list of input ASINs. Allow 1 week for our systems to process data for any new ASINs listed on Amazon before using this service.   Currently the API will return up to 100 recommended products and categories.   The currently available tactic identifiers are:  |Tactic Name|Type|Description| |-----------|----|-----------| |T00020&nbsp;|Product Targeting|Products: Choose individual products to show your ads in placements related to those products.| |T00030&nbsp;|Audience Targeting|Audiences: Select individual audiences to show your ads.|        
         * @summary Returns a set of recommended products and categories to target
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingRecommendationsRequestV31} [sDTargetingRecommendationsRequestV31] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargetRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDTargetingRecommendationsRequestV31?: SDTargetingRecommendationsRequestV31, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDTargetingRecommendationsResponseV31>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargetRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDTargetingRecommendationsRequestV31, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TargetingRecommendationsApi - factory interface
 * @export
 */
export const TargetingRecommendationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TargetingRecommendationsApiFp(configuration)
    return {
        /**
         * **Note that version `application/vnd.sdtargetingrecommendations.v3.1+json` is now supported.**          Provides a list of products to target based on the list of input ASINs. Allow 1 week for our systems to process data for any new ASINs listed on Amazon before using this service.   Currently the API will return up to 100 recommended products and categories.   The currently available tactic identifiers are:  |Tactic Name|Type|Description| |-----------|----|-----------| |T00020&nbsp;|Product Targeting|Products: Choose individual products to show your ads in placements related to those products.| |T00030&nbsp;|Audience Targeting|Audiences: Select individual audiences to show your ads.|        
         * @summary Returns a set of recommended products and categories to target
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingRecommendationsRequestV31} [sDTargetingRecommendationsRequestV31] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDTargetingRecommendationsRequestV31?: SDTargetingRecommendationsRequestV31, options?: any): AxiosPromise<SDTargetingRecommendationsResponseV31> {
            return localVarFp.getTargetRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDTargetingRecommendationsRequestV31, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTargetRecommendations operation in TargetingRecommendationsApi.
 * @export
 * @interface TargetingRecommendationsApiGetTargetRecommendationsRequest
 */
export interface TargetingRecommendationsApiGetTargetRecommendationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingRecommendationsApiGetTargetRecommendations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingRecommendationsApiGetTargetRecommendations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {SDTargetingRecommendationsRequestV31}
     * @memberof TargetingRecommendationsApiGetTargetRecommendations
     */
    readonly sDTargetingRecommendationsRequestV31?: SDTargetingRecommendationsRequestV31
}

/**
 * TargetingRecommendationsApi - object-oriented interface
 * @export
 * @class TargetingRecommendationsApi
 * @extends {BaseAPI}
 */
export class TargetingRecommendationsApi extends BaseAPI {
    /**
     * **Note that version `application/vnd.sdtargetingrecommendations.v3.1+json` is now supported.**          Provides a list of products to target based on the list of input ASINs. Allow 1 week for our systems to process data for any new ASINs listed on Amazon before using this service.   Currently the API will return up to 100 recommended products and categories.   The currently available tactic identifiers are:  |Tactic Name|Type|Description| |-----------|----|-----------| |T00020&nbsp;|Product Targeting|Products: Choose individual products to show your ads in placements related to those products.| |T00030&nbsp;|Audience Targeting|Audiences: Select individual audiences to show your ads.|        
     * @summary Returns a set of recommended products and categories to target
     * @param {TargetingRecommendationsApiGetTargetRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingRecommendationsApi
     */
    public getTargetRecommendations(requestParameters: TargetingRecommendationsApiGetTargetRecommendationsRequest, options?: any) {
        return TargetingRecommendationsApiFp(this.configuration).getTargetRecommendations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.sDTargetingRecommendationsRequestV31, options).then((request) => request(this.axios, this.basePath));
    }
}


