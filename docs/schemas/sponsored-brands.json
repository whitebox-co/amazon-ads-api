{
  "openapi": "3.0.2",
  "info": {
    "version": "3.0",
    "title": "Amazon Ads API - Sponsored Brands",
    "description": "Use the Amazon Ads API for Sponsored Brands for campaign, ad group, keyword, negative keyword, drafts, Stores, landing pages, and Brands management operations. For more information about Sponsored Brands, see the [Sponsored Brands Support Center](https://advertising.amazon.com/help#GQFZA83P55P747BZ). For onboarding information, see the [account setup](https://advertising.amazon.com/API/docs/v3/guides/account_setup) topic.<br/><br/> ",
    "contact": {
      "name": "Amazon Ads API Support",
      "url": "https://amzn-clicks.atlassian.net/servicedesk/customer/portals"
    },
    "license": {
      "name": "Amazon Ads API License Agreement",
      "url": "https://advertising.amazon.com/API/docs/license-agreement"
    }
  },
  "tags": [
    {
      "name": "Campaigns"
    },
    {
      "name": "Ad groups"
    },
    {
      "name": "Keywords"
    },
    {
      "name": "Negative keywords"
    },
    {
      "name": "Product targeting"
    },
    {
      "name": "Negative product targeting"
    },
    {
      "name": "Targeting recommendations"
    },
    {
      "name": "Bid recommendations"
    },
    {
      "name": "Drafts"
    },
    {
      "name": "Stores",
      "description": "(Not available for video campaigns)"
    },
    {
      "name": "Landing page asins",
      "description": "(Not available for video campaigns)"
    },
    {
      "name": "Media"
    },
    {
      "name": "Brands"
    },
    {
      "name": "Moderation",
      "description": "(Not available for video campaigns)"
    }
  ],
  "paths": {
    "/brands": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "getBrands",
        "description": "Gets an array of Brand data objects for the Brand associated with the profile ID passed in the header. For more information about Brands, see [Brand Services](https://brandservices.amazon.com/).",
        "operationId": "getBrands",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "brandTypeFilter",
            "schema": {
              "$ref": "#/components/schemas/BrandType"
            },
            "in": "query",
            "description": "The returned array is filtered to include only brands with brand type set to one of the values in the specified comma-delimited list. Returns all brands if not specified."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/vnd.brand.v3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "brandId": {
                        "description": "The Brand identifier.",
                        "type": "string"
                      },
                      "brandEntityId": {
                        "description": "The Brand entity identifier.",
                        "type": "string"
                      },
                      "brandRegistryName": {
                        "description": "The Brand name.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sb/campaigns": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "operationId": "listCampaigns",
        "summary": "Gets an array of all campaigns associated with the client identifier passed in the authorization header, filtered by specified criteria.",
        "description": "Gets an array of all campaigns associated with the client identifier passed in the authorization header, filtered by specified criteria. Returns both productCollection and video campaigns. Use either `adFormatFilter` or `creativeType` to filter campaigns by ad formats such as `productCollection` or `video`. <br>**Note:** An advertiser that has lost brand eligibility will not be able to use any write operations such as `POST`, `PUT`, and `DELETE`. This includes the `GET` operation `/pageAsins`. However, the rest of the `GET` operations such as `/sb/campaigns` will be usable regardless of advertiser's eligibility status.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "in": "query",
            "description": "Sets a zero-based offset into the requested set of campaigns. Use in conjunction with the `count` parameter to control pagination of the returned array."
          },
          {
            "name": "count",
            "schema": {
              "type": "integer",
              "default": "max page size"
            },
            "in": "query",
            "description": "Sets the number of campaigns in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten campaigns set `startIndex=0` and `count=10`. To return the next ten campaigns, set `startIndex=10` and `count=10`, and so on."
          },
          {
            "name": "stateFilter",
            "schema": {
              "$ref": "#/components/schemas/State"
            },
            "in": "query",
            "description": "The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list. Defaults to `enabled` and `paused`.<br/><br/> \n**Note** that Campaigns rejected during moderation have state set to `archived`."
          },
          {
            "name": "name",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only campaigns with the specified name."
          },
          {
            "name": "portfolioIdFilter",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string."
          },
          {
            "name": "campaignIdFilter",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string."
          },
          {
            "name": "adFormatFilter",
            "schema": {
              "$ref": "#/components/schemas/AdFormat"
            },
            "in": "query",
            "description": "The returned array includes only campaigns with ad format matching those specified in the comma-delimited adFormats. Returns all campaigns if not specified."
          },
          {
            "name": "creativeType",
            "schema": {
              "$ref": "#/components/schemas/CreativeType"
            },
            "in": "query",
            "description": "Filter by the type of creative the campaign is associated with. To get non-video campaigns specify 'productCollection'. To get video campaigns, this must be set to 'video'. Returns all campaigns if not specified."
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/vnd.sbcampaign.v3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBListCampaignsResponse"
                  }
                },
                "examples": {
                  "SBListCampaignsResponse": {
                    "value": [
                      {
                        "campaignId": 0,
                        "name": "string",
                        "budget": 0,
                        "budgetType": "lifetime",
                        "startDate": "string",
                        "endDate": "string",
                        "state": "enabled",
                        "servingStatus": "asinNotBuyable",
                        "portfolioId": 0,
                        "bidOptimization": true,
                        "bidMultiplier": 0,
                        "bidAdjustments": [
                          {
                            "bidAdjustmentPredicate": "placementGroupHome",
                            "bidAdjustmentPercent": 50
                          },
                          {
                            "bidAdjustmentPredicate": "placementGroupDetailPage",
                            "bidAdjustmentPercent": 50
                          },
                          {
                            "bidAdjustmentPredicate": "placementGroupOther",
                            "bidAdjustmentPercent": 50
                          }
                        ],
                        "adFormat": "productCollection",
                        "creative": {
                          "brandName": "string",
                          "brandLogoAssetID": "string",
                          "brandLogoUrl": "string",
                          "headline": "string",
                          "asins": [
                            "string"
                          ],
                          "shouldOptimizeAsins": false
                        },
                        "landingPage": {
                          "pageType": "productList",
                          "url": "string"
                        }
                      },
                      {
                        "campaignId": 0,
                        "name": "string",
                        "budget": 0,
                        "budgetType": "lifetime",
                        "startDate": "string",
                        "endDate": "string",
                        "state": "enabled",
                        "servingStatus": "asinNotBuyable",
                        "portfolioId": 0,
                        "adFormat": "video",
                        "creative": {
                          "asins": [
                            "string"
                          ],
                          "videoMediaIds": [
                            "string"
                          ],
                          "type": "video"
                        },
                        "landingPage": {
                          "pageType": "detailPage",
                          "url": "string"
                        }
                      }
                    ]
                  }
                }
              },
              "application/vnd.batchgetcampaignsresponse.v3.2+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/SBCampaignResponseCommon32"
                      },
                      {
                        "$ref": "#/components/schemas/SBVideoCampaignResponseCommon"
                      }
                    ]
                  }
                }
              },
              "application/vnd.batchgetcampaignsresponse.v3.3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBListCampaignsResponseV3_3"
                },
                "examples": {
                  "StoreSpotlightCampaignListExample": {
                    "$ref": "#/components/examples/StoreSpotlightCampaignListExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Campaigns"
        ],
        "operationId": "createCampaigns",
        "summary": "Creates one or more new Campaigns.",
        "description": "See the [create a Sponsored Brands campaign](https://advertising.amazon.com/help#GQFZA83P55P747BZ) topic in the Amazon Ads Support Center for more information about the campaign review process. **Note** to retrieve the state of a campaign submitted for creation, use the listCampaign operation and the campaign identifier from this operation. On SB creation, the state field is read-only. \n<br>**To create a video campaign specify adFormat as 'video'. If adFormat is not specified a Product Collection campaign will be created. Only a single video campaign can be created at a time.**\n<br>**Note** each campaign in campaign creation operation supports adding keywords or negative keywords with maximum list size of 100. Additional keywords or negative keywords can be added using [createKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Keywords) or [createNegativeKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Negative_Keywords).\n<br>**Note** each campaign in campaign creation operation supports adding targets or negative targets with maximum list size of 100. Additional targets or negative targets can be added using [createTargets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Product%20targeting) or [createNegativeTargets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Negative%20product%20targeting).\n<br>**Note** that keywords or expressions *can not* be recreated for a campaign if the keyword or expression has previously been associated with a campaign and subsequently archived. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of campaigns.",
          "content": {
            "application/vnd.sbcreatecampaignresponse.v3+json": {
              "schema": {
                "type": "array",
                "maximum": 10,
                "items": {
                  "$ref": "#/components/schemas/SBCreateCampaignRequest"
                }
              },
              "examples": {
                "SBCreateCampaignWithKeywords": {
                  "value": [
                    {
                      "name": "string",
                      "budget": 0,
                      "budgetType": "lifetime",
                      "startDate": "string",
                      "endDate": "string",
                      "adFormat": "productCollection",
                      "state": "enabled",
                      "brandEntityId": "string",
                      "bidOptimization": true,
                      "bidMultiplier": 0,
                      "bidAdjustments": [
                        {
                          "bidAdjustmentPredicate": "placementGroupHome",
                          "bidAdjustmentPercent": 50
                        },
                        {
                          "bidAdjustmentPredicate": "placementGroupDetailPage",
                          "bidAdjustmentPercent": 50
                        },
                        {
                          "bidAdjustmentPredicate": "placementGroupOther",
                          "bidAdjustmentPercent": 50
                        }
                      ],
                      "portfolioId": 0,
                      "creative": {
                        "brandName": "string",
                        "brandLogoAssetID": "string",
                        "headline": "string",
                        "asins": [
                          "string"
                        ],
                        "shouldOptimizeAsins": false
                      },
                      "landingPage": {
                        "asins": [
                          "string"
                        ],
                        "url": "string"
                      },
                      "keywords": [
                        {
                          "keywordText": "string",
                          "nativeLanguageKeyword": "string",
                          "nativeLanguageLocale": "string",
                          "matchType": "broad",
                          "bid": 0
                        }
                      ],
                      "negativeKeywords": [
                        {
                          "keywordText": "string",
                          "matchType": "negativeExact"
                        }
                      ]
                    }
                  ]
                },
                "SBCreateCampaignWithExpressions": {
                  "value": [
                    {
                      "name": "string",
                      "budget": 0,
                      "budgetType": "lifetime",
                      "startDate": "string",
                      "endDate": "string",
                      "adFormat": "productCollection",
                      "state": "enabled",
                      "brandEntityId": "string",
                      "bidOptimization": true,
                      "bidMultiplier": 0,
                      "bidAdjustments": [
                        {
                          "bidAdjustmentPredicate": "placementGroupHome",
                          "bidAdjustmentPercent": 50
                        },
                        {
                          "bidAdjustmentPredicate": "placementGroupDetailPage",
                          "bidAdjustmentPercent": 50
                        },
                        {
                          "bidAdjustmentPredicate": "placementGroupOther",
                          "bidAdjustmentPercent": 50
                        }
                      ],
                      "portfolioId": 0,
                      "creative": {
                        "brandName": "string",
                        "brandLogoAssetID": "string",
                        "headline": "string",
                        "asins": [
                          "string"
                        ],
                        "shouldOptimizeAsins": false
                      },
                      "landingPage": {
                        "asins": [
                          "string"
                        ],
                        "url": "string"
                      },
                      "targets": [
                        {
                          "expressions": [
                            {
                              "type": "asinCategorySameAs",
                              "value": "string"
                            }
                          ],
                          "bid": 0
                        }
                      ],
                      "negativeTargets": [
                        {
                          "expressions": [
                            {
                              "type": "asinCategorySameAs",
                              "value": "string"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "SBVideoCreateCampaignWithKeywords": {
                  "value": [
                    {
                      "name": "string",
                      "budget": 0,
                      "budgetType": "lifetime",
                      "startDate": "string",
                      "endDate": "string",
                      "adFormat": "video",
                      "state": "enabled",
                      "brandEntityId": "string",
                      "portfolioId": 0,
                      "creative": {
                        "asins": [
                          "string"
                        ],
                        "videoMediaIds": [
                          "string"
                        ],
                        "type": "video"
                      },
                      "keywords": [
                        {
                          "keywordText": "string",
                          "nativeLanguageKeyword": "string",
                          "nativeLanguageLocale": "string",
                          "matchType": "broad",
                          "bid": 0
                        }
                      ],
                      "negativeKeywords": [
                        {
                          "keywordText": "string",
                          "matchType": "negativeExact"
                        }
                      ]
                    }
                  ]
                },
                "SBVideoCreateCampaignWithExpressions": {
                  "value": [
                    {
                      "name": "string",
                      "budget": 0,
                      "budgetType": "lifetime",
                      "startDate": "string",
                      "endDate": "string",
                      "adFormat": "video",
                      "state": "enabled",
                      "brandEntityId": "string",
                      "portfolioId": 0,
                      "creative": {
                        "asins": [
                          "string"
                        ],
                        "videoMediaIds": [
                          "string"
                        ],
                        "type": "video"
                      },
                      "targets": [
                        {
                          "expressions": [
                            {
                              "type": "asinCategorySameAs",
                              "value": "string"
                            }
                          ],
                          "bid": 0
                        }
                      ],
                      "negativeTargets": [
                        {
                          "expressions": [
                            {
                              "type": "asinCategorySameAs",
                              "value": "string"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            "application/vnd.createcampaignsresponse.v3.2+json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SBCampaignResponseCommon32"
                    },
                    {
                      "$ref": "#/components/schemas/SBVideoCampaignResponseCommon"
                    }
                  ]
                }
              }
            },
            "application/vnd.createcampaignsresponse.v3.3+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SBCreateCampaignResponseV3_3"
                }
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/vnd.sbcreatecampaignresponse.v3+json": {
                "schema": {
                  "properties": {
                    "campaignId": {
                      "description": "The campaign identifier.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "adGroupResponses": {
                      "description": "An array of ad groups associated with the campaign.",
                      "type": "array",
                      "items": {
                        "properties": {
                          "adGroupId": {
                            "description": "The ad group identifier.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "code": {
                            "description": "An enumerated response code.",
                            "type": "string"
                          },
                          "details": {
                            "description": "A human-readable description of the enumerated response code in the `code` field.",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "keywordResponses": {
                      "description": "An array of keywords associated with the campaign.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SBKeywordResponse"
                      }
                    },
                    "negativeKeywordResponses": {
                      "description": "An array of negative keywords associated with the campaign.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SBKeywordResponse"
                      }
                    },
                    "code": {
                      "description": "An enumerated response code.",
                      "type": "string"
                    },
                    "details": {
                      "description": "A human-readable description of the enumerated response code in the `code` field.",
                      "type": "string"
                    }
                  }
                }
              },
              "application/vnd.createcampaignsresponse.v3.3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBCreateCampaignResponseV3_3"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad request.",
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Campaigns"
        ],
        "operationId": "updateCampaigns",
        "summary": "Updates one or more campaigns.",
        "description": "Mutable fields:\n* `name` \n* `state`\n* `portfolioId`\n* `budget`\n* `bidOptimization`\n* `bidMultiplier`\n* `bidAdjustments`\n* `endDate`",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of campaigns with updated field values.",
          "content": {
            "application/vnd.sbupdatecampaignresponse.v3+json": {
              "schema": {
                "type": "array",
                "items": {
                  "properties": {
                    "campaignId": {
                      "description": "The identifier of an existing campaign.",
                      "type": "integer"
                    },
                    "name": {
                      "description": "The name of the campaign.",
                      "type": "string"
                    },
                    "tags": {
                      "$ref": "#/components/schemas/CampaignTags"
                    },
                    "budget": {
                      "description": "The budget associated with the campaign.",
                      "type": "number"
                    },
                    "endDate": {
                      "type": "string",
                      "description": "The YYYYMMDD end date for the campaign. Note that a value must be specified if the `budgetType` for the campaign is set to `lifetime`."
                    },
                    "state": {
                      "$ref": "#/components/schemas/State"
                    },
                    "bidOptimization": {
                      "type": "boolean",
                      "description": "Set to true to allow Amazon to automatically optimize bids for placements below top of search. `Not supported for video campaigns`"
                    },
                    "bidMultiplier": {
                      "type": "number",
                      "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.\n`Not supported for video campaigns`",
                      "minimum": -99,
                      "maximum": 99
                    },
                    "bidAdjustments": {
                      "type": "array",
                      "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents.",
                      "items": {
                        "$ref": "#/components/schemas/BidAdjustment"
                      }
                    },
                    "portfolioId": {
                      "description": "The identifier of the portfolio to which the campaign is associated.",
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            },
            "application/vnd.updatecampaignsresponse.v3.3+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SBUpdateCampaignResponseItemV3_3"
                }
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Multi-status. Note that the order of the returned array matches the order of the array passed in the request.",
            "content": {
              "application/vnd.sbupdatecampaignresponse.v3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBUpdateCampaignResponse"
                  }
                }
              },
              "application/vnd.updatecampaignsresponse.v3.3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBUpdateCampaignResponseItemV3_3"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad request.",
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sb/campaigns/{campaignId}": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "operationId": "getCampaign",
        "summary": "Gets a campaign specified by identifier.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "The identifier of an existing campaign.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "locale",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only keywords associated with locale matching those specified by identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/vnd.sbcampaign.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBCampaignResponse"
                }
              },
              "application/vnd.sbcampaign.v3.2+json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SBCampaignResponseCommon32"
                    },
                    {
                      "$ref": "#/components/schemas/SBVideoCampaignResponseCommon"
                    }
                  ]
                }
              },
              "application/vnd.sbcampaign.v3.3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBCampaignResponseV3_3"
                },
                "examples": {
                  "StoreSpotlightSingleCampaignExample": {
                    "$ref": "#/components/examples/StoreSpotlightSingleCampaignExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad request. Campaign identifier not found.",
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Campaigns"
        ],
        "operationId": "archiveCampaign",
        "summary": "Archives a campaign specified by identifier.",
        "description": "This operation is equivalent to an update operation that sets the status field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "The identifier of an existing campaign.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/vnd.sbupdatecampaignresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBUpdateCampaignResponse"
                }
              },
              "application/vnd.archivecampaignsresponse.v3.3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBUpdateCampaignResponseDefault"
                }
              }
            }
          },
          "404": {
            "description": "Bad request.",
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sb/adGroups": {
      "get": {
        "tags": [
          "Ad groups"
        ],
        "operationId": "listAdGroups",
        "summary": "Gets an array of ad groups associated with the client identifier passed in the authorization header, filtered by specified criteria.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "in": "query",
            "description": "Sets a zero-based offset into the requested set of ad groups. Use in conjunction with the `count` parameter to control pagination of the returned array."
          },
          {
            "name": "count",
            "schema": {
              "type": "integer",
              "default": "max page size"
            },
            "in": "query",
            "description": "Sets the number of ad groups in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten ad groups set `startIndex=0` and `count=10`. To return the next ten ad groups, set `startIndex=10` and `count=10`, and so on."
          },
          {
            "name": "name",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only ad groups with the specified name."
          },
          {
            "name": "adGroupIdFilter",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only ad groups with identifiers matching those specified in the comma-delimited string."
          },
          {
            "name": "campaignIdFilter",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only ad groups associated with campaign identifiers matching those specified in the comma-delimited string."
          },
          {
            "name": "creativeType",
            "schema": {
              "$ref": "#/components/schemas/CreativeType"
            },
            "in": "query",
            "description": "Filter by the type of creative the campaign is associated with. To get ad groups associated with non-video campaigns specify 'productCollection'. To get ad groups associated with video campaigns, this must be set to 'video'. Returns all ad groups if not specified."
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/vnd.sbadgroup.v3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBAdGroup"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad request. Ad group identifier or campaign identifier specified in request was not found.",
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sb/adGroups/{adGroupId}": {
      "get": {
        "tags": [
          "Ad groups"
        ],
        "operationId": "getAdGroup",
        "summary": "Gets an ad group specified by identifier.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "adGroupId",
            "in": "path",
            "required": true,
            "description": "The identifier of an existing ad group.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/vnd.sbadgroup.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBAdGroup"
                }
              }
            }
          },
          "404": {
            "description": "Bad request. The ad group identifier specified in the request was not found.",
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sb/keywords": {
      "get": {
        "tags": [
          "Keywords"
        ],
        "operationId": "listKeywords",
        "summary": "Gets an array of keywords, filtered by optional criteria.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "in": "query",
            "description": "Sets a zero-based offset into the requested set of keywords. Use in conjunction with the `count` parameter to control pagination of the returned array."
          },
          {
            "name": "count",
            "schema": {
              "type": "integer",
              "default": "max page size"
            },
            "in": "query",
            "description": "Sets the number of keywords in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten keywords set `startIndex=0` and `count=10`. To return the next ten keywords, set `startIndex=10` and `count=10`, and so on."
          },
          {
            "name": "matchTypeFilter",
            "schema": {
              "$ref": "#/components/schemas/MatchType",
              "default": "broad,exact,phrase"
            },
            "in": "query",
            "description": "The returned array is filtered to include only keywords with `matchType` set to one of the values in the specified comma-delimited list."
          },
          {
            "name": "keywordText",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only keywords with the specified text."
          },
          {
            "name": "stateFilter",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived"
              ],
              "default": "enabled,paused"
            },
            "in": "query",
            "description": "The returned array is filtered to include only keywords with 'state' set to one of the values in the specified comma-delimited list."
          },
          {
            "name": "campaignIdFilter",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only keywords associated with campaigns matching those specified by identifier in the comma-delimited string."
          },
          {
            "name": "adGroupIdFilter",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only keywords associated with ad groups matching those specified by identifier in the comma-delimited string."
          },
          {
            "name": "keywordIdFilter",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only keywords with identifiers matching those specified in the comma-delimited string."
          },
          {
            "name": "creativeType",
            "schema": {
              "$ref": "#/components/schemas/CreativeType"
            },
            "in": "query",
            "description": "Filter by the type of creative the campaign is associated with. To get keywords associated with non-video campaigns specify 'productCollection'. To get keywords associated with video campaigns, this must be set to 'video'. Returns all keywords if not specified."
          },
          {
            "name": "locale",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only keywords with locale matching those specified string."
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/vnd.sbkeyword.v3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBKeyword"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Keywords"
        ],
        "operationId": "updateKeywords",
        "summary": "Updates one or more keywords.",
        "description": "Keywords submitted for update may have state set to `pending` for moderation review. Moderation may take up to 72 hours. <br/>Note that keywords can be updated on campaigns where serving status is not one of `archived`, `terminated`, `rejected`, or `ended`. <br/>Note that this operation supports a maximum list size of 100 keywords.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of keywords.",
          "content": {
            "application/vnd.sbkeywordresponse.v3+json": {
              "schema": {
                "type": "array",
                "maximum": 100,
                "items": {
                  "properties": {
                    "keywordId": {
                      "description": "The identifier of the keyword.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "adGroupId": {
                      "description": "The identifier of an existing ad group to which the keyword is associated.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "campaignId": {
                      "description": "The identifier of an existing campaign to which the keyword is associated.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "state": {
                      "$ref": "#/components/schemas/SBKeywordState"
                    },
                    "bid": {
                      "type": "number",
                      "description": "The bid associated with the keyword. Note that this value must be less than the budget associated with the Advertiser account. For more information, see the **Keyword bid constraints by marketplace** section of the [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features) article."
                    }
                  },
                  "required": [
                    "keywordId",
                    "adGroupId",
                    "campaignId"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Multi-status. Note that the order of the returned array matches the order of the array passed in the request.",
            "content": {
              "application/vnd.sbkeywordresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBKeywordResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Keywords"
        ],
        "operationId": "createKeywords",
        "summary": "Creates one or more keywords.",
        "description": "Note that `state` can't be set at keyword creation. Keywords submitted for creation have state set to `pending` while under moderation review. Moderation review may take up to 72 hours. <br/>Note that keywords can be created on campaigns where serving status is not one of `archived`, `terminated`, `rejected`, or `ended`. <br/>Note that this operation supports a maximum list size of 100 keywords.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of keywords.",
          "content": {
            "application/vnd.sbkeywordresponse.v3+json": {
              "schema": {
                "type": "array",
                "maximum": 100,
                "items": {
                  "properties": {
                    "adGroupId": {
                      "description": "The identifier of an existing ad group to which the keyword is associated.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "campaignId": {
                      "description": "The identifier of an existing campaign to which the keyword is associated.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "keywordText": {
                      "type": "string",
                      "description": "The keyword text. The maximum number of words for this string is 10."
                    },
                    "nativeLanguageKeyword": {
                      "description": "The unlocalized keyword text in the preferred locale of the advertiser.",
                      "type": "string"
                    },
                    "nativeLanguageLocale": {
                      "description": "The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES.",
                      "type": "string"
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/MatchType"
                    },
                    "bid": {
                      "type": "number",
                      "description": "The bid associated with the keyword. Note that this value must be less than the budget associated with the Advertiser account. For more information, see the **Keyword bid constraints by marketplace** section of the [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features) article."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Multi-status. Note that the order of the returned array matches the order of the array passed in the request.",
            "content": {
              "application/vnd.sbkeywordresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBKeywordResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sb/keywords/{keywordId}": {
      "get": {
        "tags": [
          "Keywords"
        ],
        "operationId": "getKeyword",
        "summary": "Gets a keyword specified by identifier.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "keywordId",
            "description": "The identifier of an existing keyword.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "locale",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only keywords associated with locale matching those specified by identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/vnd.sbkeyword.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBKeyword"
                }
              }
            }
          },
          "404": {
            "description": "Bad request. Keyword identifier not found.",
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Keywords"
        ],
        "operationId": "archiveKeyword",
        "summary": "Archives a keyword specified by identifier.",
        "description": "This operation is equivalent to an update operation that sets the status field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "keywordId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.sbkeywordresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBKeywordResponse"
                }
              }
            }
          },
          "404": {
            "description": "Bad request. Keyword identifier not found.",
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sb/negativeKeywords": {
      "get": {
        "tags": [
          "Negative keywords"
        ],
        "operationId": "listNegativeKeywords",
        "summary": "Gets an array of negative keywords, filtered by optional criteria.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "in": "query",
            "description": "Sets a zero-based offset into the requested set of negative keywords. Use in conjunction with the `count` parameter to control pagination of the returned array."
          },
          {
            "name": "count",
            "schema": {
              "type": "integer",
              "default": "max page size"
            },
            "in": "query",
            "description": "Sets the number of negative keywords in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten negative keywords set `startIndex=0` and `count=10`. To return the next ten negative keywords, set `startIndex=10` and `count=10`, and so on."
          },
          {
            "name": "matchTypeFilter",
            "schema": {
              "$ref": "#/components/schemas/NegativeMatchType"
            },
            "in": "query",
            "description": "The returned array is filtered to include only negative keywords with `matchType` set to one of the values in the specified comma-delimited list."
          },
          {
            "name": "keywordText",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only negative keywords with the specified text."
          },
          {
            "name": "stateFilter",
            "schema": {
              "$ref": "#/components/schemas/State"
            },
            "in": "query",
            "description": "The returned array includes only negative keywords with `state` set to the specified value."
          },
          {
            "name": "campaignIdFilter",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only negative keywords associated with campaigns matching those specified by identifier in the comma-delimited string."
          },
          {
            "name": "adGroupIdFilter",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only negative keywords associated with ad groups matching those specified by identifier in the comma-delimited string."
          },
          {
            "name": "keywordIdFilter",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only negative keywords with identifiers matching those specified in the comma-delimited string."
          },
          {
            "name": "creativeType",
            "schema": {
              "$ref": "#/components/schemas/CreativeType"
            },
            "in": "query",
            "description": "Filter by the type of creative the campaign is associated with. To get negative keywords associated with non-video campaigns specify 'productCollection'. To get negative keywords associated with video campaigns, this must be set to 'video'. Returns all negative keywords if not specified."
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/vnd.sbnegativekeyword.v3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBNegativeKeyword"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Negative keywords"
        ],
        "operationId": "updateNegativeKeywords",
        "summary": "Updates one or more negative keywords.",
        "description": "Negative keywords submitted for update may have state set to `pending` for moderation review. Moderation may take up to 72 hours. <br/>Note that negative keywords can be updated on campaigns where serving status is not one of `archived`, `terminated`, `rejected`, or `ended`. <br/>Note that this operation supports a maximum list size of 100 negative keywords.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of negative keywords.",
          "content": {
            "application/vnd.sbkeywordresponse.v3+json": {
              "schema": {
                "type": "array",
                "maximum": 100,
                "items": {
                  "properties": {
                    "keywordId": {
                      "description": "The identifier of the negative keyword.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "adGroupId": {
                      "description": "The identifier of the ad group to which the negative keyword is associated.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "campaignId": {
                      "description": "The identifier of the campaign to which the negative keyword is associated.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "state": {
                      "$ref": "#/components/schemas/SBNegativeKeywordState"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Multi-status. Note that the order of the returned array matches the order of the array passed in the request.",
            "content": {
              "application/vnd.sbkeywordresponse.v3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBKeywordResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Negative keywords"
        ],
        "operationId": "createNegativeKeywords",
        "summary": "Creates one or more negative keywords.",
        "description": "Note that `bid` and `state` can't be set at negative keyword creation. <br/>Note that Negative keywords submitted for creation have state set to `pending` while under moderation review. Moderation review may take up to 72 hours. <br/>Note that negative keywords can be created on campaigns one where serving status is not one of `archived`, `terminated`, `rejected`, or `ended`. <br/>Note that this operation supports a maximum list size of 100 negative keywords.\n<br>**Note** that negative keywords *can not* be recreated for a campaign if the negative keyword has previously been associated with a campaign and subsequently archived. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of negative keywords.",
          "content": {
            "application/vnd.sbkeywordresponse.v3+json": {
              "schema": {
                "type": "array",
                "maximum": 100,
                "items": {
                  "properties": {
                    "adGroupId": {
                      "description": "The identifier of the ad group to which the negative keyword is associated.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "campaignId": {
                      "description": "The identifier of the campaign to which the negative keyword is associated.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "keywordText": {
                      "type": "string",
                      "description": "The keyword text. Maximum length is ten words if 'matchType' is 'negativeExact'. Maximum length is 4 words if 'matchType' is 'negativePhrase'"
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/NegativeMatchType"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Multi-status. Note that the order of the returned array matches the order of the array passed in the request.",
            "content": {
              "application/vnd.sbkeywordresponse.v3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBKeywordResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sb/negativeKeywords/{keywordId}": {
      "get": {
        "tags": [
          "Negative keywords"
        ],
        "operationId": "getNegativeKeyword",
        "summary": "Gets a negative keyword specified by identifier.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "keywordId",
            "description": "The identifier of an existing negative keyword.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/vnd.sbnegativekeyword.v3+json": {
                "schema": {
                  "properties": {
                    "keywordId": {
                      "description": "The identifier of the negative keyword.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "adGroupId": {
                      "description": "The identifier of the ad group to which the negative keyword is associated.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "campaignId": {
                      "description": "The identifier of the campaign to which the negative keyword is associated.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "keywordText": {
                      "type": "string",
                      "description": "The keyword text. Maximum length of string is ten words if `matchType` is set to `negativeExact`. Maximum length is 4 words if `matchType` is set to `negativePhrase`."
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/NegativeMatchType"
                    },
                    "state": {
                      "$ref": "#/components/schemas/SBNegativeKeywordState"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Negative keywords"
        ],
        "operationId": "archiveNegativeKeyword",
        "summary": "Archives a negative keyword specified by identifier.",
        "description": "This operation is equivalent to an update operation that sets the status field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "keywordId",
            "description": "The identifier of an existing campaign.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/vnd.sbkeywordresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBKeywordResponse"
                }
              }
            }
          },
          "404": {
            "description": "Bad request. The specified negative keyword identifier was not found.",
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sb/drafts/campaigns": {
      "get": {
        "tags": [
          "Drafts"
        ],
        "operationId": "listDraftCampaigns",
        "summary": "Gets an array of draft campaign objects.",
        "description": "Gets an array of all draft campaigns associated with the client identifier passed in the authorization header, filtered by specified criteria. <br>**Returns both productCollection and video draft campaigns by default. Use adFormatFilter to filter drafts by ad formats.**",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "in": "query",
            "description": "Sets a zero-based offset into the requested set of draft campaigns. Use in conjunction with the `count` parameter to control pagination of the returned array."
          },
          {
            "name": "count",
            "schema": {
              "type": "integer",
              "default": "max page size"
            },
            "in": "query",
            "description": "Sets the number of draft campaigns in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten ad groups set `startIndex=0` and `count=10`. To return the next ten ad groups, set `startIndex=10` and `count=10`, and so on."
          },
          {
            "name": "name",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array only includes draft campaigns with the specified name."
          },
          {
            "name": "draftCampaignIdFilter",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only draft campaigns with identifiers matching those specified in the comma-delimited string."
          },
          {
            "name": "portfolioIdFilter",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string."
          },
          {
            "name": "adFormatFilter",
            "schema": {
              "$ref": "#/components/schemas/AdFormat"
            },
            "in": "query",
            "description": "The returned array includes only draft campaigns with ad format matching those specified in the comma-delimited adFormats. Returns all drafts if not specified."
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/vnd.sbdraftcampaign.v3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBGetDraftCampaignResponse"
                  }
                },
                "examples": {
                  "SBGetDraftCampaignResponse": {
                    "value": [
                      {
                        "draftCampaignId": 0,
                        "name": "string",
                        "budget": 0,
                        "budgetType": "lifetime",
                        "startDate": "string",
                        "endDate": "string",
                        "bidOptimization": true,
                        "bidMultiplier": 0,
                        "bidAdjustments": [
                          {
                            "bidAdjustmentPredicate": "placementGroupHome",
                            "bidAdjustmentPercent": 50
                          },
                          {
                            "bidAdjustmentPredicate": "placementGroupDetailPage",
                            "bidAdjustmentPercent": 50
                          },
                          {
                            "bidAdjustmentPredicate": "placementGroupOther",
                            "bidAdjustmentPercent": 50
                          }
                        ],
                        "portfolioId": 0,
                        "adFormat": "productCollection",
                        "creative": {
                          "brandName": "string",
                          "brandLogoAssetID": "string",
                          "brandLogoUrl": "string",
                          "headline": "string",
                          "asins": [
                            "string"
                          ],
                          "shouldOptimizeAsins": false
                        },
                        "landingPage": {
                          "pageType": "string",
                          "url": "string"
                        }
                      },
                      {
                        "draftCampaignId": 0,
                        "name": "string",
                        "budget": 0,
                        "budgetType": "lifetime",
                        "startDate": "string",
                        "endDate": "string",
                        "portfolioId": 0,
                        "adFormat": "video",
                        "creative": {
                          "asins": [
                            "string"
                          ],
                          "videoMediaIds": [
                            "string"
                          ],
                          "type": "video"
                        },
                        "landingPage": {
                          "pageType": "string",
                          "url": "string"
                        }
                      }
                    ]
                  }
                }
              },
              "application/vnd.batchgetdraftcampaignsresponse.v3.2+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/SBCampaignResponseCommon32"
                      },
                      {
                        "$ref": "#/components/schemas/SBVideoCampaignResponseCommon"
                      }
                    ]
                  }
                }
              },
              "application/vnd.batchgetdraftcampaignsresponse.v3.3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBListDraftCampaignsResponseV3_3"
                  }
                },
                "examples": {
                  "StoreSpotlightDraftListExample": {
                    "$ref": "#/components/examples/StoreSpotlightDraftListExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Drafts"
        ],
        "operationId": "createDraftCampaigns",
        "summary": "Creates one or more new draft campaigns.",
        "description": "Creates sponsored brands draft campaigns. <br>**To create a video campaign specify adFormat as 'video'. If adFormat is not specified then a product collection draft is created.**\n<br>Note each draft campaign can have keywords, negative keywords, targets and negative targets with batch size of upto 100.\n<br>**Note** each draft campaign in this operation supports adding keywords or negative keywords with maximum list size of 100. Additional keywords or negative keywords can be added using [createKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Keywords) or [createNegativeKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Negative_Keywords).\n<br>**Note** each draft campaign in this operation supports adding targets or negative targets with maximum list size of 100. Additional targets or negative targets can be added using [createTargets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Product%20targeting) or [createNegativeTargets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Negative%20product%20targeting).",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of draft campaigns.",
          "content": {
            "application/vnd.sbdraftcampaignresponse.v3+json": {
              "schema": {
                "type": "array",
                "maximum": 10,
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SBCreateDraftCampaignRequest"
                    }
                  ]
                }
              },
              "examples": {
                "SBCreateDraftCampaignWithKeywords": {
                  "value": [
                    {
                      "name": "string",
                      "budget": 0,
                      "budgetType": "lifetime",
                      "startDate": "string",
                      "endDate": "string",
                      "brandEntityId": "string",
                      "bidOptimization": true,
                      "bidMultiplier": 0,
                      "bidAdjustments": [
                        {
                          "bidAdjustmentPredicate": "placementGroupHome",
                          "bidAdjustmentPercent": 50
                        },
                        {
                          "bidAdjustmentPredicate": "placementGroupDetailPage",
                          "bidAdjustmentPercent": 50
                        },
                        {
                          "bidAdjustmentPredicate": "placementGroupOther",
                          "bidAdjustmentPercent": 50
                        }
                      ],
                      "adFormat": "productCollection",
                      "portfolioId": 0,
                      "creative": {
                        "brandName": "string",
                        "brandLogoAssetID": "string",
                        "headline": "string",
                        "asins": [
                          "string"
                        ],
                        "shouldOptimizeAsins": false
                      },
                      "landingPage": {
                        "asins": [
                          "string"
                        ],
                        "url": "string"
                      },
                      "keywords": [
                        {
                          "keywordText": "string",
                          "matchType": "broad",
                          "bid": 0
                        }
                      ],
                      "negativeKeywords": [
                        {
                          "keywordText": "string",
                          "matchType": "negativeExact"
                        }
                      ]
                    }
                  ]
                },
                "SBCreateDraftCampaignWithProductTargets": {
                  "value": [
                    {
                      "name": "string",
                      "budget": 0,
                      "budgetType": "lifetime",
                      "startDate": "string",
                      "endDate": "string",
                      "brandEntityId": "string",
                      "bidOptimization": true,
                      "bidMultiplier": 0,
                      "bidAdjustments": [
                        {
                          "bidAdjustmentPredicate": "placementGroupHome",
                          "bidAdjustmentPercent": 50
                        },
                        {
                          "bidAdjustmentPredicate": "placementGroupDetailPage",
                          "bidAdjustmentPercent": 50
                        },
                        {
                          "bidAdjustmentPredicate": "placementGroupOther",
                          "bidAdjustmentPercent": 50
                        }
                      ],
                      "adFormat": "productCollection",
                      "portfolioId": 0,
                      "creative": {
                        "brandName": "string",
                        "brandLogoAssetID": "string",
                        "headline": "string",
                        "asins": [
                          "string"
                        ],
                        "shouldOptimizeAsins": false
                      },
                      "landingPage": {
                        "asins": [
                          "string"
                        ],
                        "url": "string"
                      },
                      "targets": [
                        {
                          "expressions": [
                            {
                              "type": "asinCategorySameAs",
                              "value": "string"
                            }
                          ],
                          "bid": 0
                        }
                      ],
                      "negativeTargets": [
                        {
                          "expressions": [
                            {
                              "type": "asinCategorySameAs",
                              "value": "string"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "SBVideoCreateDraftCampaignWithKeywords": {
                  "value": [
                    {
                      "name": "string",
                      "budget": 0,
                      "budgetType": "lifetime",
                      "startDate": "string",
                      "endDate": "string",
                      "brandEntityId": "string",
                      "portfolioId": 0,
                      "adFormat": "video",
                      "creative": {
                        "asins": [
                          "string"
                        ],
                        "videoMediaIds": [
                          "string"
                        ],
                        "type": "video"
                      },
                      "keywords": [
                        {
                          "keywordText": "string",
                          "matchType": "broad",
                          "bid": 0
                        }
                      ],
                      "negativeKeywords": [
                        {
                          "keywordText": "string",
                          "matchType": "negativeExact"
                        }
                      ]
                    }
                  ]
                },
                "SBVideoCreateDraftCampaignWithProductTargets": {
                  "value": [
                    {
                      "name": "string",
                      "budget": 0,
                      "budgetType": "lifetime",
                      "startDate": "string",
                      "endDate": "string",
                      "brandEntityId": "string",
                      "portfolioId": 0,
                      "adFormat": "video",
                      "creative": {
                        "asins": [
                          "string"
                        ],
                        "videoMediaIds": [
                          "string"
                        ],
                        "type": "video"
                      },
                      "targets": [
                        {
                          "expressions": [
                            {
                              "type": "asinCategorySameAs",
                              "value": "string"
                            }
                          ],
                          "bid": 0
                        }
                      ],
                      "negativeTargets": [
                        {
                          "expressions": [
                            {
                              "type": "asinCategorySameAs",
                              "value": "string"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            "application/vnd.createdraftcampaignsresponse.v3.2+json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SBCampaignResponseCommon32"
                    },
                    {
                      "$ref": "#/components/schemas/SBVideoCampaignResponseCommon"
                    }
                  ]
                }
              }
            },
            "application/vnd.createdraftcampaignsresponse.v3.3+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SBDraftCampaignV3_3"
                }
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Multi-status.Note that the order of the returned array matches the order of the array passed in the request.",
            "content": {
              "application/vnd.sbdraftcampaignresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBDraftCampaignResponse"
                },
                "examples": {
                  "keywords": {
                    "value": {
                      "draftCampaignId": 0,
                      "code": "string",
                      "keywordResponses": [
                        {
                          "keywordId": 0,
                          "code": "string",
                          "details": "string"
                        }
                      ],
                      "negativeKeywordResponses": [
                        {
                          "keywordId": 0,
                          "code": "string",
                          "details": "string"
                        }
                      ],
                      "details": "string"
                    }
                  }
                }
              },
              "application/vnd.createdraftcampaignsresponse.v3.3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBDraftCampaignResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad request.",
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Drafts"
        ],
        "operationId": "updateDraftCampaigns",
        "summary": "Updates one or more draft campaigns.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of draft campaign objects with updated values.",
          "content": {
            "application/vnd.sbdraftcampaignresponse.v3+json": {
              "schema": {
                "type": "array",
                "items": {
                  "required": [
                    "draftCampaignId"
                  ],
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SBUpdateDraftCampaignRequest"
                    }
                  ]
                }
              }
            },
            "application/vnd.updatedraftcampaignsresponse.v3.3+json": {
              "schema": {
                "type": "array",
                "items": {
                  "required": [
                    "draftCampaignId"
                  ],
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestV3_3"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Multi-status. Note that the order of the returned array matches the order of the array passed in the request.",
            "content": {
              "application/vnd.sbdraftcampaignresponse.v3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBDraftCampaignResponse"
                  }
                }
              },
              "application/vnd.updatedraftcampaignsresponse.v3.3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBDraftCampaignResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad request.",
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sb/drafts/campaigns/{draftCampaignId}": {
      "get": {
        "tags": [
          "Drafts"
        ],
        "operationId": "getDraftCampaign.",
        "summary": "Gets a draft campaign specified by identifier.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "draftCampaignId",
            "in": "path",
            "description": "The identifier of an existing draft campaign.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/vnd.sbdraftcampaign.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBDraftCampaign"
                },
                "examples": {
                  "SBGetDraftCampaignResponse": {
                    "value": {
                      "draftCampaignId": 0,
                      "name": "string",
                      "budget": 0,
                      "budgetType": "lifetime",
                      "startDate": "string",
                      "endDate": "string",
                      "brandEntityId": "string",
                      "bidOptimization": true,
                      "bidMultiplier": 0,
                      "bidAdjustments": [
                        {
                          "bidAdjustmentPredicate": "placementGroupHome",
                          "bidAdjustmentPercent": 50
                        },
                        {
                          "bidAdjustmentPredicate": "placementGroupDetailPage",
                          "bidAdjustmentPercent": 50
                        },
                        {
                          "bidAdjustmentPredicate": "placementGroupOther",
                          "bidAdjustmentPercent": 50
                        }
                      ],
                      "portfolioId": 0,
                      "adFormat": "productCollection",
                      "creative": {
                        "brandName": "string",
                        "brandLogoAssetID": "string",
                        "brandLogoUrl": "string",
                        "headline": "string",
                        "asins": [
                          "string"
                        ],
                        "shouldOptimizeAsins": false
                      },
                      "landingPage": {
                        "pageType": "string",
                        "url": "string"
                      },
                      "keywords": [
                        {
                          "keywordId": 0,
                          "adGroupId": 0,
                          "campaignId": 0,
                          "keywordText": "string",
                          "matchType": "broad",
                          "state": "draft",
                          "bid": 0
                        }
                      ],
                      "negativeKeywords": [
                        {
                          "keywordId": 0,
                          "adGroupId": 0,
                          "campaignId": 0,
                          "keywordText": "string",
                          "matchType": "neagtiveExact",
                          "state": "draft"
                        }
                      ]
                    }
                  },
                  "SBVideoGetDraftCampaignResponse": {
                    "value": {
                      "draftCampaignId": 0,
                      "name": "string",
                      "budget": 0,
                      "budgetType": "lifetime",
                      "startDate": "string",
                      "endDate": "string",
                      "brandEntityId": "string",
                      "portfolioId": 0,
                      "adFormat": "video",
                      "creative": {
                        "asins": [
                          "string"
                        ],
                        "videoMediaIds": [
                          "string"
                        ],
                        "type": "video"
                      },
                      "landingPage": {
                        "pageType": "string",
                        "url": "string"
                      },
                      "keywords": [
                        {
                          "keywordId": 0,
                          "adGroupId": 0,
                          "campaignId": 0,
                          "keywordText": "string",
                          "matchType": "broad",
                          "state": "draft",
                          "bid": 0
                        }
                      ],
                      "negativeKeywords": [
                        {
                          "keywordId": 0,
                          "adGroupId": 0,
                          "campaignId": 0,
                          "keywordText": "string",
                          "matchType": "neagtiveExact",
                          "state": "draft"
                        }
                      ]
                    }
                  }
                }
              },
              "application/vnd.sbdraftcampaign.v3.2+json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SBCampaignResponseCommon32"
                    },
                    {
                      "$ref": "#/components/schemas/SBVideoCampaignResponseCommon"
                    }
                  ]
                }
              },
              "application/vnd.sbdraftcampaign.v3.3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBDraftCampaignV3_3"
                },
                "examples": {
                  "StoreSpotlightSingleDraftExample": {
                    "$ref": "#/components/examples/StoreSpotlightSingleDraftExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad request. The specified draft campaign identifier was not found.",
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Drafts"
        ],
        "operationId": "deleteDraftCampaign",
        "summary": "Archives a draft campaign specified by identifier.",
        "description": "This operation is equivalent to an update operation that sets the status field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/v2/guides/developer_notes) for more information.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "draftCampaignId",
            "in": "path",
            "description": "The identifier of an existing draft campaign.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/vnd.sbdraftcampaignresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBDraftCampaignDeleteResponse"
                }
              },
              "application/vnd.deletedraftcampaignsresponse.v3.3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBDraftCampaignDeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Bad request. The specified draft campaign identifier was not found.",
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sb/drafts/campaigns/submit": {
      "post": {
        "tags": [
          "Drafts"
        ],
        "operationId": "submitDraftCampaign",
        "summary": "Submits one or more existing draft campaigns to the moderation approval queue.",
        "description": "On successful submission, a campaign is created with an identifier that could be different from the original draft campaign identifier. The new identifier is returned in the response. Note that when a draft campaign is approved, the 'status' and 'servingStatus' fields are changed to values associated with an active campaign.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "A comma-delimited list of draft campaign identifiers. Maximum length is 10 draft campaign identifiers.",
          "content": {
            "application/vnd.sbcampaign.v3+json": {
              "schema": {
                "type": "array",
                "description": "An array of draft campaign identifiers.",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "description": "A draft campaign identifier.",
                  "minItems": 1,
                  "maxItems": 10
                }
              },
              "examples": {
                "SBSubmitDraftCampaign": {
                  "value": [
                    123456789,
                    987654321
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Multi-status. Note that the order of the returned array matches the order of the array passed in the request.",
            "content": {
              "application/vnd.sbdraftcampaignresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBSubmitDraftCampaignResponse"
                },
                "examples": {
                  "Sample response": {
                    "value": [
                      {
                        "code": "SUCCESS",
                        "keywordResponses": [
                          {
                            "code": "SUCCESS",
                            "keywordId": 33213
                          }
                        ],
                        "negativeKeywordResponses": [
                          {
                            "code": "SUCCESS",
                            "keywordId": 1233
                          }
                        ],
                        "campaignId": 123,
                        "draftCampaignId": 345
                      }
                    ]
                  }
                }
              },
              "application/vnd.submitdraftcampaignsresponse.v3.3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBSubmitDraftCampaignResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad request.",
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/pageAsins": {
      "get": {
        "tags": [
          "Landing page asins"
        ],
        "operationId": "listAsins",
        "summary": "Gets ASIN information for a specified address.",
        "description": "Note that for sellers, the addresss must be a Store page. Vendors may also specify a custom landing page address.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "pageUrl",
            "in": "query",
            "description": "For sellers, the address of a Store page. Vendors may also specify the address of a custom landing page. For more information, see the [Stores section](https://advertising.amazon.com/help#GPRM3ZHEXEY5RBFZ) of the Amazon Ads support center.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/vnd.pageasins.v3+json": {
                "schema": {
                  "properties": {
                    "asinList": {
                      "description": "An array of ASINs. Note that this field is present only if there were no errors during the request. If there were errors, the `code` field is the enumerated error, and the `details` field contains a human-readable description of the error.",
                      "type": "array",
                      "readOnly": false,
                      "items": {
                        "description": "A single ASIN.",
                        "type": "string"
                      }
                    },
                    "code": {
                      "description": "The enumerated response code.\n| Code | Description |\n|------|--------|\n|SUCCESS| The request was successful. The `asinList` field includes all available ASINs.|\n|INVALID_ARGUMENT| The request was not successful because the address was not for a valid landing page.|\n|BAD_GATEWAY| The request failed because the landing page at the specified address did not have any ASINs.|",
                      "type": "string"
                    },
                    "details": {
                      "description": "A human-readable description of the `code` field.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/media/upload": {
      "post": {
        "tags": [
          "Media"
        ],
        "summary": "Creates an ephemeral resource (upload location) to upload Media for an Ad Program (SponsoredBrands).",
        "description": "Creates an ephemeral resource (upload location) to upload Media for an Ad Program. The upload location is short lived and expires in 15 minutes. Once the upload is complete, /media/complete API should be used to notify that the upload is complete. <p> The upload location only supports `PUT` HTTP Method to upload the media content. If the upload location expires, API user will get `403 Forbidden` response. </p>",
        "parameters": [
          {
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "createUploadResource",
        "requestBody": {
          "description": "The Ad Program that the media will be attached to. Specify `SponsoredBrands` with creative type `Video` for Sponsored brands video campaigns.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Program"
              },
              "examples": {
                "SponsoredBrands": {
                  "value": {
                    "programType": "SponsoredBrands",
                    "creativeType": "Video"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns an ephemeral upload resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadLocation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaPublisherAPIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaPublisherAPIError"
                }
              }
            }
          }
        }
      }
    },
    "/media/complete": {
      "put": {
        "tags": [
          "Media"
        ],
        "summary": "The API is used to notify that the upload is completed.",
        "description": "The API should be called once the media is uploaded to the location provided by the /media/upload API endpoint. The API creates a Media resource for the uploaded media. Media resource is comprised of Media Identifier. The Media Identifier can be used to attach media to Ad Program (Sponsored Brands).\n\nThe API internally kicks off the asynchronous validation and processing workflow of the uploaded media. As a result, Media may not be immediately available for usage (to create Sponsored Brands Video Campaign) as soon as the response is received. See /media/describe API doc for instructions on when media is ready for campaign creation.",
        "parameters": [
          {
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "completeUpload",
        "requestBody": {
          "description": "The  upload location",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "uploadLocation": {
                    "$ref": "#/components/schemas/UploadLocation"
                  },
                  "version": {
                    "type": "string",
                    "description": "The version id of the uploaded media. The upload location retrieved from /media/upload API supports versioning and returns version id in the upload response through `x-amz-version-id` header. API user can explicitly specify the version id corresponding to an upload through `version` property. `version` is optional and if it is not specified, media corresponding to the most recent version at the time of API call will be used."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Media Resource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mediaId": {
                      "$ref": "#/components/schemas/MediaId"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaPublisherAPIError"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaPublisherAPIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaPublisherAPIError"
                }
              }
            }
          }
        }
      }
    },
    "/media/describe": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "API to poll for media status",
        "description": "API to poll for media status.\nIn order to attach media to campaign, media should be in either `PendingDeepValidation` or `Available` status.\n\n`Available` status guarantees that media has completed processing and published for usage.\n\nThough media can be attached to campaign once the status of the media transitions to `PendingDeepValidation`, media could still fail additional validation and transition to `Failed` status. For example in the context of SBV, SBV campaign can be created when status transitions to `PendingDeepValidation`, it could result in SBV campaign to be rejected later if media transitions to `Failed` status.",
        "operationId": "describeMedia",
        "parameters": [
          {
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "mediaId",
            "in": "query",
            "description": "Media Identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Media Resource",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mediaId": {
                      "$ref": "#/components/schemas/MediaId"
                    },
                    "status": {
                      "$ref": "#/components/schemas/MediaStatus"
                    },
                    "statusMetadata": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        },
                        "description": "Additional status metadata. It is only available when status is `Failed` and `statusMetadata` provides additional detail on why media status is `Failed`. `statusMetadata` is comprised of code and message."
                      }
                    },
                    "publishedMediaUrl": {
                      "type": "string",
                      "description": "The preview URL of the media. It is only available when status is `Available`."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MediaPublisherAPIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MediaPublisherAPIError"
                }
              }
            }
          }
        }
      }
    },
    "/stores/assets": {
      "get": {
        "tags": [
          "Stores"
        ],
        "operationId": "listAssets",
        "summary": "Gets a list of assets associated with a specified brand entity identifier.",
        "description": "For sellers or vendors, gets an array of assets associated with the specified brand entity identifier. Vendors are not required to specify a brand entity identifier, and in this case all assets associated with the vendor are returned.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "brandEntityId",
            "in": "query",
            "description": "For sellers, this field is required. It is the Brand entity identifier of the Brand for which assets are returned. This identifier is retrieved using the [getBrands operation](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/brands). For vendors, this field is optional. If a vendor does not specify this field, all assets associated with the vendor are returned. For more information about the [difference between a seller and a vendor](https://advertising.amazon.com/resources/faq#advertising-basics), see the Amazon Ads FAQ.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mediaType",
            "in": "query",
            "description": "Specifies the media types used to filter the returned array. Currently, only the `brandLogo` type is supported. If not specified, all media types are returned.",
            "schema": {
              "$ref": "#/components/schemas/MediaType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/vnd.mediaasset.v3+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "assetID": {
                        "description": "The identifier of an asset associated with a store.",
                        "type": "string"
                      },
                      "url": {
                        "description": "The address where the asset is stored.",
                        "type": "string"
                      },
                      "mediaType": {
                        "$ref": "#/components/schemas/MediaType"
                      },
                      "name": {
                        "description": "The name of the asset.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Stores"
        ],
        "operationId": "createAsset",
        "summary": "Creates a new image asset.",
        "description": "Image assets are stored in the Store Assets Library. Note that there may be a delay before the image is displayed in the console.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "in": "header",
            "name": "Content-Disposition",
            "description": "The name of the image file.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "Content-Type",
            "description": "The image format type. The following table lists the valid image types:\n|Image Type|Description|\n|----------|-----------|\n|PNG|[Portable network graphics](https://en.wikipedia.org/wiki/Portable_Network_Graphics)|\n|JPEG|[JPEG](https://en.wikipedia.org/wiki/JPEG)|\n|GIF|[Graphics interchange format](https://en.wikipedia.org/wiki/GIF)|",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "assetInfo": {
                    "description": "A JSON object specifying the Brand entity identifier an media type. The Brand entity identifier is optional, but media type is not.\n|Field|Type|Values|\n|-----|-----|-----|\n|brandEntityId|string|The Brand entity identifier.|\n|mediaType|string| Only `brandLogo` is currently supported.|\nExample:\n```\n{\n  brandEntityId: \"12345678\",\n  mediaType: {\n    \"brandLogo\"\n  }\n}\n```",
                    "type": "string"
                  },
                  "asset": {
                    "description": "The binary data for the image. For more information,  File size must be smaller than 1MB, and the resolution must be a minimum of 400 pixels by 400 pixels.",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "assetID": {
                      "type": "string",
                      "description": "ID of created asset"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sb/recommendations/bids": {
      "post": {
        "tags": [
          "Bid recommendations"
        ],
        "operationId": "getBidsRecommendations",
        "description": "Get a list of bid recommendation objects for a specified list of keywords or products.",
        "requestBody": {
          "description": "A list of keywords or targeting expressions for which to generate bid recommendations. Note that if a value is specified for the `campaignId` field, the past performance data for the campaign may be use to create bid recommendations.",
          "content": {
            "application/vnd.sbbidsrecommendation.v3.1+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "campaignId": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The identifier of the campaign for which bid recommendations are created."
                  },
                  "targets": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SBTargetingExpressions"
                    },
                    "maxItems": 100
                  },
                  "keywords": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SBBidRecommendationKeyword"
                    },
                    "maxItems": 100
                  },
                  "adFormat": {
                    "$ref": "#/components/schemas/AdFormat"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of bid recommendations.",
            "content": {
              "application/vnd.sbbidsrecommendation.v3.1+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "keywordsBidsRecommendationSuccessResults": {
                      "description": "Lists the bid recommendations for the keywords specified in the request.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "recommendationId": {
                            "description": "The identifier of the keyword bid recommendation.",
                            "type": "string"
                          },
                          "recommendedBid": {
                            "$ref": "#/components/schemas/RecommendedBid"
                          },
                          "keyword": {
                            "type": "object",
                            "properties": {
                              "keywordText": {
                                "description": "The text of the keyword.",
                                "type": "string"
                              },
                              "matchType": {
                                "$ref": "#/components/schemas/MatchType"
                              }
                            }
                          },
                          "keywordIndex": {
                            "$ref": "#/components/schemas/SBBidRecommendationKeywordIndex"
                          }
                        }
                      }
                    },
                    "keywordsBidsRecommendationErrorResults": {
                      "description": "Lists errors that occured during creation of keyword bid recommendations.",
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Error"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "keyword": {
                                "$ref": "#/components/schemas/SBKeywordExpression"
                              },
                              "keywordIndex": {
                                "$ref": "#/components/schemas/SBBidRecommendationKeywordIndex"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "targetsBidsRecommendationSuccessResults": {
                      "description": "Lists the bid recommendations for the keywords or targets specified in the request.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "recommendationId": {
                            "description": "The identifier of the target bid recommendation."
                          },
                          "recommendedBid": {
                            "$ref": "#/components/schemas/RecommendedBid"
                          },
                          "targets": {
                            "$ref": "#/components/schemas/SBTargetingExpressions"
                          },
                          "targetsIndex": {
                            "$ref": "#/components/schemas/SBBidRecommendationKeywordIndex"
                          }
                        }
                      }
                    },
                    "targetsBidsRecommendationErrorResults": {
                      "description": "Lists errors that occured during creation of target bid recommendations.",
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Error"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "targets": {
                                "$ref": "#/components/schemas/SBTargetingExpressions"
                              },
                              "targetsIndex": {
                                "$ref": "#/components/schemas/SBBidRecommendationKeywordIndex"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sb/targets/list": {
      "post": {
        "tags": [
          "Product targeting"
        ],
        "operationId": "listTargets",
        "description": "Gets a list of product targets associated with the client identifier passed in the authorization header, filtered by specified criteria.",
        "requestBody": {
          "description": "A set of filters.",
          "content": {
            "application/vnd.sblisttargetsresponse.v3+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ListRequest"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "filters": {
                        "description": "Restricts results to targets with the specified filters.  Filters are inclusive. Filters are joined using 'and' logic. Specify one type of each filter. Specifying multiples of the same type of filter results in an error.",
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `CREATIVE_TYPE` to filter by creative type. If no filter is specified, all targets will be returned.",
                                      "type": "string",
                                      "enum": [
                                        "CREATIVE_TYPE"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "values": {
                                      "description": "A list of creative types.",
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "productCollection",
                                          "video"
                                        ]
                                      },
                                      "minItems": 1,
                                      "maxItems": 2
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `TARGETING_STATE` to filter by target state.",
                                      "type": "string",
                                      "enum": [
                                        "TARGETING_STATE"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "values": {
                                      "description": "A list of target states.",
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "archived",
                                          "paused",
                                          "pending",
                                          "enabled"
                                        ]
                                      },
                                      "minItems": 1,
                                      "maxItems": 5
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `CAMPAIGN_ID` to filter by campaign identifiers.",
                                      "type": "string",
                                      "enum": [
                                        "CAMPAIGN_ID"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "values": {
                                      "description": "A list of campaign identifiers.",
                                      "type": "array",
                                      "items": {
                                        "description": "A campaign identifier.",
                                        "type": "string",
                                        "minItems": 1,
                                        "maxItems": 100
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `AD_GROUP_ID` to filter by ad group identifier.",
                                      "type": "string",
                                      "enum": [
                                        "AD_GROUP_ID"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "values": {
                                      "description": "A list of ad group identifiers.",
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/components/schemas/SBAdGroupId"
                                      },
                                      "minItems": 1,
                                      "maxItems": 100
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "minItems": 0,
                          "maxItems": 3
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of targeting clauses.",
            "content": {
              "application/vnd.sblisttargetsresponse.v3+json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "targets": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "targetId": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The target identifier."
                              },
                              "adGroupId": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The identifier of the ad group to which the target is associated."
                              },
                              "campaignId": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The identifier of the campaign to which the target is associated."
                              },
                              "expressions": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/components/schemas/SBExpression"
                                }
                              },
                              "resolvedExpressions": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/components/schemas/SBResolvedExpression"
                                }
                              },
                              "state": {
                                "$ref": "#/components/schemas/SBProductTargetState"
                              },
                              "bid": {
                                "$ref": "#/components/schemas/Bid"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/sb/targets": {
      "put": {
        "tags": [
          "Product targeting"
        ],
        "operationId": "updateTargets",
        "summary": "Updates one or more targets.",
        "requestBody": {
          "description": "A list of targets with updated values. <br/>Note that targets can be updated on campaigns where serving status is not one of `archived`, `terminated`, `rejected`, or `ended`. <br/>Note that this operation supports a maximum list size of 100 targets.",
          "content": {
            "application/vnd.updatetargetsresponse.v3+json": {
              "schema": {
                "type": "object",
                "required": [
                  "targets"
                ],
                "properties": {
                  "targets": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SBUpdateTargetingClauseRequest"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of success and error results for targets submitted for update.",
            "content": {
              "application/vnd.updatetargetsresponse.v3+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "updateTargetSuccessResults": {
                      "description": "Lists the successfully updated targets. Note that targets in the response are correlated to targets in the request using the `targetRequestIndex` field. For example, if `targetRequestIndex` is set to `2`, the values correlate to the third target object in the request.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "targetId": {
                            "$ref": "#/components/schemas/SBTargetId"
                          },
                          "targetRequestIndex": {
                            "$ref": "#/components/schemas/SBTargetRequestIndex"
                          }
                        }
                      }
                    },
                    "updateTargetErrorResults": {
                      "description": "Lists errors that occured during target update. Note that errors are correlated to target update requests by the `targetRequestIndex` field. This field corresponds to the order of the target in the request. For example, if `targetRequestIndex` is set to `2`, the values correlate to the third target object in the request array.",
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Error"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "targetId": {
                                "$ref": "#/components/schemas/SBTargetId"
                              },
                              "targetRequestIndex": {
                                "$ref": "#/components/schemas/SBTargetRequestIndex"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          }
        }
      },
      "post": {
        "tags": [
          "Product targeting"
        ],
        "operationId": "createTargets",
        "summary": "Create one or more targets.",
        "requestBody": {
          "description": "A list of targeting clauses for creation. <br/>Note that targets can be created on campaigns where serving status is not one of `archived`, `terminated`, `rejected`, or `ended`. <br/>Note that this operation supports a maximum list size of 100 targets.",
          "content": {
            "application/vnd.sbcreatetargetsresponse.v3+json": {
              "schema": {
                "type": "object",
                "required": [
                  "targets"
                ],
                "properties": {
                  "targets": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SBCreateTargetingClauseRequest"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of success and error results for targeting clauses submitted for creation.",
            "content": {
              "application/vnd.sbcreatetargetsresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBCreateTargetsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          }
        }
      }
    },
    "/sb/targets/{targetId}": {
      "get": {
        "tags": [
          "Product targeting"
        ],
        "operationId": "getTarget",
        "summary": "Gets a target specified by identifier.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "targetId",
            "description": "The identifier of an existing target.",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SBTargetId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.sbtarget.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBTargetingClause"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Product targeting"
        ],
        "operationId": "archiveTarget",
        "summary": "Archives a target specified by identifier. Note that archiving is permanent, and once a target has been archived it can't be made active again.",
        "description": "The identifier of an existing target.",
        "parameters": [
          {
            "name": "targetId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SBTargetId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.sbtargetresponse.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBTargetingClauseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/sb/negativeTargets/list": {
      "post": {
        "tags": [
          "Negative product targeting"
        ],
        "operationId": "listNegativeTargets",
        "summary": "Gets a list of product negative targets associated with the client identifier passed in the authorization header, filtered by specified criteria.",
        "requestBody": {
          "description": "A set of filters.",
          "content": {
            "application/vnd.sblistnegativetargetsresponse.v3+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ListRequest"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "filters": {
                        "description": "Restricts results to negative targets with the specified filters.  Filters are inclusive. Filters are joined using 'and' logic. Specify one each type of filter. Specifying multiples of the same type of filter results in an error.",
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `CREATIVE_TYPE` to filter by creative type. If no filter is specified, all negative targets will be returned.",
                                      "type": "string",
                                      "enum": [
                                        "CREATIVE_TYPE"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "values": {
                                      "description": "A list of creative types.",
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "productCollection",
                                          "video"
                                        ]
                                      },
                                      "minItems": 1,
                                      "maxItems": 2
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `TARGETING_STATE` to filter by negative target state.",
                                      "type": "string",
                                      "enum": [
                                        "TARGETING_STATE"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "values": {
                                      "description": "A list of negative target states.",
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/components/schemas/SBNegativeTargetState"
                                      },
                                      "minItems": 1,
                                      "maxItems": 3
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `CAMPAIGN_ID` to filter by campaign identifiers.",
                                      "type": "string",
                                      "enum": [
                                        "CAMPAIGN_ID"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "values": {
                                      "description": "A list of campaign identifiers.",
                                      "type": "array",
                                      "items": {
                                        "description": "An existing camapign identifier.",
                                        "type": "string"
                                      },
                                      "minItems": 1,
                                      "maxItems": 100
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "filterType": {
                                      "description": "Set `filterType` to `AD_GROUP_ID` to filter by ad group identifier.",
                                      "type": "string",
                                      "enum": [
                                        "AD_GROUP_ID"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "values": {
                                      "description": "A list of ad group identifiers.",
                                      "type": "array",
                                      "items": {
                                        "description": "An existing ad group identifier.",
                                        "type": "string"
                                      },
                                      "minItems": 1,
                                      "maxItems": 100
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "minItems": 0,
                        "maxItems": 3
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of negative targets.",
            "content": {
              "application/vnd.sblistnegativetargetsresponse.v3+json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "negativeTargets": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SBTargetingClause"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          }
        }
      }
    },
    "/sb/negativeTargets": {
      "put": {
        "tags": [
          "Negative product targeting"
        ],
        "operationId": "updateNegativeTargets",
        "summary": "Updates one or more negative targets.",
        "requestBody": {
          "description": "A list of negative targets with updated values. <br/>Note that negative targeting clauses can be created on campaigns where serving status is not one of `archived`, `terminated`, `rejected`, or `ended`. <br/>Note that this operation supports a maximum list size of 100 negative targets.",
          "content": {
            "application/vnd.updatenegativetargetsresponse.v3+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "negativeTargets": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                      "$ref": "#/components/schemas/SBUpdateNegativeTargetingClauseRequest"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of success and error results for negative targets submitted for update.",
            "content": {
              "application/vnd.updatenegativetargetsresponse.v3+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "updateTargetSuccessResults": {
                      "description": "Lists the successfully updated negative targets. Note that negative targets in the response are correlated to negative targets in the request using the `targetRequestIndex` field. For example, if `targetRequestIndex` is set to `2`, the values correlate to the third negative target object in the request.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "targetId": {
                            "$ref": "#/components/schemas/SBTargetId"
                          },
                          "targetRequestIndex": {
                            "$ref": "#/components/schemas/SBNegativeTargetRequestIndex"
                          }
                        }
                      }
                    },
                    "updateTargetErrorResults": {
                      "description": "Lists errors that occured during negative target update. Note that errors are correlated to negative target update requests by the `negativeTargetRequestIndex` field. This field corresponds to the order of the negative target in the request. For example, if `negativeTargetRequestIndex` is set to `2`, the values correlate to the third negative target object in the request.",
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Error"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "targetId": {
                                "$ref": "#/components/schemas/SBTargetId"
                              },
                              "targetRequestIndex": {
                                "$ref": "#/components/schemas/SBNegativeTargetRequestIndex"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          }
        }
      },
      "post": {
        "tags": [
          "Negative product targeting"
        ],
        "operationId": "createNegativeTargets",
        "summary": "Create one or more negative targets.",
        "requestBody": {
          "description": "A list of negative targeting clauses for creation. <br/>Note that negative targeting clauses can be created on campaigns where serving status is not one of `archived`, `terminated`, `rejected`, or `ended`. <br/>Note that this operation supports a maximum list size of 100 negative targets.",
          "content": {
            "application/vnd.sbcreatenegativetargetsrequest.v3+json": {
              "schema": {
                "type": "object",
                "required": [
                  "negativeTargets"
                ],
                "properties": {
                  "negativeTargets": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SBCreateNegativeTargetingClauseRequest"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of success and error results for targeting clauses submitted for creation.",
            "content": {
              "application/vnd.sbcreatenegativetargetsrequest.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBCreateTargetsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          }
        }
      }
    },
    "/sb/negativeTargets/{negativeTargetId}": {
      "get": {
        "tags": [
          "Negative product targeting"
        ],
        "operationId": "getNegativeTarget",
        "summary": "Gets a negative target specified by identifier.",
        "parameters": [
          {
            "name": "negativeTargetId",
            "description": "The identifier of an existing negative target.",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SBNegativeTargetId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.sbnegativetarget.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBNegativeTargetingClause"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Negative product targeting"
        ],
        "operationId": "archiveNegativeTarget",
        "summary": "Archives a negative target specified by identifier. Note that archiving is permanent, and once a negative target has been archived it can't be made active again.",
        "parameters": [
          {
            "name": "negativeTargetId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SBNegativeTargetId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.sbnegativetarget.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SBTargetingClauseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/sb/recommendations/targets/product/list": {
      "post": {
        "tags": [
          "Targeting recommendations"
        ],
        "operationId": "getProductRecommendations",
        "summary": "Gets a list of recommended products for targeting.",
        "description": "Recommendations are based on the ASINs that are passed in the request.",
        "requestBody": {
          "description": "A list of ASINs.",
          "content": {
            "application/vnd.sbproductrecommendations.v3.0+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ListRecommendationsRequest"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "filters": {
                        "description": "Restricts recommendations to the criteria specified in the filters.",
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "filterType": {
                                      "type": "string",
                                      "enum": [
                                        "ASINS"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "values": {
                                      "description": "A list of ASINs.",
                                      "type": "array",
                                      "items": {
                                        "description": "An ASIN.",
                                        "type": "string"
                                      },
                                      "minItems": 1,
                                      "maxItems": 100
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of product targeting recommendations.",
            "content": {
              "application/vnd.sbproductrecommendationsresponse.v3.0+json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "recommendedProducts": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "recommendedTargetAsin": {
                                "description": "The recommended target ASIN.",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/sb/recommendations/targets/category": {
      "post": {
        "tags": [
          "Targeting recommendations"
        ],
        "operationId": "getTargetingCategories",
        "summary": "Gets a list of recommended categories for targeting.",
        "description": "Recommendations are based on the ASINs that are passed in the request.",
        "requestBody": {
          "description": "List of ASINs.",
          "content": {
            "application/vnd.sbcategoryrecommendations.v3.0+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "asins": {
                    "type": "array",
                    "description": "A list of ASINs.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of category targeting recommendations.",
            "content": {
              "application/vnd.sbcategoryrecommendationsresponse.v3.0+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "categoryRecommendationResults": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SBCategoryResponse"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sb/recommendations/targets/brand": {
      "post": {
        "tags": [
          "Targeting recommendations"
        ],
        "operationId": "getBrandRecommendations",
        "summary": "Gets a list of brand suggestions.",
        "description": "The Brand suggestions are based on a list of either category identifiers or keywords passed in the request. It is not valid to specify both category identifiers and keywords in the request.",
        "requestBody": {
          "content": {
            "application/vnd.sbbrandrecommendations.v3.0+json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "categoryId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The category identifier for which to get recommendations."
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "keyword": {
                        "type": "string",
                        "description": "The keyword for which to get recommendations."
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.sbbrandrecommendationsresponse.v3.0+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "brandRecommendationResults": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SBBrandResponse"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sb/moderation/campaigns/{campaignId}": {
      "get": {
        "tags": [
          "Moderation"
        ],
        "summary": "Gets the moderation result for a campaign specified by identifier.",
        "description": "Note that this resource is only available for campaigns in the US marketplace.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "The campaign identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.sbmoderation.v3+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "campaignId": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The campaign identifier."
                    },
                    "moderationStatus": {
                      "type": "string",
                      "enum": [
                        "APPROVED",
                        "IN_PROGRESS",
                        "REJECTED"
                      ],
                      "description": "The moderation status of the campaign.\n|Status|Description|\n|------|-----------|\n|APPROVED|Moderation for the campaign is complete.|\n|IN_PROGRESS|Moderation for the campaign is in progress. The expected date and time for completion are specfied in the `etaForModeration` field.|\n|REJECTED|The campaign has failed moderation. Specific information about the content that violated policy is available in `policyViolations`.|"
                    },
                    "etaForModeration": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Expected date and time by which moderation will be complete. Note that this field is present in the response only when `moderationStatus` is set to `IN_PROGRESS`."
                    },
                    "policyViolations": {
                      "type": "array",
                      "description": "A list of policy violations for a campaign that has failed moderation. Note that this field is present in the response only when `moderationStatus` is set to `REJECTED`.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "policyDescription": {
                            "type": "string",
                            "example": "Advertising alcohol is not allowed",
                            "description": "A human-readable description of the policy."
                          },
                          "policyLinkUrl": {
                            "type": "string",
                            "format": "uri",
                            "example": "https://advertising.amazon.com/resources/ad-policy/en/creative-acceptance#alcohol",
                            "description": "Address of the policy documentation. Follow the link to learn more about the specified policy."
                          },
                          "violatingTextContents": {
                            "type": "array",
                            "description": "Information about the specific text that violates the specified policy in the campaign.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "moderatedComponent": {
                                  "type": "string",
                                  "description": "The ad component that includes the text that violates the specified policy.",
                                  "example": "headline"
                                },
                                "reviewedText": {
                                  "type": "string",
                                  "description": "The specific text reviewed during moderation.",
                                  "example": "Best alcohol money can buy"
                                },
                                "textEvidences": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "violatingText": {
                                        "type": "string",
                                        "description": "The specific text determined to violate the specified policy in `reviewedText`.",
                                        "example": "alcohol"
                                      },
                                      "violatingTextPosition": {
                                        "type": "object",
                                        "properties": {
                                          "start": {
                                            "type": "integer",
                                            "description": "Zero-based index into the text in `reviewedText` where the text specified in `violatingText` starts.",
                                            "example": 5
                                          },
                                          "end": {
                                            "type": "integer",
                                            "description": "Zero-based index into the text in `reviewedText` where the text specified in `violatingText` ends.",
                                            "example": 11
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "violatingImageContents": {
                            "type": "array",
                            "description": "Information about the specific image that violates the specified policy.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "moderatedComponent": {
                                  "type": "string",
                                  "description": "The ad component that includes the image that violates the specified policy.",
                                  "example": "brandlogo"
                                },
                                "reviewedImageUrl": {
                                  "type": "string",
                                  "description": "Address of the image reviewed during moderation.",
                                  "example": "https://media-central.amazon.com/ejfkkfwkeclkmd.jpg"
                                },
                                "imageEvidences": {
                                  "type": "array",
                                  "items": {
                                    "properties": {
                                      "violatingImageCrop": {
                                        "type": "object",
                                        "properties": {
                                          "topLeftX": {
                                            "type": "integer",
                                            "description": "The top left X-coordinate of the content that violates the specfied policy within the image.",
                                            "example": 24
                                          },
                                          "topLeftY": {
                                            "type": "integer",
                                            "description": "The top left Y-coordinate of the content that violates the specfied policy within the image.",
                                            "example": 87
                                          },
                                          "height": {
                                            "type": "integer",
                                            "description": "The height of the content that violates the specified policy within the image.",
                                            "example": 50
                                          },
                                          "width": {
                                            "type": "integer",
                                            "description": "The width of the content that violates the specified policy within the image.",
                                            "example": 75
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "violatingAsinContents": {
                            "type": "array",
                            "description": "Information about the specific ASIN in the campaign that violates the specified policy.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "moderatedComponent": {
                                  "type": "string",
                                  "description": "The ad component that includes the ASIN that violates the specified policy.",
                                  "example": "landingPageAsin"
                                },
                                "asinEvidences": {
                                  "type": "array",
                                  "items": {
                                    "properties": {
                                      "asin": {
                                        "type": "string",
                                        "description": "The ASIN that violates the specified policy.",
                                        "pattern": "[A-Za-z0-9]{10}",
                                        "example": "B0786PRKBP"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Requested campaignId not found",
            "content": {
              "application/vnd.error.v3+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://advertising-api.amazon.com"
    },
    {
      "url": "https://advertising-api-eu.amazon.com"
    },
    {
      "url": "https://advertising-api-fe.amazon.com"
    }
  ],
  "components": {
    "schemas": {
      "BrandType": {
        "type": "string",
        "enum": [
          "brandRegistry",
          "bookAuthor"
        ],
        "description": "| brandType | description |\n|-----------|-------------|\n| brandRegistry | The brand is in the brand registry. |\n| bookAuthor    | The brand is a book author. |"
      },
      "BudgetType": {
        "description": "Note that for the lifetime budget type, `startDate` and `endDate` must be specified. The lifetime budget range is from 100 to 20,000,000 and daily budget range is 1 to 1,000,000 by default for most marketplaces. For the JP marketplace, the lifetime budget range is from 10,000 to 2,000,000,000, and the daily budget range is 100 to 21,000,000.",
        "type": "string",
        "enum": [
          "lifetime",
          "daily"
        ]
      },
      "CampaignTags": {
        "description": "A list of advertiser-specified custom identifiers for the campaign. Each customer identifier is a key-value pair. You can specify a maximum of 50 identifiers.",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "example": {
          "PONumber": "examplePONumber",
          "accountManager": "exampleAccountManager"
        }
      },
      "MediaType": {
        "description": "The supported media types.",
        "type": "string",
        "enum": [
          "brandLogo",
          "image"
        ]
      },
      "SBUpdateCampaignResponse": {
        "description": "Applies to:\n| Operation | Path |\n|-----------| -----|\n|[updateCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| PUT /sb/campaigns|\n|[archiveCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)|DELETE /sb/campaigns/{campaignId}|\n<br/>",
        "properties": {
          "campaignId": {
            "description": "The campaign identifier.",
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "description": "An enumerated response code.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the enumerated response code in the `code` field.",
            "type": "string"
          }
        }
      },
      "SBKeywordResponse": {
        "description": "Applies to:\n| Operation | Path |\n|-----------| -----|\n|[createKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Keywords)| POST /sb/keywords|\n|[createNegativeKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Negative_Keywords)|POST /sb/negativeKeywords|\n|[updateNegativeKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Negative_Keywords)|PUT /sb/negativeKeywords|\n|[archiveNegativeKeyword](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Negative_Keywords)|DELETE /sb/negativeKeywords/{keywordId}|\n<br/>",
        "properties": {
          "keywordId": {
            "description": "The keyword identifier.",
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "description": "An enumerated response code.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the enumerated response code in the `code` field.",
            "type": "string"
          }
        }
      },
      "SBExpressionResponse": {
        "properties": {
          "targetId": {
            "description": "The targeting expression identifier.",
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "description": "An enumerated response code.",
            "type": "string"
          }
        }
      },
      "SBKeyword": {
        "description": "Applies to:\n| Operation | Path |\n|-----------| -----|\n|[listKeywords](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Keywords)| GET /sb/keywords|\n|[getKeyword](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Keywords)| GET /sb/keywords/{keywordId}|\n<br/>",
        "properties": {
          "keywordId": {
            "description": "The keyword identifier.",
            "type": "integer",
            "format": "int64"
          },
          "adGroupId": {
            "description": "The identifier of the ad group associated with the keyword.",
            "type": "integer",
            "format": "int64"
          },
          "campaignId": {
            "description": "The identifier of the campaign associated with the keyword.",
            "type": "integer",
            "format": "int64"
          },
          "keywordText": {
            "description": "The keyword text. The maximum number of words for this string is 10.",
            "type": "string"
          },
          "nativeLanguageKeyword": {
            "description": "The unlocalized keyword text in the preferred locale of the advertiser.",
            "type": "string"
          },
          "matchType": {
            "$ref": "#/components/schemas/MatchType"
          },
          "state": {
            "$ref": "#/components/schemas/SBKeywordState"
          },
          "bid": {
            "description": "The bid associated with the keyword. Note that this value must be less than the budget associated with the Advertiser account. For more information, see the **Keyword bid constraints by marketplace** section of the [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features) article.",
            "type": "number"
          }
        }
      },
      "SBDraftKeyword": {
        "properties": {
          "keywordId": {
            "description": "The keyword identifier.",
            "type": "integer",
            "format": "int64"
          },
          "adGroupId": {
            "description": "The identifier of the ad group associated with the keyword.",
            "type": "integer",
            "format": "int64"
          },
          "campaignId": {
            "description": "The identifier of the campaign associated with the keyword.",
            "type": "integer",
            "format": "int64"
          },
          "keywordText": {
            "description": "The keyword text. The maximum number of words for this string is 10.",
            "type": "string"
          },
          "matchType": {
            "$ref": "#/components/schemas/MatchType"
          },
          "state": {
            "type": "string",
            "enum": [
              "draft",
              "pending",
              "enabled"
            ],
            "description": "| state | description |\n|-------|-------------|\n| draft | Newly created keyword. |\n| pending | Keyword is under moderation. |\n| enabled | Keyword passed moderation. | "
          },
          "bid": {
            "description": "The bid associated with the keyword. Note that this value must be less than the budget associated with the Advertiser account. For more information, see the **Keyword bid constraints by marketplace** section of the [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features) article.",
            "type": "number"
          }
        }
      },
      "SBNegativeKeyword": {
        "properties": {
          "keywordId": {
            "description": "The keyword identifier.",
            "type": "integer",
            "format": "int64"
          },
          "adGroupId": {
            "description": "The identifier of the ad group associated with the keyword.",
            "type": "integer",
            "format": "int64"
          },
          "campaignId": {
            "description": "The identifier of the campaign associated with the keyword.",
            "type": "integer",
            "format": "int64"
          },
          "keywordText": {
            "description": "The keyword text. The maximum number of words for this string is 10.",
            "type": "string"
          },
          "matchType": {
            "$ref": "#/components/schemas/NegativeMatchType"
          },
          "state": {
            "$ref": "#/components/schemas/SBKeywordState"
          }
        }
      },
      "SBDraftNegativeKeyword": {
        "properties": {
          "keywordId": {
            "description": "The keyword identifier.",
            "type": "integer",
            "format": "int64"
          },
          "adGroupId": {
            "description": "The identifier of the ad group associated with the keyword.",
            "type": "integer",
            "format": "int64"
          },
          "campaignId": {
            "description": "The identifier of the campaign associated with the keyword.",
            "type": "integer",
            "format": "int64"
          },
          "keywordText": {
            "description": "The keyword text. The maximum number of words for this string is 10.",
            "type": "string"
          },
          "matchType": {
            "$ref": "#/components/schemas/NegativeMatchType"
          },
          "state": {
            "type": "string",
            "enum": [
              "draft"
            ],
            "description": "Newly created SB keywords are in a default state of 'draft' before transitioning to a 'pending' state for moderation. After moderation, the keyword will be in an enabled state."
          }
        }
      },
      "MatchType": {
        "type": "string",
        "description": "The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.",
        "enum": [
          "broad",
          "exact",
          "phrase"
        ]
      },
      "NegativeMatchType": {
        "type": "string",
        "description": "The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.",
        "enum": [
          "negativeExact",
          "negativePhrase"
        ]
      },
      "State": {
        "type": "string",
        "enum": [
          "enabled",
          "paused",
          "archived"
        ]
      },
      "AdFormat": {
        "type": "string",
        "enum": [
          "productCollection",
          "video"
        ],
        "description": "The type of ad format."
      },
      "CreativeType": {
        "type": "string",
        "enum": [
          "productCollection",
          "video"
        ],
        "description": "collection is deprecated in favor of productCollection."
      },
      "SBKeywordState": {
        "type": "string",
        "enum": [
          "enabled",
          "paused",
          "pending",
          "archived",
          "draft"
        ],
        "description": "Newly created SB keywords are in a default state of 'draft' before transitioning to a 'pending' state for moderation. After moderation, the keyword will be in an enabled state."
      },
      "SBNegativeKeywordState": {
        "type": "string",
        "enum": [
          "enabled",
          "pending",
          "archived",
          "draft"
        ],
        "description": "The current state of the negative keyword. Newly created SB negative keywords are in a default state of 'draft' before transitioning to a 'pending' state for moderation review. 'enabled' refers to negative keywords that are active. 'archived' refers to negative keywords that are permanently inactive and cannot be returned to the 'enabled' state."
      },
      "SBAdGroup": {
        "description": "Applies to:\n| Operation | Path |\n|-----------| -----|\n|[listAdGroups](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Ad_Groups)| GET /sb/adGroups|\n|[getAdGroup](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Ad_Groups)| GET /sb/adGroups/{adGroupId}|\n<br/>",
        "properties": {
          "campaignId": {
            "description": "The identifier of the campaign associated with the ad group.",
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "adGroupId": {
            "description": "The identifier of the ad group.",
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "description": "The name of the ad group.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "SBCreative": {
        "description": "Note that the values of each field in this object are immutable for an existing campaign.",
        "properties": {
          "brandName": {
            "type": "string",
            "description": "A brand name. Maximum length is 30 characters."
          },
          "brandLogoAssetID": {
            "type": "string",
            "description": "The identifier of the brand logo image from the Store assets library. See [listAssets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Stores) for more information. Note that for campaigns created in the Amazon Ads console prior to release of the Store assets library, responses will not include a value for the brandLogoAssetID field."
          },
          "brandLogoUrl": {
            "type": "string",
            "readOnly": true,
            "description": "The address of the hosted image."
          },
          "headline": {
            "type": "string",
            "description": "The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters."
          },
          "asins": {
            "description": "An array of ASINs associated with the creative. **Note** do not pass an empty array, this results in an error.",
            "type": "array",
            "minimum": 0,
            "maximum": 3,
            "items": {
              "type": "string"
            }
          },
          "shouldOptimizeAsins": {
            "type": "boolean",
            "description": "**NOTE** Starting on March 25th, 2021, this property will no longer be supported. This feature is currently available in the US and UK. Existing Sponsored Brands campaigns with product optimization enabled will no longer have the products in the creative automatically optimized. Campaigns with product optimization enabled will be converted to standard Sponsored Brands product collection campaigns with the default selected products showing in the creative. For POST and PUT operations, setting this property to `true` will not have any effect. The value returned in the response will always be `false`. For the GET operation, the value of this field will always be `false`. And starting on September 25th, 2021, this property will be removed completely. ",
            "default": false
          }
        }
      },
      "SBVideoCreative": {
        "description": "Render one product image with associated media.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "asins": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "An array of ASINs associated with the creative.",
                "minItems": 1,
                "maxItems": 1
              },
              "videoMediaIds": {
                "description": "Video Asset IDs associated with the creative.",
                "type": "array",
                "minimum": 1,
                "maximum": 1,
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "description": "Type of creative",
                "type": "string",
                "enum": [
                  "video"
                ]
              }
            }
          }
        ]
      },
      "SBLandingPage": {
        "description": "Specifies either an array of ASINs for a simple landing page or the URL of a Store page. Vendors may also specify the URL of a custom landing page. Shoppers are sent to the specified simple landing page, custom landing page, or Store page when the ad is clicked. Note that this property can be updated when the campaign is in a draft state, but can't be updated while the campaign is in moderation or once it's been approved. If the campaign is rejected for any reason, it returns to a draft state.",
        "properties": {
          "asins": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "writeOnly": true,
            "description": "An array of ASINs used to generate a simple landing page. The response includes the URL of the generated simple landing page. Do not include this property in the request if the `url` property is also included, these properties are mutually exclusive.",
            "minimum": 3,
            "maximum": 100
          },
          "url": {
            "type": "string",
            "description": "URL of an existing simple landing page or Store page. Vendors may also specify the URL of a custom landing page. If a custom URL is specified, the landing page must include the ASINs of at least three products that are advertised as part of the campaign. Do not include this property in the request if the `asins` property is also included, these properties are mutually exclusive."
          }
        }
      },
      "SBCampaign": {
        "description": "Applies to:\n| Operation | Path |\n|-----------| -----|\n|[createCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| POST /sb/campaigns|\n|[getCampaign](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| GET /sb/campaigns/{campaignId}|\n<br/>",
        "properties": {
          "campaignId": {
            "description": "The campaign identifier.",
            "readOnly": true,
            "type": "integer"
          },
          "name": {
            "type": "string",
            "description": "The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters."
          },
          "tags": {
            "$ref": "#/components/schemas/CampaignTags"
          },
          "budget": {
            "description": "The budget amount associated with the campaign.",
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "startDate": {
            "type": "string",
            "description": "The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used."
          },
          "endDate": {
            "type": "string",
            "description": "The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously."
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "servingStatus": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "asinNotBuyable",
              "billingError",
              "ended",
              "landingPageNotAvailable",
              "outOfBudget",
              "paused",
              "pendingReview",
              "ready",
              "rejected",
              "running",
              "scheduled",
              "terminated"
            ],
            "description": "|Value|Description|\n|-----|-----------|\n|asinNotBuyable| The associated ASIN cannot be purchased due to eligibility or availability.|\n|billingError| The billing information associated with the account requires correction.|\n|ended| The value specified in the `endDate` field is in the past.|\n|landingPageNotAvailable| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|\n|outOfBudget| The campaign has run out of budget.|\n|paused|The campaign state is set to `paused`.|\n|pendingReview| A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.\n|ready| The campaign is scheduled for a future date.|\n|rejected| The campaign failed moderation review.|\n|running| The campaign is enabled and serving.|\n|scheduled| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|\n|terminated| The state of the campaign is set to `archived`.|\n<br/>"
          },
          "brandEntityId": {
            "writeOnly": true,
            "type": "string",
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands)."
          },
          "bidOptimization": {
            "type": "boolean",
            "description": "Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.",
            "default": true
          },
          "bidMultiplier": {
            "type": "number",
            "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
            "minimum": -99,
            "maximum": 99
          },
          "bidAdjustments": {
            "type": "array",
            "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents.",
            "items": {
              "$ref": "#/components/schemas/BidAdjustment"
            }
          },
          "portfolioId": {
            "description": "The identifier of the portfolio to which the campaign is associated.",
            "type": "integer",
            "format": "int64"
          },
          "creative": {
            "$ref": "#/components/schemas/SBCreative"
          },
          "landingPage": {
            "$ref": "#/components/schemas/SBLandingPage"
          },
          "keywords": {
            "$ref": "#/components/schemas/SBCreateCampaignPositiveKeyword"
          },
          "negativeKeywords": {
            "$ref": "#/components/schemas/SBCreateCampaignNegativeKeyword"
          }
        }
      },
      "SBListCampaignsResponseCommon": {
        "properties": {
          "campaignId": {
            "description": "The campaign identifier.",
            "readOnly": true,
            "type": "integer"
          },
          "name": {
            "type": "string",
            "description": "The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters."
          },
          "tags": {
            "$ref": "#/components/schemas/CampaignTags"
          },
          "budget": {
            "description": "The budget amount associated with the campaign.",
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "startDate": {
            "type": "string",
            "description": "The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used."
          },
          "endDate": {
            "type": "string",
            "description": "The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously."
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "servingStatus": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "asinNotBuyable",
              "billingError",
              "ended",
              "landingPageNotAvailable",
              "outOfBudget",
              "paused",
              "pendingReview",
              "ready",
              "rejected",
              "running",
              "scheduled",
              "terminated"
            ],
            "description": "|Value|Description|\n|-----|-----------|\n|asinNotBuyable| The associated ASIN cannot be purchased due to eligibility or availability.|\n|billingError| The billing information associated with the account requires correction.|\n|ended| The value specified in the `endDate` field is in the past.|\n|landingPageNotAvailable| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|\n|outOfBudget| The campaign has run out of budget.|\n|paused|The campaign state is set to `paused`.|\n|pendingReview| A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.\n|ready| The campaign is scheduled for a future date.|\n|rejected| The campaign failed moderation review.|\n|running| The campaign is enabled and serving.|\n|scheduled| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|\n|terminated| The state of the campaign is set to `archived`.|\n<br/>"
          },
          "brandEntityId": {
            "writeOnly": true,
            "type": "string",
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands)."
          },
          "portfolioId": {
            "description": "The identifier of the portfolio to which the campaign is associated.",
            "type": "integer",
            "format": "int64"
          },
          "landingPage": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SBProductListLandingPage"
              },
              {
                "$ref": "#/components/schemas/SBStoreLandingPage"
              },
              {
                "$ref": "#/components/schemas/SBDetailPageLandingPage"
              },
              {
                "$ref": "#/components/schemas/SBCustomUrlLandingPage"
              }
            ]
          }
        }
      },
      "SBListCampaignsResponse": {
        "description": "Applies to:\n| Operation | Path |\n|-----------| -----|\n|[listCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| GET /sb/campaigns|\n<br/>",
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBListCampaignsResponseCommon"
              },
              {
                "type": "object",
                "properties": {
                  "bidOptimization": {
                    "type": "boolean",
                    "description": "Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.",
                    "default": true
                  },
                  "bidMultiplier": {
                    "type": "number",
                    "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
                    "minimum": -99,
                    "maximum": 99
                  },
                  "bidAdjustments": {
                    "type": "array",
                    "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents.",
                    "items": {
                      "$ref": "#/components/schemas/BidAdjustment"
                    }
                  },
                  "adFormat": {
                    "$ref": "#/components/schemas/AdFormat"
                  },
                  "creative": {
                    "$ref": "#/components/schemas/SBCreative"
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBListCampaignsResponseCommon"
              },
              {
                "type": "object",
                "properties": {
                  "adFormat": {
                    "$ref": "#/components/schemas/AdFormat"
                  },
                  "creative": {
                    "$ref": "#/components/schemas/SBVideoCreative"
                  }
                }
              }
            ]
          }
        ]
      },
      "SBDraftCampaignBase": {
        "properties": {
          "draftCampaignId": {
            "type": "integer",
            "description": "The identifier of the draft campaign."
          },
          "name": {
            "type": "string",
            "description": "The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed."
          },
          "tags": {
            "$ref": "#/components/schemas/CampaignTags"
          },
          "budget": {
            "type": "number",
            "description": "The budget associated with the draft campaign."
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "startDate": {
            "type": "string",
            "description": "The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used."
          },
          "endDate": {
            "type": "string",
            "description": "The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously."
          },
          "brandEntityId": {
            "writeOnly": true,
            "type": "string",
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands)."
          },
          "bidOptimization": {
            "type": "boolean",
            "description": "Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.",
            "default": true
          },
          "bidMultiplier": {
            "type": "number",
            "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
            "minimum": -99,
            "maximum": 99
          },
          "bidAdjustments": {
            "type": "array",
            "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents.",
            "items": {
              "$ref": "#/components/schemas/BidAdjustment"
            }
          },
          "portfolioId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the Portfolio to which the draft campaign is associated."
          },
          "adFormat": {
            "$ref": "#/components/schemas/AdFormat"
          },
          "creative": {
            "$ref": "#/components/schemas/SBCreative"
          },
          "landingPage": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SBProductListLandingPage"
              },
              {
                "$ref": "#/components/schemas/SBStoreLandingPage"
              },
              {
                "$ref": "#/components/schemas/SBCustomUrlLandingPage"
              }
            ]
          }
        }
      },
      "SBVideoDraftCampaignBase": {
        "properties": {
          "draftCampaignId": {
            "type": "integer",
            "description": "The identifier of the draft campaign."
          },
          "name": {
            "type": "string",
            "description": "The name of the draft campaign. Maximum 128 characters. Duplicate campaign names are not allowed."
          },
          "budget": {
            "type": "number",
            "description": "The budget associated with the draft campaign."
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "startDate": {
            "type": "string",
            "description": "The YYYYMMDD start date for the campaign. If this field is not set to a value, the current date is used."
          },
          "endDate": {
            "type": "string",
            "description": "The YYYYMMDD end date for the campaign. Must be greater than the value for `startDate`. If not specified, the campaign has no end date and runs continuously."
          },
          "brandEntityId": {
            "writeOnly": true,
            "type": "string",
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands)."
          },
          "portfolioId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the Portfolio to which the draft campaign is associated."
          },
          "adFormat": {
            "$ref": "#/components/schemas/AdFormat"
          },
          "creative": {
            "$ref": "#/components/schemas/SBVideoCreative"
          },
          "landingPage": {
            "$ref": "#/components/schemas/SBDetailPageLandingPage"
          }
        }
      },
      "SBDraftCampaign": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBDraftCampaignBase"
              },
              {
                "type": "object",
                "properties": {
                  "keywords": {
                    "type": "array",
                    "description": "An array of keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftKeyword"
                    }
                  },
                  "negativeKeywords": {
                    "type": "array",
                    "description": "An array of negative keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftNegativeKeyword"
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBDraftCampaignBase"
              },
              {
                "type": "object",
                "properties": {
                  "targets": {
                    "type": "array",
                    "description": "An array of targets associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftTargetingClause"
                    }
                  },
                  "negativeTargets": {
                    "type": "array",
                    "description": "An array of negative targets associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftNegativeTargetingClause"
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
              },
              {
                "type": "object",
                "properties": {
                  "keywords": {
                    "type": "array",
                    "description": "An array of keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftKeyword"
                    }
                  },
                  "negativeKeywords": {
                    "type": "array",
                    "description": "An array of negative keywords associated with the draft campaign.",
                    "items": {
                      "$ref": "#/components/schemas/SBDraftNegativeKeyword"
                    }
                  }
                }
              }
            ]
          }
        ]
      },
      "SBGetDraftCampaignResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignBase"
          },
          {
            "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
          }
        ]
      },
      "SBCreateDraftCampaignRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignWithProductTargets"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateDraftCampaignWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateDraftCampaignWithProductTargets"
          }
        ]
      },
      "SBCreateDraftCampaignRequestCommon": {
        "required": [
          "name",
          "budget",
          "budgetType"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated."
          },
          "budget": {
            "type": "number",
            "description": "The budget associated with the draft campaign."
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "startDate": {
            "type": "string",
            "description": "The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default."
          },
          "endDate": {
            "type": "string",
            "description": "The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously."
          },
          "brandEntityId": {
            "writeOnly": true,
            "type": "string",
            "description": "The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource."
          },
          "bidOptimization": {
            "type": "boolean",
            "description": "Set to `true` to have Amazon automatically optimize bids for placements below top of search.",
            "default": true
          },
          "bidMultiplier": {
            "type": "number",
            "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
            "minimum": -99,
            "maximum": 99
          },
          "bidAdjustments": {
            "type": "array",
            "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents.",
            "items": {
              "$ref": "#/components/schemas/BidAdjustment"
            }
          },
          "portfolioId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the Portfolio to which the draft campaign is associated."
          },
          "creative": {
            "$ref": "#/components/schemas/SBCreative"
          },
          "landingPage": {
            "$ref": "#/components/schemas/SBLandingPage"
          }
        }
      },
      "SBVideoCreateDraftCampaignRequestCommon": {
        "required": [
          "name",
          "budget",
          "budgetType"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated."
          },
          "budget": {
            "type": "number",
            "description": "The budget associated with the draft campaign."
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "startDate": {
            "type": "string",
            "description": "The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default."
          },
          "endDate": {
            "type": "string",
            "description": "The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously."
          },
          "brandEntityId": {
            "writeOnly": true,
            "type": "string",
            "description": "The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource."
          },
          "portfolioId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the Portfolio to which the draft campaign is associated."
          },
          "adFormat": {
            "$ref": "#/components/schemas/AdFormat"
          },
          "creative": {
            "$ref": "#/components/schemas/SBVideoCreative"
          }
        }
      },
      "SBCreateDraftCampaignWithKeywords": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonKeywords"
          }
        ]
      },
      "SBVideoCreateDraftCampaignWithKeywords": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoCreateDraftCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonKeywords"
          }
        ]
      },
      "SBCreateDraftCampaignWithProductTargets": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonTargets"
          }
        ]
      },
      "SBVideoCreateDraftCampaignWithProductTargets": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoCreateDraftCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonTargets"
          }
        ]
      },
      "SBUpdateDraftCampaignRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestWithProductTargets"
          },
          {
            "$ref": "#/components/schemas/SBVideoUpdateDraftCampaignRequestWithKeywords"
          }
        ]
      },
      "SBUpdateDraftCampaignRequestCommon": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "name",
              "budget",
              "budgetType"
            ],
            "properties": {
              "draftCampaignId": {
                "type": "integer",
                "description": "The identifier of the draft campaign."
              },
              "name": {
                "type": "string",
                "description": "The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated."
              },
              "budget": {
                "type": "number",
                "description": "The budget associated with the draft campaign."
              },
              "budgetType": {
                "$ref": "#/components/schemas/BudgetType"
              },
              "startDate": {
                "type": "string",
                "description": "The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default."
              },
              "endDate": {
                "type": "string",
                "description": "The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously."
              },
              "brandEntityId": {
                "writeOnly": true,
                "type": "string",
                "description": "The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource."
              },
              "bidOptimization": {
                "type": "boolean",
                "description": "Set to `true` to have Amazon automatically optimize bids for placements below top of search.",
                "default": true
              },
              "bidMultiplier": {
                "type": "number",
                "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
                "minimum": -99,
                "maximum": 99
              },
              "bidAdjustments": {
                "type": "array",
                "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents.",
                "items": {
                  "$ref": "#/components/schemas/BidAdjustment"
                }
              },
              "portfolioId": {
                "type": "integer",
                "format": "int64",
                "description": "The identifier of the Portfolio to which the draft campaign is associated."
              },
              "creative": {
                "$ref": "#/components/schemas/SBCreative"
              }
            }
          }
        ]
      },
      "SBVideoUpdateDraftCampaignRequestCommon": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "name",
              "budget",
              "budgetType"
            ],
            "properties": {
              "draftCampaignId": {
                "type": "integer",
                "description": "The identifier of the draft campaign."
              },
              "name": {
                "type": "string",
                "description": "The name of the draft campaign. Maximum 128 characters. Names must be unique to the Amazon Ads account to which they are associated."
              },
              "budget": {
                "type": "number",
                "description": "The budget associated with the draft campaign."
              },
              "budgetType": {
                "$ref": "#/components/schemas/BudgetType"
              },
              "startDate": {
                "type": "string",
                "description": "The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If not specified, is set to current date by default."
              },
              "endDate": {
                "type": "string",
                "description": "The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If not specified, the campaign has no end date and runs continuously."
              },
              "brandEntityId": {
                "writeOnly": true,
                "type": "string",
                "description": "The brand entity identifier to which the draft campaign is associated. Note that this field is required for sellers. Retrieve using the getBrands or getStores operations in the /v2/stores resource."
              },
              "portfolioId": {
                "type": "integer",
                "format": "int64",
                "description": "The identifier of the Portfolio to which the draft campaign is associated."
              },
              "creative": {
                "$ref": "#/components/schemas/SBVideoCreative"
              }
            }
          }
        ]
      },
      "SBUpdateDraftCampaignRequestWithKeywords": {
        "required": [
          "draftCampaignId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestCommon"
          },
          {
            "type": "object",
            "properties": {
              "keywords": {
                "description": "An array of keywords associated with the campaign.",
                "writeOnly": true,
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "keywordText": {
                      "type": "string",
                      "description": "The keyword text. Maximum of 10 words."
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/MatchType"
                    },
                    "bid": {
                      "$ref": "#/components/schemas/Bid"
                    }
                  }
                }
              },
              "negativeKeywords": {
                "description": "An array of negative keywords associated with the campaign.",
                "writeOnly": true,
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "keywordText": {
                      "description": "The keyword text. Maximum of 10 words.",
                      "type": "string"
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/NegativeMatchType"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "SBUpdateDraftCampaignRequestWithProductTargets": {
        "required": [
          "draftCampaignId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestCommon"
          },
          {
            "type": "object",
            "properties": {
              "targets": {
                "type": "array",
                "writeOnly": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "expressions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SBExpression"
                      }
                    },
                    "bid": {
                      "$ref": "#/components/schemas/Bid"
                    }
                  }
                }
              },
              "negativeTargets": {
                "type": "array",
                "writeOnly": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "expressions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SBExpression"
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "SBVideoUpdateDraftCampaignRequestWithKeywords": {
        "required": [
          "draftCampaignId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoUpdateDraftCampaignRequestCommon"
          },
          {
            "type": "object",
            "properties": {
              "keywords": {
                "description": "An array of keywords associated with the campaign.",
                "writeOnly": true,
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "keywordText": {
                      "type": "string",
                      "description": "The keyword text. Maximum of 10 words."
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/MatchType"
                    },
                    "bid": {
                      "$ref": "#/components/schemas/Bid"
                    }
                  }
                }
              },
              "negativeKeywords": {
                "description": "An array of negative keywords associated with the campaign.",
                "writeOnly": true,
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "keywordText": {
                      "description": "The keyword text. Maximum of 10 words.",
                      "type": "string"
                    },
                    "matchType": {
                      "$ref": "#/components/schemas/NegativeMatchType"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "SBCreateCampaignPositiveKeyword": {
        "description": "An array of keywords associated with the campaign.",
        "writeOnly": true,
        "type": "array",
        "items": {
          "properties": {
            "keywordText": {
              "type": "string",
              "description": "The keyword text. Maximum of 10 words."
            },
            "matchType": {
              "$ref": "#/components/schemas/MatchType"
            },
            "bid": {
              "type": "number",
              "description": "The bid associated with the keyword. Note that this value must be less than the budget associated with the Advertiser account. For more information, see the **Keyword bid constraints by marketplace** section of the [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features) article."
            }
          }
        }
      },
      "SBCreateCampaignNegativeKeyword": {
        "description": "An array of negative keywords associated with the campaign.",
        "writeOnly": true,
        "type": "array",
        "items": {
          "properties": {
            "keywordText": {
              "description": "The keyword text. Maximum of 10 words.",
              "type": "string"
            },
            "matchType": {
              "$ref": "#/components/schemas/NegativeMatchType"
            }
          }
        }
      },
      "SBDraftCampaignResponse": {
        "description": "Applies to:\n| Operation | Path |\n|-----------| -----|\n|[createDraftCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Drafts)| POST /sb/drafts/campaigns|\n|[updateDraftCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Drafts)| PUT /sb/drafts/campaigns|\n|[deleteDraftCampaign](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Drafts)| GET /sb/drafts/campaigns/{draftCampaignId}|\n<br/>",
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignResponseWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBDraftCampaignResponseWithExpressions"
          }
        ]
      },
      "SBSubmitDraftCampaignResponse": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBDraftCampaignResponseWithKeywords"
              },
              {
                "type": "object",
                "properties": {
                  "campaignId": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The identifier of the campaign."
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBDraftCampaignResponseWithExpressions"
              },
              {
                "type": "object",
                "properties": {
                  "campaignId": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The identifier of the campaign."
                  }
                }
              }
            ]
          }
        ]
      },
      "SBDraftCampaignResponseCommon": {
        "properties": {
          "draftCampaignId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the draft campaign."
          },
          "code": {
            "type": "string",
            "description": "The draft campaign response code."
          }
        }
      },
      "SBDraftCampaignResponseWithKeywords": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignResponseCommon"
          },
          {
            "type": "object",
            "properties": {
              "keywordResponses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SBKeywordResponse"
                }
              },
              "negativeKeywordResponses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SBKeywordResponse"
                }
              },
              "details": {
                "type": "string",
                "description": "A human-readable description of the 'code' field value."
              }
            }
          }
        ]
      },
      "SBDraftCampaignResponseWithExpressions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignResponseCommon"
          },
          {
            "type": "object",
            "properties": {
              "targetingClauseResponses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SBExpressionResponse"
                }
              },
              "negativeTargetingClauseResponses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SBExpressionResponse"
                }
              }
            }
          }
        ]
      },
      "SBCreateDraftCampaignPositiveKeyword": {
        "properties": {
          "keywordText": {
            "type": "string",
            "description": "The keyword text. Maximum length is ten words."
          },
          "matchType": {
            "$ref": "#/components/schemas/MatchType"
          },
          "bid": {
            "type": "number",
            "description": "The bid associated with the keyword. For information on the maximum allowable bid, see the 'keyword bid constraints by marketplace' section of the 'supported features' document in the 'guides' section. Note that the bid cannot not be larger than the budget associated with the campaign."
          }
        }
      },
      "SBCreateDraftCampaignNegativeKeyword": {
        "properties": {
          "keywordText": {
            "type": "string",
            "description": "The keyword text. Maximum length is ten words."
          },
          "matchType": {
            "$ref": "#/components/schemas/NegativeMatchType"
          }
        }
      },
      "SBDraftCampaignDeleteResponse": {
        "properties": {
          "code": {
            "type": "string",
            "description": "The status of the deletion request."
          },
          "draftCampaignId": {
            "type": "integer",
            "format": "int64",
            "description": "The campaign identifier."
          }
        }
      },
      "Error": {
        "properties": {
          "code": {
            "type": "string",
            "readOnly": true
          },
          "details": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "SBCampaignName": {
        "description": "The campaign name.",
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "NextToken": {
        "description": "Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.",
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "MaxResults": {
        "description": "Sets a limit on the number of results returned by an operation.",
        "type": "integer",
        "minimum": 1,
        "maximum": 5000
      },
      "MaxResultsRecommendations": {
        "description": "Sets a limit on the number of results returned by an operation.",
        "type": "integer",
        "minimum": 1,
        "maximum": 100
      },
      "ListRequest": {
        "properties": {
          "nextToken": {
            "$ref": "#/components/schemas/NextToken"
          },
          "maxResults": {
            "$ref": "#/components/schemas/MaxResults"
          }
        }
      },
      "ListRecommendationsRequest": {
        "properties": {
          "nextToken": {
            "$ref": "#/components/schemas/NextToken"
          },
          "maxResults": {
            "$ref": "#/components/schemas/MaxResultsRecommendations"
          }
        }
      },
      "ListResponse": {
        "properties": {
          "nextToken": {
            "$ref": "#/components/schemas/NextToken"
          }
        }
      },
      "StartDate": {
        "type": "string",
        "description": "The YYYYMMDD start date of the campaign. Must be equal to or greater than the current date. If this property is not included in the request, the startDate value is not updated. If set to null, `startDate` is set to the current date.",
        "nullable": true,
        "pattern": "^\\d{8}$"
      },
      "EndDate": {
        "type": "string",
        "description": "The YYYYMMDD end date of the campaign. Must be greater than the value specified in the `startDate` field. If this property is not included in the request, the `endDate` value is not updated. If set to null, `endDate` is deleted from the draft campaign.",
        "nullable": true,
        "pattern": "^\\d{8}$"
      },
      "SBCampaignResponse": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBCampaignResponseCommon"
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBCampaignResponseCommon"
              },
              {
                "type": "object",
                "properties": {
                  "expressions": {
                    "description": "An array of targets associated with the campaign.",
                    "writeOnly": true,
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "expression": {
                          "$ref": "#/components/schemas/SBExpression"
                        },
                        "matchType": {
                          "$ref": "#/components/schemas/MatchType"
                        },
                        "bid": {
                          "$ref": "#/components/schemas/Bid"
                        }
                      }
                    }
                  },
                  "negativeExpressions": {
                    "description": "An array of negative targets associated with the campaign.",
                    "writeOnly": true,
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "expression": {
                          "$ref": "#/components/schemas/SBNegativeTargetingExpressions"
                        },
                        "matchType": {
                          "$ref": "#/components/schemas/NegativeMatchType"
                        },
                        "bid": {
                          "$ref": "#/components/schemas/Bid"
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBVideoCampaignResponseCommon"
              }
            ]
          }
        ]
      },
      "SBCampaignBase": {
        "properties": {
          "campaignId": {
            "description": "The campaign identifier.",
            "readOnly": true,
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "$ref": "#/components/schemas/SBCampaignName"
          },
          "tags": {
            "$ref": "#/components/schemas/CampaignTags"
          },
          "budget": {
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "startDate": {
            "$ref": "#/components/schemas/StartDate"
          },
          "endDate": {
            "$ref": "#/components/schemas/EndDate"
          },
          "state": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/State"
              }
            ]
          },
          "servingStatus": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "ASIN_NOT_BUYABLE",
              "BILLING_ERROR",
              "ENDED",
              "LANDING_PAGE_NOT_AVAILABLE",
              "OUT_OF_BUDGET",
              "PAUSED",
              "PENDING_REVIEW",
              "READY",
              "REJECTED",
              "RUNNING",
              "SCHEDULED",
              "TERMINATED"
            ],
            "description": "|Status|Description|\n|------|-----------|\n|ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|\n|BILLING_ERROR| Billing information requires correction.|\n|ENDED| THe `endDate` specified in the campaign object occurs in the past.|\n|LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|\n|OUT_OF_BUDGET| The campaign has run out of budget.|\n|PAUSED| The campaign state set to `paused`.|\n|PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|\n|READY| The campaign is scheduled for a future date.|\n|REJECTED| The campaign failed moderation review.|\n|RUNNING| The campaign is enabled and serving.|\n|SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|\n|TERMINATED|The state of the campaign is set to `archived`.|"
          },
          "brandEntityId": {
            "writeOnly": true,
            "type": "string",
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands)."
          },
          "portfolioId": {
            "description": "The identifier of the portfolio to which the campaign is associated.",
            "type": "integer",
            "format": "int64"
          },
          "adFormat": {
            "$ref": "#/components/schemas/AdFormat"
          }
        }
      },
      "SBCampaignResponseCommon": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCampaignBase"
          },
          {
            "type": "object",
            "properties": {
              "bidOptimization": {
                "type": "boolean",
                "description": "Set to `true` to allow Amazon to automatically optimize bids for placements below top of search."
              },
              "bidMultiplier": {
                "type": "number",
                "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. For example, if set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
                "minimum": -99,
                "maximum": 99
              },
              "bidAdjustments": {
                "type": "array",
                "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents.",
                "items": {
                  "$ref": "#/components/schemas/BidAdjustment"
                }
              },
              "creative": {
                "$ref": "#/components/schemas/SBCollectionCreative"
              },
              "landingPage": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SBProductListLandingPage"
                  },
                  {
                    "$ref": "#/components/schemas/SBStoreLandingPage"
                  },
                  {
                    "$ref": "#/components/schemas/SBCustomUrlLandingPage"
                  }
                ]
              }
            }
          }
        ]
      },
      "SBCampaignResponseCommon33": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCampaignResponseCommon32"
          }
        ]
      },
      "SBCampaignResponseCommon32": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCampaignBase32"
          },
          {
            "type": "object",
            "properties": {
              "bidOptimization": {
                "type": "boolean",
                "description": "Set to `true` to allow Amazon to automatically optimize bids for placements below top of search."
              },
              "bidMultiplier": {
                "type": "number",
                "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. For example, if set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
                "minimum": -99,
                "maximum": 99
              },
              "creative": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SBProductCollectionCreative"
                  },
                  {
                    "$ref": "#/components/schemas/SBStoreSpotlightCreative"
                  }
                ]
              },
              "landingPage": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SBProductListLandingPage"
                  },
                  {
                    "$ref": "#/components/schemas/SBStoreLandingPage"
                  },
                  {
                    "$ref": "#/components/schemas/SBCustomUrlLandingPage"
                  }
                ]
              }
            }
          }
        ]
      },
      "SBCampaignBase32": {
        "properties": {
          "campaignId": {
            "description": "The campaign identifier.",
            "readOnly": true,
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "$ref": "#/components/schemas/SBCampaignName"
          },
          "tags": {
            "$ref": "#/components/schemas/CampaignTags"
          },
          "budget": {
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "startDate": {
            "$ref": "#/components/schemas/StartDate"
          },
          "endDate": {
            "$ref": "#/components/schemas/EndDate"
          },
          "state": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/State"
              }
            ]
          },
          "servingStatus": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "ASIN_NOT_BUYABLE",
              "BILLING_ERROR",
              "ENDED",
              "LANDING_PAGE_NOT_AVAILABLE",
              "OUT_OF_BUDGET",
              "PAUSED",
              "PENDING_REVIEW",
              "READY",
              "REJECTED",
              "RUNNING",
              "SCHEDULED",
              "TERMINATED"
            ],
            "description": "|Status|Description|\n|------|-----------|\n|ASIN_NOT_BUYABLE| The ASIN can't be purchased due to eligibility or availability.|\n|BILLING_ERROR| Billing information requires correction.|\n|ENDED| THe `endDate` specified in the campaign object occurs in the past.|\n|LANDING_PAGE_NOT_AVAILABLE| The specified landing page is not available. This may be caused by an incorrect address or a landing page with less than three ASINs.|\n|OUT_OF_BUDGET| The campaign has run out of budget.|\n|PAUSED| The campaign state set to `paused`.|\n|PENDING_REVIEW|: A newly created campaign that has not passed moderation review. Note that moderation review may take up to 72 hours.|\n|READY| The campaign is scheduled for a future date.|\n|REJECTED| The campaign failed moderation review.|\n|RUNNING| The campaign is enabled and serving.|\n|SCHEDULED| A transitive state between `ready` and `running`, as child entities associated with the campaign move to a running state.|\n|TERMINATED|The state of the campaign is set to `archived`.|"
          },
          "brandEntityId": {
            "writeOnly": true,
            "type": "string",
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands)."
          },
          "portfolioId": {
            "description": "The identifier of the portfolio to which the campaign is associated.",
            "type": "integer",
            "format": "int64"
          },
          "adFormat": {
            "$ref": "#/components/schemas/AdFormat"
          }
        }
      },
      "SBProductCollectionCreative": {
        "properties": {
          "brandLogoCrop": {
            "$ref": "#/components/schemas/SBBrandLogoCrop"
          },
          "asins": {
            "minItems": 0,
            "maxItems": 3,
            "type": "array",
            "items": {
              "description": "An array of ASINs associated with the creative. **Note** do not pass an empty array. This results in an error.",
              "type": "string"
            }
          },
          "brandLogoUrl": {
            "description": "The address of the hosted image.",
            "type": "string"
          },
          "brandName": {
            "description": "A brand name. Maximum length is 30 characters.",
            "type": "string"
          },
          "customImageAssetId": {
            "description": "The identifier of the Custom image from the Store assets library. See [the policy](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies#customimage) for more information on what constitutes a valid Custom image.",
            "type": "string"
          },
          "shouldOptimizeAsins": {
            "description": "Starting on March 25th, 2021, this property will no longer be supported. This feature is currently available in the US and UK. Existing Sponsored Brands campaigns with product optimization enabled will no longer have the products in the creative automatically optimized. Campaigns with product optimization enabled will be converted to standard Sponsored Brands product collection campaigns with the default selected products showing in the creative. For POST and PUT operations, setting this property to true will not have any effect. The value returned in the response will always be false. For the GET operation, the value of this field will always be false. And starting on September 25th, 2021, this property will be removed completely.",
            "type": "boolean"
          },
          "customImageCrop": {
            "$ref": "#/components/schemas/SBCustomImageCrop"
          },
          "customImageUrl": {
            "description": "The address of the hosted Custom image.",
            "type": "string"
          },
          "brandLogoAssetID": {
            "description": "The identifier of the brand logo image from the Store assets library. See [listAssets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Stores) for more information. Note that for campaigns created in the Amazon Advertising console prior to release of the Store assets library, responses will not include a value for the brandLogoAssetID field.",
            "type": "string"
          },
          "headline": {
            "description": "The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.",
            "type": "string"
          }
        }
      },
      "SBStoreSpotlightCreative": {
        "properties": {
          "brandLogoCrop": {
            "$ref": "#/components/schemas/SBBrandLogoCrop"
          },
          "brandLogoUrl": {
            "description": "The address of the hosted image.",
            "type": "string"
          },
          "brandName": {
            "description": "A brand name. Maximum length is 30 characters.",
            "type": "string"
          },
          "subpages": {
            "minItems": 3,
            "maxItems": 3,
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "pageTitle": {
                  "description": "The title of the subpage. Maximum length is 50 characters.",
                  "type": "string"
                },
                "asin": {
                  "description": "An ASIN on the Store subpage. The ASIN image will be used to represent the subpage.",
                  "type": "string"
                },
                "url": {
                  "description": "URL of an existing Store page. Must be a subpage of the Store landing page associated with the campaign.",
                  "type": "string"
                }
              }
            }
          },
          "brandLogoAssetID": {
            "description": "The identifier of the brand logo image from the Store assets library. See [listAssets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Stores) for more information. Note that for campaigns created in the Amazon Advertising console prior to release of the Store assets library, responses will not include a value for the brandLogoAssetID field.",
            "type": "string"
          },
          "headline": {
            "description": "The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.",
            "type": "string"
          }
        }
      },
      "SBBrandLogoCrop": {
        "description": "The crop to apply to the selected Brand logo. A Brand logo must have minimum dimensions of 400x400. If a brandLogoAssetID is supplied but a crop is not, the crop will be defaulted to the whole image.",
        "properties": {
          "top": {
            "description": "The highest pixel from which to begin cropping",
            "type": "integer"
          },
          "left": {
            "description": "The leftmost pixel from which to begin cropping",
            "type": "integer"
          },
          "width": {
            "description": "The number of pixels to crop rightwards from the value specified as `left`",
            "type": "integer"
          },
          "height": {
            "description": "The number of pixels to crop down from the value specified as `top`",
            "type": "integer"
          }
        }
      },
      "SBCustomImageCrop": {
        "description": "The crop to apply to the selected Custom image. A Custom image must have a 1200x628 aspect ratio, with a .01 delta for floating point precision. If a customImageAssetId is supplied but a crop is not, the crop will be defaulted.",
        "properties": {
          "top": {
            "description": "The highest pixel from which to begin cropping",
            "type": "integer"
          },
          "left": {
            "description": "The leftmost pixel from which to begin cropping",
            "type": "integer"
          },
          "width": {
            "description": "The number of pixels to crop rightwards from the value specified as `left`",
            "type": "integer"
          },
          "height": {
            "description": "The number of pixels to crop down from the value specified as `top`",
            "type": "integer"
          }
        }
      },
      "SBVideoCampaignResponseCommon": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCampaignBase"
          },
          {
            "type": "object",
            "properties": {
              "portfolioId": {
                "description": "The identifier of the portfolio to which the campaign is associated.",
                "type": "integer",
                "format": "int64"
              },
              "creative": {
                "$ref": "#/components/schemas/SBVideoCreative"
              },
              "landingPage": {
                "$ref": "#/components/schemas/SBDetailPageLandingPage"
              }
            }
          }
        ]
      },
      "SBCreateCampaignRequestCommon": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters. Note that idempotency for this field works different for sellers and vendors. Sellers aren't allowed to have duplicate campaign names, but vendors can have duplicate campaign names."
          },
          "tags": {
            "$ref": "#/components/schemas/CampaignTags"
          },
          "budget": {
            "description": "The budget amount associated with the campaign.",
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "startDate": {
            "$ref": "#/components/schemas/StartDate"
          },
          "endDate": {
            "$ref": "#/components/schemas/EndDate"
          },
          "adFormat": {
            "$ref": "#/components/schemas/AdFormat"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "brandEntityId": {
            "writeOnly": true,
            "type": "string",
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands)."
          },
          "bidOptimization": {
            "type": "boolean",
            "description": "Set to `true` to allow Amazon to automatically optimize bids for placements below top of search.",
            "default": true
          },
          "bidMultiplier": {
            "type": "number",
            "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
            "minimum": -99,
            "maximum": 99
          },
          "bidAdjustments": {
            "type": "array",
            "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents.",
            "items": {
              "$ref": "#/components/schemas/BidAdjustment"
            }
          },
          "portfolioId": {
            "description": "The identifier of the portfolio to which the campaign is associated.",
            "type": "integer",
            "format": "int64"
          },
          "creative": {
            "$ref": "#/components/schemas/SBCreative"
          },
          "landingPage": {
            "$ref": "#/components/schemas/SBLandingPage"
          }
        }
      },
      "SBVideoCreateCampaignRequestCommon": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the campaign. This name must be unique to the Amazon Ads account to which the campaign is associated. Maximum length of the string is 128 characters."
          },
          "budget": {
            "description": "The budget amount associated with the campaign.",
            "type": "number"
          },
          "budgetType": {
            "$ref": "#/components/schemas/BudgetType"
          },
          "startDate": {
            "$ref": "#/components/schemas/StartDate"
          },
          "endDate": {
            "$ref": "#/components/schemas/EndDate"
          },
          "adFormat": {
            "$ref": "#/components/schemas/AdFormat"
          },
          "state": {
            "$ref": "#/components/schemas/State"
          },
          "brandEntityId": {
            "writeOnly": true,
            "type": "string",
            "description": "The brand entity identifier. Note that this field is required for sellers. For more information, see the [Stores reference](https://advertising.amazon.com/API/docs/v2/reference/stores) or [Brands reference](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Brands)."
          },
          "portfolioId": {
            "description": "The identifier of the portfolio to which the campaign is associated.",
            "type": "integer",
            "format": "int64"
          },
          "creative": {
            "$ref": "#/components/schemas/SBVideoCreative"
          }
        }
      },
      "SBCreateCampaignRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBCreateCampaignWithExpressions"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateCampaignWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBVideoCreateCampaignWithExpressions"
          }
        ]
      },
      "SBCreateCampaignWithKeywords": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonKeywords"
          }
        ]
      },
      "SBVideoCreateCampaignWithKeywords": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoCreateCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonKeywords"
          }
        ]
      },
      "SBCreateCampaignWithExpressions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonTargets"
          }
        ]
      },
      "SBVideoCreateCampaignWithExpressions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoCreateCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBCommonTargets"
          }
        ]
      },
      "SBCommonKeywords": {
        "properties": {
          "keywords": {
            "description": "An array of keywords associated with the campaign.",
            "writeOnly": true,
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "type": "object",
              "properties": {
                "keywordText": {
                  "type": "string",
                  "description": "The keyword text. Maximum of 10 words."
                },
                "nativeLanguageKeyword": {
                  "type": "string",
                  "description": "The unlocalized keyword text in the preferred locale of the advertiser."
                },
                "nativeLanguageLocale": {
                  "type": "string",
                  "description": "The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES."
                },
                "matchType": {
                  "$ref": "#/components/schemas/MatchType"
                },
                "bid": {
                  "$ref": "#/components/schemas/Bid"
                }
              }
            }
          },
          "negativeKeywords": {
            "description": "An array of negative keywords associated with the campaign.",
            "writeOnly": true,
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "type": "object",
              "properties": {
                "keywordText": {
                  "description": "The keyword text. Maximum of 10 words.",
                  "type": "string"
                },
                "matchType": {
                  "$ref": "#/components/schemas/NegativeMatchType"
                }
              }
            }
          }
        }
      },
      "SBCommonTargets": {
        "properties": {
          "targets": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "type": "object",
              "properties": {
                "expressions": {
                  "description": "An array of targets associated with the campaign.",
                  "writeOnly": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBExpression"
                  }
                },
                "bid": {
                  "$ref": "#/components/schemas/Bid"
                }
              }
            }
          },
          "negativeTargets": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "type": "object",
              "properties": {
                "expressions": {
                  "description": "An array of targets associated with the campaign.",
                  "writeOnly": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SBExpression"
                  }
                }
              }
            }
          }
        }
      },
      "SBCollectionCreative": {
        "description": "Render one or more product images and product details.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreative"
          },
          {
            "type": "object",
            "properties": {
              "brandName": {
                "type": "string",
                "description": "The brand name.",
                "maxLength": 30
              },
              "brandLogoAssetId": {
                "type": "string",
                "description": "The identifier of the brand logo image from the Store assets library. See [listAssets](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Stores) for more information. Note that for campaigns created in the Amazon Ads console prior to release of the Store assets library, responses will not include a value for the brandLogoAssetID field."
              },
              "brandLogoUrl": {
                "type": "string",
                "readOnly": true,
                "description": "The address of the hosted image."
              },
              "headline": {
                "type": "string",
                "description": "The headline text. Maximum length of the string is 50 characters for all marketplaces other than Japan, which has a maximum length of 35 characters.",
                "maxLength": 50
              },
              "asins": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "An array of ASINs associated with the creative. **Note** do not pass an empty array. This results in an error.",
                "maxItems": 3
              },
              "shouldOptimizeAsins": {
                "type": "boolean",
                "description": "Note that this field is supported only in the US and UK marketplaces. Set to `true` to have Amazon show other products from your landing page in the advertisement if they are more relevant to the shopper's search. Set to `false` to use the ASINs specified in the `asins` field. Do not specify in unsupported marketplaces."
              }
            }
          }
        ]
      },
      "SBProductListLandingPage": {
        "description": "A landing page showcasing a list of ASINs.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "pageType": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SBStoreLandingPage": {
        "description": "An Amazon Store page or subpage.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "pageType": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SBDetailPageLandingPage": {
        "description": "An Amazon product detail page.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "pageType": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SBCustomUrlLandingPage": {
        "description": "A landing page including at least 3 ASINs. Note that custom landing page URLs can only be specified by vendors.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "pageType": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SBBidRecommendationKeyword": {
        "type": "object",
        "properties": {
          "matchType": {
            "$ref": "#/components/schemas/MatchType"
          },
          "keywordText": {
            "description": "The text of the keyword. Maximum of 10 words.",
            "type": "string",
            "minLength": 1
          }
        }
      },
      "SBKeywordExpression": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/MatchType"
          },
          "value": {
            "description": "The text of the keyword. Maximum of 10 words.",
            "type": "string",
            "minLength": 1
          }
        }
      },
      "RecommendedBid": {
        "type": "object",
        "properties": {
          "rangeEnd": {
            "type": "number",
            "format": "double"
          },
          "rangeStart": {
            "type": "number",
            "format": "double"
          },
          "recommended": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SBExpression": {
        "description": "A name value pair that defines a targeting expression. The `type` field defines the predicate. The `value` field defines the value to match for the predicate. ",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ProductPredicateType"
          },
          "value": {
            "type": "string",
            "description": "The text of the targeting expression. The `-` token defines a range. For example, `2-4` defines a range of 2, 3, and 4."
          }
        }
      },
      "SBTargetingExpressions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SBExpression"
        }
      },
      "ProductPredicateType": {
        "type": "string",
        "enum": [
          "asinCategorySameAs",
          "asinBrandSameAs",
          "asinPriceLessThan",
          "asinPriceBetween",
          "asinPriceGreaterThan",
          "asinReviewRatingLessThan",
          "asinReviewRatingBetween",
          "asinReviewRatingGreaterThan",
          "asinSameAs"
        ]
      },
      "Bid": {
        "type": "number",
        "description": "The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features)."
      },
      "SBNegativeTargetingExpressions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SBNegativeExpression"
        }
      },
      "SBNegativeExpression": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "asinBrandSameAs",
              "asinSameAs"
            ]
          },
          "value": {
            "type": "string",
            "description": "The text of the negative expression."
          }
        }
      },
      "SBNegativeTargetState": {
        "type": "string",
        "enum": [
          "enabled",
          "pending",
          "archived"
        ]
      },
      "SBAdGroupId": {
        "type": "integer",
        "format": "int64",
        "description": "The ad group identifier."
      },
      "SBTargetingClause": {
        "properties": {
          "targetId": {
            "type": "integer",
            "format": "int64",
            "description": "The target identifier."
          },
          "adGroupId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the ad group to which the target is associated."
          },
          "campaignId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the campaign to which the target is associated."
          },
          "expressions": {
            "$ref": "#/components/schemas/SBExpression"
          },
          "resolvedExpressions": {
            "$ref": "#/components/schemas/SBResolvedExpression"
          },
          "state": {
            "$ref": "#/components/schemas/SBProductTargetState"
          },
          "bid": {
            "$ref": "#/components/schemas/Bid"
          }
        }
      },
      "SBDraftTargetingClause": {
        "properties": {
          "targetId": {
            "type": "integer",
            "format": "int64",
            "description": "The target identifier."
          },
          "adGroupId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the ad group to which the target is associated."
          },
          "campaignId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the campaign to which the target is associated."
          },
          "expressions": {
            "$ref": "#/components/schemas/SBExpression"
          },
          "resolvedExpressions": {
            "$ref": "#/components/schemas/SBResolvedExpression"
          },
          "bid": {
            "$ref": "#/components/schemas/Bid"
          }
        }
      },
      "SBNegativeTargetingClause": {
        "properties": {
          "targetId": {
            "type": "integer",
            "format": "int64",
            "description": "The target identifier."
          },
          "adGroupId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of an existing ad group. The newly created target is associated to this ad group"
          },
          "campaignId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of an existing campaign. The newly created target is associated to this campaign"
          },
          "expressions": {
            "$ref": "#/components/schemas/SBNegativeTargetingExpressions"
          },
          "resolvedExpressions": {
            "$ref": "#/components/schemas/SBResolvedExpression"
          },
          "state": {
            "$ref": "#/components/schemas/SBProductTargetState"
          }
        }
      },
      "SBDraftNegativeTargetingClause": {
        "properties": {
          "targetId": {
            "type": "integer",
            "format": "int64",
            "description": "The target identifier."
          },
          "adGroupId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of an existing ad group. The newly created target is associated to the specified ad group."
          },
          "campaignId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of an existing campaign. The newly created target is associated to the specified campaign."
          },
          "expressions": {
            "$ref": "#/components/schemas/SBNegativeTargetingExpressions"
          },
          "resolvedExpressions": {
            "$ref": "#/components/schemas/SBResolvedExpression"
          }
        }
      },
      "SBResolvedExpression": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ProductPredicateType"
          },
          "value": {
            "readOnly": true,
            "type": "string",
            "description": "The human-readable target text."
          }
        }
      },
      "SBNegativeResolvedExpression": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "asinBrandSameAs",
              "asinSameAs"
            ]
          },
          "value": {
            "readOnly": true,
            "type": "string",
            "description": "The human-readable negative target text."
          }
        }
      },
      "SBProductTargetState": {
        "type": "string",
        "enum": [
          "enabled",
          "paused",
          "pending",
          "archived",
          "draft"
        ]
      },
      "SBCreateTargetsResponse": {
        "properties": {
          "createTargetSuccessResults": {
            "description": "Lists the successfully created targets. Note that targets in the response are correlated to targets in the request using the `targetRequestIndex` field. For example, if `targetRequestIndex` is set to `2`, the values correlate to the third target object in the request.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "targetRequestIndex": {
                  "$ref": "#/components/schemas/SBTargetRequestIndex"
                },
                "targetId": {
                  "$ref": "#/components/schemas/SBTargetId"
                }
              }
            }
          },
          "createTargetErrorResults": {
            "description": "Lists errors that occured during target creation. Note that errors are correlated to target create requests by the `targetRequestIndex` field. This field corresponds to the order of the target object in the request. For example, if `targetRequestIndex` is set to `3`, an error occured during creation of the fourth target in the request.",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                },
                {
                  "type": "object",
                  "properties": {
                    "targetRequestIndex": {
                      "$ref": "#/components/schemas/SBTargetRequestIndex"
                    },
                    "targetId": {
                      "$ref": "#/components/schemas/SBTargetId"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "SBCreateTargetingClauseRequest": {
        "properties": {
          "adGroupId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of an existing ad group. The newly created target is associated to this ad group."
          },
          "campaignId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of an existing campaign. The newly created target is associated to this campaign."
          },
          "expressions": {
            "$ref": "#/components/schemas/SBTargetingExpressions"
          },
          "bid": {
            "$ref": "#/components/schemas/Bid"
          }
        }
      },
      "SBUpdateTargetingClauseRequest": {
        "properties": {
          "targetId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the target."
          },
          "adGroupId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the ad group to which the target is associated."
          },
          "campaignId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of the campaign to which the target is associated."
          },
          "state": {
            "$ref": "#/components/schemas/SBProductTargetState"
          },
          "bid": {
            "$ref": "#/components/schemas/Bid"
          }
        }
      },
      "SBTargetId": {
        "type": "integer",
        "format": "int64",
        "description": "The identifier of a target."
      },
      "SBExpressionRequestIndex": {
        "description": "Correlates the expression to the expression array index specified in the request. Zero-based.",
        "type": "number"
      },
      "SBNegativeExpressionRequestIndex": {
        "description": "Correlates the negative expression to the negative expression array index specified in the request. Zero-based.",
        "type": "number"
      },
      "SBTargetRequestIndex": {
        "description": "Correlates the target to the target array index specified in the request. Zero-based.",
        "type": "number"
      },
      "SBNegativeTargetRequestIndex": {
        "description": "Correlates the negative target to the negative target array index specified in the request. Zero-based.",
        "type": "number"
      },
      "SBBidRecommendationKeywordIndex": {
        "description": "Correlates the keyword to the keyword array index specified in the request. Zero-based.",
        "type": "number"
      },
      "SBBidRecommendationTargetsIndex": {
        "description": "Correlates the target to the targets array index specified in the request. Zero-based.",
        "type": "number"
      },
      "SBTargetingClauseResponse": {
        "properties": {
          "targetId": {
            "type": "integer",
            "format": "int64",
            "description": "The target identifier."
          },
          "code": {
            "type": "string"
          }
        }
      },
      "SBUpdateNegativeTargetingClauseRequest": {
        "properties": {
          "targetId": {
            "type": "integer",
            "format": "int64",
            "description": "The target identifier."
          },
          "adGroupId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of an existing ad group. The newly created target is associated to this ad group."
          },
          "state": {
            "$ref": "#/components/schemas/SBProductTargetState"
          }
        }
      },
      "SBCreateNegativeTargetingClauseRequest": {
        "properties": {
          "adGroupId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of an existing ad group. The newly created target is associated to this ad group."
          },
          "campaignId": {
            "type": "integer",
            "format": "int64",
            "description": "The identifier of an existing campaign. The newly created target is associated to this campaign."
          },
          "expressions": {
            "$ref": "#/components/schemas/SBNegativeTargetingExpressions"
          }
        }
      },
      "SBNegativeTargetId": {
        "type": "integer",
        "format": "int64",
        "description": "The identifier of a negative target."
      },
      "SBCategoryResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The category identifier."
          },
          "name": {
            "type": "string",
            "description": "The category name."
          },
          "isTargetable": {
            "type": "boolean",
            "description": "Set to `true` if the category can be targeted in a targeting expression, and `false` if not."
          },
          "path": {
            "type": "string",
            "description": "The path of the category within the category catalogue."
          }
        }
      },
      "SBBrandResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The Brand identifier."
          },
          "name": {
            "type": "string",
            "description": "The Brand name."
          }
        }
      },
      "MediaId": {
        "type": "string",
        "description": "The Media identifier."
      },
      "MediaStatus": {
        "type": "string",
        "description": "Media status:\n * `Processing` - The media is being processed\n * `PendingDeepValidation` - The media is pending additional validation carried out during media conversion.\n * `Available` - Media has successfully finished validation and conversion and the media is published.\n * `Failed` - Media processing failed\n",
        "enum": [
          "Processing",
          "PendingDeepValidation",
          "Available",
          "Failed"
        ]
      },
      "UploadLocation": {
        "type": "string",
        "description": "The url to upload the media. The url expires in 15 minutes. The upload location only supports `PUT` HTTP Method to upload the media content."
      },
      "Program": {
        "required": [
          "creativeType",
          "programType"
        ],
        "type": "object",
        "properties": {
          "programType": {
            "type": "string",
            "enum": [
              "SponsoredBrands"
            ]
          },
          "creativeType": {
            "type": "string",
            "enum": [
              "Video"
            ]
          }
        },
        "description": "The Ad Program that the media will be attached to. Currently, we support `SponsoredBrands` with creative type `Video`"
      },
      "MediaPublisherAPIError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "SBCampaignResponseCommonV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCampaignResponseCommon"
          },
          {
            "$ref": "#/components/schemas/ShopperSegmentBiddingControls"
          }
        ]
      },
      "ShopperSegmentBiddingControls": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "properties": {
          "bidOptimizationStrategy": {
            "$ref": "#/components/schemas/BidOptimizationStrategy"
          },
          "bidAdjustments": {
            "type": "array",
            "description": "List of bid adjustments for placement group and shopper segments. BidMultiplier cannot be specified when bidAdjustments are present.",
            "items": {
              "$ref": "#/components/schemas/BidAdjustmentV3_3"
            },
            "minItems": 0,
            "maxItems": 4
          }
        }
      },
      "BidAdjustmentV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "properties": {
          "bidAdjustmentPredicate": {
            "description": "|-\n            Determines the predicate (placement groups and shopper segments) that the bid adjustment will be made for.\n            |BidAdjustmentPredicate|Description|\n            |------|-----------|\n            |PLACEMENT_GROUP_DETAIL_PAGE|Predicate for adjusting bids at detail page placement.|\n            |PLACEMENT_GROUP_HOME|Predicate for adjusting bids at home page placement.|\n            |PLACEMENT_GROUP_OTHER|Predicate for adjusting bids at pages other than detail and home pages placement.|\n            |SHOPPER_SEGMENT_NEW_TO_BRAND_PURCHASE|Predicate for adjusting bids for new-to-brand purchase shopper segment.|",
            "type": "string",
            "enum": [
              "placementGroupDetailPage",
              "placementGroupHome",
              "placementGroupOther",
              "shopperSegmentNewToBrandPurchase"
            ]
          },
          "bidAdjustmentPercent": {
            "description": "|-\n            Bid adjustment for placement groups and shopper segments. Value is a percentage to two decimal places. For bid adjustments in placement groups, min is -99.00 and max is 900.00. For bid adjustments in shopper segments, min is 0.00 and max is 900.00. For example: If -40.00 is set for a $5.00 bid, the resulting bid is $3.00.",
            "type": "number",
            "minimum": -99,
            "maximum": 900
          }
        }
      },
      "BidOptimizationStrategy": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "string",
        "description": "|-\n        Automated bid optimization strategy.\n        |Bid optimization strategy|Description|\n        |------|-----------|\n        |MAXIMIZE_IMMEDIATE_SALES|Bid optimization strategy for maximizing immediate sales.|\n        |MAXIMIZE_NEW_TO_BRAND_CUSTOMERS|Bid optimization strategy for maximizing new to brand customers.|",
        "enum": [
          "MAXIMIZE_IMMEDIATE_SALES",
          "MAXIMIZE_NEW_TO_BRAND_CUSTOMERS"
        ]
      },
      "SBCreateCampaignWithKeywordsV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignRequestCommonV3_3"
          },
          {
            "type": "object",
            "properties": {
              "keywords": {
                "description": "An array of keywords associated with the campaign.",
                "writeOnly": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Keyword"
                }
              },
              "negativeKeywords": {
                "description": "An array of negative keywords associated with the campaign.",
                "writeOnly": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NegativeKeyword"
                }
              }
            }
          }
        ]
      },
      "Keyword": {
        "type": "object",
        "properties": {
          "keywordText": {
            "type": "string",
            "description": "The keyword text. Maximum of 10 words."
          },
          "nativeLanguageKeyword": {
            "type": "string",
            "description": "The unlocalized keyword text in the preferred locale of the advertiser."
          },
          "nativeLanguageLocale": {
            "type": "string",
            "description": "The locale preference of the advertiser. For example, if the advertiser’s preferred language is Simplified Chinese, set the locale to `zh_CN`. Supported locales include: Simplified Chinese (locale: zh_CN) for US, UK and CA. English (locale: en_GB) for DE, FR, IT and ES."
          },
          "matchType": {
            "$ref": "#/components/schemas/SBMatchType"
          },
          "bid": {
            "$ref": "#/components/schemas/SBAPIBid"
          }
        }
      },
      "SBAPIBid": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "number",
        "format": "double",
        "description": "The associated bid. Note that this value must be less than the budget associated with the Advertiser account. For more information, see [supported features](https://advertising.amazon.com/API/docs/v2/guides/supported_features)."
      },
      "SBMatchType": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "string",
        "description": "The match type. For more information, see [match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.",
        "enum": [
          "broad",
          "exact",
          "phrase"
        ]
      },
      "NegativeKeyword": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "keywordText": {
            "description": "The keyword text. Maximum of 10 words.",
            "type": "string"
          },
          "matchType": {
            "$ref": "#/components/schemas/SBNegativeMatchType"
          }
        }
      },
      "SBNegativeMatchType": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "string",
        "description": "The negative match type. For more information, see [negative keyword match types](https://advertising.amazon.com/help#GHTRFDZRJPW6764R) in the Amazon Ads support center.",
        "enum": [
          "negativeExact",
          "negativePhrase"
        ]
      },
      "KeywordEntry": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "expressions": {
            "type": "array",
            "description": "An array of targets associated with the campaign.",
            "items": {
              "$ref": "#/components/schemas/Expression"
            }
          },
          "bid": {
            "$ref": "#/components/schemas/SBAPIBid"
          }
        }
      },
      "Expression": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SBAPIProductPredicateType"
          },
          "value": {
            "description": "The text of the targeting expression. The - token defines a range. For example, 2-4 defines a range of 2, 3, and 4.",
            "type": "string"
          }
        }
      },
      "SBAPIProductPredicateType": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "string",
        "enum": [
          "asinCategorySameAs",
          "asinBrandSameAs",
          "asinPriceLessThan",
          "asinPriceBetween",
          "asinPriceGreaterThan",
          "asinReviewRatingLessThan",
          "asinReviewRatingBetween",
          "asinReviewRatingGreaterThan",
          "asinSameAs"
        ]
      },
      "SBCreateCampaignRequestCommonV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/ShopperSegmentBiddingControls"
          }
        ]
      },
      "SBListCampaignsResponseV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "description": "List of campaigns",
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/SBListCampaignItemV3_3"
            },
            {
              "$ref": "#/components/schemas/SBVideoListCampaignItem"
            }
          ]
        }
      },
      "SBVideoListCampaignItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCampaignBase"
          },
          {
            "type": "object",
            "properties": {
              "landingPage": {
                "$ref": "#/components/schemas/SBDetailPageLandingPage"
              },
              "creative": {
                "$ref": "#/components/schemas/SBVideoCreative"
              },
              "supplySource": {
                "$ref": "#/components/schemas/SupplySource"
              }
            }
          }
        ]
      },
      "SupplySource": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "description": "The supply source of the campaign. Use `AMAZON` for placements on Amazon website. Use `STREAMING_VIDEO` for off-site video placements such as IMDb TV. Default value is `AMAZON`",
        "type": "string",
        "enum": [
          "AMAZON",
          "STREAMING_VIDEO"
        ]
      },
      "SBCreateDraftCampaignWithKeywordsV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignRequestCommonV3_3"
          },
          {
            "$ref": "#/components/schemas/SBKeywordsNegativeKeywords"
          }
        ]
      },
      "SBKeywordsNegativeKeywords": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "keywords": {
            "description": "An array of keywords associated with the campaign.",
            "writeOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Keyword"
            }
          },
          "negativeKeywords": {
            "description": "An array of negative keywords associated with the campaign.",
            "writeOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NegativeKeyword"
            }
          }
        }
      },
      "SBCreateDraftCampaignRequestCommonV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCreateDraftCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/ShopperSegmentBiddingControls"
          }
        ]
      },
      "SBUpdateDraftCampaignRequestV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestWithKeywordsV3_3"
          },
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestWithProductTargetsV3_3"
          },
          {
            "$ref": "#/components/schemas/SBVideoUpdateDraftCampaignRequestWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBVideoUpdateDraftCampaignRequestWithProductTargets"
          }
        ]
      },
      "SBVideoUpdateDraftCampaignRequestWithProductTargets": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoUpdateDraftCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/SBTargetsNegativeTargets"
          }
        ]
      },
      "SBTargetsNegativeTargets": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SBTarget"
            }
          },
          "negativeTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SBNegativeTarget"
            }
          }
        }
      },
      "SBNegativeTarget": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "properties": {
          "expressions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SBExpression"
            }
          }
        }
      },
      "SBTarget": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "properties": {
          "expressions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SBExpression"
            }
          },
          "bid": {
            "$ref": "#/components/schemas/SBAPIBid"
          }
        }
      },
      "SBUpdateDraftCampaignRequestWithKeywordsV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestCommonV3_3"
          },
          {
            "$ref": "#/components/schemas/SBKeywordsNegativeKeywords"
          }
        ]
      },
      "SBUpdateDraftCampaignRequestCommonV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestCommon"
          },
          {
            "$ref": "#/components/schemas/ShopperSegmentBiddingControls"
          }
        ]
      },
      "SBUpdateDraftCampaignRequestWithProductTargetsV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBUpdateDraftCampaignRequestCommonV3_3"
          },
          {
            "$ref": "#/components/schemas/SBTargetsNegativeTargets"
          }
        ]
      },
      "SBListCampaignItemV3_3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBListCampaignItem"
          },
          {
            "$ref": "#/components/schemas/ShopperSegmentBiddingControls"
          }
        ]
      },
      "SBListCampaignItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SBCampaignBase"
          },
          {
            "type": "object",
            "properties": {
              "landingPage": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SBProductListLandingPage"
                  },
                  {
                    "$ref": "#/components/schemas/SBStoreLandingPage"
                  },
                  {
                    "$ref": "#/components/schemas/SBCustomUrlLandingPage"
                  }
                ]
              },
              "bidOptimization": {
                "type": "boolean",
                "description": "Set to true to allow Amazon to automatically optimize bids for placements below top of search."
              },
              "bidMultiplier": {
                "type": "number",
                "format": "double",
                "description": "A bid multiplier. Note that this field can only be set when 'bidOptimization' is set to false. Value is a percentage to two decimal places. Example: If set to -40.00 for a $5.00 bid, the resulting bid is $3.00."
              },
              "creative": {
                "$ref": "#/components/schemas/SBCreative"
              },
              "bidAdjustments": {
                "type": "array",
                "description": "List of bid adjustment for each placement group. BidMultiplier cannot be specified when bidAdjustments presents.",
                "items": {
                  "$ref": "#/components/schemas/BidAdjustment"
                }
              }
            }
          }
        ]
      },
      "BidAdjustment": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "properties": {
          "bidAdjustmentPredicate": {
            "description": "The enum for placement group name",
            "type": "string",
            "enum": [
              "placementGroupDetailPage",
              "placementGroupHome",
              "placementGroupOther"
            ]
          },
          "bidAdjustmentPercent": {
            "description": "Bid adjustment for placement group. Value is a percentage to two decimal places. Example: If this is set to -40.00 for a $5.00 bid, the resulting bid is $3.00.",
            "type": "number",
            "minimum": -99,
            "maximum": 900
          }
        }
      },
      "SBCreateCampaignResponseV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "description": "SB create campaign",
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBCreateCampaignsResponseDefault"
          },
          {
            "$ref": "#/components/schemas/SBCreateCampaignsResponseFullV3_3"
          }
        ]
      },
      "SBCreateCampaignsResponseFullV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "description": "|-\n        Applies to:\n        | Operation | Path |\n        |-----------| -----|\n        |[createCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| POST /sb/campaigns|\n        <br/>",
        "type": "object",
        "properties": {
          "campaign": {
            "$ref": "#/components/schemas/SBCampaignResponseV3_3"
          },
          "allOf": {
            "$ref": "#/components/schemas/SBCreateCampaignsResponseDefault"
          }
        }
      },
      "SBCreateCampaignsResponseDefault": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "description": "|-\n        Applies to:\n        | Operation | Path |\n        |-----------| -----|\n        |[createCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| POST /sb/campaigns|\n        <br/>",
        "type": "object",
        "properties": {
          "campaignId": {
            "description": "The campaign identifier.",
            "type": "integer",
            "format": "int64"
          },
          "adGroupResponses": {
            "description": "An array of ad groups associated with the campaign.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "adGroupId": {
                  "description": "The ad group identifier.",
                  "type": "integer",
                  "format": "int64"
                },
                "code": {
                  "description": "An enumerated response code.",
                  "type": "string"
                },
                "description": {
                  "description": "A human-readable description of the enumerated response code in the `code` field.",
                  "type": "string"
                }
              }
            }
          },
          "keywordResponses": {
            "description": "An array of keywords associated with the campaign.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SBKeywordResponse"
            }
          },
          "negativeKeywordResponses": {
            "description": "An array of negative keywords associated with the campaign.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SBKeywordResponse"
            }
          },
          "targetingClauseResponses": {
            "description": "An array of targets associated with the campaign.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SBTargetingClauseResponse"
            }
          },
          "negativeTargetingClauseResponses": {
            "description": "An array of negative targets associated with the campaign.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SBTargetingClauseResponse"
            }
          },
          "code": {
            "description": "An enumerated response code.",
            "type": "string"
          },
          "description": {
            "description": "A human-readable description of the enumerated response code in the `code` field.",
            "type": "string"
          }
        }
      },
      "SBUpdateCampaignResponseItemV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBUpdateCampaignResponseDefault"
          },
          {
            "type": "object",
            "properties": {
              "campaign": {
                "$ref": "#/components/schemas/SBCampaignResponseV3_3"
              }
            }
          }
        ]
      },
      "SBCampaignResponseV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "description": "SB campaign",
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBCampaignResponseCommonV3_3"
          },
          {
            "$ref": "#/components/schemas/SBVideoCampaignResponseCommon"
          }
        ]
      },
      "SBUpdateCampaignResponseDefault": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "description": "|-\n        Applies to:\n        | Operation | Path |\n        |-----------| -----|\n        |[updateCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)| PUT /sb/campaigns|\n        |[archiveCampaigns](https://advertising.amazon.com/API/docs/v3/reference/SponsoredBrands/Campaigns)|DELETE /sb/campaigns/{campaignId}|\n        <br/>",
        "type": "object",
        "properties": {
          "campaignId": {
            "type": "integer",
            "format": "int64",
            "description": "The campaign identifier."
          },
          "code": {
            "type": "string",
            "description": "An enumerated response code."
          },
          "description": {
            "type": "string",
            "description": "A human-readable description of the enumerated response code in the `code` field."
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorEntry"
            }
          }
        }
      },
      "ErrorEntry": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "oneOf": [
          {
            "$ref": "#/components/schemas/AdFormatError"
          },
          {
            "$ref": "#/components/schemas/AdGroupError"
          },
          {
            "$ref": "#/components/schemas/AssetsError"
          },
          {
            "$ref": "#/components/schemas/AuthorizationError"
          },
          {
            "$ref": "#/components/schemas/BidError"
          },
          {
            "$ref": "#/components/schemas/BrandsError"
          },
          {
            "$ref": "#/components/schemas/BudgetError"
          },
          {
            "$ref": "#/components/schemas/CampaignError"
          },
          {
            "$ref": "#/components/schemas/CreativeError"
          },
          {
            "$ref": "#/components/schemas/DraftsError"
          },
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "$ref": "#/components/schemas/FilterError"
          },
          {
            "$ref": "#/components/schemas/KDPError"
          },
          {
            "$ref": "#/components/schemas/KeywordError"
          },
          {
            "$ref": "#/components/schemas/LandingPageError"
          },
          {
            "$ref": "#/components/schemas/MarketplaceError"
          },
          {
            "$ref": "#/components/schemas/PageAsinsError"
          },
          {
            "$ref": "#/components/schemas/PaginationError"
          },
          {
            "$ref": "#/components/schemas/ProductItemsError"
          },
          {
            "$ref": "#/components/schemas/ProfileError"
          },
          {
            "$ref": "#/components/schemas/RecommendationError"
          },
          {
            "$ref": "#/components/schemas/SpooferError"
          },
          {
            "$ref": "#/components/schemas/TargetError"
          }
        ]
      },
      "BasicErrorObject": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "required": [
          "message",
          "reason"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "trigger": {
            "type": "string"
          }
        }
      },
      "AdFormatError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "AdFormatError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        }
      },
      "AdGroupError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "AdGroupError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        }
      },
      "AssetsError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "AssetsError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        }
      },
      "AuthorizationError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "AuthorizationError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        }
      },
      "BidError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "BidError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "type": "object",
                "properties": {
                  "lowerLimit": {
                    "type": "string"
                  },
                  "upperLimit": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "BrandsError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "BrandsError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        }
      },
      "BudgetError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "BudgetError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "type": "object",
                "properties": {
                  "budgetType": {
                    "type": "string"
                  },
                  "minBudget": {
                    "type": "string"
                  },
                  "maxBudget": {
                    "type": "string"
                  },
                  "precision": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "CampaignError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "CampaignError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "type": "object",
                "properties": {
                  "maxLength": {
                    "type": "string"
                  },
                  "invalidCharacters": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "maxCampaigns": {
                    "type": "string"
                  },
                  "supportedStates": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "CreativeError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "CreativeError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "type": "object",
                "properties": {
                  "maxLength": {
                    "type": "string"
                  },
                  "emoji": {
                    "type": "string"
                  },
                  "invalidCharacters": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "expectedType": {
                    "type": "string"
                  },
                  "actualType": {
                    "type": "string"
                  },
                  "maxSize": {
                    "type": "string"
                  },
                  "asins": {
                    "type": "string"
                  },
                  "cropField": {
                    "type": "string"
                  },
                  "min": {
                    "type": "string"
                  },
                  "top": {
                    "type": "string"
                  },
                  "cropHeight": {
                    "type": "string"
                  },
                  "imageHeight": {
                    "type": "string"
                  },
                  "left": {
                    "type": "string"
                  },
                  "cropWidth": {
                    "type": "string"
                  },
                  "imageWidth": {
                    "type": "string"
                  },
                  "aspectRatio": {
                    "type": "string"
                  },
                  "requiredAspectRatio": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "DraftsError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "DraftsError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        }
      },
      "FilterError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "FilterError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        }
      },
      "KDPError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "KDPError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        }
      },
      "KeywordError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "KeywordError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "type": "object",
                "properties": {
                  "keywordText": {
                    "type": "string"
                  },
                  "matchType": {
                    "type": "string"
                  },
                  "bid": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "LandingPageError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "LandingPageError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "type": "object",
                "properties": {
                  "expected": {
                    "type": "string"
                  },
                  "actual": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "MarketplaceError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "MarketplaceError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        }
      },
      "PageAsinsError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "PageAsinsError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "type": "object",
                "properties": {
                  "pageUrl": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "PaginationError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "PaginationError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "type": "object",
                "properties": {
                  "upperLimit": {
                    "type": "string"
                  },
                  "expected": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "ProductItemsError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "ProductItemsError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        }
      },
      "ProfileError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "ProfileError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        }
      },
      "RecommendationError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "RecommendationError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "type": "object",
                "properties": {
                  "maxCount": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "SpooferError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "SpooferError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              }
            ]
          }
        }
      },
      "TargetError": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "TargetError": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicErrorObject"
              },
              {
                "type": "object",
                "properties": {
                  "validStates": {
                    "type": "string"
                  },
                  "matchType": {
                    "type": "string"
                  },
                  "targetType": {
                    "type": "string"
                  },
                  "note": {
                    "type": "string"
                  },
                  "maxTargets": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "SBListDraftCampaignsResponseV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignBaseV3_3"
          },
          {
            "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
          }
        ]
      },
      "SBDraftCampaignBaseV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignBase"
          },
          {
            "$ref": "#/components/schemas/ShopperSegmentBiddingControls"
          }
        ]
      },
      "SBDraftCampaignV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "oneOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignWithKeywordsV3_3"
          },
          {
            "$ref": "#/components/schemas/SBDraftCampaignWithTargetsV3_3"
          },
          {
            "$ref": "#/components/schemas/SBVideoDraftCampaignWithKeywords"
          },
          {
            "$ref": "#/components/schemas/SBVideoDraftCampaignWithTargets"
          }
        ]
      },
      "SBDraftCampaignWithKeywordsV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "description": "SB create campaign with keywords",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignBaseV3_3"
          },
          {
            "$ref": "#/components/schemas/SBDraftKeywordsNegativeKeywords"
          }
        ]
      },
      "SBDraftCampaignWithTargetsV3_3": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "description": "SB create campaign with targets",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBDraftCampaignBaseV3_3"
          },
          {
            "$ref": "#/components/schemas/SBDraftAllTargetingClauses"
          }
        ]
      },
      "SBVideoDraftCampaignWithKeywords": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "description": "SB create video campaign with keywords",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
          },
          {
            "$ref": "#/components/schemas/SBDraftKeywordsNegativeKeywords"
          }
        ]
      },
      "SBVideoDraftCampaignWithTargets": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "description": "SB create video campaign with targets",
        "allOf": [
          {
            "$ref": "#/components/schemas/SBVideoDraftCampaignBase"
          },
          {
            "$ref": "#/components/schemas/SBDraftAllTargetingClauses"
          }
        ]
      },
      "SBDraftKeywordsNegativeKeywords": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "type": "object",
        "properties": {
          "keywords": {
            "description": "An array of keywords associated with the Draft campaign.",
            "writeOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SBDraftKeyword"
            }
          },
          "negativeKeywords": {
            "description": "An array of negative keywords associated with the Draft campaign.",
            "writeOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SBDraftNegativeKeyword"
            }
          }
        }
      },
      "SBDraftAllTargetingClauses": {
        "x-amazon-advertising-package": "SBPublicAPISwagger",
        "properties": {
          "targets": {
            "type": "array",
            "description": "An array of targets associated with the draft campaign.",
            "items": {
              "$ref": "#/components/schemas/SBDraftTargetingClause"
            }
          },
          "negativeTargets": {
            "type": "array",
            "description": "An array of negative keywords associated with the draft campaign.",
            "items": {
              "$ref": "#/components/schemas/SBDraftNegativeTargetingClause"
            }
          }
        }
      }
    },
    "parameters": {
      "clientHeader": {
        "name": "Amazon-Advertising-API-ClientId",
        "in": "header",
        "description": "The identifier of a client associated with a \"Login with Amazon\" account.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "profileHeader": {
        "name": "Amazon-Advertising-API-Scope",
        "in": "header",
        "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "examples": {
      "StoreSpotlightCampaignListExample": {
        "summary": "A list of campaign cases containing store spotlight case",
        "value": [
          {
            "campaignId": 0,
            "name": "string",
            "tags": {
              "additionalProp1": "string",
              "additionalProp2": "string",
              "additionalProp3": "string"
            },
            "budget": 0,
            "budgetType": "lifetime",
            "startDate": "string",
            "endDate": "string",
            "state": "enabled",
            "servingStatus": "asinNotBuyable",
            "brandEntityId": "string",
            "portfolioId": 0,
            "adFormat": "storeSpotlight",
            "landingPage": {
              "pageType": "string",
              "url": "string"
            },
            "bidOptimization": true,
            "bidMultiplier": 0,
            "creative": {
              "type": "storeSpotlight",
              "brandName": "string",
              "brandLogoAssetID": "string",
              "brandLogoCrop": {
                "height": 0,
                "top": 0,
                "left": 0,
                "width": 0
              },
              "headline": "string",
              "asins": [],
              "subpages": [
                {
                  "url": "string",
                  "pageTitle": "string",
                  "asin": "string"
                },
                {
                  "url": "string",
                  "pageTitle": "string",
                  "asin": "string"
                },
                {
                  "url": "string",
                  "pageTitle": "string",
                  "asin": "string"
                }
              ]
            },
            "bidAdjustments": [
              {
                "bidAdjustmentPredicate": "placementGroupHome",
                "bidAdjustmentPercent": 900
              },
              {
                "bidAdjustmentPredicate": "placementGroupDetailPage",
                "bidAdjustmentPercent": 200
              },
              {
                "bidAdjustmentPredicate": "placementGroupOther",
                "bidAdjustmentPercent": -50
              }
            ]
          },
          {
            "campaignId": 0,
            "name": "string",
            "tags": {
              "additionalProp1": "string",
              "additionalProp2": "string",
              "additionalProp3": "string"
            },
            "budget": 0,
            "budgetType": "lifetime",
            "startDate": "string",
            "endDate": "string",
            "state": "enabled",
            "servingStatus": "asinNotBuyable",
            "brandEntityId": "string",
            "portfolioId": 0,
            "adFormat": "authorCollection",
            "landingPage": {
              "pageType": "string",
              "url": "string"
            },
            "creative": {
              "asins": [
                "string"
              ],
              "videoMediaIds": [
                "string"
              ],
              "type": "video"
            },
            "supplySource": "AMAZON"
          }
        ]
      },
      "StoreSpotlightSingleCampaignExample": {
        "summary": "An example of store spotlight campaign case",
        "value": {
          "campaignId": 0,
          "name": "string",
          "tags": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "budget": 0,
          "budgetType": "lifetime",
          "startDate": "string",
          "endDate": "string",
          "state": "enabled",
          "servingStatus": "asinNotBuyable",
          "brandEntityId": "string",
          "portfolioId": 0,
          "adFormat": "storeSpotlight",
          "bidOptimization": true,
          "bidMultiplier": 0,
          "creative": {
            "type": "storeSpotlight",
            "brandName": "string",
            "brandLogoAssetID": "string",
            "brandLogoCrop": {
              "height": 0,
              "top": 0,
              "left": 0,
              "width": 0
            },
            "headline": "string",
            "asins": [],
            "subpages": [
              {
                "url": "string",
                "pageTitle": "string",
                "asin": "string"
              },
              {
                "url": "string",
                "pageTitle": "string",
                "asin": "string"
              },
              {
                "url": "string",
                "pageTitle": "string",
                "asin": "string"
              }
            ]
          },
          "landingPage": {
            "pageType": "string",
            "url": "string"
          },
          "bidAdjustments": [
            {
              "bidAdjustmentPredicate": "placementGroupHome",
              "bidAdjustmentPercent": 900
            },
            {
              "bidAdjustmentPredicate": "placementGroupDetailPage",
              "bidAdjustmentPercent": 200
            },
            {
              "bidAdjustmentPredicate": "placementGroupOther",
              "bidAdjustmentPercent": -50
            }
          ]
        }
      },
      "StoreSpotlightDraftListExample": {
        "summary": "A list of draft cases containing store spotlight case",
        "value": [
          {
            "draftCampaignId": 0,
            "name": "string",
            "tags": {
              "additionalProp1": "string",
              "additionalProp2": "string",
              "additionalProp3": "string"
            },
            "budget": 0,
            "budgetType": "lifetime",
            "startDate": "string",
            "endDate": "string",
            "brandEntityId": "string",
            "bidOptimization": true,
            "bidMultiplier": 99,
            "portfolioId": 0,
            "adFormat": "storeSpotlight",
            "creative": {
              "type": "storeSpotlight",
              "brandName": "string",
              "brandLogoAssetID": "string",
              "brandLogoCrop": {
                "height": 0,
                "top": 0,
                "left": 0,
                "width": 0
              },
              "headline": "string",
              "asins": [],
              "subpages": [
                {
                  "url": "string",
                  "pageTitle": "string",
                  "asin": "string"
                },
                {
                  "url": "string",
                  "pageTitle": "string",
                  "asin": "string"
                },
                {
                  "url": "string",
                  "pageTitle": "string",
                  "asin": "string"
                }
              ]
            },
            "landingPage": {
              "pageType": "string",
              "url": "string"
            },
            "adGroupIds": [
              0
            ]
          },
          {
            "draftCampaignId": 0,
            "name": "string",
            "tags": {
              "additionalProp1": "string",
              "additionalProp2": "string",
              "additionalProp3": "string"
            },
            "budget": 0,
            "budgetType": "lifetime",
            "startDate": "string",
            "endDate": "string",
            "brandEntityId": "string",
            "portfolioId": 0,
            "adFormat": "authorCollection",
            "creative": {
              "asins": [
                "string"
              ],
              "videoMediaIds": [
                "string"
              ],
              "type": "video"
            },
            "landingPage": {
              "pageType": "string",
              "url": "string"
            },
            "supplySource": "AMAZON"
          }
        ]
      },
      "StoreSpotlightSingleDraftExample": {
        "summary": "An example of store spotlight draft case",
        "value": {
          "draftCampaignId": 0,
          "name": "string",
          "tags": {
            "additionalProp1": "string",
            "additionalProp2": "string",
            "additionalProp3": "string"
          },
          "budget": 0,
          "budgetType": "lifetime",
          "startDate": "string",
          "endDate": "string",
          "brandEntityId": "string",
          "bidOptimization": true,
          "bidMultiplier": 99,
          "portfolioId": 0,
          "adFormat": "storeSpotlight",
          "creative": {
            "type": "storeSpotlight",
            "brandName": "string",
            "brandLogoAssetID": "string",
            "brandLogoCrop": {
              "height": 0,
              "top": 0,
              "left": 0,
              "width": 0
            },
            "headline": "string",
            "asins": [],
            "subpages": [
              {
                "url": "string",
                "pageTitle": "string",
                "asin": "string"
              },
              {
                "url": "string",
                "pageTitle": "string",
                "asin": "string"
              },
              {
                "url": "string",
                "pageTitle": "string",
                "asin": "string"
              }
            ]
          },
          "landingPage": {
            "pageType": "string",
            "url": "string"
          },
          "adGroupIds": [
            0
          ],
          "keywords": [
            {
              "keywordId": 0,
              "adGroupId": 0,
              "campaignId": 0,
              "keywordText": "string",
              "matchType": "broad",
              "state": "draft",
              "bid": 0
            }
          ],
          "negativeKeywords": [
            {
              "keywordId": 0,
              "adGroupId": 0,
              "campaignId": 0,
              "keywordText": "string",
              "matchType": "negativeExact",
              "state": "draft"
            }
          ]
        }
      }
    },
    "securitySchemes": {
      "oauth2AuthorizationCode": {
        "type": "oauth2",
        "description": "Login with Amazon. For more information see [Login with Amazon authorization code grant](https://developer.amazon.com/docs/login-with-amazon/authorization-code-grant.html).",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://www.amazon.com/ap/oa",
            "tokenUrl": "https://api.amazon.com/auth/o2/token",
            "scopes": {
              "cpc_advertising:campaign_management": "Modify your advertising campaigns and access performance data"
            }
          }
        }
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "responses": {
      "400BadRequest": {
        "description": "Bad request.",
        "content": {
          "application/vnd.sberror.v3.0+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "404NotFound": {
        "description": "The requested resource was not found.",
        "content": {
          "application/vnd.sberror.v3.0+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}