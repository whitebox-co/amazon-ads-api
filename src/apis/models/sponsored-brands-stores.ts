/* tslint:disable */
/* eslint-disable */
/**
 * Sponsored Brands - Stores
 * Use this interface to request and retrieve store information. This can be used for Sponsored Brands campaign creation, to pull the store URL information, and for asset registration for Stores.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The Error Response Object.
 * @export
 * @interface StoreError
 */
export interface StoreError {
    /**
     * An enumerated error code for machine use.
     * @type {string}
     * @memberof StoreError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof StoreError
     */
    details?: string;
}
/**
 * Structure of a store
 * @export
 * @interface StoreInfo
 */
export interface StoreInfo {
    /**
     * The response code.
     * @type {string}
     * @memberof StoreInfo
     */
    code?: string;
    /**
     * The entity ID.
     * @type {string}
     * @memberof StoreInfo
     */
    entityId?: string;
    /**
     * The name of the store.
     * @type {string}
     * @memberof StoreInfo
     */
    storeName?: string;
    /**
     * ID used in campaign creation and asset registration.
     * @type {string}
     * @memberof StoreInfo
     */
    brandEntityId?: string;
    /**
     * The information related to the store.
     * @type {Array<StorePageInfo>}
     * @memberof StoreInfo
     */
    storePageInfo?: Array<StorePageInfo>;
}
/**
 * Structure of a store page
 * @export
 * @interface StorePageInfo
 */
export interface StorePageInfo {
    /**
     * The ID of the store.
     * @type {string}
     * @memberof StorePageInfo
     */
    storePageId?: string;
    /**
     * The store url page. Can be used for SB campaigns as a possible landing page.
     * @type {string}
     * @memberof StorePageInfo
     */
    storePageUrl?: string;
    /**
     * The page name. Defaults to Home for the main store page.
     * @type {string}
     * @memberof StorePageInfo
     */
    storePageName?: string;
}

/**
 * StoresApi - axios parameter creator
 * @export
 */
export const StoresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *   **Retrieves a store by brandEntityId.
         * @summary Request store information for a given brandEntityId.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} brandEntityId The ID of the requested store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStore: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, brandEntityId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getStore', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getStore', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'brandEntityId' is not null or undefined
            assertParamExists('getStore', 'brandEntityId', brandEntityId)
            const localVarPath = `/v2/stores/{brandEntityId}`
                .replace(`{${"brandEntityId"}}`, encodeURIComponent(String(brandEntityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *   **Retrieves a list of stores for a given advertiser.]
         * @summary List store information for all registered stores under an advertiser.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStores: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listStores', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listStores', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/v2/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoresApi - functional programming interface
 * @export
 */
export const StoresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoresApiAxiosParamCreator(configuration)
    return {
        /**
         *   **Retrieves a store by brandEntityId.
         * @summary Request store information for a given brandEntityId.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} brandEntityId The ID of the requested store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStore(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, brandEntityId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoreInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStore(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, brandEntityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *   **Retrieves a list of stores for a given advertiser.]
         * @summary List store information for all registered stores under an advertiser.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStores(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StoreInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStores(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StoresApi - factory interface
 * @export
 */
export const StoresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoresApiFp(configuration)
    return {
        /**
         *   **Retrieves a store by brandEntityId.
         * @summary Request store information for a given brandEntityId.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} brandEntityId The ID of the requested store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStore(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, brandEntityId: string, options?: any): AxiosPromise<StoreInfo> {
            return localVarFp.getStore(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, brandEntityId, options).then((request) => request(axios, basePath));
        },
        /**
         *   **Retrieves a list of stores for a given advertiser.]
         * @summary List store information for all registered stores under an advertiser.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStores(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): AxiosPromise<Array<StoreInfo>> {
            return localVarFp.listStores(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getStore operation in StoresApi.
 * @export
 * @interface StoresApiGetStoreRequest
 */
export interface StoresApiGetStoreRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof StoresApiGetStore
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof StoresApiGetStore
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The ID of the requested store
     * @type {string}
     * @memberof StoresApiGetStore
     */
    readonly brandEntityId: string
}

/**
 * Request parameters for listStores operation in StoresApi.
 * @export
 * @interface StoresApiListStoresRequest
 */
export interface StoresApiListStoresRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof StoresApiListStores
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof StoresApiListStores
     */
    readonly amazonAdvertisingAPIScope: string
}

/**
 * StoresApi - object-oriented interface
 * @export
 * @class StoresApi
 * @extends {BaseAPI}
 */
export class StoresApi extends BaseAPI {
    /**
     *   **Retrieves a store by brandEntityId.
     * @summary Request store information for a given brandEntityId.
     * @param {StoresApiGetStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoresApi
     */
    public getStore(requestParameters: StoresApiGetStoreRequest, options?: any) {
        return StoresApiFp(this.configuration).getStore(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.brandEntityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *   **Retrieves a list of stores for a given advertiser.]
     * @summary List store information for all registered stores under an advertiser.
     * @param {StoresApiListStoresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoresApi
     */
    public listStores(requestParameters: StoresApiListStoresRequest, options?: any) {
        return StoresApiFp(this.configuration).listStores(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, options).then((request) => request(this.axios, this.basePath));
    }
}


