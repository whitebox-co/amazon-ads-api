{
  "openapi": "3.0.2",
  "info": {
    "title": "Amazon Ads API for Sponsored Display",
    "description": "This API enables programmatic access for campaign creation, management, and reporting for Sponsored Display campaigns. For more information on the functionality, see the [Sponsored Display Support Center](https://advertising.amazon.com/help#GTPPHE6RAWC2C4LZ). For API onboarding information, see the [account setup](https://advertising.amazon.com/API/docs/en-us/guides/onboarding/overview) topic.<br/><br/>\n> This specification is available for download from the **[Advertising API developer portal](https://d3a0d0y2hgofx6.cloudfront.net/openapi/en-us/sponsored-display/3-0/openapi.yaml).**",
    "contact": {
      "name": "Amazon Ads API Support",
      "url": "https://amzn-clicks.atlassian.net/servicedesk/customer/portals"
    },
    "license": {
      "name": "Amazon Ads API License Agreement",
      "url": "https://advertising.amazon.com/API/docs/license-agreement"
    },
    "version": "3.0"
  },
  "servers": [
    {
      "url": "https://advertising-api.amazon.com",
      "description": "Production endpoint for North America, which includes US and CA Amazon marketplaces."
    },
    {
      "url": "https://advertising-api-eu.amazon.com",
      "description": "Production endpoint for Europe, which includes UK, FR, IT, ES, DE, plus IN Amazon marketplaces."
    },
    {
      "url": "https://advertising-api-fe.amazon.com",
      "description": "Production endpoint for Far East, which includes JP Amazon marketplaces."
    }
  ],
  "tags": [
    {
      "name": "Campaigns"
    },
    {
      "name": "Ad Groups"
    },
    {
      "name": "Product Ads"
    },
    {
      "name": "Targeting"
    },
    {
      "name": "Targeting Recommendations"
    },
    {
      "name": "Bid Recommendations"
    },
    {
      "name": "Negative Targeting"
    },
    {
      "name": "Creatives"
    },
    {
      "name": "Brand Safety List"
    },
    {
      "name": "Reports"
    },
    {
      "name": "Snapshots"
    },
    {
      "name": "Forecasts"
    },
    {
      "name": "Optimization Rules [Preview Only]"
    },
    {
      "name": "Budget Rules"
    },
    {
      "name": "Budget Usage"
    },
    {
      "name": "Locations (beta)"
    }
  ],
  "paths": {
    "/sd/campaigns": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Gets a list of campaigns.",
        "description": "Gets an array of Campaign objects for a requested set of Sponsored Display campaigns. Note that the Campaign object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.",
        "operationId": "listCampaigns",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten campaigns set `startIndex=0` and `count=10`. To return the next ten campaigns, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Optional. The returned array includes only campaign with the specified name using an exact string match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "portfolioIdFilter",
            "in": "query",
            "description": "Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Campaign"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Updates one or more campaigns.",
        "operationId": "updateCampaigns",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of Campaign objects. For each object, specify a campaign identifier and mutable fields with their updated values. The mutable fields are `name`, `state`, `budget`, `startDate`, and `endDate`. Maximum length of the array is 100 objects.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateCampaign"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Creates one or more campaigns.",
        "operationId": "createCampaigns",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of Campaign objects. For each object, specify required fields and their values. Required fields are `name`, `tactic`, `state`, and `startDate`. Maximum length of the array is 100 objects. If you don't specify a `budget`, it will be set as the [default budget for your region](https://advertising.amazon.com/API/docs/en-us/concepts/limits#default-budgets).\n  If you are using Optimization rules, the following campaign budget must be at least:\n  - 5x the value of any COST_PER_ORDER threshold.\n  - 10x the value of any COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS threshold.\n  - 20x the value of any COST_PER_CLICK threshold.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateCampaign"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/campaigns/{campaignId}": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Gets a requested campaign.",
        "description": "Returns a Campaign object for a requested campaign. Note that the Campaign object is designed for performance, with a small set of commonly used campaign fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.",
        "operationId": "getCampaign",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "The identifier of the requested campaign.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Sets the campaign status to archived.",
        "description": "This operation is equivalent to an update operation that sets the status field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.",
        "operationId": "archiveCampaign",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "The identifier of the campaign.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/campaigns/extended": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Gets a list of campaigns with extended fields.",
        "description": "Gets an array of CampaignResponseEx objects for a set of requested campaigns.",
        "operationId": "listCampaignsEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten campaigns set `startIndex=0` and `count=10`. To return the next ten campaigns, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Optional. The returned array includes only campaign with the specified name using an exact string match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "portfolioIdFilter",
            "in": "query",
            "description": "Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignResponseEx"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/campaigns/extended/{campaignId}": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Gets extended information for a requested campaign.",
        "description": "Returns a CampaignResponseEx object for a requested campaign. The CampaignResponseEx includes the extended set of available fields.",
        "operationId": "getCampaignResponseEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "The identifier of the requested campaign.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResponseEx"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/adGroups": {
      "get": {
        "tags": [
          "Ad Groups"
        ],
        "summary": "Gets a list of ad groups.",
        "description": "Gets an array of AdGroup objects for a requested set of Sponsored Display ad groups. Note that the AdGroup object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the ad group operations that return the AdGroupResponseEx object.",
        "operationId": "listAdGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Sets the number of AdGroup objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten ad groups set `startIndex=0` and `count=10`. To return the next ten ad groups, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only ad groups with state set to one of the values in the specified comma-delimited list.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the specified comma-delimited list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Optional. The returned array includes only ad groups with the specified name.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Ad Groups"
        ],
        "summary": "Updates on or more ad groups.",
        "operationId": "updateAdGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of AdGroup objects. For each object, specify an ad group identifier and mutable fields with their updated values. The mutable fields are 'name', 'defaultBid', and 'state'. Maximum length of the array is 100 objects.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateAdGroup"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdGroupResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Ad Groups"
        ],
        "summary": "Creates one or more ad groups.",
        "operationId": "createAdGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of AdGroup objects. For each object, specify required fields and their values. Required fields are `campaignId`, `name`, `state`, and `defaultBid`. Maximum length of the array is 100 objects. Note - when using landingPageType of OFF_AMAZON_LINK or STORES within productAds, only 1 adGroup is supported.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateAdGroup"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdGroupResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/adGroups/{adGroupId}": {
      "get": {
        "tags": [
          "Ad Groups"
        ],
        "summary": "Gets a requested ad group.",
        "description": "Returns an AdGroup object for a requested campaign. Note that the AdGroup object is designed for performance, with a small set of commonly used ad group fields to reduce size. If the extended set of fields is required, use the campaign operations that return the AdGroupResponseEx object.",
        "operationId": "getAdGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "adGroupId",
            "in": "path",
            "description": "The identifier of the requested ad group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdGroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Ad Groups"
        ],
        "summary": "Sets the ad group status to archived.",
        "description": "This operation is equivalent to an update operation that sets the status field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.",
        "operationId": "archiveAdGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "adGroupId",
            "in": "path",
            "description": "The identifier of the requested ad group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/adGroups/extended": {
      "get": {
        "tags": [
          "Ad Groups"
        ],
        "summary": "Gets a list of ad groups with extended fields.",
        "description": "Gets an array of AdGroupResponseEx objects for a set of requested ad groups.",
        "operationId": "listAdGroupsEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. Sets a cursor into the requested set of ad groups. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten campaigns set `startIndex=0` and `count=10`. To return the next ten campaigns, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only campaigns with state set to one of the values in the comma-delimited list.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the comma-delimited list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Optional. The returned array includes only ad groups with the specified name.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdGroupResponseEx"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/adGroups/extended/{adGroupId}": {
      "get": {
        "tags": [
          "Ad Groups"
        ],
        "summary": "Gets extended information for a requested ad group.",
        "operationId": "getAdGroupResponseEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "adGroupId",
            "in": "path",
            "description": "The identifier of the requested ad group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdGroupResponseEx"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/productAds": {
      "get": {
        "tags": [
          "Product Ads"
        ],
        "summary": "Gets a list of product ads.",
        "description": "Gets an array of ProductAd objects for a requested set of Sponsored Display product ads. Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operation that returns the ProductAdResponseEx object.",
        "operationId": "listProductAds",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Sets the number of ProductAd objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten product ad set `startIndex=0` and `count=10`. To return the next ten product ads, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only products ads associated with campaigns that have state set to one of the values in the comma-delimited list.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "adIdFilter",
            "in": "query",
            "description": "Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductAd"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Product Ads"
        ],
        "summary": "Updates one or more product ads.",
        "operationId": "updateProductAds",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of ProductAd objects. For each object, specify a product ad identifier and the only mutable field, `state`. Maximum length of the array is 100 objects.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateProductAd"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductAdResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product Ads"
        ],
        "summary": "Creates one or more product ads.",
        "operationId": "createProductAds",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of ProductAd objects. For each object, specify required fields and their values. Required fields are `adGroupId`, `SKU` (for sellers) or `ASIN` (for vendors), and `state`'. Maximum length of the array is 100 objects.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateProductAd"
                }
              },
              "examples": {
                "Vendor example": {
                  "value": [
                    {
                      "state": "enabled",
                      "adGroupId": 0,
                      "campaignId": 0,
                      "asin": "B081FGSWTJ"
                    }
                  ]
                },
                "Seller example": {
                  "value": [
                    {
                      "state": "enabled",
                      "adGroupId": 0,
                      "campaignId": 0,
                      "sku": "sku-1234567"
                    }
                  ]
                },
                "Off Amazon example": {
                  "value": [
                    {
                      "state": "enabled",
                      "adGroupId": 0,
                      "campaignId": 0,
                      "landingPageURL": "https://advertising.amazon.com",
                      "landingPageType": "OFF_AMAZON_LINK",
                      "adName": "AmazonAdvertising"
                    }
                  ]
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductAdResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/productAds/{adId}": {
      "get": {
        "tags": [
          "Product Ads"
        ],
        "summary": "Gets a requested product ad.",
        "description": "Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operations that returns the ProductAdResponseEx object.",
        "operationId": "getProductAd",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "adId",
            "in": "path",
            "description": "The identifier of the requested product ad.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductAd"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Product Ads"
        ],
        "summary": "Sets the status of a sproduct ad to archived.",
        "description": "This operation is equivalent to an update operation that sets the status field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.",
        "operationId": "archiveProductAd",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "adId",
            "in": "path",
            "description": "The identifier of the produce ad.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductAdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/productAds/extended": {
      "get": {
        "tags": [
          "Product Ads"
        ],
        "summary": "Gets a list of product ads with extended fields.",
        "description": "Gets an array of ProductAdResponseEx objects for a set of requested ad groups. The ProductAdResponseEx object includes the extended set of available fields.",
        "operationId": "listProductAdsEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Sets the number of ProduceAdEx objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten product ads set `startIndex=0` and `count=10`. To return the next ten campaigns, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "adIdFilter",
            "in": "query",
            "description": "Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductAdResponseEx"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/productAds/extended/{adId}": {
      "get": {
        "tags": [
          "Product Ads"
        ],
        "summary": "Gets extended information for a product ad.",
        "operationId": "getProductAdResponseEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "adId",
            "in": "path",
            "description": "The identifier of the requested product ad.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductAdResponseEx"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/brandSafety/deny": {
      "get": {
        "tags": [
          "Brand Safety List"
        ],
        "summary": "Gets a list of websites/apps that are on the advertiser's Brand Safety Deny List.",
        "description": "Gets an array of websites/apps that are on the advertiser's Brand Safety Deny List. It can take up to 15 minutes\nfrom the time a domain is added/deleted to the time it is reflected in the deny list.",
        "operationId": "listDomains",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "required": false,
            "description": "Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.\n",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "description": "Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex=0 and count=1000. To return the next 1000 domains, set startIndex=1000 and count=1000, and so on. Defaults to max page size(1000).\n",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandSafetyGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Brand Safety List"
        ],
        "summary": "Creates one or more domains to add to a Brand Safety Deny List.\n",
        "description": "Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list.\n",
        "operationId": "createBrandSafetyDenyListDomains",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects.\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandSafetyPostRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Request has been accepted for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandSafetyUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Brand Safety List"
        ],
        "summary": "Archives all of the domains in the Brand Safety Deny List.\n",
        "description": "Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is \"COMPLETED\", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted.\n",
        "operationId": "deleteBrandSafetyDenyList",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "responses": {
          "202": {
            "description": "Request has been accepted for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandSafetyUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/reports/{reportId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Gets the status of a report previously requested.",
        "description": "Uses the `reportId` value from the response of a report previously requested via `POST` method of the `/sd/{recordType}/report` operation.\n\n**To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**",
        "operationId": "getReportStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The identifier of the requested report.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/reports/{reportId}/download": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Downloads a previously requested report identified by reportId.",
        "description": "Gets a `307 Temporary Redirect` response that includes a `location` header with the value set to an AWS S3 path where the report is located. The path expires after 30 seconds. If the path expires before the report is downloaded, a new report request must be created.\n\n**To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**",
        "operationId": "downloadReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "The identifier of the requested report.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "307": {
            "description": "Successful operation.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "Redirect URI with S3 file location containing report data"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/{recordType}/report": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Creates a report request.",
        "description": "**To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**\n\nThe Sponsored Display API supports creation of reports for campaigns, ad groups, product ads, targets, and asins. Create a ReportRequest object specifying the fields corresponding to performance data metrics to include in the report.",
        "operationId": "requestReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "recordType",
            "in": "path",
            "description": "The type of report to generate, either `campaigns`, `adGroups`, `productAds`, `targets`, or `asins`. The 'asins' report, also known as the Purchased products report, is only available for seller brand owners.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "campaigns",
                "adGroups",
                "productAds",
                "targets",
                "asins"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "406": {
            "description": "Not acceptable - Failed due to report date being too far in the past.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity - Failed due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/targets": {
      "get": {
        "tags": [
          "Targeting"
        ],
        "summary": "Gets a list of targeting clauses.",
        "description": "Gets a list of targeting clauses objects for a requested set of Sponsored Display targets. Note that the Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the target operations that return the TargetingClauseEx object.",
        "operationId": "listTargetingClauses",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. 0-indexed record offset for the result set. Defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Number of records to include in the paged response. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. Restricts results to those with `state` set to values in the specified comma-separated list.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified `adGroupId`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetingClause"
                  }
                },
                "example": {
                  "targetId": 123,
                  "adGroupId": 321,
                  "state": "enabled",
                  "expressionType": "manual",
                  "bid": 1.5,
                  "expression": {
                    "type": "asinSameAs",
                    "value": "B0123456789"
                  },
                  "resolvedExpression": {
                    "type": "asinSameAs",
                    "value": "B0123456789"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Targeting"
        ],
        "summary": "Updates one or more targeting clauses.",
        "description": "Updates one or more targeting clauses. Targeting clauses are identified using their targetId. The mutable fields are `bid` and `state`. Maximum length of the array is 100 objects.",
        "operationId": "updateTargetingClauses",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "A list of up to 100 targeting clauses. Mutable fields:\n* `state`\n* `bid` (only mutable when the targeting clause's adGroup does not have any enabled optimization rule)",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateTargetingClause"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-Status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Targeting"
        ],
        "summary": "Creates one or more targeting clauses.",
        "description": "Successfully created targeting clauses are assigned a unique `targetId` value.\n\nCreate new targeting clauses for campaigns with tactic 'T00020' using the following:\n| Contextual targeting clause | Description |\n|------------------|-------------|\n| similarProduct | Dynamic segment to target products that are similar to the advertised asin. We recommend using 'similarProduct' targeting for all adGroups. |\n| asinSameAs=B0123456789 | Target this product. |\n| asinCategorySameAs=12345 | Target products in the category. |\n| asinCategorySameAs=12345 asinBrandSameAs=45678 | Target products in the category and brand. |\n\n**Refinements:**\n- asinBrandSameAs\n- asinPriceBetween\n- asinPriceGreaterThan\n- asinPriceLessThan\n- asinReviewRatingLessThan\n- asinReviewRatingGreaterThan\n- asinReviewRatingBetween\n- asinIsPrimeShippingEligible\n- asinAgeRangeSameAs\n- asinGenreSameAs\n\n**Refinement Notes:**\n* Brand, price, and review predicates are optional and may only be specified if category is also specified.\n* Review predicates accept numbers between 0 and 5 and are inclusive.\n* When using either of the 'between' strings to construct a targeting expression the format of the string is 'double-double' where the first double must be smaller than the second double. Prices are not inclusive.\n* 'similarProduct' has no expression value or refinements.\n\nCreate new targeting clauses for campaigns with tactic 'T00030' using the following:\n| Audience targeting clause | Description |\n|------------------|-------------|\n| views(exactProduct lookback=30) | Target an audience that has viewed the advertised asins in the past 7,14,30,60, or 90 days. Note: This target should only be used for productAds with SKU or ASIN. |\n| views(similarProduct lookback=60) | Target an audience that has viewed similar products to the advertised asins in the past 7,14,30,60, or 90 days. Note: This target should only be used for productAds with SKU or ASIN.|\n| views(asinCategorySameAs=12345 lookback=90) | Target an audience that has viewed products in the given category in the past 7,14,30,60, or 90 days. |\n| views(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=60) | Target an audience that has viewed products in the given category, brand, and price range in the past 7,14,30,60, or 90 days. |\n| purchases(relatedProduct lookback=180) | Target an audience that has purchased a related product in the past 7,14,30,60,90,180 or 365 days. Note: This target should only be used for productAds with SKU or ASIN.|\n| purchases(exactProduct lookback=365) | Target an audience that has purchased the advertised asins in the past 7,14,30,60,90,180 or 365 days. Note: This target should only be used for productAds with SKU or ASIN.|\n| purchases(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=90) | Target an audience that has purchased products in the given category, brand, and price range in the past 7,14,30,60,90,180 or 365 days |\n\nNote:\n1. There is a limit of 20 targeting clauses per request for T00030.\n2. There is a limit of 100 targeting clauses per request for T00020.\n3. If you receive the error of \"Cannot create targeting clause: audience size is too small\", please expand or broaden your targeting clause to increase the audience size.",
        "operationId": "createTargetingClauses",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "A list of targeting clauses for creation.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateTargetingClause"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "multi-status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/targets/{targetId}": {
      "get": {
        "tags": [
          "Targeting"
        ],
        "summary": "Gets a targeting clause specified by identifier.",
        "description": "This call returns the minimal set of targeting clause fields.",
        "operationId": "getTargets",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "The identifier of a targeting clause.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetingClause"
                },
                "example": {
                  "targetId": 123,
                  "adGroupId": 321,
                  "state": "enabled",
                  "expressionType": "manual",
                  "bid": 1.5,
                  "expression": {
                    "type": "asinSameAs",
                    "value": "B0123456789"
                  },
                  "resolvedExpression": {
                    "type": "asinSameAs",
                    "value": "B0123456789"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Targeting"
        ],
        "summary": "Sets the `state` of a targeting clause to `archived`.",
        "description": "Equivalent to using the `updateTargetingClauses` operation to set the `state` property of a targeting clause to `archived`. See [Developer\nNotes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.",
        "operationId": "archiveTargetingClause",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "The identifer of a targeting clause.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/targets/extended": {
      "get": {
        "tags": [
          "Targeting"
        ],
        "summary": "Gets a list of targeting clause objects with extended fields.",
        "description": "Gets an array of TargetingClauseEx objects for a set of requested targets. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTargets.",
        "operationId": "listTargetingClausesEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. 0-indexed record offset for the result set. Defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Number of records to include in the paged response. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: `enabled`, `paused`, or `archived`. Default behavior is to include enabled, paused, and archived.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "targetIdFilter",
            "in": "query",
            "description": "Optional. Restricts results to ads with the specified `tagetId` specified in comma-separated list",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified `adGroupId`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. Restricts results to ads within campaigns specified in comma-separated list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetingClauseEx"
                  }
                },
                "example": {
                  "targetId": 123,
                  "adGroupId": 321,
                  "state": "enabled",
                  "expressionType": "manual",
                  "bid": 1.5,
                  "expression": {
                    "type": "asinSameAs",
                    "value": "B0123456789"
                  },
                  "resolvedExpression": {
                    "type": "asinSameAs",
                    "value": "B0123456789"
                  },
                  "servingStatus": "TARGET_STATUS_PAUSED",
                  "creationDate": 1537568785000,
                  "lastUpdateDate": 1537568785000
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/targets/extended/{targetId}": {
      "get": {
        "tags": [
          "Targeting"
        ],
        "summary": "Gets extended information for a targeting clause.",
        "description": "Gets a targeting clause object with extended fields. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTarget.",
        "operationId": "getTargetsEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "The identifier of a targeting clause.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetingClauseEx"
                },
                "example": {
                  "targetId": 123,
                  "adGroupId": 321,
                  "state": "enabled",
                  "expressionType": "manual",
                  "bid": 1.5,
                  "expression": {
                    "type": "asinSameAs",
                    "value": "B0123456789"
                  },
                  "resolvedExpression": {
                    "type": "asinSameAs",
                    "value": "B0123456789"
                  },
                  "servingStatus": "TARGET_STATUS_PAUSED",
                  "creationDate": 1537568785000,
                  "lastUpdateDate": 1537568785000
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/targets/recommendations": {
      "post": {
        "tags": [
          "Targeting Recommendations"
        ],
        "operationId": "getTargetRecommendations",
        "summary": "Returns a set of recommended products and categories to target",
        "description": "This API provides product, category and standard audience recommendations to target based on the list of input ASINs. Allow 1 week for our systems to process data for any new ASINs listed on Amazon before using this service. Note -  recommendations are only available for productAds with SKU or ASIN.\n\nFor API v3.0, the API returns up to 100 recommendations for contextual targeting.\n\nFor API v3.1, the API returns up to 100 recommendations for both product and category targeting.\n\nFor API v3.2, the API introduces contextual targeting themes in the request and returns product recommendations based on different targeting themes.\n\nFor API v3.3, the API introduces standard audience recommendations and translated category recommendations based on locale.\n\nThe currently available tactic identifiers are:\n\n|Tactic Name|Type|Description|\n|-----------|----|-----------|\n|T00020&nbsp;|Contextual Targeting|Products: Choose individual products to show your ads in placements related to those products.|\n|T00030&nbsp;|Audience Targeting|Audiences: Select individual audiences to show your ads.|",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "locale",
            "in": "query",
            "description": "The requested locale from query parameter to return translated category recommendations.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SDTargetingRecommendationsLocale"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.sdtargetingrecommendations.v3.3+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingRecommendationsRequestV33"
              }
            },
            "application/vnd.sdtargetingrecommendations.v3.2+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingRecommendationsRequestV32"
              }
            },
            "application/vnd.sdtargetingrecommendations.v3.1+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingRecommendationsRequestV31"
              }
            },
            "application/vnd.sdtargetingrecommendations.v3.0+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingRecommendationsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/vnd.sdtargetingrecommendations.v3.3+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingRecommendationsResponseV33"
                }
              },
              "application/vnd.sdtargetingrecommendations.v3.2+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingRecommendationsResponseV32"
                }
              },
              "application/vnd.sdtargetingrecommendations.v3.1+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingRecommendationsResponseV31"
                }
              },
              "application/vnd.sdtargetingrecommendations.v3.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingRecommendationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Generic bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sd/negativeTargets": {
      "get": {
        "tags": [
          "Negative Targeting"
        ],
        "summary": "Gets a list of negative targeting clauses.",
        "description": "Gets a list of negative targeting clauses objects for a requested set of Sponsored Display negative targets. Note that the Negative Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the negative target operations that return the NegativeTargetingClauseEx object.",
        "operationId": "listNegativeTargetingClauses",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. 0-indexed record offset for the result set. Defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Number of records to include in the paged response. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: `enabled`, `paused`, or `archived`. Default behavior is to include enabled, paused, and archived.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified `adGroupId`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NegativeTargetingClause"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Negative Targeting"
        ],
        "summary": "Updates one or more negative targeting clauses.",
        "description": "Updates one or more negative targeting clauses. Negative targeting clauses are identified using their targetId. The mutable field is `state`. Maximum length of the array is 100 objects.",
        "operationId": "updateNegativeTargetingClauses",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "A list of up to 100 negative targeting clauses. Note that the only mutable field is `state`.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateNegativeTargetingClause"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-Status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Negative Targeting"
        ],
        "summary": "Creates one or more negative targeting clauses.",
        "description": "Successfully created negative targeting clauses associated with an ad group are assigned a unique target identifier.\nProduct negative targeting clause examples:\n| Negative targeting clause | Description |\n|---------------------------|-------------|\n| asinSameAs=B0123456789 | Negatively target this product.|\n| asinBrandSameAs=12345 | Negatively target products in the brand.|",
        "operationId": "createNegativeTargetingClauses",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "A list of up to 100 negative targeting clauses for creation.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateNegativeTargetingClause"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-Status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/negativeTargets/{negativeTargetId}": {
      "get": {
        "tags": [
          "Negative Targeting"
        ],
        "summary": "Gets a negative targeting clause specified by identifier.",
        "description": "This call returns the minimal set of negative targeting clause fields, but is more efficient than getNegativeTargetsEx.",
        "operationId": "getNegativeTargets",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "negativeTargetId",
            "in": "path",
            "description": "The negative targeting clause identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NegativeTargetingClause"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Negative Targeting"
        ],
        "summary": "Sets the `state` of a negative targeting clause to `archived`.",
        "description": "Equivalent to using the updateNegativeTargetingClauses operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.",
        "operationId": "archiveNegativeTargetingClause",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "negativeTargetId",
            "in": "path",
            "description": "The identifier of a negative targeting clause.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/negativeTargets/extended": {
      "get": {
        "tags": [
          "Negative Targeting"
        ],
        "summary": "Gets a list of negative targeting clause objects with extended fields.",
        "description": "Gets an array of NegativeTargetingClauseEx objects for a set of requested negative targets. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTargets.",
        "operationId": "listNegativeTargetingClausesEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. 0-indexed record offset for the result set. Defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Number of records to include in the paged response. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: `enabled`, `paused`, or `archived`. Default behavior is to include `enabled`, `paused`, and `archived`.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "paused",
                "archived",
                "enabled, paused",
                "enabled, archived",
                "paused, archived",
                "enabled, paused, archived"
              ],
              "default": "enabled, paused, archived"
            }
          },
          {
            "name": "targetIdFilter",
            "in": "query",
            "description": "Optional. Restricts results to ads with the specified `tagetId` specified in comma-separated list",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified `adGroupId`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional. Restricts results to ads within campaigns specified in the comma-separated list.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NegativeTargetingClauseEx"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/negativeTargets/extended/{negativeTargetId}": {
      "get": {
        "tags": [
          "Negative Targeting"
        ],
        "summary": "Gets extended information for a negative targeting clause.",
        "description": "Gets a negative targeting clause with extended fields. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTarget.",
        "operationId": "getNegativeTargetsEx",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "negativeTargetId",
            "in": "path",
            "description": "The negative targeting clause identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NegativeTargetingClauseEx"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/{recordType}/snapshot": {
      "post": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria",
        "description": "**To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**",
        "operationId": "createSnapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "recordType",
            "in": "path",
            "description": "The type of entity for which the snapshot should be generated. Must be one of: `campaigns`, `adgroups`, `productAds`, or `targets`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request a snapshot file for all entities of a single record type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/snapshots/{snapshotId}": {
      "get": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Retrieve status, metadata, and location of previously requested snapshot",
        "description": "**To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**",
        "operationId": "getSnapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "description": "The Snapshot identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified   resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/snapshots/{snapshotId}/download": {
      "get": {
        "tags": [
          "Snapshots"
        ],
        "summary": "Download previously requested snapshot",
        "description": "**To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/overview).**",
        "operationId": "downloadSnapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "description": "The Snapshot identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "307": {
            "description": "Successful operation.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "Redirect URI with S3 file location containing snapshot data"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/creatives": {
      "get": {
        "tags": [
          "Creatives"
        ],
        "summary": "Gets a list of creatives",
        "description": "",
        "operationId": "listCreatives",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Sets a cursor into the requested set of creatives. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Sets the number of creative objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten creatives set `startIndex=0` and `count=10`. To return the next ten creatives, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 100,
              "default": 100
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "The returned array includes only creatives associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the `creativeIdFilter` parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creativeIdFilter",
            "in": "query",
            "description": "The returned array includes only creatives with identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the `adGroupIdFilter` parameter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Creative"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Creatives"
        ],
        "summary": "Updates one or more creatives.",
        "description": "",
        "operationId": "updateCreatives",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of creative objects to update. Maximum length of the array is 100 objects.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreativeUpdate"
                },
                "minItems": 1,
                "maxItems": 100
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreativeResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Creatives"
        ],
        "summary": "A POST request of one or more creatives.",
        "description": "",
        "operationId": "createCreatives",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of Creative objects to create. Maximum length of the array is 100 objects. Note - when using productAds with landingPageURL of OFF_AMAZON_LINK, STORE, or MOMENT, the following properties are required all together;\n1) headline, 2) brandLogo, and 3) rectCustomImage, squareCustomImage.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateCreative"
                },
                "minItems": 1,
                "maxItems": 100
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreativeResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/creatives/preview": {
      "post": {
        "tags": [
          "Creatives"
        ],
        "summary": "Gets creative preview HTML.",
        "description": "",
        "operationId": "postCreativePreview",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreativePreviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreativePreviewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/moderation/creatives": {
      "get": {
        "tags": [
          "Creatives"
        ],
        "summary": "Gets a list of creative moderations",
        "description": "",
        "operationId": "listCreativeModerations",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "language",
            "in": "query",
            "description": "The language of the returned creative moderation metadata.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Locale"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Sets a cursor into the requested set of creative moderations. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Sets the number of creative objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten creative moderations set `startIndex=0` and `count=10`. To return the next ten creative moderations, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "maximum": 100,
              "default": 100
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "The returned array includes only creative moderations associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the `creativeIdFilter` parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creativeIdFilter",
            "in": "query",
            "description": "The returned array includes only creative moderations with creative identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the `adGroupIdFilter` parameter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreativeModeration"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/brandSafety/{requestId}/results": {
      "get": {
        "tags": [
          "Brand Safety List"
        ],
        "summary": "Gets the results for the given request",
        "description": "When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests.\n",
        "operationId": "getRequestResults",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "The ID of the request previously submitted.",
            "name": "requestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "required": false,
            "description": "Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.\n",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "description": "Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex=0 and count=1000. To return the next 1000 results, set startIndex=1000 and count=1000, and so on. Defaults to max page size(1000).\n",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandSafetyRequestResultsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/brandSafety/{requestId}/status": {
      "get": {
        "tags": [
          "Brand Safety List"
        ],
        "summary": "Gets the status of the given request",
        "description": "When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted.\n",
        "operationId": "getRequestStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "description": "The ID of the request previously submitted.",
            "name": "requestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandSafetyRequestStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/brandSafety/status": {
      "get": {
        "tags": [
          "Brand Safety List"
        ],
        "summary": "List status of all requests",
        "description": "List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days.\n",
        "operationId": "listRequestStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandSafetyListRequestStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/targets/bid/recommendations": {
      "post": {
        "tags": [
          "Bid Recommendations"
        ],
        "operationId": "getTargetBidRecommendations",
        "summary": "Returns a set of bid recommendations for targeting clauses",
        "description": "Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses. Note - these recommendations are only available when productAds have ASIN or SKU fields.\n\nThe recommended bids are derrived from the last 7 days of winning auction bids for the related targeting clause.\n\n\nReceive bid recommendations using the following:\nContextual targeting clause|Description|\n|-----------|----|\n|asinSameAs=B0123456789|Receive a bid recommendation for this target product\n|asinCategorySameAs=12345|Receive a bid recommendation for this target category\n|similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.\n\n\nAudience targeting clause|Description|\n|-----------|----|\n|views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category\n|views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins\n|views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins\n|purchases(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has purchased products in the given category\n|purchases(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has purchased the advertised asins\n|purchases(relatedProduct lookback=30)|Receive a bid recommendation for a target audience that has purchased related products to the advertised asins\n|audience(audienceSameAs=12345)|Receive a bid recommendation for the given target audience\n\n\n#### Notes:\n- Refinements are currently not supported and if included will not impact the bid recommendation for the target.\n\n\n#### Advertised ASIN Notes:\n- For asinSameAs targets the advertised asins will not impact the bid recommendation\n- For asinCategrySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation\n- For similarProduct, exactProduct, and relatedProduct targets the advertised asins are required",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.sdtargetingrecommendations.v3.2+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingBidRecommendationsRequestV32"
              }
            },
            "application/vnd.sdtargetingrecommendations.v3.1+json": {
              "schema": {
                "$ref": "#/components/schemas/SDTargetingBidRecommendationsRequestV31"
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "multi-status",
            "content": {
              "application/vnd.sdtargetingrecommendations.v3.2+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseV32"
                }
              },
              "application/vnd.sdtargetingrecommendations.v3.1+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseV31"
                }
              }
            }
          },
          "400": {
            "description": "Generic bad request error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported Media Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sd/optimizationRules": {
      "get": {
        "tags": [
          "Optimization Rules [Preview Only]"
        ],
        "summary": "Gets a list of optimization rules.",
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an array of OptimizationRule objects for a requested set of Sponsored Display optimization rules.",
        "operationId": "listOptimizationRules",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. Sets a cursor into the requested set of optimization rules. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Sets the number of OptimizationRule objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten optimization rules set `startIndex=0` and `count=10`. To return the next ten optimization rules, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only optimization rules with state set to one of the values in the specified comma-delimited list.\nAvailable values:\n  - enabled\n  - paused [COMING LATER]\n  - enabled, paused [COMING LATER]",
            "schema": {
              "type": "string",
              "default": "enabled"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Optional. The returned array includes only optimization rules with the specified name using an exact string match.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "optimizationRuleIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only optimization rules associated with the optimization rule identifiers in the specified comma-delimited list.\n\nMaximum size limit 50.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional. The returned array is filtered to include only optimization rules associated with the ad group identifiers in the comma-delimited list.\n\nMaximum size limit 50.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OptimizationRule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Optimization Rules [Preview Only]"
        ],
        "summary": "Updates one or more optimization rules.",
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.",
        "operationId": "updateOptimizationRules",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of OptimizationRule objects. For each object, specify an optimization rule identifier and mutable fields with their updated values. The mutable fields are `ruleName`, `state`, and `ruleConditions`.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "minItems": 1,
                "maxItems": 100,
                "items": {
                  "$ref": "#/components/schemas/UpdateOptimizationRule"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OptimizationRuleResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Optimization Rules [Preview Only]"
        ],
        "summary": "Creates one or more optimization rules, also known as outcome optimizations.",
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. \n\n* When an optimization rule is associated to an ad group, manual bids for individual targets will be overridden.\n* Optimization rules can only be associated to ad groups that have productAds with ASIN or SKU.\n* If you are using optimization rules, the following campaign budget must be at least:\n  - 5x the value of any COST_PER_ORDER threshold.\n  - 10x the value of any COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS threshold.\n  - 20x the value of any COST_PER_CLICK threshold.",
        "operationId": "createOptimizationRules",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "An array of OptimizationRule objects. For each object, specify required fields and their values. Required fields are `state` and `ruleConditions`.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "minItems": 1,
                "maxItems": 100,
                "items": {
                  "$ref": "#/components/schemas/CreateOptimizationRule"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OptimizationRuleResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/optimizationRules/{optimizationRuleId}": {
      "get": {
        "tags": [
          "Optimization Rules [Preview Only]"
        ],
        "summary": "Gets a requested optimization rule.",
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an OptimizationRule object for a requested Sponsored Display optimization rule.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "optimizationRuleId",
            "in": "path",
            "description": "The identifier of the requested optimization rule.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptimizationRule"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/adGroups/{adGroupId}/optimizationRules": {
      "post": {
        "tags": [
          "Optimization Rules [Preview Only]"
        ],
        "summary": "Associate one or more optimization rules to an ad group specified by identifier.",
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.\n\n* When an optimization rule is associated to an ad group, manual bids for individual targets will be overridden.\n* Only one optimization rule can be associated per adGroup. This note will be removed when multiple rules are supported per adGroup.",
        "operationId": "associateOptimizationRulesWithAdGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "adGroupId",
            "in": "path",
            "description": "The identifier of the ad group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "A list of optimization rule identifiers. Only one optimization rule identifier is currently supported per request. This note will be removed when multiple rule identifiers are supported.\n\nFor each ad group, only one optimization rule metric name is supported, based on the ad group's `bidOptimization` type. Refer to the following table for the metric names supported for each type.\n|  AdGroup.bidOptimization |     Supported OptimizationRule.metricName       |\n|------------------|--------------------|\n|   reach       | COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS  |\n|   clicks      | COST_PER_CLICK          |\n|  conversions  | COST_PER_ORDER          |",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssociatedOptimizationRulesRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "207": {
            "description": "Multi-status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OptimizationRuleResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Optimization Rules [Preview Only]"
        ],
        "summary": "Gets a list of optimization rules associated to an adgroup specified by identifier.",
        "description": "This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an OptimizationRule object for a requested Sponsored Display optimization rule.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "adGroupId",
            "in": "path",
            "description": "The identifier of the ad group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OptimizationRule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Requested resource does not exist or is not visible for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sd/forecasts": {
      "post": {
        "tags": [
          "Forecasts"
        ],
        "summary": "Return forecasts for an ad group that may or may not exist.",
        "requestBody": {
          "content": {
            "application/vnd.sdforecasts.v3.0+json": {
              "schema": {
                "$ref": "#/components/schemas/SDForecastRequest"
              }
            }
          }
        },
        "operationId": "createSDForecast",
        "description": "Returns forecasts for a given ad group specified in SD forecast request.",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/vnd.sdforecasts.v3.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDForecastResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/vnd.sdforecasts.v3.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDForecastErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because the user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/vnd.sdforecasts.v3.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDForecastErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/vnd.sdforecasts.v3.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDForecastErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/vnd.sdforecasts.v3.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDForecastErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/vnd.sdforecasts.v3.0+json": {
                "schema": {
                  "$ref": "#/components/schemas/SDForecastErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sd/campaigns/{campaignId}/budgetRules/budgetHistory": {
      "get": {
        "summary": "Gets the budget history for a campaign specified by identifier.",
        "description": "**Deprecation notice: This endpoint will be deprecated on August 31, 2023.** The budget history is returned for the time period specified in the required startDate and endDate parameters. The maximum time period is 90 days.",
        "operationId": "getRuleBasedBudgetHistoryForSDCampaigns",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SDBudgetHistory"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a Login with Amazon account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "format": "int64",
              "type": "number"
            },
            "in": "path",
            "name": "campaignId",
            "description": "The campaign identifier.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "nextToken",
            "description": "To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results."
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "pageSize",
            "description": "Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startDate",
            "description": "The start date of the budget history in YYYYMMDD format.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endDate",
            "description": "The end date of the budget history in YYYYMMDD format.",
            "required": true
          }
        ],
        "tags": [
          "Budget Rules"
        ]
      }
    },
    "/sd/budgetRules/{budgetRuleId}": {
      "get": {
        "summary": "Gets a budget rule specified by identifier.",
        "operationId": "GetBudgetRuleByRuleIdForSDCampaigns",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSDBudgetRuleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because the user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "budgetRuleId",
            "description": "The budget rule identifier.",
            "required": true
          }
        ],
        "tags": [
          "Budget Rules"
        ]
      }
    },
    "/sd/budgetRules": {
      "post": {
        "summary": "Creates one or more budget rules.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSDBudgetRulesRequest"
              }
            }
          },
          "required": true
        },
        "operationId": "CreateBudgetRulesForSDCampaigns",
        "responses": {
          "207": {
            "description": "Multi-status. An object containing a list of budget rule response objects reflecting the same order as the input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBudgetRulesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because the user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server BudgetRuleError - Something went wrong on the server. Retry later and report an BudgetRuleError if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          }
        ],
        "tags": [
          "Budget Rules"
        ]
      },
      "get": {
        "summary": "Get all budget rules created by an advertiser",
        "operationId": "GetSDBudgetRulesForAdvertiser",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSDBudgetRulesForAdvertiserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because the user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "nextToken",
            "description": "To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results."
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "pageSize",
            "description": "Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.",
            "required": true
          }
        ],
        "tags": [
          "Budget Rules"
        ]
      },
      "put": {
        "summary": "Update one or more budget rules.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSDBudgetRulesRequest"
              }
            }
          },
          "required": true
        },
        "operationId": "UpdateBudgetRulesForSDCampaigns",
        "responses": {
          "207": {
            "description": "Multi-status. An object containing a list of budget rule response objects reflecting the same order as the input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBudgetRulesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because the user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server BudgetRuleError - Something went wrong on the server. Retry later and report an BudgetRuleError if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetRuleError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          }
        ],
        "tags": [
          "Budget Rules"
        ]
      }
    },
    "/sd/campaigns/budget/usage": {
      "post": {
        "summary": "Budget usage API for SD campaigns",
        "description": "**Requires one of these permissions**:\n[\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]",
        "tags": [
          "Budget Usage"
        ],
        "requestBody": {
          "content": {
            "application/vnd.sdcampaignbudgetusage.v1+json": {
              "schema": {
                "$ref": "#/components/schemas/BudgetUsageCampaignRequest"
              }
            }
          }
        },
        "operationId": "sdCampaignsBudgetUsage",
        "responses": {
          "207": {
            "description": "Multi-status. An object containing a list of budget usage response objects reflecting the same order as the input.",
            "content": {
              "application/vnd.sdcampaignbudgetusage.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetUsageCampaignResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetUsageError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The request failed because the user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetUsageError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The request failed because user does not have access to a specified resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetUsageError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. The server understood the request, but was unable to process the instruction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetUsageError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests. The request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetUsageError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server BudgetUsageError - Something went wrong on the server. Retry later and report an BudgetUsageError if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetUsageError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {},
            "in": "header",
            "name": "Amazon-Advertising-API-ClientId",
            "description": "The identifier of a client associated with a \"Login with Amazon\" account. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          },
          {
            "schema": {},
            "in": "header",
            "name": "Amazon-Advertising-API-Scope",
            "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.",
            "required": true
          }
        ]
      }
    },
    "/sd/locations": {
      "get": {
        "tags": [
          "Locations (beta)"
        ],
        "summary": "Gets a list of locations associated with ad groups.",
        "description": "Gets a list of Sponsored Display Location objects. This resource is not available when productAds have ASIN or SKU fields and only available for advertisers that do not sell products on Amazon. See [Developer Guide](https://advertising.amazon.com/API/docs/en-us/guides/sponsored-display/non-amazon-sellers/get-started)",
        "operationId": "listLocations",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. 0-indexed record offset for the result set. Defaults to 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Optional. Number of records to include in the paged response. Defaults to max page size.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stateFilter",
            "in": "query",
            "description": "Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: `enabled`.",
            "schema": {
              "type": "string",
              "enum": [
                "enabled"
              ],
              "default": "enabled"
            }
          },
          {
            "name": "adGroupIdFilter",
            "in": "query",
            "description": "Optional list of comma separated adGroupIds. Restricts results to locations with the specified `adGroupId`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignIdFilter",
            "in": "query",
            "description": "Optional list of comma separated campaignIds. Restricts results to locations with the specified `campaignId`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "Creates one or more locations associated with an ad group.",
        "description": "This resource is not available when productAds have ASIN or SKU fields and only available for advertisers that do not sell products on Amazon.   See [Developer Guide](https://advertising.amazon.com/API/docs/en-us/guides/sponsored-display/non-amazon-sellers/get-started)\n\nLocations optimize Ad Groups for delivery to users that have an association with those locations. For example,\nan Ad Group might contain the following: \n- A Targeting Clause representing an audience of users that viewed a shoe \n- A Location representing Seattle, Washington, USA.\n- A Location representing New York, New York, USA.\nIn this case, delivery of the Targeting Clause will be optimized for New York and Seattle.\n\n\nYou can discover predefined Locations to use in your Ad Groups by calling the GET /locations API. The table below lists \nseveral example Locations.\n| Location | Description |\n|---------------------------|-------------|\n| location=amzn1.ad-geo.XHvCjcKHXsKUwos= | Optimize the AdGroup for the specified location (either a 'city', 'state', 'dma', 'postal code', or 'country').|\n\nIf Locations are to be used, they must be created before Targeting Clauses within an Ad Group. Creating a Location after a  \nTargeting Clause is only permitted if other Locations already exist in the Ad Group. In that case, additional \nLocations increase the Targeting Clause's potential reach.",
        "operationId": "createLocations",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientHeader"
          },
          {
            "$ref": "#/components/parameters/profileHeader"
          }
        ],
        "requestBody": {
          "description": "A list of up to 20 Locations for creation.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "minItems": 1,
                "maxItems": 20,
                "items": {
                  "$ref": "#/components/schemas/CreateLocation"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "An array of Locations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Request failed because user is not authenticated or is not allowed to invoke the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Request failed because user does not have access to a specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Request was understood, but contained invalid parameters",
            "content": {
              "a-pplication/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Request was rate-limited. Retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server. Retry later and report an error if unresolved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TacticReport": {
        "type": "string",
        "description": "The advertising tactic associated with the campaign. The following table lists available tactic names:\n|Tactic Name|Type|Description|\n|-----------|-----|-----------|\n|T00020     |Contextual targeting | Choose individual products to show your ads in placements related to those products.<br> Choose individual categories to show your ads in placements related to those categories on and off Amazon.|\n|T00030     |Audiences targeting | Select individual audiences to show your ads.|",
        "example": "T00020",
        "enum": [
          "T00020",
          "T00030"
        ]
      },
      "Segment": {
        "type": "string",
        "description": "Optional. A dimension used to further segment certain types of reports.\n\nNote: matchedTarget reports only return targets that have generated at least one click.\n| Dimension | Report types | Tactics | Metrics | Description |\n|---------|------------------|-------------|-------------|------------|\n| matchedTarget | campaigns, adGroups, targets | T00020, T00030 | Existing metrics for each report type are accepted. |  Segments a report based on the ASIN of the product page where the ad appeared.|",
        "example": "matchedTarget",
        "enum": [
          "matchedTarget"
        ]
      },
      "Tactic": {
        "type": "string",
        "description": "The advertising tactic associated with the campaign. The following table lists available tactic names:\n|Tactic Name|Type|Description|\n|-----------|-----|-----------|\n|T00020     |Contextual targeting | Choose individual products to show your ads in placements related to those products.<br> Choose individual categories to show your ads in placements related to those categories on and off Amazon.|\n|T00030     |Audiences targeting | Select individual audiences to show your ads.|",
        "example": "T00020",
        "enum": [
          "T00020",
          "T00030"
        ]
      },
      "CreativeType": {
        "type": "string",
        "nullable": true,
        "description": "The type of the associated creative. If the field is empty or null, a default value of IMAGE will be used. One ad group only supports one type (VIDEO or IMAGE) of creativeType at a time.\n|Name|Description|\n|----|-----------|\n|IMAGE |The creative will display static assets (e.g. headline, brandLogo or custom image).|\n|VIDEO |The creative will display video assets. This type of creative must have a video asset provided. Only supported when using productAds with ASIN or SKU.|",
        "example": null,
        "enum": [
          "IMAGE",
          "VIDEO"
        ]
      },
      "BaseCampaign": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the campaign."
          },
          "budgetType": {
            "type": "string",
            "description": "The time period over which the amount specified in the `budget` property is allocated.",
            "enum": [
              "daily"
            ]
          },
          "budget": {
            "type": "number",
            "description": "The amount of the budget.",
            "format": "double",
            "example": "3.00"
          },
          "startDate": {
            "type": "string",
            "description": "The YYYYMMDD start date of the campaign. The date must be today or in the future.",
            "example": "20190101"
          },
          "endDate": {
            "type": "string",
            "nullable": true,
            "description": "The YYYYMMDD end date of the campaign.",
            "example": null
          },
          "costType": {
            "type": "string",
            "description": "Determines how the campaign will bid and charge.\n|Name|Description|\n|----|----------|\n|cpc |[Default] The performance of this campaign is measured by the clicks triggered by the ad.|\n|vcpm |The performance of this campaign is measured by the viewed impressions triggered by the ad. |\n\nTo view minimum and maximum bids based on the costType, see [Limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).",
            "enum": [
              "cpc",
              "vcpm"
            ]
          },
          "state": {
            "type": "string",
            "description": "The state of the campaign.",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "portfolioId": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "description": "Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.",
            "example": null
          }
        }
      },
      "Campaign": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCampaign"
          },
          {
            "type": "object",
            "properties": {
              "campaignId": {
                "$ref": "#/components/schemas/CampaignId"
              },
              "tactic": {
                "$ref": "#/components/schemas/Tactic"
              },
              "deliveryProfile": {
                "type": "string",
                "enum": [
                  "as_soon_as_possible"
                ]
              },
              "ruleBasedBudget": {
                "$ref": "#/components/schemas/RuleBasedBudget"
              }
            }
          }
        ]
      },
      "CreateCampaign": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCampaign"
          },
          {
            "type": "object",
            "properties": {
              "tactic": {
                "$ref": "#/components/schemas/Tactic"
              }
            }
          }
        ]
      },
      "UpdateCampaign": {
        "required": [
          "campaignId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCampaign"
          },
          {
            "type": "object",
            "properties": {
              "campaignId": {
                "$ref": "#/components/schemas/CampaignId"
              }
            }
          }
        ]
      },
      "CampaignId": {
        "type": "integer",
        "format": "int64",
        "description": "The identifier of the campaign."
      },
      "CampaignResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "description": {
            "type": "string",
            "description": "A human-readable description of the response."
          },
          "campaignId": {
            "$ref": "#/components/schemas/CampaignId"
          }
        }
      },
      "CampaignResponseEx": {
        "type": "object",
        "properties": {
          "campaignId": {
            "type": "number",
            "description": "The identifier of the campaign."
          },
          "name": {
            "type": "string",
            "description": "The name of the campaign."
          },
          "tactic": {
            "$ref": "#/components/schemas/Tactic"
          },
          "budgetType": {
            "type": "string",
            "description": "The time period over which the amount specified in the `budget` property is allocated.",
            "enum": [
              "daily"
            ]
          },
          "budget": {
            "type": "number",
            "description": "The amount of the budget.",
            "format": "double"
          },
          "startDate": {
            "type": "string",
            "description": "The YYYYMMDD start date of the campaign. The date must be today or in the future."
          },
          "endDate": {
            "type": "string",
            "description": "The YYYYMMDD end date of the campaign."
          },
          "state": {
            "type": "string",
            "description": "The state of the campaign.",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "portfolioId": {
            "type": "integer",
            "description": "Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.",
            "format": "int64"
          },
          "servingStatus": {
            "type": "string",
            "description": "The status of the campaign.",
            "enum": [
              "ADVERTISER_STATUS_ENABLED",
              "STATUS_UNAVAILABLE",
              "ADVERTISER_PAUSED",
              "ACCOUNT_OUT_OF_BUDGET",
              "ADVERTISER_PAYMENT_FAILURE",
              "CAMPAIGN_PAUSED",
              "CAMPAIGN_ARCHIVED",
              "PENDING_START_DATE",
              "ENDED",
              "CAMPAIGN_OUT_OF_BUDGET"
            ]
          },
          "costType": {
            "type": "string",
            "description": "Determines how the campaign will bid and charge.\n|Name|Description|\n|----|----------|-----------|\n|cpc |[Default] The performance of this campaign is measured by the clicks triggered by the ad.|\n|vcpm|The performance of this campaign is measured by the viewed impressions triggered by the ad. $1 is the minimum bid for vCPM.|",
            "enum": [
              "cpc",
              "vcpm"
            ]
          },
          "creationDate": {
            "type": "integer",
            "description": "Epoch date the campaign was created.",
            "format": "int64"
          },
          "lastUpdatedDate": {
            "type": "integer",
            "description": "Epoch date of the last update to any property associated with the campaign.",
            "format": "int64"
          },
          "ruleBasedBudget": {
            "$ref": "#/components/schemas/RuleBasedBudget"
          }
        }
      },
      "BaseAdGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the ad group."
          },
          "campaignId": {
            "$ref": "#/components/schemas/CampaignId"
          },
          "defaultBid": {
            "type": "number",
            "description": "The amount of the default bid associated with the ad group. Used if no bid is specified.",
            "format": "double"
          },
          "bidOptimization": {
            "type": "string",
            "description": "Bid Optimization for the Adgroup. Default behavior is to optimize for clicks.\n|Name|CostType|Description|\n|----|--------|-----------|\n|reach |vcpm|Optimize for viewable impressions. $1 is the minimum bid for vCPM.|\n|clicks |cpc|[Default] Optimize for page visits.|\n|conversions |cpc|Optimize for conversion.|",
            "enum": [
              "clicks",
              "conversions",
              "reach"
            ]
          },
          "state": {
            "type": "string",
            "description": "The state of the ad group.",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          }
        }
      },
      "AdGroupId": {
        "type": "integer",
        "format": "int64",
        "description": "The identifier of the ad group."
      },
      "AdGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseAdGroup"
          },
          {
            "type": "object",
            "properties": {
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "tactic": {
                "$ref": "#/components/schemas/Tactic"
              },
              "creativeType": {
                "$ref": "#/components/schemas/CreativeType"
              }
            }
          }
        ]
      },
      "CreateAdGroup": {
        "required": [
          "campaignId",
          "name",
          "state"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseAdGroup"
          },
          {
            "type": "object",
            "properties": {
              "creativeType": {
                "$ref": "#/components/schemas/CreativeType"
              }
            }
          }
        ]
      },
      "UpdateAdGroup": {
        "required": [
          "adGroupId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseAdGroup"
          },
          {
            "type": "object",
            "properties": {
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              }
            }
          }
        ]
      },
      "AdGroupResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "description": {
            "type": "string",
            "description": "A human-readable description of the response."
          },
          "adGroupId": {
            "$ref": "#/components/schemas/AdGroupId"
          }
        }
      },
      "AdGroupResponseEx": {
        "type": "object",
        "description": "Object containing an extended set of data fields for an Ad Group.",
        "properties": {
          "adGroupId": {
            "type": "number",
            "description": "The identifier of the ad group."
          },
          "name": {
            "type": "string",
            "description": "The name of the ad group."
          },
          "campaignId": {
            "type": "number",
            "description": "The identifier of the campaign that this ad group is associated with."
          },
          "defaultBid": {
            "type": "number",
            "description": "The amount of the default bid associated with the ad group. Used if no bid is specified.",
            "format": "double"
          },
          "state": {
            "type": "string",
            "description": "The delivery state of the ad group.",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "tactic": {
            "$ref": "#/components/schemas/Tactic"
          },
          "creativeType": {
            "$ref": "#/components/schemas/CreativeTypeInCreativeResponse"
          },
          "servingStatus": {
            "type": "string",
            "description": "The status of the ad group.",
            "enum": [
              "ADVERTISER_STATUS_ENABLED",
              "STATUS_UNAVAILABLE",
              "ADVERTISER_PAUSED",
              "ACCOUNT_OUT_OF_BUDGET",
              "ADVERTISER_PAYMENT_FAILURE",
              "CAMPAIGN_PAUSED",
              "CAMPAIGN_ARCHIVED",
              "PENDING_START_DATE",
              "ENDED",
              "CAMPAIGN_OUT_OF_BUDGET",
              "AD_GROUP_STATUS_ENABLED",
              "AD_GROUP_PAUSED",
              "AD_GROUP_ARCHIVED",
              "AD_GROUP_INCOMPLETE",
              "AD_GROUP_LOW_BID",
              "ADGROUP_POLICING_PENDING_REVIEW",
              "ADGROUP_POLICING_CREATIVE_REJECTED"
            ]
          },
          "bidOptimization": {
            "type": "string",
            "description": "Bid optimization type for the Adgroup. Default behavior is to optimize for clicks. Note, reach and clicks are only accepted with productAds that include landingPageURL OFF_AMAZON_LINK.\n|Name|CostType|Description|\n|----|--------|-----------|\n|reach|vcpm|Optimize for viewable impressions. $1 is the minimum bid for vCPM.|\n|clicks [Default]|cpc|Optimize for page visits.|\n|conversions|cpc|Optimize for conversion.|\n|leads |cpc| [PREVIEW ONLY] Optimize for lead generation.|",
            "enum": [
              "clicks",
              "conversions",
              "reach"
            ]
          },
          "creationDate": {
            "type": "integer",
            "description": "Epoch time the ad group was created.",
            "format": "int64"
          },
          "lastUpdatedDate": {
            "description": "Epoch time any property in the ad group was last updated.",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "BaseProductAd": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "The state of the campaign associated with the product ad.",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          }
        }
      },
      "ProductAd": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseProductAd"
          },
          {
            "type": "object",
            "properties": {
              "adId": {
                "$ref": "#/components/schemas/AdId"
              },
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "campaignId": {
                "$ref": "#/components/schemas/CampaignId"
              },
              "landingPageURL": {
                "$ref": "#/components/schemas/LandingPageURL"
              },
              "landingPageType": {
                "$ref": "#/components/schemas/LandingPageType"
              },
              "adName": {
                "$ref": "#/components/schemas/AdName"
              },
              "asin": {
                "type": "string",
                "description": "The Amazon ASIN of the product advertised by the product ad."
              },
              "sku": {
                "type": "string",
                "description": "The Amazon SKU of the product advertised by the product ad."
              }
            }
          }
        ]
      },
      "CreateProductAd": {
        "required": [
          "campaignId",
          "adGroupId",
          "state",
          "asin",
          "sku"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseProductAd"
          },
          {
            "type": "object",
            "properties": {
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "campaignId": {
                "$ref": "#/components/schemas/CampaignId"
              },
              "landingPageURL": {
                "$ref": "#/components/schemas/LandingPageURL"
              },
              "landingPageType": {
                "$ref": "#/components/schemas/LandingPageType"
              },
              "adName": {
                "$ref": "#/components/schemas/AdName"
              },
              "asin": {
                "type": "string",
                "description": "The ASIN of the product advertised by the product ad."
              },
              "sku": {
                "type": "string",
                "description": "The SKU of the product advertised by the product ad."
              }
            }
          }
        ]
      },
      "UpdateProductAd": {
        "required": [
          "adId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseProductAd"
          },
          {
            "type": "object",
            "properties": {
              "adId": {
                "$ref": "#/components/schemas/AdId"
              }
            }
          }
        ]
      },
      "AdId": {
        "type": "integer",
        "format": "int64",
        "description": "The identifier of the product ad."
      },
      "LandingPageURL": {
        "type": "string",
        "description": "The URL where customers will land after clicking on its link. Must be provided if a LandingPageType is set. Please note that if a single product ad sets the landing page url, only one product ad can be added to the ad group. This field is not supported when using ASIN or SKU fields.\n||Specifications|\n|------------------|------------------|\n|LandingPageType| Description|\n|STORE| Not yet supported. The url should be in the format of https://www.amazon.com/stores/* (using a correct Amazon url based on the marketplace)|\n|MOMENT| Not yet supported. The url should be in the format of https://www.amazon.com/moments/promotion/{campaignId} (using a correct Amazon url based on the marketplace)|\n|OFF_AMAZON_LINK| The url should be in the format of https://www.****.com. Note that this LandingPageType is not supported when using ASIN or SKU fields. A custom creative of headline, logo, image are require for this LandingPageType. |"
      },
      "LandingPageType": {
        "type": "string",
        "description": "The type of the landingPage used. This field is completely optional and will be set in conjunction with the LandingPageURL to indicate the type of landing page that will be set. This field is not supported when using ASIN or SKU fields.",
        "enum": [
          "STORE",
          "MOMENT",
          "OFF_AMAZON_LINK"
        ]
      },
      "AdName": {
        "type": "string",
        "description": "The name of the ad. Note that this field is not supported when using ASIN or SKU fields."
      },
      "ProductAdResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "description": {
            "type": "string",
            "description": "A human-readable description of the response."
          },
          "adId": {
            "type": "number",
            "description": "The identifier of the ad."
          }
        }
      },
      "ProductAdResponseEx": {
        "type": "object",
        "properties": {
          "adId": {
            "type": "number",
            "description": "The identifier of the ad."
          },
          "adGroupId": {
            "type": "number",
            "description": "The identifier of the ad group associated with the ad."
          },
          "campaignId": {
            "type": "number",
            "description": "The identifier of the campaign associated with the ad."
          },
          "landingPageURL": {
            "$ref": "#/components/schemas/LandingPageURL"
          },
          "landingPageType": {
            "$ref": "#/components/schemas/LandingPageType"
          },
          "adName": {
            "$ref": "#/components/schemas/AdName"
          },
          "asin": {
            "type": "string",
            "description": "The ASIN of the product being advertised."
          },
          "sku": {
            "type": "string",
            "description": "The SKU of the product being advertised."
          },
          "state": {
            "type": "string",
            "description": "The state of the product ad.",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "servingStatus": {
            "type": "string",
            "description": "The status of the product ad.",
            "enum": [
              "ADVERTISER_STATUS_ENABLED",
              "STATUS_UNAVAILABLE",
              "ADVERTISER_PAUSED",
              "ACCOUNT_OUT_OF_BUDGET",
              "ADVERTISER_PAYMENT_FAILURE",
              "CAMPAIGN_PAUSED",
              "CAMPAIGN_ARCHIVED",
              "PENDING_START_DATE",
              "ENDED",
              "CAMPAIGN_OUT_OF_BUDGET",
              "AD_GROUP_STATUS_ENABLED",
              "AD_GROUP_PAUSED",
              "AD_GROUP_ARCHIVED",
              "AD_GROUP_INCOMPLETE",
              "AD_GROUP_LOW_BID",
              "AD_STATUS_LIVE",
              "AD_STATUS_PAUSED",
              "AD_STATUS_ARCHIVED",
              "MISSING_IMAGE",
              "MISSING_DECORATION",
              "NOT_BUYABLE",
              "NOT_IN_BUYBOX",
              "OUT_OF_STOCK",
              "NOT_IN_POLICY"
            ]
          },
          "creationDate": {
            "type": "integer",
            "description": "Epoch date the product ad was created.",
            "format": "int64"
          },
          "lastUpdatedDate": {
            "type": "integer",
            "description": "Epoch date of the last update to any property associated with the product ad.",
            "format": "int64"
          }
        }
      },
      "TargetingPredicate": {
        "type": "object",
        "description": "A predicate to match against in the targeting expression (only applicable to contextual targeting - T00020).\n\n* All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system.\n* Brand, price, and review predicates are optional and may only be specified if category is also specified.\n* Review predicates accept numbers between 0 and 5 and are inclusive.\n* When using either of the 'between' strings to construct a targeting expression the format of the string is 'double-double' where the first double must be smaller than the second double. Prices are not inclusive.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "asinSameAs",
              "asinCategorySameAs",
              "asinBrandSameAs",
              "asinPriceBetween",
              "asinPriceGreaterThan",
              "asinPriceLessThan",
              "asinReviewRatingLessThan",
              "asinReviewRatingGreaterThan",
              "asinReviewRatingBetween",
              "asinIsPrimeShippingEligible",
              "asinAgeRangeSameAs",
              "asinGenreSameAs",
              "similarProduct"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value to be targeted.",
            "example": "B0123456789"
          }
        }
      },
      "TargetingPredicateLegacy": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "asinSameAs",
              "asinCategorySameAs",
              "asinBrandSameAs",
              "asinPriceBetween",
              "asinPriceGreaterThan",
              "asinPriceLessThan",
              "asinReviewRatingLessThan",
              "asinReviewRatingGreaterThan",
              "asinReviewRatingBetween",
              "similarProduct",
              "exactProduct",
              "asinIsPrimeShippingEligible",
              "asinAgeRangeSameAs",
              "asinGenreSameAs"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value to be targeted.",
            "example": "B0123456789"
          },
          "eventType": {
            "type": "string",
            "description": "The type of event that the value applies to. Only available for similarProduct and exactProduct currently.\n* views event type corresponds to a customer who viewed the detail page of the product(s).",
            "enum": [
              "views"
            ]
          }
        }
      },
      "TargetingPredicateNested": {
        "type": "object",
        "description": "A behavioral event and list of targeting predicates that represents an audience to target (only applicable to audience targeting - T00030).\n\n* For manual ASIN-grain targeting, the value array must contain only, 'exactProduct', 'similarProduct', 'relatedProduct' and 'lookback' TargetingPredicateBase components. The 'lookback' is mandatory and the value should be set to '7', '14', '30', '60', '90', '180' or '365'.\n* For manual Category-grain targeting, the value array must contain a 'lookback' and 'asinCategorySameAs' TargetingPredicateBase component, which can be further refined with optional brand, price, star-rating and shipping eligibility refinements. The 'lookback' is mandatory and the value should be set to '7', '14', '30', '60', '90', '180' or '365'.\n* For Amazon Audiences targeting, the TargetingPredicateNested type should be set to 'audience' and the value array should include one TargetingPredicateBase component with type set to 'audienceSameAs'.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "views",
              "audience",
              "purchases"
            ]
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetingPredicateBase"
            }
          }
        }
      },
      "TargetingPredicateBase": {
        "type": "object",
        "description": "A predicate to match against inside the TargetingPredicateNested component (only applicable to audience targeting - T00030).\n\n* All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system.\n* Brand, price, and review predicates are optional and may only be specified if category is also specified.\n* Review predicates accept numbers between 0 and 5 and are inclusive.\n* When using either of the 'between' strings to construct a targeting expression the format of the string is 'double-double' where the first double must be smaller than the second double. Prices are not inclusive.\n* The 'exactProduct', 'similarProduct', 'relatedProduct', and 'negative' types do not utilize the value field.\n* The only type currently applicable to Amazon Audiences targeting is 'audienceSameAs'.\n* A 'relatedProduct' TargetingPredicateBase will Target an audience that has purchased a related product in the past 7,14,30,60,90,180, or 365 days.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "asinCategorySameAs",
              "asinBrandSameAs",
              "asinPriceBetween",
              "asinPriceGreaterThan",
              "asinPriceLessThan",
              "asinReviewRatingLessThan",
              "asinReviewRatingGreaterThan",
              "asinReviewRatingBetween",
              "similarProduct",
              "exactProduct",
              "asinIsPrimeShippingEligible",
              "asinAgeRangeSameAs",
              "asinGenreSameAs",
              "audienceSameAs",
              "lookback",
              "negative",
              "relatedProduct"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value to be targeted.",
            "example": "B0123456789"
          }
        }
      },
      "TargetingExpression": {
        "type": "array",
        "description": "The targeting expression to match against.\n\n------- Applicable to contextual targeting (T00020) -------\n* A 'TargetingExpression' in a contextual targeting campaign can only contain 'TargetingPredicate' components.\n* Expressions must specify either a category predicate or an ASIN predicate, but never both.\n* Only one category may be specified per targeting expression.\n* Only one brand may be specified per targeting expression.\n* Only one asin may be specified per targeting expression.\n* To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.\n\n------- Applicable to audience targeting (T00030) -------\n* A 'TargetingExpression' in an audience campaign can only contain 'TargetingPredicateNested' components.\n* Expressions must specify ASIN-grain ('exactProduct'), manual ASIN-grain ('relatedProducts' or 'relatedProducts'), or category-grain targeting.",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/TargetingPredicate"
            },
            {
              "$ref": "#/components/schemas/TargetingPredicateLegacy"
            },
            {
              "$ref": "#/components/schemas/TargetingPredicateNested"
            }
          ]
        }
      },
      "CreateTargetingExpression": {
        "type": "array",
        "description": "The targeting expression to match against.\n\n------- Applicable to contextual targeting (T00020) -------\n* A 'TargetingExpression' in a contextual targeting campaign can only contain 'TargetingPredicate' components.\n* Expressions must specify either a category predicate or an ASIN predicate, but never both.\n* Only one category may be specified per targeting expression.\n* Only one brand may be specified per targeting expression.\n* Only one asin may be specified per targeting expression.\n* To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.\n\n------- Applicable to audience targeting (T00030) -------\n* A 'TargetingExpression' in an audience campaign can only contain 'TargetingPredicateNested' components.\n* Expressions must specify either auto ASIN-grain (exact products), manual ASIN-grain (similar products), or manual category-grain targeting.",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/TargetingPredicate"
            },
            {
              "$ref": "#/components/schemas/TargetingPredicateNested"
            }
          ]
        }
      },
      "BaseTargetingClause": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "bid": {
            "type": "number",
            "description": "The bid will override the adGroup bid if specified. This field is not used for negative targeting clauses. The bid must be less than the maximum allowable bid for the campaign's marketplace; for a list of maximum allowable bids, find the [\"Bid constraints by marketplace\" table in our documentation overview](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace). You cannot manually set a bid when the targeting clause's adGroup has an enabled optimization rule.",
            "format": "float",
            "nullable": true,
            "minimum": 0.02
          }
        }
      },
      "TargetingClause": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTargetingClause"
          },
          {
            "type": "object",
            "properties": {
              "targetId": {
                "$ref": "#/components/schemas/TargetId"
              },
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "expressionType": {
                "type": "string",
                "enum": [
                  "manual",
                  "auto"
                ],
                "description": "Tactic T00020 & T00030 ad groups should use 'manual' targeting."
              },
              "expression": {
                "$ref": "#/components/schemas/TargetingExpression",
                "description": "The targeting expression to match against."
              },
              "resolvedExpression": {
                "$ref": "#/components/schemas/TargetingExpression",
                "description": "The resolved targeting expression."
              }
            }
          }
        ]
      },
      "UpdateTargetingClause": {
        "required": [
          "targetId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTargetingClause"
          },
          {
            "type": "object",
            "properties": {
              "targetId": {
                "$ref": "#/components/schemas/TargetId"
              }
            }
          }
        ]
      },
      "CreateTargetingClause": {
        "required": [
          "adGroupId",
          "expressionType",
          "expression"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTargetingClause"
          },
          {
            "type": "object",
            "properties": {
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "expressionType": {
                "type": "string",
                "enum": [
                  "manual",
                  "auto"
                ],
                "description": "Tactic T00020 ad groups only allow manual targeting."
              },
              "expression": {
                "$ref": "#/components/schemas/CreateTargetingExpression",
                "description": "The targeting expression to match against."
              }
            }
          }
        ],
        "example": {
          "expression": [
            {
              "type": "views",
              "value": [
                {
                  "type": "similarProduct"
                },
                {
                  "type": "lookback",
                  "value": "30"
                }
              ]
            }
          ],
          "bid": "1.25",
          "adGroupId": 209426065351234,
          "expressionType": "manual",
          "state": "enabled"
        }
      },
      "TargetResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "description": {
            "type": "string",
            "description": "A human-readable description of the response."
          },
          "targetId": {
            "$ref": "#/components/schemas/TargetId"
          }
        }
      },
      "TargetingClauseEx": {
        "type": "object",
        "properties": {
          "targetId": {
            "type": "number"
          },
          "adGroupId": {
            "type": "number"
          },
          "state": {
            "type": "string",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "expressionType": {
            "type": "string",
            "enum": [
              "auto",
              "manual"
            ]
          },
          "bid": {
            "type": "number",
            "description": "If a value for `bid` is specified, it overrides the current adGroup bid. When using vcpm costType. $1 is the minimum bid for vCPM. Note that this field is ignored for negative targeting clauses."
          },
          "expression": {
            "$ref": "#/components/schemas/TargetingExpression"
          },
          "resolvedExpression": {
            "$ref": "#/components/schemas/TargetingExpression"
          },
          "servingStatus": {
            "type": "string",
            "description": "The status of the target.",
            "enum": [
              "ADVERTISER_STATUS_ENABLED",
              "STATUS_UNAVAILABLE",
              "ADVERTISER_PAUSED",
              "ACCOUNT_OUT_OF_BUDGET",
              "ADVERTISER_PAYMENT_FAILURE",
              "CAMPAIGN_PAUSED",
              "CAMPAIGN_ARCHIVED",
              "PENDING_START_DATE",
              "ENDED",
              "CAMPAIGN_OUT_OF_BUDGET",
              "AD_GROUP_STATUS_ENABLED",
              "AD_GROUP_PAUSED",
              "AD_GROUP_ARCHIVED",
              "AD_GROUP_INCOMPLETE",
              "AD_GROUP_LOW_BID",
              "TARGET_STATUS_LIVE",
              "TARGET_STATUS_PAUSED",
              "TARGET_STATUS_ARCHIVED"
            ]
          },
          "creationDate": {
            "type": "integer",
            "description": "Epoch date the target was created.",
            "format": "int64"
          },
          "lastUpdatedDate": {
            "type": "integer",
            "description": "Epoch date of the last update to any property associated with the target.",
            "format": "int64"
          }
        }
      },
      "BaseNegativeTargetingClause": {
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          }
        }
      },
      "NegativeTargetingClause": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNegativeTargetingClause"
          },
          {
            "type": "object",
            "properties": {
              "targetId": {
                "$ref": "#/components/schemas/TargetId"
              },
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "expressionType": {
                "type": "string",
                "enum": [
                  "manual",
                  "auto"
                ]
              },
              "expression": {
                "type": "array",
                "description": "The expression to negatively match against.\n* Only one brand may be specified per targeting expression.\n* Only one asin may be specified per targeting expression.\n* To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.",
                "items": {
                  "$ref": "#/components/schemas/NegativeTargetingExpression"
                }
              },
              "resolvedExpression": {
                "type": "array",
                "description": "The resolved negative targeting expression.",
                "items": {
                  "$ref": "#/components/schemas/NegativeTargetingExpression"
                }
              }
            }
          }
        ]
      },
      "CreateNegativeTargetingClause": {
        "required": [
          "adGroupId",
          "expressionType",
          "expression",
          "state"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNegativeTargetingClause"
          },
          {
            "type": "object",
            "properties": {
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "expression": {
                "type": "array",
                "description": "The expression to negatively match against.\n* Only one brand may be specified per targeting expression.\n* Only one asin may be specified per targeting expression.\n* To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.",
                "items": {
                  "$ref": "#/components/schemas/NegativeTargetingExpression"
                }
              },
              "expressionType": {
                "type": "string",
                "enum": [
                  "manual",
                  "auto"
                ]
              }
            }
          }
        ]
      },
      "UpdateNegativeTargetingClause": {
        "required": [
          "targetId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseNegativeTargetingClause"
          },
          {
            "type": "object",
            "properties": {
              "targetId": {
                "$ref": "#/components/schemas/TargetId"
              }
            }
          }
        ]
      },
      "TargetId": {
        "type": "integer",
        "format": "int64"
      },
      "NegativeTargetingExpression": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The intent type. See the [targeting topic](https://advertising.amazon.com/help#GQCBASRVERXSARL3) in the Amazon Ads support center for more information.",
            "enum": [
              "asinSameAs",
              "asinBrandSameAs"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value to be negatively targeted. Used only in manual expressions.",
            "example": "B0123456789"
          }
        }
      },
      "NegativeTargetingClauseEx": {
        "type": "object",
        "properties": {
          "targetId": {
            "type": "number"
          },
          "adGroupId": {
            "type": "number"
          },
          "state": {
            "type": "string",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "expressionType": {
            "type": "string",
            "enum": [
              "manual",
              "auto"
            ]
          },
          "expression": {
            "type": "array",
            "description": "The expression to negatively match against.\n* Only one brand may be specified per targeting expression.\n* Only one asin may be specified per targeting expression.\n* To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The intent type. See the [targeting topic](https://advertising.amazon.com/help#GQCBASRVERXSARL3) in the Amazon Ads support center for more information.",
                  "enum": [
                    "asinSameAs",
                    "asinBrandSameAs"
                  ]
                },
                "value": {
                  "type": "string",
                  "description": "The value to be negatively targeted. Used only in manual expressions.",
                  "example": "B0123456789"
                }
              }
            }
          },
          "servingStatus": {
            "type": "string",
            "description": "The status of the target.",
            "enum": [
              "ADVERTISER_STATUS_ENABLED",
              "STATUS_UNAVAILABLE",
              "ADVERTISER_PAUSED",
              "ACCOUNT_OUT_OF_BUDGET",
              "ADVERTISER_PAYMENT_FAILURE",
              "CAMPAIGN_PAUSED",
              "CAMPAIGN_ARCHIVED",
              "PENDING_START_DATE",
              "ENDED",
              "CAMPAIGN_OUT_OF_BUDGET",
              "AD_GROUP_STATUS_ENABLED",
              "AD_GROUP_PAUSED",
              "AD_GROUP_ARCHIVED",
              "AD_GROUP_INCOMPLETE",
              "AD_GROUP_LOW_BID",
              "TARGET_STATUS_LIVE",
              "TARGET_STATUS_PAUSED",
              "TARGET_STATUS_ARCHIVED"
            ]
          },
          "creationDate": {
            "type": "integer",
            "description": "Epoch date the target was created.",
            "format": "int64"
          },
          "lastUpdatedDate": {
            "type": "integer",
            "description": "Epoch date of the last update to any property associated with the target.",
            "format": "int64"
          }
        }
      },
      "ASIN": {
        "type": "string",
        "description": "Amazon Standard Identification Number",
        "example": "B00PN11UNW",
        "pattern": "[a-zA-Z0-9]{10}"
      },
      "GoalProduct": {
        "description": "A product an advertisers wants to advertise. Recommendations will be made for specified goal products.",
        "required": [
          "asin"
        ],
        "properties": {
          "asin": {
            "$ref": "#/components/schemas/ASIN"
          }
        }
      },
      "TargetingRecommendationsResponse": {
        "description": "Response to a request for targeting recommendations.",
        "properties": {
          "recommendations": {
            "$ref": "#/components/schemas/TargetingRecommendations"
          }
        }
      },
      "RecommendationType": {
        "type": "string",
        "description": "Signifies a type of recommendation",
        "example": "PRODUCT",
        "enum": [
          "PRODUCT"
        ]
      },
      "TargetingRecommendations": {
        "description": "A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.",
        "properties": {
          "products": {
            "type": "array",
            "description": "List of recommended product targets",
            "minItems": 0,
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/ProductRecommendation"
            }
          }
        }
      },
      "ProductRecommendation": {
        "description": "A recommended product to target ads on",
        "properties": {
          "asin": {
            "$ref": "#/components/schemas/ASIN"
          },
          "rank": {
            "type": "integer",
            "description": "A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation",
            "minimum": 1
          }
        }
      },
      "TargetingRecommendationsRequest": {
        "description": "Request for targeting recommendations",
        "required": [
          "tactic",
          "products",
          "typeFilter"
        ],
        "properties": {
          "tactic": {
            "$ref": "#/components/schemas/Tactic"
          },
          "products": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of products for which to get targeting recommendations",
            "items": {
              "$ref": "#/components/schemas/GoalProduct"
            }
          },
          "typeFilter": {
            "type": "array",
            "description": "A filter to indicate which types of recommendations to request. T00030 only allow \"CATEGORY\".",
            "minItems": 1,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/RecommendationType"
            }
          }
        }
      },
      "ReportRequest": {
        "type": "object",
        "properties": {
          "reportDate": {
            "type": "string",
            "description": "Date in YYYYMMDD format. The report contains only metrics generated on the specified date. Note that the time zone used for date calculation is the one associated with the profile used to make the request.",
            "example": "20190401"
          },
          "tactic": {
            "$ref": "#/components/schemas/TacticReport"
          },
          "segment": {
            "$ref": "#/components/schemas/Segment"
          },
          "metrics": {
            "type": "string",
            "description": "A comma-separated list of the metrics to be included in the report.\n\nEach report type supports different metrics. **To understand supported metrics for each report type, see [Report types](/API/docs/en-us/guides/reporting/v2/report-types).**\n\n**Note**: Campaigns with vCPM costType should use view+click based metrics (viewAttributedConversions14d, viewAttributedDetailPageView14d, viewAttributedSales14d, viewAttributedUnitsOrdered14d, viewImpressions).\n\n**Note**: Detail page view metrics (attributedDetailPageView14d, viewAttributedDetailPageView14d) have an SLA of 3 days.\n\n**Tip**: Use new-to-brand (NTB) metrics to calculate how efficient your campaigns are at driving new shoppers:\n\n  1. Percentage of NTB orders = attributedOrdersNewToBrand14d / attributedConversions14d\n  2. Percentage NTB sales = attributedSalesNewToBrand14d / attributedSales14d\n  3. Percentage NTB units = attributedUnitsOrderedNewToBrand14d / attributedUnitsOrdered14d\n  4. NTB order rate = attributedOrdersNewToBrand14 / impressions",
            "example": "campaignName,campaignId,impressions,clicks,cost,attributedSales14d"
          }
        }
      },
      "ReportResponse": {
        "type": "object",
        "properties": {
          "reportId": {
            "type": "string",
            "description": "The identifier of the report."
          },
          "recordType": {
            "type": "string",
            "description": "The type of report requested.",
            "enum": [
              "CAMPAIGN",
              "AD_GROUP",
              "PRODUCT_AD"
            ]
          },
          "status": {
            "type": "string",
            "description": "The build status of the report.",
            "enum": [
              "IN_PROGRESS",
              "SUCCESS",
              "FAILURE"
            ]
          },
          "statusDetails": {
            "description": "A human-readable description of the current status.",
            "type": "string"
          },
          "location": {
            "type": "string",
            "description": "The URI location of the report."
          },
          "fileSize": {
            "type": "integer",
            "description": "The size of the report file, in bytes.",
            "format": "int64"
          },
          "expiration": {
            "type": "integer",
            "description": "Epoch date of the expiration of the URI in the `location` property.",
            "format": "int64"
          }
        }
      },
      "PatchRequest": {
        "required": [
          "id",
          "request"
        ],
        "description": "JSONPatch request request object.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "request": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchDocument"
            }
          }
        }
      },
      "PatchDocument": {
        "required": [
          "op",
          "path"
        ],
        "description": "JSONPatch request document.",
        "type": "object",
        "properties": {
          "op": {
            "description": "The JSONPatch operation type.",
            "type": "string",
            "enum": [
              "add",
              "remove",
              "replace"
            ],
            "example": "replace"
          },
          "path": {
            "type": "string",
            "description": "A path constructed from the JSON object to be updated.",
            "example": "/state"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "object"
              }
            ],
            "example": "paused",
            "description": "The value used by the operation specified in the `op` field."
          }
        }
      },
      "CreativeProperties": {
        "description": "Select customizations on your creative from any combination of headline, logo, and custom image.",
        "anyOf": [
          {
            "$ref": "#/components/schemas/HeadlineCreativeProperties"
          },
          {
            "$ref": "#/components/schemas/LogoCreativeProperties"
          },
          {
            "$ref": "#/components/schemas/CustomImageCreativeProperties"
          },
          {
            "$ref": "#/components/schemas/VideoCreativeProperties"
          }
        ]
      },
      "HeadlineCreativeProperties": {
        "type": "object",
        "description": "User-customizable properties of a creative with headline.",
        "properties": {
          "headline": {
            "type": "string",
            "maxLength": 50,
            "description": "A marketing phrase to display on the ad. This field is optional and mutable. Maximum number of characters allowed is 50."
          }
        }
      },
      "LogoCreativeProperties": {
        "type": "object",
        "description": "User-customizable properties of a creative with a logo.",
        "properties": {
          "brandLogo": {
            "$ref": "#/components/schemas/Image"
          }
        }
      },
      "CustomImageCreativeProperties": {
        "type": "object",
        "description": "User-customizable properties of a custom image creative.",
        "properties": {
          "rectCustomImage": {
            "$ref": "#/components/schemas/Image"
          },
          "squareCustomImage": {
            "$ref": "#/components/schemas/Image"
          },
          "squareImages": {
            "type": "array",
            "description": "An optional collection of 1:1 square images which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "landscapeImages": {
            "type": "array",
            "description": "An optional collection of 16:9 landscape images which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "portraitImages": {
            "type": "array",
            "description": "An optional collection of 9:16 portrait images which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        }
      },
      "VideoCreativeProperties": {
        "type": "object",
        "description": "User-customizable properties of a video creative.",
        "properties": {
          "video": {
            "$ref": "#/components/schemas/Video"
          },
          "squareVideos": {
            "type": "array",
            "description": "An optional collection of 1:1 square videos which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.",
            "items": {
              "$ref": "#/components/schemas/Video"
            }
          },
          "landscapeVideos": {
            "type": "array",
            "description": "An optional collection of 16:9 landscape videos which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.",
            "items": {
              "$ref": "#/components/schemas/Video"
            }
          },
          "portraitVideos": {
            "type": "array",
            "description": "An optional collection of 9:16 portrait videos which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.",
            "items": {
              "$ref": "#/components/schemas/Video"
            }
          }
        }
      },
      "Image": {
        "type": "object",
        "description": "This field denotes image which is displayed on the ad. This can either be a brand logo or a custom image. This field is optional and mutable. For custom image, both rectCustomImage and squareCustomImage should use the same asset id and asset version. Specific restrictions based on the Image type are listed in the following table.\n|Image type|Maximum file size|Minimum width|Minimum height|Accepted file formats|\n|------|-----------|-----------|-----------|-----------|\n|Custom Image|5MB|1200|628|JPEG, JPG, PNG, GIF|\n|Brand Logo|1MB|600|100|JPEG, JPG, PNG|\nNote: For square custom images the cropped image should be 628x628 at minimum.",
        "required": [
          "assetId",
          "assetVersion"
        ],
        "properties": {
          "assetId": {
            "type": "string",
            "description": "The unique identifier of the image asset. This assetId comes from the Creative Asset Library."
          },
          "assetVersion": {
            "type": "string",
            "description": "The identifier of the particular image assetversion."
          },
          "croppingCoordinates": {
            "type": "object",
            "description": "Optional cropping coordinates to apply to the image.",
            "required": [
              "top",
              "left",
              "width",
              "height"
            ],
            "properties": {
              "top": {
                "type": "integer",
                "minimum": 0,
                "description": "Pixel distance from the top edge of the cropping zone to the top edge of the original image."
              },
              "left": {
                "type": "integer",
                "minimum": 0,
                "description": "Pixel distance from the left edge of the cropping zone to the left edge of the original image."
              },
              "width": {
                "type": "integer",
                "minimum": 0,
                "description": "Pixel width of the cropping zone."
              },
              "height": {
                "type": "integer",
                "minimum": 0,
                "description": "Pixel height of the cropping zone."
              }
            }
          }
        }
      },
      "Video": {
        "type": "object",
        "description": "This field denotes video which is displayed on the ad. This field is optional and mutable. A video asset must be provided for a VIDEO creative. Specific restrictions based on the video are listed in the following table.\n||Specifications|\n|------------------|------------------|\n|Maximum file size|500MB|\n|Aspect ratio|16:9|\n|Minimum duration|6s|\n|Maximum duration|45s|\n|Minimum frame size|1920x1080|\n|Minimum video bitrate|4mbps|\n|Video frame rate(fps)|23.976(recommended), 24, 25, or 29.97|\n|Video frame rate mode|Constant|\n|Minimum audio bitrate|192kbps|\n|Audio sample rate|44.1kHz or 48kHz|\n|Supported Formats|Video: H.264, MPEG-2, or MPEG-4; Audio: PCM or AAC|\n|Audio Channel|Audio format needs to be stereo or mono.|\n|Recommended video bitrate|8mbps|\n|Recommended duration|A duration of exactly 6s, 15s, 20s, or 30s is recommended. Use of videos outside of these durations may negatively impact your campaign performance. Shorter lengths will drive higher VCR (although scale on 6s may be limited).|",
        "required": [
          "assetId",
          "assetVersion"
        ],
        "properties": {
          "assetId": {
            "type": "string",
            "description": "The unique identifier of the video asset. This assetId comes from the Creative Asset Library."
          },
          "assetVersion": {
            "type": "string",
            "description": "The identifier of the particular video assetversion."
          }
        }
      },
      "CreativeModeration": {
        "type": "object",
        "description": "System generated Creative moderation.",
        "required": [
          "creativeId",
          "moderationStatus",
          "etaForModeration",
          "policyViolations",
          "creativeType"
        ],
        "properties": {
          "creativeId": {
            "type": "number",
            "description": "Unique identifier of the creative."
          },
          "creativeType": {
            "$ref": "#/components/schemas/CreativeTypeInCreativeResponse"
          },
          "moderationStatus": {
            "type": "string",
            "description": "The moderation status of the creative.\n|Status|Description|\n|------|-----------|\n|APPROVED|Moderation for the creative is complete.|\n|IN_PROGRESS|Moderation for the creative is in progress. The expected date and time for completion are specfied in the `etaForModeration` field.|\n|REJECTED|The creative has failed moderation. Specific information about the content that violated policy is available in `policyViolations`.|",
            "enum": [
              "APPROVED",
              "PENDING_REVIEW",
              "REJECTED"
            ]
          },
          "etaForModeration": {
            "type": "string",
            "format": "date-time",
            "description": "Expected date and time by which moderation will be complete."
          },
          "policyViolations": {
            "type": "array",
            "description": "A list of policy violations for a creative that has failed moderation.",
            "items": {
              "type": "object",
              "properties": {
                "policyDescription": {
                  "type": "string",
                  "description": "A human-readable description of the policy."
                },
                "policyLinkUrl": {
                  "type": "string",
                  "description": "Address of the policy documentation. Follow the link to learn more about the specified policy."
                },
                "violatingHeadlineContents": {
                  "type": "array",
                  "description": "Information about the headline text that violates the specified policy.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "reviewedText": {
                        "type": "string",
                        "description": "The specific text reviewed during moderation."
                      },
                      "textEvidence": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "violatingText": {
                              "type": "string",
                              "description": "The specific text determined to violate the specified policy in reviewedText"
                            },
                            "violatingTextPosition": {
                              "type": "object",
                              "properties": {
                                "start": {
                                  "type": "integer",
                                  "description": "Zero-based index into the text in reviewedText where the text specified in violatingText starts"
                                },
                                "end": {
                                  "type": "integer",
                                  "description": "Zero-based index into the text in reviewedText where the text specified in violatingText ends"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "violatingBrandLogoContents": {
                  "type": "array",
                  "description": "Information about the brand logo that violates the specified policy.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "reviewedImageUrl": {
                        "type": "string",
                        "description": "Address of the image reviewed during moderation."
                      },
                      "imageEvidences": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "violatingImageCrop": {
                              "type": "object",
                              "properties": {
                                "topLeftX": {
                                  "type": "integer",
                                  "description": "The top left X-coordinate of the content that violates the specfied policy within the image."
                                },
                                "topLeftY": {
                                  "type": "integer",
                                  "description": "The top left Y-coordinate of the content that violates the specfied policy within the image."
                                },
                                "height": {
                                  "type": "integer",
                                  "description": "The height of the content that violates the specfied policy within the image."
                                },
                                "width": {
                                  "type": "integer",
                                  "description": "The width of the content that violates the specfied policy within the image."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "violatingCustomImageContents": {
                  "type": "array",
                  "description": "Information about the custom image that violates the specified policy.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "reviewedImageUrl": {
                        "type": "string",
                        "description": "Address of the image reviewed during moderation."
                      },
                      "imageEvidences": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "violatingImageCrop": {
                              "type": "object",
                              "properties": {
                                "topLeftX": {
                                  "type": "integer",
                                  "description": "The top left X-coordinate of the content that violates the specfied policy within the image."
                                },
                                "topLeftY": {
                                  "type": "integer",
                                  "description": "The top left Y-coordinate of the content that violates the specfied policy within the image."
                                },
                                "height": {
                                  "type": "integer",
                                  "description": "The height of the content that violates the specfied policy within the image."
                                },
                                "width": {
                                  "type": "integer",
                                  "description": "The width of the content that violates the specfied policy within the image."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "violatingVideoContents": {
                  "type": "array",
                  "description": "Information about the video that violates the specified policy.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "reviewedVideoUrl": {
                        "type": "string",
                        "description": "Address of the video reviewed during moderation."
                      },
                      "videoEvidences": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "violatingVideoPosition": {
                              "type": "object",
                              "properties": {
                                "start": {
                                  "type": "integer",
                                  "description": "Time at which policy violation within video asset starts."
                                },
                                "end": {
                                  "type": "integer",
                                  "description": "Time at which policy violation within the video asset ends."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CreativeTypeInCreativeRequest": {
        "type": "string",
        "nullable": true,
        "description": "The type of the creative.\n|Name|Description|\n|----|-----------|\n|IMAGE |The creative will display static assets (e.g. headline, brandLogo or custom image).|\n|VIDEO |The creative will display video assets. This type of creative must have video assets provided. Only supported when using productAds with ASIN or SKU.|",
        "example": null,
        "enum": [
          "IMAGE",
          "VIDEO"
        ]
      },
      "CreativeTypeInCreativeResponse": {
        "type": "string",
        "nullable": false,
        "description": "\nThe type of the creative.\n|Name|Description|\n|----|-----------|\n|IMAGE |The creative will display static assets (e.g. headline, brandLogo or custom image).|\n|VIDEO |The creative will display video assets. This type of creative must have video assets provided.|",
        "example": "IMAGE",
        "enum": [
          "IMAGE",
          "VIDEO"
        ]
      },
      "Creative": {
        "type": "object",
        "description": "Creative model.",
        "required": [
          "creativeId",
          "adGroupId",
          "properties",
          "moderationStatus",
          "creativeType"
        ],
        "properties": {
          "creativeId": {
            "type": "number",
            "description": "Unique identifier of the creative."
          },
          "adGroupId": {
            "$ref": "#/components/schemas/AdGroupId"
          },
          "creativeType": {
            "$ref": "#/components/schemas/CreativeTypeInCreativeResponse"
          },
          "properties": {
            "$ref": "#/components/schemas/CreativeProperties"
          },
          "moderationStatus": {
            "type": "string",
            "description": "The moderation status of the creative",
            "enum": [
              "APPROVED",
              "PENDING_REVIEW",
              "REJECTED"
            ]
          }
        }
      },
      "PreviewCreativeModel": {
        "type": "object",
        "description": "Creative model for preview.",
        "properties": {
          "creativeType": {
            "$ref": "#/components/schemas/CreativeTypeInCreativeRequest"
          },
          "properties": {
            "$ref": "#/components/schemas/CreativeProperties"
          }
        }
      },
      "CreativeUpdate": {
        "type": "object",
        "description": "Creative update model.",
        "required": [
          "creativeId",
          "properties"
        ],
        "properties": {
          "creativeId": {
            "type": "number",
            "description": "Unique identifier of the creative.",
            "readOnly": true
          },
          "creativeType": {
            "$ref": "#/components/schemas/CreativeTypeInCreativeRequest"
          },
          "properties": {
            "$ref": "#/components/schemas/CreativeProperties"
          }
        }
      },
      "CreateCreative": {
        "type": "object",
        "description": "Creative create model.",
        "example": {
          "adGroupId": 21035454911234,
          "properties": {
            "rectCustomImage": {
              "assetId": "amzn1.assetlibrary.asset1.fbb498fe19248f834be4b7xxxxxxxx",
              "assetVersion": "version_v1",
              "croppingCoordinates": {
                "top": 0,
                "left": 0,
                "width": 1200,
                "height": 628
              }
            },
            "squareCustomImage": {
              "assetId": "amzn1.assetlibrary.asset1.fbb498fe19248f834be4b7xxxxxxxx",
              "assetVersion": "version_v1",
              "croppingCoordinates": {
                "top": 0,
                "left": 0,
                "width": 628,
                "height": 628
              }
            }
          }
        },
        "required": [
          "adGroupId",
          "properties"
        ],
        "properties": {
          "adGroupId": {
            "type": "number",
            "description": "Unqiue identifier for the ad group associated with the creative."
          },
          "creativeType": {
            "$ref": "#/components/schemas/CreativeTypeInCreativeRequest"
          },
          "properties": {
            "$ref": "#/components/schemas/CreativeProperties"
          }
        }
      },
      "CreativeResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "description": {
            "type": "string",
            "description": "A human-readable description of the response."
          },
          "creativeId": {
            "type": "number",
            "description": "The identifier of the creative."
          }
        }
      },
      "CreativePreviewConfiguration": {
        "type": "object",
        "description": "Optional configuration for creative preview.",
        "properties": {
          "size": {
            "type": "object",
            "description": "The slot dimension to render the creative. Sponsored Display creatives are responsive to a limited list of width and height pairs, including 300x250, 650x130, 245x250, 414x125, 600x160, 600x300, 728x90, 980x55, 320x50, 970x250 and 270x150.",
            "properties": {
              "width": {
                "type": "integer"
              },
              "height": {
                "type": "integer"
              }
            }
          },
          "products": {
            "type": "array",
            "description": "The products to preview. Currently only the first product is previewable.",
            "items": {
              "type": "object",
              "properties": {
                "asin": {
                  "type": "string",
                  "description": "The ASIN of the product."
                }
              }
            }
          },
          "landingPageURL": {
            "$ref": "#/components/schemas/LandingPageURL"
          },
          "landingPageType": {
            "$ref": "#/components/schemas/LandingPageType"
          },
          "adName": {
            "$ref": "#/components/schemas/AdName"
          },
          "isMobile": {
            "type": "boolean",
            "description": "Preview the creative as if it is on a mobile environment."
          },
          "isOnAmazon": {
            "type": "boolean",
            "description": "Preview the creative as if it is on an amazon site or third party site. The main difference is whether the preview will contain an AdChoices icon."
          }
        }
      },
      "CreativePreviewConfigurations": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CreativePreviewConfiguration"
        }
      },
      "CreativePreviewRequest": {
        "type": "object",
        "required": [
          "creative",
          "previewConfiguration"
        ],
        "properties": {
          "creative": {
            "$ref": "#/components/schemas/PreviewCreativeModel"
          },
          "previewConfiguration": {
            "$ref": "#/components/schemas/CreativePreviewConfiguration"
          },
          "previewConfigurations": {
            "$ref": "#/components/schemas/CreativePreviewConfigurations"
          }
        }
      },
      "CreativePreviewResponse": {
        "type": "object",
        "required": [
          "previewHtml"
        ],
        "properties": {
          "previewHtml": {
            "type": "string"
          },
          "previewHtmls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Locale": {
        "type": "string",
        "description": "Locale string as described in [BCP 47](https://tools.ietf.org/html/bcp47). For example, `en-US`",
        "pattern": "^\\[a-z]{2}-[AZ]{2}$",
        "enum": [
          "en-US",
          "es-MX",
          "zh-CN",
          "es-ES",
          "it-IT",
          "fr-FR",
          "fr-CA",
          "de-DE",
          "ja-JP",
          "ko-KR",
          "en-GB",
          "en-CA",
          "hi-IN",
          "en-IN",
          "en-DE",
          "en-ES",
          "en-FR",
          "en-IT",
          "en-JP",
          "en-AE",
          "ar-AE"
        ]
      },
      "Error": {
        "type": "object",
        "description": "The error response object.",
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "details": {
            "type": "string",
            "description": "A human-readable description of the response."
          }
        }
      },
      "TacticFilter": {
        "type": "string",
        "description": "Optional. Restricts results to entities with the advertising tactic associated with the campaign. Must be one of the following table lists available tactic names:\n|Tactic Name|Type|Description|\n|-----------|-----|-----------|\n|T00020     |Contextual targeting | Choose individual products to show your ads in placements related to those products.<br> Choose individual categories to show your ads in placements related to those categories on and off Amazon.|\n|T00030     |Audiences targeting | Select individual audiences to show your ads.|",
        "example": "T00020,T00030",
        "enum": [
          "T00020",
          "T00030",
          "T00020,T00030"
        ]
      },
      "SnapshotRequest": {
        "type": "object",
        "properties": {
          "stateFilter": {
            "type": "string",
            "description": "Optional. Restricts results to entities with state within the specified comma-separated list. Default behavior is to include 'enabled' and 'paused'. You can include 'enabled', 'paused', and 'archived' or any combination.",
            "enum": [
              "enabled",
              "paused",
              "archived"
            ]
          },
          "tacticFilter": {
            "$ref": "#/components/schemas/TacticFilter"
          }
        }
      },
      "SnapshotResponse": {
        "type": "object",
        "properties": {
          "snapshotId": {
            "type": "string",
            "description": "The identifier of the snapshot that was requested."
          },
          "recordType": {
            "type": "string",
            "description": "The record type of the snapshot file.",
            "enum": [
              "campaigns",
              "adgroups",
              "productAds",
              "targets"
            ]
          },
          "status": {
            "type": "string",
            "description": "The status of the generation of the snapshot.",
            "enum": [
              "IN_PROGRESS",
              "SUCCESS",
              "FAILURE"
            ]
          },
          "statusDetails": {
            "type": "string",
            "description": "Optional description of the status."
          },
          "location": {
            "type": "string",
            "description": "The URI for the snapshot. It's only available if status is SUCCESS."
          },
          "fileSize": {
            "type": "number",
            "description": "The size of the snapshot file in bytes. It's only available if status is SUCCESS."
          },
          "expiration": {
            "type": "number",
            "description": "The epoch time for expiration of the snapshot file and each snapshot file will be expired in 30 mins after generated. It's only available if status is SUCCESS."
          }
        }
      },
      "SDTargetingRecommendationsLocale": {
        "type": "string",
        "description": "List of supported locales.",
        "enum": [
          "ar_AE",
          "de_DE",
          "en_AE",
          "en_AU",
          "en_CA",
          "en_GB",
          "en_IN",
          "en_SG",
          "en_US",
          "es_ES",
          "es_MX",
          "fr_CA",
          "fr_FR",
          "hi_IN",
          "it_IT",
          "ja_JP",
          "ko_KR",
          "nl_NL",
          "pl_PL",
          "pt_BR",
          "sv_SE",
          "ta_IN",
          "th_TH",
          "tr_TR",
          "vi_VN",
          "zh_CN"
        ]
      },
      "SDTargetingRecommendationsRequest": {
        "description": "Request for targeting recommendations",
        "required": [
          "tactic",
          "products",
          "typeFilter"
        ],
        "properties": {
          "tactic": {
            "$ref": "#/components/schemas/SDTactic"
          },
          "products": {
            "type": "array",
            "minItems": 1,
            "maxItems": 10000,
            "description": "A list of products for which to get targeting recommendations",
            "items": {
              "$ref": "#/components/schemas/SDGoalProduct"
            }
          },
          "typeFilter": {
            "type": "array",
            "description": "A filter to indicate which types of recommendations to request.",
            "minItems": 1,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/SDRecommendationType"
            }
          }
        }
      },
      "SDTargetingRecommendationsRequestV31": {
        "description": "Request for targeting recommendations",
        "required": [
          "tactic",
          "products",
          "typeFilter"
        ],
        "properties": {
          "tactic": {
            "$ref": "#/components/schemas/SDTacticV31"
          },
          "products": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsProducts"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsTypeFilterV31"
          }
        }
      },
      "SDTargetingRecommendationsRequestV32": {
        "description": "Request for targeting recommendations for API version 3.2.",
        "required": [
          "tactic",
          "products",
          "typeFilter"
        ],
        "properties": {
          "tactic": {
            "$ref": "#/components/schemas/SDTacticV31"
          },
          "products": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsProducts"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsTypeFilterV31"
          },
          "themes": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsThemes"
          }
        }
      },
      "SDTargetingRecommendationsRequestV33": {
        "description": "Request for targeting recommendations for API version 3.3.",
        "required": [
          "tactic",
          "products",
          "typeFilter"
        ],
        "properties": {
          "tactic": {
            "$ref": "#/components/schemas/SDTacticV31"
          },
          "products": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsProducts"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsTypeFilterV32"
          },
          "themes": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsThemes"
          }
        }
      },
      "SDTargetingRecommendationsProducts": {
        "type": "array",
        "description": "A list of products for which to get targeting recommendations",
        "minItems": 1,
        "maxItems": 10000,
        "items": {
          "$ref": "#/components/schemas/SDGoalProduct"
        }
      },
      "SDTargetingRecommendationsTypeFilterV31": {
        "type": "array",
        "description": "A filter to indicate which types of recommendations to request.",
        "minItems": 1,
        "maxItems": 2,
        "example": [
          "PRODUCT",
          "CATEGORY"
        ],
        "items": {
          "$ref": "#/components/schemas/SDRecommendationTypeV31"
        }
      },
      "SDTargetingRecommendationsTypeFilterV32": {
        "type": "array",
        "description": "A filter to indicate which types of recommendations to request.",
        "minItems": 1,
        "maxItems": 2,
        "example": [
          "PRODUCT",
          "CATEGORY",
          "AUDIENCE"
        ],
        "items": {
          "$ref": "#/components/schemas/SDRecommendationTypeV32"
        }
      },
      "SDTargetingRecommendationsThemes": {
        "type": "object",
        "description": "The themes used to refine the recommendations. Currently only contextual targeting themes are supported.",
        "properties": {
          "product": {
            "type": "array",
            "minItems": 0,
            "maxItems": 5,
            "description": "A list of themes for product targeting recommendations. If this list is empty, the service will return all the current available theme recommendations. Recommendations will be returned for each theme. If specified, each theme should only include unique expressions.",
            "items": {
              "$ref": "#/components/schemas/SDProductTargetingTheme"
            }
          }
        }
      },
      "SDProductTargetingTheme": {
        "type": "object",
        "description": "Contextual targeting theme definitions.",
        "required": [
          "name",
          "expression"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the meaningful theme name which will be used as a unique identifier across various themes in the same request.\nThis identifier will also be used to map the recommendations back to the theme in the response body.\nNote: the value for this field cannot be \"default\" as that's a reserved keyword in the system.",
            "minLength": 1,
            "maxLength": 100,
            "pattern": "^(?!default$)"
          },
          "expression": {
            "type": "array",
            "minItems": 1,
            "maxItems": 1,
            "description": "A list of expressions defining the contextual targeting theme. The list will define an AND operator on different expressions.\nFor example, asinPriceGreaterThan and asinReviewRatingLessThan can be used to request product recommendations\nwhich are both with greater price and less review rating compared to the goal products.\nNote: Currently the service only supports one item in the array.",
            "items": {
              "$ref": "#/components/schemas/SDProductTargetingThemeExpression"
            }
          }
        }
      },
      "SDProductTargetingThemeExpression": {
        "type": "object",
        "description": "The expression used to define the contextual targeting theme.",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The contextual targeting grammar used to define the targeting theme. Note asinAsBestSeller is currently not supported.",
            "enum": [
              "asinPriceGreaterThan",
              "asinReviewRatingLessThan",
              "asinGlanceViewsGreaterThan",
              "asinBrandSameAs"
            ]
          }
        }
      },
      "SDRecommendationType": {
        "type": "string",
        "description": "Signifies a type of recommendation",
        "example": "PRODUCT",
        "enum": [
          "PRODUCT"
        ]
      },
      "SDRecommendationTypeV31": {
        "type": "string",
        "description": "Signifies a type of recommendation",
        "example": "PRODUCT",
        "enum": [
          "PRODUCT",
          "CATEGORY"
        ]
      },
      "SDRecommendationTypeV32": {
        "type": "string",
        "description": "Signifies a type of recommendation. PRODUCT and CATEGORY are supported by tactic T00020. CATEGORY and AUDIENCE are supported by tactic T00030.",
        "example": "PRODUCT",
        "enum": [
          "PRODUCT",
          "CATEGORY",
          "AUDIENCE"
        ]
      },
      "SDASIN": {
        "type": "string",
        "description": "Amazon Standard Identification Number",
        "example": "B00PN11UNW",
        "pattern": "[a-zA-Z0-9]{10}"
      },
      "SDErrorResponse": {
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "details": {
            "type": "string",
            "description": "A human-readable description of the response."
          }
        }
      },
      "SDTargetingRecommendationsResponse": {
        "description": "Response to a request for targeting recommendations.",
        "properties": {
          "recommendations": {
            "$ref": "#/components/schemas/SDTargetingRecommendations"
          }
        }
      },
      "SDTargetingRecommendationsResponseV31": {
        "description": "Response to a request for targeting recommendations.",
        "properties": {
          "recommendations": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsV31"
          }
        }
      },
      "SDTargetingRecommendationsResponseV32": {
        "description": "Response to a request for targeting recommendations.",
        "properties": {
          "recommendations": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsV32"
          }
        }
      },
      "SDTargetingRecommendationsResponseV33": {
        "description": "Response to a request for targeting recommendations.",
        "properties": {
          "recommendations": {
            "$ref": "#/components/schemas/SDTargetingRecommendationsV33"
          }
        }
      },
      "SDTargetingRecommendationsV32": {
        "description": "For v3.2 the service will continue to return the recommendations returned for v3.1 in products field, and return recommendations for contextual targeting themes in themes field.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SDProductRecommendationsV32"
          },
          {
            "$ref": "#/components/schemas/SDCategoryRecommendations"
          },
          {
            "$ref": "#/components/schemas/SDThemeRecommendations"
          }
        ]
      },
      "SDTargetingRecommendationsV33": {
        "description": "For v3.3 the service will continue to return the recommendations returned for v3.2, and return audience recommendations if requested.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SDProductRecommendationsV32"
          },
          {
            "$ref": "#/components/schemas/SDCategoryRecommendationsV33"
          },
          {
            "$ref": "#/components/schemas/SDAudienceRecommendations"
          },
          {
            "$ref": "#/components/schemas/SDThemeRecommendations"
          }
        ]
      },
      "SDThemeRecommendations": {
        "type": "object",
        "properties": {
          "themes": {
            "properties": {
              "products": {
                "type": "array",
                "description": "A list of contextual targeting theme recommendations.",
                "minItems": 1,
                "maxItems": 5,
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SDProductTargetingRecommendationsSuccess"
                    },
                    {
                      "$ref": "#/components/schemas/SDTargetingRecommendationsFailure"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "SDProductTargetingRecommendationsSuccess": {
        "type": "object",
        "description": "Recommendation results for contextual targeting.",
        "properties": {
          "code": {
            "type": "string",
            "description": "HTTP status code 200 indicating a successful response for product recomendations.",
            "example": 200
          },
          "name": {
            "type": "string",
            "description": "The theme name specified in the request."
          },
          "recommendations": {
            "type": "array",
            "description": "A list of recommended products.",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/SDProductRecommendationV32"
            }
          }
        }
      },
      "SDTargetingRecommendationsFailure": {
        "type": "object",
        "description": "A targeting recommendation failure record.",
        "properties": {
          "code": {
            "type": "string",
            "description": "HTTP status code indicating a failure response for targeting recomendations.",
            "example": 400
          },
          "name": {
            "type": "string",
            "description": "The theme name specified in the request. If the themes field is not provided in the request,\nthe value of this field will be set to default."
          },
          "errorMessage": {
            "type": "string",
            "description": "A human friendly error message indicating the failure reasons."
          }
        }
      },
      "SDCategory": {
        "type": "integer",
        "description": "The category identifier",
        "example": 7352105011
      },
      "SDTargetingRecommendations": {
        "description": "A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.",
        "properties": {
          "products": {
            "type": "array",
            "description": "List of recommended product targets",
            "minItems": 0,
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/SDProductRecommendation"
            }
          }
        }
      },
      "SDProductRecommendation": {
        "type": "object",
        "description": "A recommended product to target ads on",
        "properties": {
          "asin": {
            "$ref": "#/components/schemas/SDASIN"
          },
          "rank": {
            "type": "integer",
            "description": "A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation",
            "minimum": 1
          }
        }
      },
      "SDProductRecommendationV32": {
        "type": "object",
        "description": "A recommended product to target ads on",
        "properties": {
          "asin": {
            "$ref": "#/components/schemas/SDASIN"
          },
          "rank": {
            "type": "integer",
            "description": "A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation",
            "minimum": 1
          },
          "advertisedAsins": {
            "type": "array",
            "description": "The top advertised products this recommendation is made for.",
            "minItems": 1,
            "maxItems": 5,
            "items": {
              "$ref": "#/components/schemas/SDASIN"
            }
          }
        }
      },
      "SDTargetingRecommendationsV31": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SDProductRecommendationsV31"
          },
          {
            "$ref": "#/components/schemas/SDCategoryRecommendations"
          }
        ]
      },
      "SDProductRecommendationsV31": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "description": "List of recommended product targets",
            "minItems": 0,
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/SDProductRecommendation"
            }
          }
        }
      },
      "SDProductRecommendationsV32": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "description": "List of recommended product targets",
            "minItems": 0,
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/SDProductRecommendationV32"
            }
          }
        }
      },
      "SDCategoryRecommendations": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "description": "List of recommended category targets",
            "minItems": 0,
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/SDCategoryRecommendation"
            }
          }
        }
      },
      "SDCategoryRecommendationsV33": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "description": "List of recommended category targets.",
            "minItems": 0,
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/SDCategoryRecommendationV33"
            }
          }
        }
      },
      "SDCategoryRecommendation": {
        "description": "A recommended category to target ads on",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/SDCategory"
          },
          "name": {
            "type": "string",
            "description": "The category name"
          },
          "path": {
            "type": "array",
            "description": "The path of the category within the category catalogue.",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "targetableAsinCountRange": {
            "type": "object",
            "description": "The range of ASINs available within the category catalogue. If no targetable ASIN counts are available then the targetableAsinCountRange value will be null without any properties.",
            "properties": {
              "rangeLower": {
                "type": "integer"
              },
              "rangeUpper": {
                "type": "integer"
              }
            }
          },
          "rank": {
            "type": "integer",
            "description": "A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation",
            "minimum": 1
          }
        }
      },
      "SDCategoryRecommendationV33": {
        "description": "A recommended category to target ads on",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/SDCategory"
          },
          "name": {
            "type": "string",
            "description": "The category name"
          },
          "translatedName": {
            "type": "string",
            "description": "The translated category name by requested locale, field will not be provided if locale is not provided or campaign localization service is down."
          },
          "path": {
            "type": "array",
            "description": "The path of the category within the category catalogue.",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "translatedPath": {
            "type": "array",
            "description": "The translated path of the category within the category catalogue by requested locale, field will not be provided if locale is not provided or campaign localization is down.",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "targetableAsinCountRange": {
            "type": "object",
            "description": "The range of ASINs available within the category catalogue.",
            "properties": {
              "rangeLower": {
                "type": "integer"
              },
              "rangeUpper": {
                "type": "integer"
              }
            }
          },
          "rank": {
            "type": "integer",
            "description": "A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation.",
            "minimum": 1
          }
        }
      },
      "SDAudienceRecommendations": {
        "type": "object",
        "properties": {
          "audiences": {
            "type": "array",
            "description": "List of recommended audience targets, broken down by audience category",
            "minItems": 0,
            "maxItems": 10,
            "items": {
              "$ref": "#/components/schemas/SDAudienceCategoryRecommendations"
            }
          }
        }
      },
      "SDAudienceCategoryRecommendations": {
        "description": "List of recommended standard Amazon audience targets of a specific audience category",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/SDAudienceCategory"
          },
          "audiences": {
            "type": "array",
            "description": "List of recommended standard Amazon audience targets",
            "minItems": 0,
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/SDAudienceRecommendation"
            }
          }
        }
      },
      "SDAudienceCategory": {
        "type": "string",
        "description": "An audience category determines the goal of the audience such as In-market, Interest, Lifestyle and Life Event",
        "example": "In-Market",
        "enum": [
          "In-market",
          "Lifestyle",
          "Interest",
          "Life event"
        ]
      },
      "SDAudienceRecommendation": {
        "description": "A recommended standard Amazon audience to target ads on",
        "properties": {
          "audience": {
            "$ref": "#/components/schemas/SDAudience"
          },
          "name": {
            "type": "string",
            "description": "The Amazon audience name"
          },
          "rank": {
            "type": "integer",
            "description": "A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation",
            "minimum": 1
          }
        }
      },
      "SDAudience": {
        "type": "string",
        "description": "The audience identifier",
        "example": 417464173123977660
      },
      "SDTactic": {
        "type": "string",
        "description": "The advertising tactic associated with the campaign. The following table lists available tactic names:\n|Tactic Name|Type|Description|\n        |-----------|-----|-----------|\n        |T00020 &nbsp;    |Products&nbsp;| Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.",
        "example": "T00020",
        "enum": [
          "T00020"
        ]
      },
      "SDTacticV31": {
        "type": "string",
        "description": "The advertising tactic associated with the campaign. The following table lists available tactic names:\n|Tactic Name|Type|Description|\n        |-----------|-----|-----------|\n        |T00020 &nbsp;    |Products&nbsp;| Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.|\n        |T00030&nbsp;|Audiences &nbsp;|Select individual audiences to show your ads.|",
        "example": "T00020",
        "enum": [
          "T00020",
          "T00030"
        ]
      },
      "SDGoalProduct": {
        "description": "A product an advertisers wants to advertise. Recommendations will be made for specified goal products.",
        "required": [
          "asin"
        ],
        "properties": {
          "asin": {
            "$ref": "#/components/schemas/SDASIN"
          }
        }
      },
      "BrandSafetyDenyListDomainType": {
        "type": "string",
        "description": "The domain type.",
        "enum": [
          "WEBSITE",
          "APP"
        ]
      },
      "BrandSafetyDenyListDomainState": {
        "type": "string",
        "description": "The state of the domain.",
        "enum": [
          "ENABLED",
          "ARCHIVED"
        ],
        "default": "ENABLED"
      },
      "BrandSafetyRequestStatus": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Request ID"
          },
          "timestamp": {
            "type": "string",
            "description": "Request timestamp"
          },
          "status": {
            "type": "string",
            "description": "The status of the request",
            "enum": [
              "IN_PROGRESS",
              "COMPLETED",
              "FAILURE"
            ]
          },
          "statusDetails": {
            "type": "string",
            "description": "Details related to the request status"
          }
        }
      },
      "BrandSafetyGetResponse": {
        "description": "Response for Brand Safety Deny List GET requests",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/BrandSafetyGetResponsePagination"
          },
          "domains": {
            "type": "array",
            "description": "List of Brand Safety Deny List Domains",
            "items": {
              "$ref": "#/components/schemas/BrandSafetyDenyListProcessedDomain"
            }
          }
        }
      },
      "BrandSafetyGetResponsePagination": {
        "type": "object",
        "description": "Response pagination info for Brand Safety Deny List GET requests",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of deny list domains created by the advertiser"
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of deny list domains returned from GET request"
          },
          "offset": {
            "type": "integer",
            "description": "The number of deny list domains skipped"
          }
        }
      },
      "BrandSafetyDenyListDomain": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The website or app identifier. This can be in the form of full domain (eg. 'example.com' or 'example.net'), or mobile app identifier (eg. 'com.example.app' for Android apps or '1234567890' for iOS apps)\n",
            "maxLength": 250
          },
          "type": {
            "$ref": "#/components/schemas/BrandSafetyDenyListDomainType"
          }
        },
        "example": {
          "name": "example.com",
          "type": "WEBSITE"
        }
      },
      "BrandSafetyDenyListProcessedDomain": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The identifier of the Brand Safety List domain.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The website or app identifier. This can be in the form of full domain (eg. 'example.com' or 'example.net'), or mobile app identifier (eg. 'com.example.app' for Android apps or '1234567890' for iOS apps)\n",
            "maxLength": 250
          },
          "type": {
            "$ref": "#/components/schemas/BrandSafetyDenyListDomainType"
          },
          "state": {
            "$ref": "#/components/schemas/BrandSafetyDenyListDomainState"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date time the domain was created at. Format YYYY-MM-ddT:HH:mm:ssZ",
            "example": "2018-09-16T11:43:21Z"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "description": "The date time the domain was last modified. Format YYYY-MM-ddT:HH:mm:ssZ",
            "example": "2018-09-16T11:43:21Z"
          }
        }
      },
      "BrandSafetyPostRequest": {
        "description": "POST Request for Brand Safety",
        "required": [
          "domains"
        ],
        "properties": {
          "domains": {
            "type": "array",
            "minItems": 1,
            "maxItems": 10000,
            "items": {
              "$ref": "#/components/schemas/BrandSafetyDenyListDomain"
            }
          }
        }
      },
      "BrandSafetyUpdateResponse": {
        "description": "Response for Brand Safety POST and DELETE requests",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "The identifier of the request"
          }
        }
      },
      "BrandSafetyDenyListDomainUpdateResultStatus": {
        "type": "string",
        "description": "The state of the domain.",
        "enum": [
          "SUCCESS",
          "FAILURE"
        ],
        "default": "SUCCESS"
      },
      "BrandSafetyRequestStatusResponse": {
        "type": "object",
        "description": "The status of the request.",
        "properties": {
          "requestStatus": {
            "$ref": "#/components/schemas/BrandSafetyRequestStatus"
          }
        }
      },
      "BrandSafetyListRequestStatusResponse": {
        "type": "object",
        "description": "List of all requests' status.",
        "properties": {
          "requestStatusList": {
            "type": "array",
            "description": "List of all requests' status.",
            "items": {
              "$ref": "#/components/schemas/BrandSafetyRequestStatus"
            }
          }
        }
      },
      "BrandSafetyRequestResultsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "description": "A list of results for the given requestId",
            "items": {
              "$ref": "#/components/schemas/BrandSafetyRequestResult"
            }
          }
        }
      },
      "BrandSafetyRequestResult": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/BrandSafetyDenyListDomainUpdateResultStatus"
          },
          "details": {
            "type": "string",
            "description": "A human-readable description of the response."
          },
          "domainId": {
            "type": "integer",
            "description": "The identifier of the Brand Safety Deny List Domain.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The website or app identifier."
          }
        }
      },
      "SDTargetingBidRecommendationsRequestV31": {
        "description": "Request for targeting bid recommendations.",
        "example": {
          "products": [
            {
              "asin": "B01B8R6V2E"
            }
          ],
          "targetingClauses": [
            {
              "targetingClause": {
                "expressionType": "manual",
                "expression": [
                  {
                    "type": "views",
                    "value": [
                      {
                        "type": "similarProduct"
                      },
                      {
                        "type": "lookback",
                        "value": "30"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        "required": [
          "targetingClauses"
        ],
        "properties": {
          "products": {
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "description": "A list of products to tailor bid recommendations for category and audience based targeting clauses.",
            "items": {
              "$ref": "#/components/schemas/SDGoalProduct"
            }
          },
          "targetingClauses": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of targeting clauses to receive bid recommendations for.",
            "items": {
              "type": "object",
              "required": [
                "targetingClause"
              ],
              "properties": {
                "targetingClause": {
                  "$ref": "#/components/schemas/SDTargetingClauseV31"
                }
              }
            }
          }
        }
      },
      "SDTargetingBidRecommendationsResponseV31": {
        "description": "Response to a request for targeting bid recommendations.",
        "required": [
          "bidRecommendations",
          "costType"
        ],
        "properties": {
          "costType": {
            "$ref": "#/components/schemas/SDCostTypeV31"
          },
          "bidRecommendations": {
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseItemSuccessV31"
                },
                {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseItemFailureV31"
                }
              ]
            }
          }
        }
      },
      "SDCostTypeV31": {
        "description": "Determines what performance metric the bid recommendations will be optimized for.\n|Name|Description|\n|----|----------|-----------|\n|cpc|The bid recommendations will be optimized for clicks triggered by the ad.|\n|vcpm|The bid recommendations will be optimized for viewed impressions triggered by the ad. $1 is the minimum bid for vCPM.|",
        "type": "string",
        "enum": [
          "cpc",
          "vcpm"
        ]
      },
      "SDTargetingBidRecommendationsResponseItemSuccessV31": {
        "description": "A recommended bid range to use for a target.",
        "required": [
          "code"
        ],
        "allOf": [
          {
            "description": "Success response for corresponding targeting clause on the request.",
            "properties": {
              "code": {
                "type": "string",
                "description": "The HTTP status code of this item.",
                "example": "200"
              }
            }
          },
          {
            "$ref": "#/components/schemas/SDBidRecommendationV31"
          }
        ]
      },
      "SDTargetingBidRecommendationsResponseItemFailureV31": {
        "description": "Failed bid recommendation response.",
        "required": [
          "code",
          "details"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of this item.",
            "example": "400"
          },
          "details": {
            "type": "string",
            "description": "A human-readable description of this item on error.",
            "example": "Targeting expression does not conform to language specific rules."
          }
        }
      },
      "SDTargetingClauseV31": {
        "description": "The targeting clause",
        "required": [
          "expressionType",
          "expression"
        ],
        "type": "object",
        "properties": {
          "expressionType": {
            "description": "Tactic T00020 ad groups only allow manual targeting.",
            "type": "string",
            "enum": [
              "manual",
              "auto"
            ]
          },
          "expression": {
            "$ref": "#/components/schemas/SDTargetingExpressionV31"
          }
        }
      },
      "SDBidRecommendationV31": {
        "required": [
          "rangeLower",
          "rangeUpper",
          "recommended"
        ],
        "description": "A recommended bid range to use for a target.",
        "properties": {
          "rangeLower": {
            "type": "number",
            "description": "The lowest recommended bid to use to win an ad placement for this target.",
            "example": 0.5
          },
          "rangeUpper": {
            "type": "number",
            "description": "The highest recommended bid to use to win an ad placement for this target.",
            "example": 1
          },
          "recommended": {
            "type": "number",
            "description": "The recommended bid to use to win an ad placement for this target.",
            "example": 0.75
          }
        }
      },
      "SDTargetingExpressionV31": {
        "type": "array",
        "description": "The targeting expression to match against.\n\n------- Applicable to contextual targeting (T00020) -------\n* A 'TargetingExpression' in a contextual targeting campaign can only contain 'TargetingPredicate' components.\n* Expressions must specify either a category predicate or an ASIN predicate, but never both.\n* Only one category may be specified per targeting expression.\n* Only one brand may be specified per targeting expression.\n* Only one asin may be specified per targeting expression.\n* To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.\n\n------- Applicable to audience targeting (T00030) -------\n* A 'TargetingExpression' in an audience campaign can only contain 'TargetingPredicateNested' components.",
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SDTargetExpressionV31"
        }
      },
      "SDTargetExpressionV31": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SDTargetingPredicateV31"
          },
          {
            "$ref": "#/components/schemas/SDTargetingPredicateNestedV31"
          }
        ]
      },
      "SDTargetingPredicateV31": {
        "type": "object",
        "description": "A predicate to match against in the Targeting Expression (only applicable to contextual targeting - T00020).\n\n* All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system.\n* Brand, price, and review predicates are optional and may only be specified if category is also specified.\n* Review predicates accept numbers between 0 and 5 and are inclusive.\n* When using either of the 'between' strings to construct a targeting expression the format of the string is 'double-double' where the first double must be smaller than the second double. Prices are not inclusive.",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "asinSameAs",
              "asinCategorySameAs",
              "asinBrandSameAs",
              "asinPriceBetween",
              "asinPriceGreaterThan",
              "asinPriceLessThan",
              "asinReviewRatingLessThan",
              "asinReviewRatingGreaterThan",
              "asinReviewRatingBetween",
              "asinIsPrimeShippingEligible",
              "asinAgeRangeSameAs",
              "asinGenreSameAs"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value to be targeted.",
            "example": "B0123456789"
          }
        }
      },
      "SDTargetingPredicateNestedV31": {
        "type": "object",
        "description": "A behavioral event and list of targeting predicates that represents an audience to target (only applicable to audience targeting - T00030).\n\n* For manual ASIN-grain targeting, the value array must contain only, 'exactProduct', 'similarProduct', 'relatedProduct' and 'lookback' TargetingPredicateBase components. The 'lookback' is mandatory and the value should be set to '7', '14', '30', '60', '90', '180' or '365'.\n* For manual Category-grain targeting, the value array must contain a 'lookback' and 'asinCategorySameAs' TargetingPredicateBase component, which can be further refined with optional brand, price, star-rating and shipping eligibility refinements. The 'lookback' is mandatory and the value should be set to '7', '14', '30', '60', '90', '180' or '365'.\n* For manual Category-grain targeting, the value array must contain a 'lookback' and 'asinCategorySameAs' TargetingPredicateBase component, which can be further refined with optional brand, price, star-rating and shipping eligibility refinements.\n* For Amazon Audiences targeting, the TargetingPredicateNested type should be set to 'audience' and the value array should include one TargetingPredicateBase component with type set to 'audienceSameAs'.",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "views",
              "audience",
              "purchases"
            ]
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDTargetingPredicateBaseV31"
            }
          }
        }
      },
      "SDTargetingPredicateBaseV31": {
        "type": "object",
        "description": "A predicate to match against inside the TargetingPredicateNested component (only applicable to audience targeting - T00030).\n\n* All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system.\n* Brand, price, and review predicates are optional and may only be specified if category is also specified.\n* Review predicates accept numbers between 0 and 5 and are inclusive.\n* When using either of the 'between' strings to construct a targeting expression the format of the string is 'double-double' where the first double must be smaller than the second double. Prices are not inclusive.\n* The exactProduct, similarProduct, relatedProduct, and negative types do not utilize the value field.\n* The only type currently applicable to Amazon Audiences targeting is 'audienceSameAs'.",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "asinCategorySameAs",
              "asinBrandSameAs",
              "asinPriceBetween",
              "asinPriceGreaterThan",
              "asinPriceLessThan",
              "asinReviewRatingLessThan",
              "asinReviewRatingGreaterThan",
              "asinReviewRatingBetween",
              "similarProduct",
              "relatedProduct",
              "exactProduct",
              "asinIsPrimeShippingEligible",
              "asinAgeRangeSameAs",
              "asinGenreSameAs",
              "audienceSameAs",
              "lookback"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value to be targeted.",
            "example": "B0123456789"
          }
        }
      },
      "SDTargetingBidRecommendationsRequestV32": {
        "description": "Request for targeting bid recommendations.",
        "example": {
          "products": [
            {
              "asin": "B01B8R6V2E"
            }
          ],
          "bidOptimization": "reach",
          "costType": "vcpm",
          "targetingClauses": [
            {
              "targetingClause": {
                "expressionType": "manual",
                "expression": [
                  {
                    "type": "views",
                    "value": [
                      {
                        "type": "similarProduct"
                      },
                      {
                        "type": "lookback",
                        "value": "30"
                      }
                    ]
                  }
                ]
              }
            }
          ]
        },
        "required": [
          "targetingClauses",
          "bidOptimization",
          "costType"
        ],
        "properties": {
          "products": {
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "description": "A list of products to tailor bid recommendations for category and audience based targeting clauses.",
            "items": {
              "$ref": "#/components/schemas/SDGoalProduct"
            }
          },
          "bidOptimization": {
            "$ref": "#/components/schemas/SDBidOptimizationV32"
          },
          "costType": {
            "$ref": "#/components/schemas/SDCostTypeV31"
          },
          "targetingClauses": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of targeting clauses to receive bid recommendations for.",
            "items": {
              "type": "object",
              "required": [
                "targetingClause"
              ],
              "properties": {
                "targetingClause": {
                  "$ref": "#/components/schemas/SDTargetingClauseV31"
                }
              }
            }
          }
        }
      },
      "SDTargetingBidRecommendationsResponseV32": {
        "description": "Response to a request for targeting bid recommendations.",
        "required": [
          "bidRecommendations",
          "costType",
          "bidOptimization"
        ],
        "properties": {
          "bidOptimization": {
            "$ref": "#/components/schemas/SDBidOptimizationV32"
          },
          "costType": {
            "$ref": "#/components/schemas/SDCostTypeV31"
          },
          "bidRecommendations": {
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseItemSuccessV31"
                },
                {
                  "$ref": "#/components/schemas/SDTargetingBidRecommendationsResponseItemFailureV31"
                }
              ]
            }
          }
        }
      },
      "SDBidOptimizationV32": {
        "type": "string",
        "description": "Determines what the recommended bids will be optimized for.\n\n|Name|CostType|Description|\n|----|--------|-----------|\n|reach|vcpm|Optimize for viewable impressions. $1 is the minimum bid for vCPM.|\n|clicks|cpc|Optimize for page visits|\n|conversions|cpc|Optimize for conversion|\n|leads |cpc| [PREVIEW ONLY] Optimize for lead generation.|",
        "enum": [
          "clicks",
          "conversions",
          "reach"
        ]
      },
      "RuleId": {
        "type": "string",
        "description": "The identifier of the optimization rule."
      },
      "PlacementType": {
        "type": "string",
        "enum": [
          "ALL"
        ],
        "default": "ALL",
        "description": "Placement type where the rule should be applied, defaults to `ALL`(including home page, detail page, twitch and offsite).\n\n**Future** More available placemenTypes will be supported."
      },
      "RuleCondition": {
        "type": "object",
        "description": "A rule condition that defines the advertiser's intent for the outcome of the rule.\nCertain actions are performed by the product to achieve and maintain the rule condition.",
        "properties": {
          "metricName": {
            "type": "string",
            "description": "The name of the metric.\nSupported rule metrics and corresponding supported comparisonOperators:\n|      MetricName      |ComparisonOperator  |Description|\n|------------------|--------------------|-------------------|\n|COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS     |              LESS_THAN_OR_EQUAL_TO             |Maximize viewable impressions while cost per 1000 views less than or equal to `threshold`|\n|COST_PER_ORDER    |              LESS_THAN_OR_EQUAL_TO            |Maximize viewable impressions/page visits/conversion while cost per order less than or equal to `threshold`|\n|COST_PER_CLICK    |              LESS_THAN_OR_EQUAL_TO            |Maximize page visits while cost per click less than or equal to `threshold`|",
            "enum": [
              "COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS",
              "COST_PER_ORDER",
              "COST_PER_CLICK"
            ]
          },
          "comparisonOperator": {
            "type": "string",
            "description": "The comparison operator.",
            "enum": [
              "LESS_THAN_OR_EQUAL_TO"
            ]
          },
          "threshold": {
            "type": "number",
            "description": "The value of the threshold associated with the metric. The threshold values has defined minimums depending on the metric names in the following table:\n|                  MetricName            | Minimum of `threshold` Value  |\n|----------------------------------------|-----------------------------------|\n|COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS  | 1                                 |\n|COST_PER_ORDER                          | 3                                 |\n|COST_PER_CLICK                          | 0.5                               |",
            "format": "double",
            "example": 1.5
          }
        },
        "required": [
          "metricName",
          "comparisonOperator",
          "threshold"
        ]
      },
      "BaseOptimizationRule": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "The state of the optimization rule.",
            "enum": [
              "enabled",
              "paused [COMING LATER]"
            ]
          },
          "ruleName": {
            "type": "string",
            "description": "The name of the optimization rule."
          },
          "ruleConditions": {
            "type": "array",
            "description": "A list of rule conditions that define the advertiser's intent for the outcome of the rule. The rule uses 'AND' logic to combine every condition in this list, and will validate the combination when the rule is created or updated.",
            "minItems": 1,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/RuleCondition"
            }
          }
        }
      },
      "OptimizationRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseOptimizationRule"
          },
          {
            "type": "object",
            "properties": {
              "ruleId": {
                "$ref": "#/components/schemas/RuleId"
              }
            }
          }
        ]
      },
      "GetOptimizationRuleResponse": {
        "type": "object",
        "properties": {
          "optimizationRule": {
            "$ref": "#/components/schemas/OptimizationRule"
          },
          "adGroupIds": {
            "type": "array",
            "description": "A list of adGroup identifiers that the optimization rule associates with.",
            "minItems": 1,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/AdGroupId"
            }
          }
        }
      },
      "CreateOptimizationRule": {
        "example": {
          "state": "enabled",
          "ruleName": "Optimization Rule Name",
          "ruleConditions": {
            "metricName": "COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS",
            "comparisonOperator": "LESS_THAN_OR_EQUAL_TO",
            "threshold": 1.5
          }
        },
        "required": [
          "state",
          "ruleConditions"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseOptimizationRule"
          }
        ]
      },
      "UpdateOptimizationRule": {
        "required": [
          "ruleId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseOptimizationRule"
          },
          {
            "type": "object",
            "properties": {
              "ruleId": {
                "$ref": "#/components/schemas/RuleId"
              }
            }
          }
        ]
      },
      "OptimizationRuleResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "description": {
            "type": "string",
            "description": "A human-readable description of the response."
          },
          "ruleId": {
            "$ref": "#/components/schemas/RuleId"
          }
        }
      },
      "CreateAssociatedOptimizationRulesRequest": {
        "type": "object",
        "properties": {
          "optimizationRuleIds": {
            "type": "array",
            "description": "A list of optimization rule identifiers.",
            "minItems": 1,
            "maxItems": 1,
            "items": {
              "$ref": "#/components/schemas/RuleId"
            }
          }
        }
      },
      "SDForecastRequest": {
        "type": "object",
        "description": "Request payload for SD forecasting. Below are required and optional fields. Fields not listed will not impact forecast results.\n|Field              |Object            |Required|\n|-------------------|------------------|--------|\n|startDate          |Campaign          |required|\n|endDate            |Campaign          |optional|\n|bidOptimization    |AdGroup           |required|\n|defaultBid         |AdGroup           |optional|\n|asin               |ProductAds        |required for vendors|\n|sku                |ProductAds        |required for sellers|\n|bid                |TargetingClauses  |required when defaultBid is not set|\n|expression         |TargetingClauses  |required|",
        "required": [
          "campaign",
          "adGroup",
          "productAds",
          "targetingClauses"
        ],
        "properties": {
          "campaign": {
            "$ref": "#/components/schemas/Campaign"
          },
          "adGroup": {
            "$ref": "#/components/schemas/AdGroup"
          },
          "productAds": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/ProductAd"
            }
          },
          "targetingClauses": {
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of SD targeting clauses.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetingClause"
            }
          },
          "negativeTargetingClauses": {
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of SD negative targeting clauses.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NegativeTargetingClause"
            }
          }
        }
      },
      "SDForecastResponse": {
        "description": "Response to a request for SD forecasting.",
        "type": "object",
        "properties": {
          "bidOptimization": {
            "type": "string"
          },
          "lifetimeForecasts": {
            "description": "Forecasts for campaign start date and end date. Default end date is start date plus 7 days.",
            "type": "array",
            "minItems": 1,
            "maxItems": 4,
            "items": {
              "$ref": "#/components/schemas/Forecast"
            }
          },
          "weeklyForecasts": {
            "description": "Weekly average forecasts.",
            "type": "array",
            "minItems": 1,
            "maxItems": 4,
            "items": {
              "$ref": "#/components/schemas/Forecast"
            }
          },
          "dailyForecasts": {
            "description": "Daily average forecasts.",
            "type": "array",
            "minItems": 1,
            "maxItems": 4,
            "items": {
              "$ref": "#/components/schemas/Forecast"
            }
          }
        }
      },
      "Forecast": {
        "description": "Forecast impressions, clicks, reach, or conversions.",
        "type": "object",
        "properties": {
          "metric": {
            "type": "string",
            "description": "Describes which metric is forecasted.\n|Name|Description|\n|-----------|------------------------|\n|IMPRESSIONS|Available impressions|\n|REACH      |[Preview only] Delivered viewable impressions|\n|CLICKS     |[Preview only] Delivered page visits|\n|CONVERSIONS|[Preview only] Delivered conversions|",
            "enum": [
              "IMPRESSIONS",
              "REACH",
              "CLICKS",
              "CONVERSIONS"
            ]
          },
          "value": {
            "$ref": "#/components/schemas/ForecastRange"
          }
        }
      },
      "ForecastRange": {
        "description": "Forecast range values.",
        "properties": {
          "min": {
            "type": "integer",
            "format": "int64"
          },
          "max": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SDForecastErrorResponse": {
        "properties": {
          "code": {
            "type": "string",
            "description": "The HTTP status code of the response."
          },
          "details": {
            "type": "string",
            "description": "A human-readable description of the response."
          }
        }
      },
      "CreateSDBudgetRulesRequest": {
        "type": "object",
        "properties": {
          "budgetRulesDetails": {
            "maxItems": 25,
            "description": "A list of budget rule details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDBudgetRuleDetails"
            }
          }
        }
      },
      "CreateBudgetRulesResponse": {
        "type": "object",
        "properties": {
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetRuleResponse"
            }
          }
        }
      },
      "BudgetRuleError": {
        "description": "The Error Response Object.",
        "type": "object",
        "properties": {
          "code": {
            "description": "An enumerated error code for machine use.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the response.",
            "type": "string"
          }
        }
      },
      "SDBudgetHistory": {
        "type": "object",
        "properties": {
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDRuleBasedBudget"
            }
          }
        }
      },
      "SDRuleBasedBudget": {
        "type": "object",
        "properties": {
          "executionTime": {
            "format": "int64",
            "description": "Epoch time of budget rule execution.",
            "type": "number"
          },
          "appliedRule": {
            "$ref": "#/components/schemas/SDBudgetRule"
          },
          "ruleBasedBudgetValue": {
            "description": "The budget value.",
            "type": "number"
          },
          "dailyBudgetValue": {
            "description": "The daily budget value.",
            "type": "number"
          },
          "performanceMetric": {
            "$ref": "#/components/schemas/PerformanceMetricValue"
          }
        }
      },
      "GetSDBudgetRuleResponse": {
        "type": "object",
        "properties": {
          "budgetRule": {
            "$ref": "#/components/schemas/SDBudgetRule"
          }
        }
      },
      "GetSDBudgetRulesForAdvertiserResponse": {
        "type": "object",
        "properties": {
          "budgetRulesForAdvertiserResponse": {
            "minItems": 0,
            "maxItems": 30,
            "description": "A list of rules created by the advertiser.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDBudgetRule"
            }
          },
          "nextToken": {
            "description": "To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.",
            "type": "string"
          }
        }
      },
      "UpdateSDBudgetRulesRequest": {
        "description": "Request object for updating budget rule for SD campaign",
        "type": "object",
        "properties": {
          "budgetRulesDetails": {
            "maxItems": 25,
            "description": "A list of budget rule details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDBudgetRule"
            }
          }
        }
      },
      "UpdateBudgetRulesResponse": {
        "type": "object",
        "properties": {
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetRuleResponse"
            }
          }
        }
      },
      "SDBudgetRuleDetails": {
        "description": "Object representing details of a budget rule for SD campaign",
        "type": "object",
        "properties": {
          "duration": {
            "$ref": "#/components/schemas/RuleDuration"
          },
          "recurrence": {
            "$ref": "#/components/schemas/Recurrence"
          },
          "ruleType": {
            "$ref": "#/components/schemas/SDRuleType"
          },
          "budgetIncreaseBy": {
            "$ref": "#/components/schemas/budgetIncreaseBy"
          },
          "name": {
            "description": "The budget rule name. Required to be unique within a campaign.",
            "type": "string",
            "maxLength": 355
          },
          "performanceMeasureCondition": {
            "$ref": "#/components/schemas/PerformanceMeasureCondition"
          }
        }
      },
      "BudgetRuleResponse": {
        "type": "object",
        "properties": {
          "code": {
            "description": "An enumerated success or error code for machine use.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the error, if unsuccessful",
            "type": "string"
          },
          "ruleId": {
            "description": "The rule identifier.",
            "type": "string"
          },
          "associatedCampaignIds": {
            "type": "array",
            "items": {
              "description": "The campaign identifier for which rule based budget may get updated",
              "type": "string"
            }
          }
        }
      },
      "SDBudgetRule": {
        "type": "object",
        "required": [
          "ruleId"
        ],
        "properties": {
          "ruleState": {
            "$ref": "#/components/schemas/state"
          },
          "lastUpdatedDate": {
            "format": "int64",
            "description": "Epoch time of budget rule update. Read-only.",
            "type": "number"
          },
          "createdDate": {
            "format": "int64",
            "description": "Epoch time of budget rule creation. Read-only.",
            "type": "number"
          },
          "ruleDetails": {
            "$ref": "#/components/schemas/SDBudgetRuleDetails"
          },
          "ruleId": {
            "description": "The budget rule identifier.",
            "type": "string"
          },
          "ruleStatus": {
            "description": "The budget rule status. Read-only.",
            "type": "string"
          }
        }
      },
      "state": {
        "description": "The budget rule state.",
        "type": "string",
        "enum": [
          "ACTIVE",
          "PAUSED"
        ]
      },
      "PerformanceMetricValue": {
        "description": "An object giving the name of the performance metric and its value when the rule was evaluated",
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the performance metric",
            "type": "string"
          },
          "value": {
            "format": "double",
            "description": "Value of the performance metric",
            "type": "number"
          }
        }
      },
      "RuleDuration": {
        "type": "object",
        "properties": {
          "eventTypeRuleDuration": {
            "$ref": "#/components/schemas/EventTypeRuleDuration"
          },
          "dateRangeTypeRuleDuration": {
            "$ref": "#/components/schemas/DateRangeTypeRuleDuration"
          }
        }
      },
      "Recurrence": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/RecurrenceType"
          },
          "daysOfWeek": {
            "description": "Object representing days of the week for weekly type rule. It is not required for daily recurrence type",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DayOfWeek"
            }
          }
        }
      },
      "SDRuleType": {
        "description": "The type of budget rule. SCHEDULE: A budget rule based on a start and end date. PERFORMANCE: A budget rule based on advertising performance criteria.",
        "type": "string",
        "enum": [
          "SCHEDULE",
          "PERFORMANCE"
        ]
      },
      "budgetIncreaseBy": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/BudgetChangeType"
          },
          "value": {
            "format": "double",
            "description": "The budget value.",
            "type": "number"
          }
        }
      },
      "PerformanceMeasureCondition": {
        "type": "object",
        "required": [
          "comparisonOperator",
          "metricName",
          "threshold"
        ],
        "properties": {
          "metricName": {
            "$ref": "#/components/schemas/PerformanceMetric"
          },
          "comparisonOperator": {
            "$ref": "#/components/schemas/ComparisonOperator"
          },
          "threshold": {
            "format": "double",
            "description": "The performance threshold value.",
            "type": "number"
          }
        }
      },
      "EventTypeRuleDuration": {
        "description": "Object representing event type rule duration.",
        "type": "object",
        "required": [
          "eventId"
        ],
        "properties": {
          "eventId": {
            "description": "The event identifier. This value is available from the budget rules recommendation API.",
            "type": "string"
          },
          "endDate": {
            "description": "The event end date in YYYYMMDD format. Read-only.",
            "type": "string"
          },
          "eventName": {
            "description": "The event name. Read-only.",
            "type": "string"
          },
          "startDate": {
            "description": "The event start date in YYYYMMDD format. Read-only. Note that this field is present only for announced events.",
            "type": "string"
          }
        }
      },
      "DateRangeTypeRuleDuration": {
        "description": "Object representing date range type rule duration.",
        "type": "object",
        "required": [
          "startDate"
        ],
        "properties": {
          "endDate": {
            "description": "The end date of the budget rule in YYYYMMDD format. The end date is inclusive. Required to be equal or greater than `startDate`.",
            "type": "string"
          },
          "startDate": {
            "description": "The start date of the budget rule in YYYYMMDD format. The start date is inclusive. Required to be greater than or equal to current date.",
            "type": "string"
          }
        }
      },
      "RecurrenceType": {
        "description": "depicts the type of recurrence",
        "type": "string",
        "enum": [
          "DAILY",
          "WEEKLY"
        ]
      },
      "DayOfWeek": {
        "description": "The day of the week.",
        "type": "string",
        "enum": [
          "MONDAY",
          "TUESDAY",
          "WEDNESDAY",
          "THURSDAY",
          "FRIDAY",
          "SATURDAY",
          "SUNDAY"
        ]
      },
      "BudgetChangeType": {
        "description": "The value by which to update the budget of the budget rule.",
        "type": "string",
        "enum": [
          "PERCENT"
        ]
      },
      "PerformanceMetric": {
        "description": "The advertising performance metric.",
        "type": "string",
        "enum": [
          "ACOS",
          "CTR",
          "CVR",
          "ROAS"
        ]
      },
      "ComparisonOperator": {
        "description": "The comparison operator.",
        "type": "string",
        "enum": [
          "GREATER_THAN",
          "LESS_THAN",
          "LESS_THAN_OR_EQUAL_TO",
          "GREATER_THAN_OR_EQUAL_TO"
        ]
      },
      "BudgetUsageCampaignRequest": {
        "type": "object",
        "properties": {
          "campaignIds": {
            "minItems": 1,
            "maxItems": 100,
            "description": "A list of campaign IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BudgetUsageCampaignResponse": {
        "type": "object",
        "properties": {
          "success": {
            "description": "List of budget usage percentages that were successfully pulled",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetUsageCampaign"
            }
          },
          "error": {
            "description": "List of budget usage percentages that failed to pull",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetUsageCampaignBatchError"
            }
          }
        }
      },
      "BudgetUsageError": {
        "description": "The Error Response Object.",
        "type": "object",
        "properties": {
          "code": {
            "description": "An enumerated error code for machine use.",
            "type": "string"
          },
          "details": {
            "description": "A human-readable description of the response.",
            "type": "string"
          }
        }
      },
      "BudgetUsageCampaign": {
        "type": "object",
        "properties": {
          "budgetUsagePercent": {
            "description": "Budget usage percentage (spend / available budget) for the given budget policy.",
            "type": "number"
          },
          "campaignId": {
            "description": "ID of requested resource",
            "type": "string"
          },
          "usageUpdatedTimestamp": {
            "format": "date-time",
            "description": "Last evaluation time for budget usage",
            "type": "string"
          },
          "index": {
            "description": "An index to maintain order of the campaignIds",
            "type": "number"
          },
          "budget": {
            "description": "Budget amount of resource requested",
            "type": "number"
          }
        }
      },
      "BudgetUsageCampaignBatchError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "An enumerated error code for machine use.",
            "type": "string"
          },
          "campaignId": {
            "description": "ID of requested resource",
            "type": "string"
          },
          "index": {
            "description": "An index to maintain order of the campaignIds",
            "type": "number"
          },
          "details": {
            "description": "A human-readable description of the response.",
            "type": "string"
          }
        }
      },
      "RuleBasedBudget": {
        "type": "object",
        "properties": {
          "isProcessing": {
            "type": "boolean"
          },
          "applicableRuleName": {
            "type": "string"
          },
          "value": {
            "format": "double",
            "type": "number"
          },
          "applicableRuleId": {
            "type": "string"
          }
        }
      },
      "LocationExpressionId": {
        "type": "integer",
        "format": "int64",
        "description": "The identifier of the location."
      },
      "BaseLocation": {
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "enabled"
            ]
          }
        }
      },
      "Location": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseLocation"
          },
          {
            "type": "object",
            "properties": {
              "locationExpressionId": {
                "$ref": "#/components/schemas/LocationExpressionId"
              },
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "expression": {
                "type": "array",
                "description": "The Location definition.",
                "items": {
                  "$ref": "#/components/schemas/LocationExpression"
                }
              },
              "resolvedExpression": {
                "type": "array",
                "description": "The human-readable location definition.",
                "items": {
                  "$ref": "#/components/schemas/ResolvedLocationExpression"
                }
              }
            }
          }
        ]
      },
      "LocationExpression": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/LocationPredicate"
          },
          "value": {
            "type": "string",
            "description": "The location identifier. Currently, this can correspond to either a 'city', 'state', 'dma', 'postal code', or 'country'. Its value is discoverable using the GET /locations API.",
            "example": "amzn1.ad-geo.XHvCjcKHXmJ7woVowo7CjmvCjcKWbMKHwp3CsGvCk8KrcmstQ2l0eQ=="
          }
        }
      },
      "ResolvedLocationExpression": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/LocationPredicate"
          },
          "value": {
            "type": "string",
            "description": "The human-readable location name.",
            "example": "New York City, New York, US"
          }
        }
      },
      "LocationPredicate": {
        "type": "string",
        "description": "The location category.",
        "enum": [
          "location"
        ]
      },
      "CreateLocation": {
        "required": [
          "adGroupId",
          "expression",
          "state"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseLocation"
          },
          {
            "type": "object",
            "properties": {
              "adGroupId": {
                "$ref": "#/components/schemas/AdGroupId"
              },
              "expression": {
                "type": "array",
                "description": "The location definition.",
                "items": {
                  "$ref": "#/components/schemas/LocationExpression"
                }
              }
            }
          }
        ]
      }
    },
    "parameters": {
      "clientHeader": {
        "name": "Amazon-Advertising-API-ClientId",
        "in": "header",
        "description": "The identifier of a client associated with a \"Login with Amazon\" account.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "profileHeader": {
        "name": "Amazon-Advertising-API-Scope",
        "in": "header",
        "description": "The identifier of a profile associated with the advertiser account. Use `GET` method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "oauth2AuthorizationCode": {
        "type": "oauth2",
        "description": "Login with Amazon. For more information see [Login with Amazon authorization code grant](https://developer.amazon.com/docs/login-with-amazon/authorization-code-grant.html).",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://www.amazon.com/ap/oa",
            "tokenUrl": "https://api.amazon.com/auth/o2/token",
            "scopes": {
              "cpc_advertising:campaign_management": "Modify your advertising campaigns and access performance data"
            }
          }
        }
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "oauth2AuthorizationCode": [
        "cpc_advertising:campaign_management"
      ]
    },
    {
      "bearerAuth": []
    }
  ]
}