/* tslint:disable */
/* eslint-disable */
/**
 * Change history
 * Provides information about changes made to campaigns, adgroups, ads, etc
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { createRequestFunction } from "../../helpers";

/**
 * The error response object.
 * @export
 * @interface HistoryError
 */
export interface HistoryError {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof HistoryError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof HistoryError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface HistoryEventType
 */
export interface HistoryEventType {
    /**
     * | Filter | Entity Types | |------------|----------| | BUDGET_AMOUNT | CAMPAIGN | | IN_BUDGET | CAMPAIGN | | STATUS | CAMPAIGN, AD_GROUP, AD, KEYWORD, PRODUCT_TARGET, NEGATIVE_KEYWORD | | END_DATE | CAMPAIGN | | START_DATE | CAMPAIGN | | PLACEMENT_GROUP | CAMPAIGN| | SMART_BIDDING_STRATEGY | CAMPAIGN | | DEFAULT_BID_AMOUNT | AD_GROUP | | NAME | CAMPAIGN, AD_GROUP |
     * @type {Array<string>}
     * @memberof HistoryEventType
     */
    filters?: Array<HistoryEventTypeFiltersEnum>;
    /**
     * max of 10 event types. IDs here belong to the EventType. For example, if requesting CAMPAGIN as the eventType, these are campaignIds.
     * @type {Array<string>}
     * @memberof HistoryEventType
     */
    eventTypeIds?: Array<string>;
    /**
     * maximum of 10 parents
     * @type {Array<HistoryEventTypeParents>}
     * @memberof HistoryEventType
     */
    parents?: Array<HistoryEventTypeParents>;
}

/**
    * @export
    * @enum {string}
    */
export enum HistoryEventTypeFiltersEnum {
    BudgetAmount = 'BUDGET_AMOUNT',
    InBudget = 'IN_BUDGET',
    Status = 'STATUS',
    EndDate = 'END_DATE',
    StartDate = 'START_DATE',
    PlacementGroup = 'PLACEMENT_GROUP',
    SmartBiddingStrategy = 'SMART_BIDDING_STRATEGY',
    DefaultBidAmount = 'DEFAULT_BID_AMOUNT',
    Name = 'NAME'
}

/**
 * 
 * @export
 * @interface HistoryEventTypeParents
 */
export interface HistoryEventTypeParents {
    /**
     * 
     * @type {string}
     * @memberof HistoryEventTypeParents
     */
    campaignId?: string;
    /**
     * If true, retrieves events which belong to the associated advertiser
     * @type {boolean}
     * @memberof HistoryEventTypeParents
     */
    useProfileIdAdvertiser?: boolean;
    /**
     * 
     * @type {string}
     * @memberof HistoryEventTypeParents
     */
    adGroupId?: string;
}
/**
 * 
 * @export
 * @interface HistoryEventTypes
 */
export interface HistoryEventTypes {
    /**
     * 
     * @type {HistoryEventType}
     * @memberof HistoryEventTypes
     */
    AD?: HistoryEventType;
    /**
     * 
     * @type {HistoryEventType}
     * @memberof HistoryEventTypes
     */
    NEGATIVE_KEYWORD?: HistoryEventType;
    /**
     * 
     * @type {HistoryEventType}
     * @memberof HistoryEventTypes
     */
    PRODUCT_TARGETING?: HistoryEventType;
    /**
     * 
     * @type {HistoryEventType}
     * @memberof HistoryEventTypes
     */
    KEYWORD?: HistoryEventType;
    /**
     * 
     * @type {HistoryEventType}
     * @memberof HistoryEventTypes
     */
    AD_GROUP?: HistoryEventType;
    /**
     * 
     * @type {HistoryEventType}
     * @memberof HistoryEventTypes
     */
    CAMPAIGN?: HistoryEventType;
}
/**
 * 
 * @export
 * @interface HistorySortParameter
 */
export interface HistorySortParameter {
    /**
     * 
     * @type {string}
     * @memberof HistorySortParameter
     */
    key?: HistorySortParameterKeyEnum;
    /**
     * 
     * @type {string}
     * @memberof HistorySortParameter
     */
    direction?: HistorySortParameterDirectionEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum HistorySortParameterKeyEnum {
    Date = 'DATE'
}
/**
    * @export
    * @enum {string}
    */
export enum HistorySortParameterDirectionEnum {
    Asc = 'ASC',
    Desc = 'DESC'
}

/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * Max 90 days of history.
     * @type {number}
     * @memberof InlineObject
     */
    fromDate: number;
    /**
     * token from previous response to get next set of data.
     * @type {string}
     * @memberof InlineObject
     */
    nextToken?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject
     */
    toDate: number;
    /**
     * Mutually exclusive with \'nextToken\'. Max results with pageOffset is 10000. Use nextToken instead for more results.
     * @type {number}
     * @memberof InlineObject
     */
    pageOffset?: number;
    /**
     * Requested number of results. Default 100. Minimum 50. Maximum 200.
     * @type {number}
     * @memberof InlineObject
     */
    count?: number;
    /**
     * 
     * @type {HistorySortParameter}
     * @memberof InlineObject
     */
    sort?: HistorySortParameter;
    /**
     * 
     * @type {HistoryEventTypes}
     * @memberof InlineObject
     */
    eventTypes: HistoryEventTypes;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * total results matching the query. Only provided for pageOffset queries and capped at 10000.
     * @type {number}
     * @memberof InlineResponse200
     */
    totalResults?: number;
    /**
     * returned if not using pageOffset. Can be used in the request to request the next set of results.
     * @type {string}
     * @memberof InlineResponse200
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof InlineResponse200
     */
    events?: Array<object>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns history of changes for provided event sources that match the filters and time ranges specified. Only events that belong to the authenticated Advertiser can be queried. All times will be in UTC Epoch format. This API accepts identifiers in either the alphamumeric format (default), or the numeric format. If numeric IDs are supplied, then numeric IDs will be returned otherwise, alphanumeric IDs are returned.
         * @summary History of entity changes.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory: async (inlineObject: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject' is not null or undefined
            assertParamExists('getHistory', 'inlineObject', inlineObject)
            const localVarPath = `/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns history of changes for provided event sources that match the filters and time ranges specified. Only events that belong to the authenticated Advertiser can be queried. All times will be in UTC Epoch format. This API accepts identifiers in either the alphamumeric format (default), or the numeric format. If numeric IDs are supplied, then numeric IDs will be returned otherwise, alphanumeric IDs are returned.
         * @summary History of entity changes.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistory(inlineObject: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistory(inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Returns history of changes for provided event sources that match the filters and time ranges specified. Only events that belong to the authenticated Advertiser can be queried. All times will be in UTC Epoch format. This API accepts identifiers in either the alphamumeric format (default), or the numeric format. If numeric IDs are supplied, then numeric IDs will be returned otherwise, alphanumeric IDs are returned.
         * @summary History of entity changes.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory(inlineObject: InlineObject, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getHistory(inlineObject, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getHistory operation in DefaultApi.
 * @export
 * @interface DefaultApiGetHistoryRequest
 */
export interface DefaultApiGetHistoryRequest {
    /**
     * 
     * @type {InlineObject}
     * @memberof DefaultApiGetHistory
     */
    readonly inlineObject: InlineObject
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Returns history of changes for provided event sources that match the filters and time ranges specified. Only events that belong to the authenticated Advertiser can be queried. All times will be in UTC Epoch format. This API accepts identifiers in either the alphamumeric format (default), or the numeric format. If numeric IDs are supplied, then numeric IDs will be returned otherwise, alphanumeric IDs are returned.
     * @summary History of entity changes.
     * @param {DefaultApiGetHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHistory(requestParameters: DefaultApiGetHistoryRequest, options?: any) {
        return DefaultApiFp(this.configuration).getHistory(requestParameters.inlineObject, options).then((request) => request(this.axios, this.basePath));
    }
}


