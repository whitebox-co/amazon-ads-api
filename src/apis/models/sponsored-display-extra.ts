/* tslint:disable */
/* eslint-disable */
/**
 * Sponsored Display
 * Sponsored Display Snapshot API to get the status of Snapshot file.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { createRequestFunction } from "../../helpers";

/**
 * Asin component which needs to be pre moderated.
 * @export
 * @interface AsinComponent
 */
export interface AsinComponent {
    /**
     * Type of the asin component.
     * @type {string}
     * @memberof AsinComponent
     */
    componentType: AsinComponentComponentTypeEnum;
    /**
     * Asin id to be pre moderated.
     * @type {string}
     * @memberof AsinComponent
     */
    asin: string;
    /**
     * Id of the component. The same will be returned as part of the response as well. This can be used to uniquely identify the component from the pre moderation response.
     * @type {string}
     * @memberof AsinComponent
     */
    id: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AsinComponentComponentTypeEnum {
    LandingAsin = 'LANDING_ASIN',
    ProductAsin = 'PRODUCT_ASIN'
}

/**
 * Pre-moderation result for an Asin component
 * @export
 * @interface AsinComponentResponse
 */
export interface AsinComponentResponse {
    /**
     * The pre-moderation status of the component.
     * @type {string}
     * @memberof AsinComponentResponse
     */
    preModerationStatus?: AsinComponentResponsePreModerationStatusEnum;
    /**
     * Type of Asin component.
     * @type {string}
     * @memberof AsinComponentResponse
     */
    componentType?: AsinComponentResponseComponentTypeEnum;
    /**
     * A list of policy violations for the component that were detected during pre moderation. Note that this field is present in the response only when preModerationStatus is set to REJECTED.
     * @type {Array<AsinPolicyViolation>}
     * @memberof AsinComponentResponse
     */
    policyViolations?: Array<AsinPolicyViolation>;
    /**
     * Pre-moderated Asin Id.
     * @type {string}
     * @memberof AsinComponentResponse
     */
    asin?: string;
    /**
     * Id of the component. This is the same id sent as part of the request. This can be used to uniquely identify the component.
     * @type {string}
     * @memberof AsinComponentResponse
     */
    id?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AsinComponentResponsePreModerationStatusEnum {
    Rejected = 'REJECTED',
    Approved = 'APPROVED',
    Failed = 'FAILED',
    RetryableFailure = 'RETRYABLE_FAILURE'
}
/**
    * @export
    * @enum {string}
    */
export enum AsinComponentResponseComponentTypeEnum {
    LandingAsin = 'LANDING_ASIN',
    ProductAsin = 'PRODUCT_ASIN'
}

/**
 * 
 * @export
 * @interface AsinPolicyViolation
 */
export interface AsinPolicyViolation {
    /**
     * A human-readable description of the policy.
     * @type {string}
     * @memberof AsinPolicyViolation
     */
    policyDescription?: string;
    /**
     * A policy violation code.
     * @type {string}
     * @memberof AsinPolicyViolation
     */
    name?: string;
    /**
     * Type of policy violation.
     * @type {string}
     * @memberof AsinPolicyViolation
     */
    type?: AsinPolicyViolationTypeEnum;
    /**
     * Address of the policy documentation. Follow the link to learn more about the specified policy.
     * @type {string}
     * @memberof AsinPolicyViolation
     */
    policyLinkUrl?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AsinPolicyViolationTypeEnum {
    Warning = 'WARNING',
    Rejected = 'REJECTED'
}

/**
 * 
 * @export
 * @interface AssociatedBudgetRuleResponse
 */
export interface AssociatedBudgetRuleResponse {
    /**
     * An enumerated success or error code for machine use.
     * @type {string}
     * @memberof AssociatedBudgetRuleResponse
     */
    code?: string;
    /**
     * A human-readable description of the error, if unsuccessful
     * @type {string}
     * @memberof AssociatedBudgetRuleResponse
     */
    details?: string;
    /**
     * The budget rule identifier.
     * @type {string}
     * @memberof AssociatedBudgetRuleResponse
     */
    ruleId?: string;
}
/**
 * 
 * @export
 * @interface AssociatedCampaign
 */
export interface AssociatedCampaign {
    /**
     * The campaign identifier.
     * @type {string}
     * @memberof AssociatedCampaign
     */
    campaignId: string;
    /**
     * The budget rule evaluation status for this campaign. Read-only.
     * @type {string}
     * @memberof AssociatedCampaign
     */
    ruleStatus: string;
    /**
     * The campaign name.
     * @type {string}
     * @memberof AssociatedCampaign
     */
    campaignName: string;
}
/**
 * The value by which to update the budget of the budget rule.
 * @export
 * @enum {string}
 */

export enum BudgetChangeType {
    Percent = 'PERCENT'
}

/**
 * 
 * @export
 * @interface BudgetIncreaseBy
 */
export interface BudgetIncreaseBy {
    /**
     * 
     * @type {BudgetChangeType}
     * @memberof BudgetIncreaseBy
     */
    type: BudgetChangeType;
    /**
     * The budget value.
     * @type {number}
     * @memberof BudgetIncreaseBy
     */
    value: number;
}
/**
 * The Error Response Object.
 * @export
 * @interface BudgetRuleError
 */
export interface BudgetRuleError {
    /**
     * An enumerated error code for machine use.
     * @type {string}
     * @memberof BudgetRuleError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof BudgetRuleError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface BudgetRuleResponse
 */
export interface BudgetRuleResponse {
    /**
     * An enumerated success or error code for machine use.
     * @type {string}
     * @memberof BudgetRuleResponse
     */
    code?: string;
    /**
     * A human-readable description of the error, if unsuccessful
     * @type {string}
     * @memberof BudgetRuleResponse
     */
    details?: string;
    /**
     * The rule identifier.
     * @type {string}
     * @memberof BudgetRuleResponse
     */
    ruleId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BudgetRuleResponse
     */
    associatedCampaignIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface BudgetUsageCampaign
 */
export interface BudgetUsageCampaign {
    /**
     * Budget usage percentage (spend / available budget) for the given budget policy.
     * @type {number}
     * @memberof BudgetUsageCampaign
     */
    budgetUsagePercent?: number;
    /**
     * ID of requested resource
     * @type {string}
     * @memberof BudgetUsageCampaign
     */
    campaignId?: string;
    /**
     * Last evaluation time for budget usage
     * @type {string}
     * @memberof BudgetUsageCampaign
     */
    usageUpdatedTimestamp?: string;
    /**
     * An index to maintain order of the campaignIds
     * @type {number}
     * @memberof BudgetUsageCampaign
     */
    index?: number;
    /**
     * Budget amount of resource requested
     * @type {number}
     * @memberof BudgetUsageCampaign
     */
    budget?: number;
}
/**
 * 
 * @export
 * @interface BudgetUsageCampaignBatchError
 */
export interface BudgetUsageCampaignBatchError {
    /**
     * An enumerated error code for machine use.
     * @type {string}
     * @memberof BudgetUsageCampaignBatchError
     */
    code?: string;
    /**
     * ID of requested resource
     * @type {string}
     * @memberof BudgetUsageCampaignBatchError
     */
    campaignId?: string;
    /**
     * An index to maintain order of the campaignIds
     * @type {number}
     * @memberof BudgetUsageCampaignBatchError
     */
    index?: number;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof BudgetUsageCampaignBatchError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface BudgetUsageCampaignRequest
 */
export interface BudgetUsageCampaignRequest {
    /**
     * A list of campaign IDs
     * @type {Array<string>}
     * @memberof BudgetUsageCampaignRequest
     */
    campaignIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface BudgetUsageCampaignResponse
 */
export interface BudgetUsageCampaignResponse {
    /**
     * List of budget usage percentages that were successfully pulled
     * @type {Array<BudgetUsageCampaign>}
     * @memberof BudgetUsageCampaignResponse
     */
    success?: Array<BudgetUsageCampaign>;
    /**
     * List of budget usage percentages that failed to pull
     * @type {Array<BudgetUsageCampaignBatchError>}
     * @memberof BudgetUsageCampaignResponse
     */
    error?: Array<BudgetUsageCampaignBatchError>;
}
/**
 * The Error Response Object.
 * @export
 * @interface BudgetUsageError
 */
export interface BudgetUsageError {
    /**
     * An enumerated error code for machine use.
     * @type {string}
     * @memberof BudgetUsageError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof BudgetUsageError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface BudgetUsagePortfolio
 */
export interface BudgetUsagePortfolio {
    /**
     * Budget usage percentage (spend / available budget) for the given budget policy.
     * @type {number}
     * @memberof BudgetUsagePortfolio
     */
    budgetUsagePercent?: number;
    /**
     * ID of requested resource
     * @type {string}
     * @memberof BudgetUsagePortfolio
     */
    portfolioId?: string;
    /**
     * Last evaluation time for budget usage
     * @type {string}
     * @memberof BudgetUsagePortfolio
     */
    usageUpdatedTimestamp?: string;
    /**
     * An index to maintain order of the portfolioIds
     * @type {number}
     * @memberof BudgetUsagePortfolio
     */
    index?: number;
    /**
     * Budget amount of resource requested
     * @type {number}
     * @memberof BudgetUsagePortfolio
     */
    budget?: number;
}
/**
 * 
 * @export
 * @interface BudgetUsagePortfolioBatchError
 */
export interface BudgetUsagePortfolioBatchError {
    /**
     * ID of requested resource
     * @type {string}
     * @memberof BudgetUsagePortfolioBatchError
     */
    portfolioId?: string;
    /**
     * An enumerated error code for machine use.
     * @type {string}
     * @memberof BudgetUsagePortfolioBatchError
     */
    code?: string;
    /**
     * An index to maintain order of the portfolioIds
     * @type {number}
     * @memberof BudgetUsagePortfolioBatchError
     */
    index?: number;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof BudgetUsagePortfolioBatchError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface BudgetUsagePortfolioRequest
 */
export interface BudgetUsagePortfolioRequest {
    /**
     * A list of portfolio IDs.
     * @type {Array<string>}
     * @memberof BudgetUsagePortfolioRequest
     */
    portfolioIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface BudgetUsagePortfolioResponse
 */
export interface BudgetUsagePortfolioResponse {
    /**
     * List of budget usage percentages that were successfully pulled
     * @type {Array<BudgetUsagePortfolio>}
     * @memberof BudgetUsagePortfolioResponse
     */
    success?: Array<BudgetUsagePortfolio>;
    /**
     * List of budget usage percentages that failed to pull
     * @type {Array<BudgetUsagePortfolioBatchError>}
     * @memberof BudgetUsagePortfolioResponse
     */
    error?: Array<BudgetUsagePortfolioBatchError>;
}
/**
 * The comparison operator.
 * @export
 * @enum {string}
 */

export enum ComparisonOperator {
    GreaterThan = 'GREATER_THAN',
    LessThan = 'LESS_THAN',
    LessThanOrEqualTo = 'LESS_THAN_OR_EQUAL_TO',
    GreaterThanOrEqualTo = 'GREATER_THAN_OR_EQUAL_TO'
}

/**
 * 
 * @export
 * @interface CreateAssociatedBudgetRulesRequest
 */
export interface CreateAssociatedBudgetRulesRequest {
    /**
     * A list of budget rule identifiers.
     * @type {Array<string>}
     * @memberof CreateAssociatedBudgetRulesRequest
     */
    budgetRuleIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateAssociatedBudgetRulesResponse
 */
export interface CreateAssociatedBudgetRulesResponse {
    /**
     * 
     * @type {Array<AssociatedBudgetRuleResponse>}
     * @memberof CreateAssociatedBudgetRulesResponse
     */
    responses?: Array<AssociatedBudgetRuleResponse>;
}
/**
 * 
 * @export
 * @interface CreateBudgetRulesResponse
 */
export interface CreateBudgetRulesResponse {
    /**
     * 
     * @type {Array<BudgetRuleResponse>}
     * @memberof CreateBudgetRulesResponse
     */
    responses?: Array<BudgetRuleResponse>;
}
/**
 * 
 * @export
 * @interface CreateSBBudgetRulesRequest
 */
export interface CreateSBBudgetRulesRequest {
    /**
     * A list of budget rule details.
     * @type {Array<SBBudgetRuleDetails>}
     * @memberof CreateSBBudgetRulesRequest
     */
    budgetRulesDetails?: Array<SBBudgetRuleDetails>;
}
/**
 * 
 * @export
 * @interface CreateSDBudgetRulesRequest
 */
export interface CreateSDBudgetRulesRequest {
    /**
     * A list of budget rule details.
     * @type {Array<SDBudgetRuleDetails>}
     * @memberof CreateSDBudgetRulesRequest
     */
    budgetRulesDetails?: Array<SDBudgetRuleDetails>;
}
/**
 * 
 * @export
 * @interface CreateSPBudgetRulesRequest
 */
export interface CreateSPBudgetRulesRequest {
    /**
     * A list of budget rule details.
     * @type {Array<SPBudgetRuleDetails>}
     * @memberof CreateSPBudgetRulesRequest
     */
    budgetRulesDetails?: Array<SPBudgetRuleDetails>;
}
/**
 * 
 * @export
 * @interface CreativeRecommendationsAccessDeniedError
 */
export interface CreativeRecommendationsAccessDeniedError {
    /**
     * Access denied error code.
     * @type {string}
     * @memberof CreativeRecommendationsAccessDeniedError
     */
    code?: CreativeRecommendationsAccessDeniedErrorCodeEnum;
    /**
     * A human-readable description of the error response.
     * @type {string}
     * @memberof CreativeRecommendationsAccessDeniedError
     */
    details?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreativeRecommendationsAccessDeniedErrorCodeEnum {
    AccessDenied = 'ACCESS_DENIED'
}

/**
 * 
 * @export
 * @interface CreativeRecommendationsBadRequestError
 */
export interface CreativeRecommendationsBadRequestError {
    /**
     * Bad request error code.
     * @type {string}
     * @memberof CreativeRecommendationsBadRequestError
     */
    code?: CreativeRecommendationsBadRequestErrorCodeEnum;
    /**
     * A human-readable description of the error response.
     * @type {string}
     * @memberof CreativeRecommendationsBadRequestError
     */
    details?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreativeRecommendationsBadRequestErrorCodeEnum {
    BadRequest = 'BAD_REQUEST'
}

/**
 * 
 * @export
 * @interface CreativeRecommendationsInternalServerError
 */
export interface CreativeRecommendationsInternalServerError {
    /**
     * Internal error code.
     * @type {string}
     * @memberof CreativeRecommendationsInternalServerError
     */
    code?: CreativeRecommendationsInternalServerErrorCodeEnum;
    /**
     * A human-readable description of the error response.
     * @type {string}
     * @memberof CreativeRecommendationsInternalServerError
     */
    details?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreativeRecommendationsInternalServerErrorCodeEnum {
    InternalError = 'INTERNAL_ERROR'
}

/**
 * 
 * @export
 * @interface CreativeRecommendationsNotFoundError
 */
export interface CreativeRecommendationsNotFoundError {
    /**
     * Not found error code.
     * @type {string}
     * @memberof CreativeRecommendationsNotFoundError
     */
    code?: CreativeRecommendationsNotFoundErrorCodeEnum;
    /**
     * A human-readable description of the error response.
     * @type {string}
     * @memberof CreativeRecommendationsNotFoundError
     */
    details?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreativeRecommendationsNotFoundErrorCodeEnum {
    NotFound = 'NOT_FOUND'
}

/**
 * Request structure of creative recommendations API.
 * @export
 * @interface CreativeRecommendationsRequest
 */
export interface CreativeRecommendationsRequest {
    /**
     * An array of ASINs associated with the creative. Note, do not pass an empty array, this results in an error.
     * @type {Array<string>}
     * @memberof CreativeRecommendationsRequest
     */
    asins: Array<string>;
    /**
     * Ad format of the creative.
     * @type {string}
     * @memberof CreativeRecommendationsRequest
     */
    adFormat: CreativeRecommendationsRequestAdFormatEnum;
    /**
     * Required recommendations details.
     * @type {Array<RequiredRecommendations>}
     * @memberof CreativeRecommendationsRequest
     */
    requiredRecommendations: Array<RequiredRecommendations>;
}

/**
    * @export
    * @enum {string}
    */
export enum CreativeRecommendationsRequestAdFormatEnum {
    SponsoredBrandsVideo = 'SPONSORED_BRANDS_VIDEO'
}

/**
 * 
 * @export
 * @interface CreativeRecommendationsResponse
 */
export interface CreativeRecommendationsResponse {
    /**
     * Ordered list of Primary Headline recommendation groups.
     * @type {Array<Array<TextRecommendation>>}
     * @memberof CreativeRecommendationsResponse
     */
    primaryHeadlines?: Array<Array<TextRecommendation>>;
    /**
     * Ordered list of Secondary Headline recommendation groups.
     * @type {Array<Array<TextRecommendation>>}
     * @memberof CreativeRecommendationsResponse
     */
    secondaryHeadlines?: Array<Array<TextRecommendation>>;
}
/**
 * 
 * @export
 * @interface CreativeRecommendationsThrottlingError
 */
export interface CreativeRecommendationsThrottlingError {
    /**
     * Throttled error code.
     * @type {string}
     * @memberof CreativeRecommendationsThrottlingError
     */
    code?: CreativeRecommendationsThrottlingErrorCodeEnum;
    /**
     * A human-readable description of the error response.
     * @type {string}
     * @memberof CreativeRecommendationsThrottlingError
     */
    details?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreativeRecommendationsThrottlingErrorCodeEnum {
    Throttled = 'THROTTLED'
}

/**
 * Date component which needs to be pre moderated. Either startDate or endDate must be populated, or both can be populated.
 * @export
 * @interface DateComponent
 */
export interface DateComponent {
    /**
     * Type of the date component.
     * @type {string}
     * @memberof DateComponent
     */
    componentType: DateComponentComponentTypeEnum;
    /**
     * End date of the component in yyyy-MM-dd HH:mm:ss format
     * @type {string}
     * @memberof DateComponent
     */
    endDate?: string;
    /**
     * Id of the component. The same will be returned as part of the response as well. This can be used to uniquely identify the component from the pre moderation response.
     * @type {string}
     * @memberof DateComponent
     */
    id: string;
    /**
     * Start date of the component in yyyy-MM-dd HH:mm:ss format
     * @type {string}
     * @memberof DateComponent
     */
    startDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DateComponentComponentTypeEnum {
    CampaignDate = 'CAMPAIGN_DATE'
}

/**
 * Pre-moderation result for a date component
 * @export
 * @interface DateComponentResponse
 */
export interface DateComponentResponse {
    /**
     * The pre-moderation status of the component.
     * @type {string}
     * @memberof DateComponentResponse
     */
    preModerationStatus?: DateComponentResponsePreModerationStatusEnum;
    /**
     * Type of the date component.
     * @type {string}
     * @memberof DateComponentResponse
     */
    componentType?: DateComponentResponseComponentTypeEnum;
    /**
     * End date of the component.
     * @type {string}
     * @memberof DateComponentResponse
     */
    endDate?: string;
    /**
     * A list of policy violations for the component that were detected during pre moderation. Note that this field is present in the response only when preModerationStatus is set to REJECTED.
     * @type {Array<DatePolicyViolation>}
     * @memberof DateComponentResponse
     */
    policyViolations?: Array<DatePolicyViolation>;
    /**
     * Id of the component. This is the same id sent as part of the request. This can be used to uniquely identify the component.
     * @type {string}
     * @memberof DateComponentResponse
     */
    id?: string;
    /**
     * Start date of the component.
     * @type {string}
     * @memberof DateComponentResponse
     */
    startDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DateComponentResponsePreModerationStatusEnum {
    Rejected = 'REJECTED',
    Approved = 'APPROVED',
    Failed = 'FAILED',
    RetryableFailure = 'RETRYABLE_FAILURE'
}
/**
    * @export
    * @enum {string}
    */
export enum DateComponentResponseComponentTypeEnum {
    CampaignDates = 'CAMPAIGN_DATES'
}

/**
 * 
 * @export
 * @interface DatePolicyViolation
 */
export interface DatePolicyViolation {
    /**
     * A human-readable description of the policy.
     * @type {string}
     * @memberof DatePolicyViolation
     */
    policyDescription?: string;
    /**
     * A policy violation code.
     * @type {string}
     * @memberof DatePolicyViolation
     */
    name?: string;
    /**
     * Type of policy violation.
     * @type {string}
     * @memberof DatePolicyViolation
     */
    type?: DatePolicyViolationTypeEnum;
    /**
     * Address of the policy documentation. Follow the link to learn more about the specified policy.
     * @type {string}
     * @memberof DatePolicyViolation
     */
    policyLinkUrl?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DatePolicyViolationTypeEnum {
    Warning = 'WARNING',
    Rejected = 'REJECTED'
}

/**
 * Object representing date range type rule duration.
 * @export
 * @interface DateRangeTypeRuleDuration
 */
export interface DateRangeTypeRuleDuration {
    /**
     * The end date of the budget rule in YYYYMMDD format. The end date is inclusive. Required to be equal or greater than `startDate`.
     * @type {string}
     * @memberof DateRangeTypeRuleDuration
     */
    endDate?: string;
    /**
     * The start date of the budget rule in YYYYMMDD format. The start date is inclusive. Required to be greater than or equal to current date.
     * @type {string}
     * @memberof DateRangeTypeRuleDuration
     */
    startDate: string;
}
/**
 * The day of the week.
 * @export
 * @enum {string}
 */

export enum DayOfWeek {
    Monday = 'MONDAY',
    Tuesday = 'TUESDAY',
    Wednesday = 'WEDNESDAY',
    Thursday = 'THURSDAY',
    Friday = 'FRIDAY',
    Saturday = 'SATURDAY',
    Sunday = 'SUNDAY'
}

/**
 * Object representing event type rule duration.
 * @export
 * @interface EventTypeRuleDuration
 */
export interface EventTypeRuleDuration {
    /**
     * The event identifier. This value is available from the budget rules recommendation API.
     * @type {string}
     * @memberof EventTypeRuleDuration
     */
    eventId: string;
    /**
     * The event end date in YYYYMMDD format. Read-only.
     * @type {string}
     * @memberof EventTypeRuleDuration
     */
    endDate?: string;
    /**
     * The event name. Read-only.
     * @type {string}
     * @memberof EventTypeRuleDuration
     */
    eventName?: string;
    /**
     * The event start date in YYYYMMDD format. Read-only. Note that this field is present only for announced events.
     * @type {string}
     * @memberof EventTypeRuleDuration
     */
    startDate?: string;
}
/**
 * 
 * @export
 * @interface GetSBBudgetRuleResponse
 */
export interface GetSBBudgetRuleResponse {
    /**
     * 
     * @type {SBBudgetRule}
     * @memberof GetSBBudgetRuleResponse
     */
    budgetRule?: SBBudgetRule;
}
/**
 * 
 * @export
 * @interface GetSBBudgetRulesForAdvertiserResponse
 */
export interface GetSBBudgetRulesForAdvertiserResponse {
    /**
     * A list of rules created by the advertiser.
     * @type {Array<SBBudgetRule>}
     * @memberof GetSBBudgetRulesForAdvertiserResponse
     */
    budgetRulesForAdvertiserResponse?: Array<SBBudgetRule>;
    /**
     * To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
     * @type {string}
     * @memberof GetSBBudgetRulesForAdvertiserResponse
     */
    nextToken?: string;
}
/**
 * 
 * @export
 * @interface GetSDBudgetRuleResponse
 */
export interface GetSDBudgetRuleResponse {
    /**
     * 
     * @type {SDBudgetRule}
     * @memberof GetSDBudgetRuleResponse
     */
    budgetRule?: SDBudgetRule;
}
/**
 * 
 * @export
 * @interface GetSDBudgetRulesForAdvertiserResponse
 */
export interface GetSDBudgetRulesForAdvertiserResponse {
    /**
     * A list of rules created by the advertiser.
     * @type {Array<SDBudgetRule>}
     * @memberof GetSDBudgetRulesForAdvertiserResponse
     */
    budgetRulesForAdvertiserResponse?: Array<SDBudgetRule>;
    /**
     * To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
     * @type {string}
     * @memberof GetSDBudgetRulesForAdvertiserResponse
     */
    nextToken?: string;
}
/**
 * 
 * @export
 * @interface GetSPBudgetRuleResponse
 */
export interface GetSPBudgetRuleResponse {
    /**
     * 
     * @type {SPBudgetRule}
     * @memberof GetSPBudgetRuleResponse
     */
    budgetRule?: SPBudgetRule;
}
/**
 * 
 * @export
 * @interface GetSPBudgetRulesForAdvertiserResponse
 */
export interface GetSPBudgetRulesForAdvertiserResponse {
    /**
     * A list of rules created by the advertiser.
     * @type {Array<SPBudgetRule>}
     * @memberof GetSPBudgetRulesForAdvertiserResponse
     */
    budgetRulesForAdvertiserResponse?: Array<SPBudgetRule>;
    /**
     * To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
     * @type {string}
     * @memberof GetSPBudgetRulesForAdvertiserResponse
     */
    nextToken?: string;
}
/**
 * Request structure of headline suggestion API.
 * @export
 * @interface HeadlineSuggestionRequest
 */
export interface HeadlineSuggestionRequest {
    /**
     * An array of ASINs associated with the creative. Note do not pass an empty array, this results in an error. 
     * @type {Array<string>}
     * @memberof HeadlineSuggestionRequest
     */
    asins?: Array<string>;
    /**
     * Maximum number of suggestions that API should return. Response will [0, maxNumSuggestions] suggestions (suggestions are not guaranteed).
     * @type {number}
     * @memberof HeadlineSuggestionRequest
     */
    maxNumSuggestions?: number;
    /**
     * 
     * @type {string}
     * @memberof HeadlineSuggestionRequest
     */
    adFormat?: HeadlineSuggestionRequestAdFormatEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum HeadlineSuggestionRequestAdFormatEnum {
    Brands = 'SPONSORED_BRANDS',
    BrandsSpotlight = 'SPONSORED_BRANDS_SPOTLIGHT'
}

/**
 * Response structure of headline suggestion API.
 * @export
 * @interface HeadlineSuggestionResponse
 */
export interface HeadlineSuggestionResponse {
    /**
     * An identifier for request made which is generated by server.
     * @type {string}
     * @memberof HeadlineSuggestionResponse
     */
    requestId?: string;
    /**
     * Suggestions are sorted, i.e., more suitable headline has lesser array index value
     * @type {Array<SuggestedHeadline>}
     * @memberof HeadlineSuggestionResponse
     */
    suggestions?: Array<SuggestedHeadline>;
}
/**
 * The unique identifiers type based on the adProgram of the ad.
 * @export
 * @enum {string}
 */

export enum IdType {
    AdId = 'AD_ID'
}

/**
 * Image component which needs to be pre moderated. A publicly accessible imageUrl must be sent.
 * @export
 * @interface ImageComponent
 */
export interface ImageComponent {
    /**
     * Type of the image component.
     * @type {string}
     * @memberof ImageComponent
     */
    componentType: ImageComponentComponentTypeEnum;
    /**
     * Id of the component. The same will be returned as part of the response as well. This can be used to uniquely identify the component from the pre moderation response.
     * @type {string}
     * @memberof ImageComponent
     */
    id: string;
    /**
     * Url of the image to be pre moderated. The url must be publicly accessible.
     * @type {string}
     * @memberof ImageComponent
     */
    url: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ImageComponentComponentTypeEnum {
    BrandLogo = 'BRAND_LOGO',
    CustomImage = 'CUSTOM_IMAGE',
    OtherImage = 'OTHER_IMAGE'
}

/**
 * Pre moderation result for a image component
 * @export
 * @interface ImageComponentResponse
 */
export interface ImageComponentResponse {
    /**
     * The pre moderation status of the component.
     * @type {string}
     * @memberof ImageComponentResponse
     */
    preModerationStatus?: ImageComponentResponsePreModerationStatusEnum;
    /**
     * Type of the image component.
     * @type {string}
     * @memberof ImageComponentResponse
     */
    componentType?: ImageComponentResponseComponentTypeEnum;
    /**
     * A list of policy violations for the component that were detected during pre moderation. Note that this field is present in the response only when preModerationStatus is set to REJECTED.
     * @type {Array<ImagePolicyViolation>}
     * @memberof ImageComponentResponse
     */
    policyViolations?: Array<ImagePolicyViolation>;
    /**
     * Id of the component. This is the same id sent as part of the request. This can be used to uniquely identify the component.
     * @type {string}
     * @memberof ImageComponentResponse
     */
    id?: string;
    /**
     * Publicly accessible url of the image that got pre moderated.
     * @type {string}
     * @memberof ImageComponentResponse
     */
    url?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ImageComponentResponsePreModerationStatusEnum {
    Rejected = 'REJECTED',
    Approved = 'APPROVED',
    Failed = 'FAILED',
    RetryableFailure = 'RETRYABLE_FAILURE'
}
/**
    * @export
    * @enum {string}
    */
export enum ImageComponentResponseComponentTypeEnum {
    BrandLogo = 'BRAND_LOGO',
    CustomImage = 'CUSTOM_IMAGE',
    OtherImage = 'OTHER_IMAGE'
}

/**
 * 
 * @export
 * @interface ImageCrop
 */
export interface ImageCrop {
    /**
     * Policy violated region\'s top left Y-axis pixel value.
     * @type {number}
     * @memberof ImageCrop
     */
    topLeftY?: number;
    /**
     * Policy violated region\'s top left X-axis pixel value.
     * @type {number}
     * @memberof ImageCrop
     */
    topLeftX?: number;
    /**
     * Policy violated region\'s width in pixel.
     * @type {number}
     * @memberof ImageCrop
     */
    width?: number;
    /**
     * Policy violated region\'s height in pixel.
     * @type {number}
     * @memberof ImageCrop
     */
    height?: number;
}
/**
 * Structure of a image evidence
 * @export
 * @interface ImageEvidence
 */
export interface ImageEvidence {
    /**
     * The top left Y-coordinate of the content that violates the specfied policy within the image.
     * @type {number}
     * @memberof ImageEvidence
     */
    topLeftY?: number;
    /**
     * The top left X-coordinate of the content that violates the specfied policy within the image.
     * @type {number}
     * @memberof ImageEvidence
     */
    topLeftX?: number;
    /**
     * The width of the content that violates the specfied policy within the image.
     * @type {number}
     * @memberof ImageEvidence
     */
    width?: number;
    /**
     * The height of the content that violates the specfied policy within the image.
     * @type {number}
     * @memberof ImageEvidence
     */
    height?: number;
}
/**
 * Structure of policy violation for a image component
 * @export
 * @interface ImagePolicyViolation
 */
export interface ImagePolicyViolation {
    /**
     * A human-readable description of the policy.
     * @type {string}
     * @memberof ImagePolicyViolation
     */
    policyDescription?: string;
    /**
     * List of evidences for the policy violations detected on the image component.
     * @type {Array<ImageEvidence>}
     * @memberof ImagePolicyViolation
     */
    imageEvidences?: Array<ImageEvidence>;
    /**
     * A policy violation code.
     * @type {string}
     * @memberof ImagePolicyViolation
     */
    name?: string;
    /**
     * Type of policy violation.
     * @type {string}
     * @memberof ImagePolicyViolation
     */
    type?: ImagePolicyViolationTypeEnum;
    /**
     * Address of the policy documentation. Follow the link to learn more about the specified policy.
     * @type {string}
     * @memberof ImagePolicyViolation
     */
    policyLinkUrl?: string;
    /**
     * Policy violation on an image can be detected on the ocr detected text on the image as well. This list of text evidences will have the policy violations detected on the text on top of the image.
     * @type {Array<TextEvidence>}
     * @memberof ImagePolicyViolation
     */
    textEvidences?: Array<TextEvidence>;
}

/**
    * @export
    * @enum {string}
    */
export enum ImagePolicyViolationTypeEnum {
    Warning = 'WARNING',
    Rejected = 'REJECTED'
}

/**
 * The Error Response Object.
 * @export
 * @interface ModerationError
 */
export interface ModerationError {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof ModerationError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof ModerationError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface ModerationResult
 */
export interface ModerationResult {
    /**
     * The version identifier that helps to keep track of multiple versions of a submitted ad. In case of Sponsored Brands this is the creative version id.
     * @type {string}
     * @memberof ModerationResult
     */
    versionId?: string;
    /**
     * 
     * @type {IdType}
     * @memberof ModerationResult
     */
    idType?: IdType;
    /**
     * 
     * @type {ModerationStatus}
     * @memberof ModerationResult
     */
    moderationStatus?: ModerationStatus;
    /**
     * A list of policy violations for a campaign that has failed moderation. Note that this field is present in the response only when moderationStatus is set to REJECTED.
     * @type {Array<PolicyViolation>}
     * @memberof ModerationResult
     */
    policyViolations?: Array<PolicyViolation>;
    /**
     * Expected date and time by which moderation will be complete. The format is ISO 8601 in UTC time zone. Note that this field is present in the response only when moderationStatus is set to IN_PROGRESS.
     * @type {string}
     * @memberof ModerationResult
     */
    etaForModeration?: string;
    /**
     * The unique identifier of the ad which can be obtained after the ad is created using create APIs.
     * @type {string}
     * @memberof ModerationResult
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface ModerationResultsAccessDeniedError
 */
export interface ModerationResultsAccessDeniedError {
    /**
     * Access denied error code.
     * @type {string}
     * @memberof ModerationResultsAccessDeniedError
     */
    code?: ModerationResultsAccessDeniedErrorCodeEnum;
    /**
     * A human-readable description of the error response.
     * @type {string}
     * @memberof ModerationResultsAccessDeniedError
     */
    details?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ModerationResultsAccessDeniedErrorCodeEnum {
    AccessDenied = 'ACCESS_DENIED'
}

/**
 * The program type of the ad.
 * @export
 * @enum {string}
 */

export enum ModerationResultsAdProgramType {
    ProductCollection = 'SB_PRODUCT_COLLECTION',
    StoreSpotlight = 'SB_STORE_SPOTLIGHT',
    Video = 'SB_VIDEO'
}

/**
 * 
 * @export
 * @interface ModerationResultsBadRequestError
 */
export interface ModerationResultsBadRequestError {
    /**
     * Bad request error code.
     * @type {string}
     * @memberof ModerationResultsBadRequestError
     */
    code?: ModerationResultsBadRequestErrorCodeEnum;
    /**
     * A human-readable description of the error response.
     * @type {string}
     * @memberof ModerationResultsBadRequestError
     */
    details?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ModerationResultsBadRequestErrorCodeEnum {
    BadRequest = 'BAD_REQUEST'
}

/**
 * 
 * @export
 * @interface ModerationResultsInternalServerError
 */
export interface ModerationResultsInternalServerError {
    /**
     * Internal error code.
     * @type {string}
     * @memberof ModerationResultsInternalServerError
     */
    code?: ModerationResultsInternalServerErrorCodeEnum;
    /**
     * A human-readable description of the error response.
     * @type {string}
     * @memberof ModerationResultsInternalServerError
     */
    details?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ModerationResultsInternalServerErrorCodeEnum {
    InternalError = 'INTERNAL_ERROR'
}

/**
 * 
 * @export
 * @interface ModerationResultsNotFoundError
 */
export interface ModerationResultsNotFoundError {
    /**
     * Not found error code.
     * @type {string}
     * @memberof ModerationResultsNotFoundError
     */
    code?: ModerationResultsNotFoundErrorCodeEnum;
    /**
     * A human-readable description of the error response.
     * @type {string}
     * @memberof ModerationResultsNotFoundError
     */
    details?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ModerationResultsNotFoundErrorCodeEnum {
    NotFound = 'NOT_FOUND'
}

/**
 * 
 * @export
 * @interface ModerationResultsRequest
 */
export interface ModerationResultsRequest {
    /**
     * Filter by specific version id of the ad. The API will return the ad\'s all versions moderation status if this field is empty.
     * @type {Array<string>}
     * @memberof ModerationResultsRequest
     */
    versionIdFilter?: Array<string>;
    /**
     * 
     * @type {IdType}
     * @memberof ModerationResultsRequest
     */
    idType: IdType;
    /**
     * 
     * @type {ModerationResultsAdProgramType}
     * @memberof ModerationResultsRequest
     */
    adProgramType: ModerationResultsAdProgramType;
    /**
     * Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
     * @type {string}
     * @memberof ModerationResultsRequest
     */
    nextToken?: string;
    /**
     * Sets a limit on the number of results returned by an operation.
     * @type {number}
     * @memberof ModerationResultsRequest
     */
    maxResults: number;
    /**
     * Filter by specific moderation status.
     * @type {Array<ModerationStatus>}
     * @memberof ModerationResultsRequest
     */
    moderationStatusFilter?: Array<ModerationStatus>;
    /**
     * The unique identifier of the ad which can be obtained after the ad is created using create APIs.
     * @type {string}
     * @memberof ModerationResultsRequest
     */
    id: string;
}
/**
 * 
 * @export
 * @interface ModerationResultsResponse
 */
export interface ModerationResultsResponse {
    /**
     * 
     * @type {Array<ModerationResult>}
     * @memberof ModerationResultsResponse
     */
    moderationResults?: Array<ModerationResult>;
    /**
     * Operations that return paginated results include a pagination token in this field. To retrieve the next page of results, call the same operation and specify this token in the request. If the `NextToken` field is empty, there are no further results.
     * @type {string}
     * @memberof ModerationResultsResponse
     */
    nextToken?: string;
}
/**
 * 
 * @export
 * @interface ModerationResultsThrottlingError
 */
export interface ModerationResultsThrottlingError {
    /**
     * Throttled error code.
     * @type {string}
     * @memberof ModerationResultsThrottlingError
     */
    code?: ModerationResultsThrottlingErrorCodeEnum;
    /**
     * A human-readable description of the error response.
     * @type {string}
     * @memberof ModerationResultsThrottlingError
     */
    details?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ModerationResultsThrottlingErrorCodeEnum {
    Throttled = 'THROTTLED'
}

/**
 * The moderation status of the ad.
 * @export
 * @enum {string}
 */

export enum ModerationStatus {
    Approved = 'APPROVED',
    InProgress = 'IN_PROGRESS',
    Rejected = 'REJECTED',
    Failed = 'FAILED'
}

/**
 * 
 * @export
 * @interface PerformanceMeasureCondition
 */
export interface PerformanceMeasureCondition {
    /**
     * 
     * @type {PerformanceMetric}
     * @memberof PerformanceMeasureCondition
     */
    metricName: PerformanceMetric;
    /**
     * 
     * @type {ComparisonOperator}
     * @memberof PerformanceMeasureCondition
     */
    comparisonOperator: ComparisonOperator;
    /**
     * The performance threshold value.
     * @type {number}
     * @memberof PerformanceMeasureCondition
     */
    threshold: number;
}
/**
 * 
 * @export
 * @interface PerformanceMeasureConditionForSB
 */
export interface PerformanceMeasureConditionForSB {
    /**
     * 
     * @type {PerformanceMetricForSB}
     * @memberof PerformanceMeasureConditionForSB
     */
    metricName: PerformanceMetricForSB;
    /**
     * 
     * @type {ComparisonOperator}
     * @memberof PerformanceMeasureConditionForSB
     */
    comparisonOperator: ComparisonOperator;
    /**
     * The performance threshold value.
     * @type {number}
     * @memberof PerformanceMeasureConditionForSB
     */
    threshold: number;
}
/**
 * The advertising performance metric.
 * @export
 * @enum {string}
 */

export enum PerformanceMetric {
    Acos = 'ACOS',
    Ctr = 'CTR',
    Cvr = 'CVR',
    Roas = 'ROAS'
}

/**
 * The advertising performance metric.
 * @export
 * @enum {string}
 */

export enum PerformanceMetricForSB {
    Roas = 'ROAS'
}

/**
 * An object giving the name of the performance metric and its value when the rule was evaluated
 * @export
 * @interface PerformanceMetricValue
 */
export interface PerformanceMetricValue {
    /**
     * Name of the performance metric
     * @type {string}
     * @memberof PerformanceMetricValue
     */
    name?: string;
    /**
     * Value of the performance metric
     * @type {number}
     * @memberof PerformanceMetricValue
     */
    value?: number;
}
/**
 * 
 * @export
 * @interface PolicyViolation
 */
export interface PolicyViolation {
    /**
     * A human-readable description of the policy.
     * @type {string}
     * @memberof PolicyViolation
     */
    policyDescription?: string;
    /**
     * 
     * @type {Array<ViolatingTextContent>}
     * @memberof PolicyViolation
     */
    violatingTextContents?: Array<ViolatingTextContent>;
    /**
     * 
     * @type {Array<ViolatingImageContent>}
     * @memberof PolicyViolation
     */
    violatingImageContents?: Array<ViolatingImageContent>;
    /**
     * Address of the policy documentation. Follow the link to learn more about the specified policy.
     * @type {string}
     * @memberof PolicyViolation
     */
    policyLinkUrl?: string;
    /**
     * 
     * @type {Array<ViolatingVideoContent>}
     * @memberof PolicyViolation
     */
    violatingVideoContents?: Array<ViolatingVideoContent>;
    /**
     * 
     * @type {Array<ViolatingAsinContent>}
     * @memberof PolicyViolation
     */
    violatingAsinContents?: Array<ViolatingAsinContent>;
}
/**
 * Components details that needs to be sent for pre moderation.
 * @export
 * @interface PreModerationRequest
 */
export interface PreModerationRequest {
    /**
     * Id of the brand/advertiser.
     * @type {string}
     * @memberof PreModerationRequest
     */
    recordId?: string;
    /**
     * Asin components which needs to be pre moderated.
     * @type {Array<AsinComponent>}
     * @memberof PreModerationRequest
     */
    asinComponents?: Array<AsinComponent>;
    /**
     * Type of Ad program to which this pre moderation components belong to.
     * @type {string}
     * @memberof PreModerationRequest
     */
    adProgram: PreModerationRequestAdProgramEnum;
    /**
     * Specifying locale will translate the premoderation message into that locale\'s associated language.     | Locale | Language (ISO 639) | Country (ISO 3166) |   |-----|-----|-------|   | ar-AE | Arabic (ar) | United Arab Emirates (AE) |   | zh-CN | Chinese (zh) | China (CN) |   | nl-NL | Dutch (nl) | Netherlands (NL) |   | en-AU | English (en) | Australia (AU) |   | en-CA | English (en) | Canada (CA) |   | en-IN | English (en) | India (IN) |   | en-GB | English (en) | United Kingdom (GB) |   | en-US | English (en) | United States (US) |   | fr-CA | French (fr) | Canada (CA) |   | fr-FR | French (fr) | France (FR) |   | de-DE | German (de) | Germany (DE) |   | it-IT | Italian (it) | Italy (IT) |   | ja-JP | Japanese (ja) | Japan (JP) |   | ko-KR | Korean (ko) | South Korea (KR) |   | pt-BR | Portuguese (pt) | Brazil (BR) |   | es-ES | Spanish (es) | Spain (ES) |   | es-US | Spanish (es) | United States (US) |   | es-MX | Spanish (es) | Mexico (MX) |   | tr-TR | Turkish (tr) | Turkey (TR) |   
     * @type {string}
     * @memberof PreModerationRequest
     */
    locale: PreModerationRequestLocaleEnum;
    /**
     * Image components which needs to be pre moderated.
     * @type {Array<ImageComponent>}
     * @memberof PreModerationRequest
     */
    imageComponents?: Array<ImageComponent>;
    /**
     * Date components which needs to be pre moderated.
     * @type {Array<DateComponent>}
     * @memberof PreModerationRequest
     */
    dateComponents?: Array<DateComponent>;
    /**
     * Text components which needs to be pre moderated.
     * @type {Array<TextComponent>}
     * @memberof PreModerationRequest
     */
    textComponents?: Array<TextComponent>;
    /**
     * Video components which needs to be pre moderated.
     * @type {Array<VideoComponent>}
     * @memberof PreModerationRequest
     */
    videoComponents?: Array<VideoComponent>;
}

/**
    * @export
    * @enum {string}
    */
export enum PreModerationRequestAdProgramEnum {
    SponsoredBrands = 'SPONSORED_BRANDS',
    SponsoredBrandsSpotlight = 'SPONSORED_BRANDS_SPOTLIGHT',
    SponsoredBrandsVideo = 'SPONSORED_BRANDS_VIDEO',
    Stores = 'STORES',
    SponsoredDisplay = 'SPONSORED_DISPLAY',
    Dsp = 'DSP',
    DspRec = 'DSP_REC'
}
/**
    * @export
    * @enum {string}
    */
export enum PreModerationRequestLocaleEnum {
    ArAe = 'ar-AE',
    ZhCn = 'zh-CN',
    NlNl = 'nl-NL',
    EnAu = 'en-AU',
    EnCa = 'en-CA',
    EnIn = 'en-IN',
    EnGb = 'en-GB',
    EnUs = 'en-US',
    FrCa = 'fr-CA',
    FrFr = 'fr-FR',
    DeDe = 'de-DE',
    ItIt = 'it-IT',
    JaJp = 'ja-JP',
    KoKr = 'ko-KR',
    PtBr = 'pt-BR',
    EsEs = 'es-ES',
    EsUs = 'es-US',
    EsMx = 'es-MX',
    TrTr = 'tr-TR'
}

/**
 * Information regarding the policy violations if present for the components, sent for pre moderation.
 * @export
 * @interface PreModerationResponse
 */
export interface PreModerationResponse {
    /**
     * Id of the brand/advertiser.
     * @type {string}
     * @memberof PreModerationResponse
     */
    recordId?: string;
    /**
     * Pre moderation result of the asin components. It will have information regarding the policy violations present if any.
     * @type {Array<AsinComponentResponse>}
     * @memberof PreModerationResponse
     */
    asinComponents?: Array<AsinComponentResponse>;
    /**
     * Unique Id for the moderation Request.
     * @type {string}
     * @memberof PreModerationResponse
     */
    preModerationId?: string;
    /**
     * Type of Ad program to which the pre moderation components belong to.
     * @type {string}
     * @memberof PreModerationResponse
     */
    adProgram?: PreModerationResponseAdProgramEnum;
    /**
     * Locale value that was passed in request.
     * @type {string}
     * @memberof PreModerationResponse
     */
    locale?: PreModerationResponseLocaleEnum;
    /**
     * Pre moderation result of the image components. It will have information regarding the policy violations present if any.
     * @type {Array<ImageComponentResponse>}
     * @memberof PreModerationResponse
     */
    imageComponents?: Array<ImageComponentResponse>;
    /**
     * Pre moderation result of the date components. It will have information regarding the policy violations present if any.
     * @type {Array<DateComponentResponse>}
     * @memberof PreModerationResponse
     */
    dateComponents?: Array<DateComponentResponse>;
    /**
     * Pre moderation result of the text components. It will have information regarding the policy violations present if any.
     * @type {Array<TextComponentResponse>}
     * @memberof PreModerationResponse
     */
    textComponents?: Array<TextComponentResponse>;
    /**
     * Pre moderation result of the video components. It will have information regarding the policy violations present if any.
     * @type {Array<VideoComponentResponse>}
     * @memberof PreModerationResponse
     */
    videoComponents?: Array<VideoComponentResponse>;
}

/**
    * @export
    * @enum {string}
    */
export enum PreModerationResponseAdProgramEnum {
    SponsoredBrands = 'SPONSORED_BRANDS',
    SponsoredBrandsSpotlight = 'SPONSORED_BRANDS_SPOTLIGHT',
    SponsoredBrandsVideo = 'SPONSORED_BRANDS_VIDEO',
    Stores = 'STORES',
    SponsoredDisplay = 'SPONSORED_DISPLAY',
    Dsp = 'DSP',
    DspRec = 'DSP_REC'
}
/**
    * @export
    * @enum {string}
    */
export enum PreModerationResponseLocaleEnum {
    ArAe = 'ar-AE',
    ZhCn = 'zh-CN',
    NlNl = 'nl-NL',
    EnAu = 'en-AU',
    EnCa = 'en-CA',
    EnIn = 'en-IN',
    EnGb = 'en-GB',
    EnUs = 'en-US',
    FrCa = 'fr-CA',
    FrFr = 'fr-FR',
    DeDe = 'de-DE',
    ItIt = 'it-IT',
    JaJp = 'ja-JP',
    KoKr = 'ko-KR',
    PtBr = 'pt-BR',
    EsEs = 'es-ES',
    EsUs = 'es-US',
    EsMx = 'es-MX',
    TrTr = 'tr-TR'
}

/**
 * Recommended Headline in response object. Recommended headline will be locale specific, i.e. for an asin input in ES, Recommended headline will be in ES.
 * @export
 * @interface RecommendedHeadline
 */
export interface RecommendedHeadline {
    /**
     * Unique Id of Recommended headline.
     * @type {string}
     * @memberof RecommendedHeadline
     */
    headlineId?: string;
    /**
     * String that contains Recommended headline.
     * @type {string}
     * @memberof RecommendedHeadline
     */
    headline?: string;
}
/**
 * 
 * @export
 * @interface Recurrence
 */
export interface Recurrence {
    /**
     * 
     * @type {RecurrenceType}
     * @memberof Recurrence
     */
    type?: RecurrenceType;
    /**
     * Object representing days of the week for weekly type rule. It is not required for daily recurrence type
     * @type {Array<DayOfWeek>}
     * @memberof Recurrence
     */
    daysOfWeek?: Array<DayOfWeek>;
}
/**
 * depicts the type of recurrence
 * @export
 * @enum {string}
 */

export enum RecurrenceType {
    Daily = 'DAILY',
    Weekly = 'WEEKLY'
}

/**
 * 
 * @export
 * @interface RequiredRecommendations
 */
export interface RequiredRecommendations {
    /**
     * Maximum number of recommendations groups that API should return for given type. (recommendations are not guaranteed).
     * @type {number}
     * @memberof RequiredRecommendations
     */
    maxRecommendationGroups?: number;
    /**
     * Type of recommendations.
     * @type {string}
     * @memberof RequiredRecommendations
     */
    type: RequiredRecommendationsTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum RequiredRecommendationsTypeEnum {
    PrimaryHeadline = 'PRIMARY_HEADLINE',
    SecondaryHeadline = 'SECONDARY_HEADLINE'
}

/**
 * 
 * @export
 * @interface RuleDuration
 */
export interface RuleDuration {
    /**
     * 
     * @type {EventTypeRuleDuration}
     * @memberof RuleDuration
     */
    eventTypeRuleDuration?: EventTypeRuleDuration;
    /**
     * 
     * @type {DateRangeTypeRuleDuration}
     * @memberof RuleDuration
     */
    dateRangeTypeRuleDuration?: DateRangeTypeRuleDuration;
}
/**
 * 
 * @export
 * @interface SBBudgetHistory
 */
export interface SBBudgetHistory {
    /**
     * To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
     * @type {string}
     * @memberof SBBudgetHistory
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<SBRuleBasedBudget>}
     * @memberof SBBudgetHistory
     */
    history?: Array<SBRuleBasedBudget>;
}
/**
 * 
 * @export
 * @interface SBBudgetRule
 */
export interface SBBudgetRule {
    /**
     * 
     * @type {State}
     * @memberof SBBudgetRule
     */
    ruleState?: State;
    /**
     * Epoch time of budget rule update. Read-only.
     * @type {number}
     * @memberof SBBudgetRule
     */
    lastUpdatedDate?: number;
    /**
     * Epoch time of budget rule creation. Read-only.
     * @type {number}
     * @memberof SBBudgetRule
     */
    createdDate?: number;
    /**
     * 
     * @type {SBBudgetRuleDetails}
     * @memberof SBBudgetRule
     */
    ruleDetails?: SBBudgetRuleDetails;
    /**
     * The budget rule identifier.
     * @type {string}
     * @memberof SBBudgetRule
     */
    ruleId: string;
    /**
     * The budget rule status. Read-only.
     * @type {string}
     * @memberof SBBudgetRule
     */
    ruleStatus?: string;
}
/**
 * 
 * @export
 * @interface SBBudgetRuleDetails
 */
export interface SBBudgetRuleDetails {
    /**
     * 
     * @type {RuleDuration}
     * @memberof SBBudgetRuleDetails
     */
    duration?: RuleDuration;
    /**
     * 
     * @type {Recurrence}
     * @memberof SBBudgetRuleDetails
     */
    recurrence?: Recurrence;
    /**
     * 
     * @type {SBRuleType}
     * @memberof SBBudgetRuleDetails
     */
    ruleType?: SBRuleType;
    /**
     * 
     * @type {BudgetIncreaseBy}
     * @memberof SBBudgetRuleDetails
     */
    budgetIncreaseBy?: BudgetIncreaseBy;
    /**
     * The budget rule name. Required to be unique within a campaign.
     * @type {string}
     * @memberof SBBudgetRuleDetails
     */
    name?: string;
    /**
     * 
     * @type {PerformanceMeasureConditionForSB}
     * @memberof SBBudgetRuleDetails
     */
    performanceMeasureCondition?: PerformanceMeasureConditionForSB;
}
/**
 * 
 * @export
 * @interface SBCampaignBudgetRule
 */
export interface SBCampaignBudgetRule {
    /**
     * 
     * @type {State}
     * @memberof SBCampaignBudgetRule
     */
    ruleState?: State;
    /**
     * Epoch time of budget rule update. Read-only.
     * @type {number}
     * @memberof SBCampaignBudgetRule
     */
    lastUpdatedDate?: number;
    /**
     * Epoch time of budget rule creation. Read-only.
     * @type {number}
     * @memberof SBCampaignBudgetRule
     */
    createdDate?: number;
    /**
     * 
     * @type {SBBudgetRuleDetails}
     * @memberof SBCampaignBudgetRule
     */
    ruleDetails?: SBBudgetRuleDetails;
    /**
     * The budget rule identifier.
     * @type {string}
     * @memberof SBCampaignBudgetRule
     */
    ruleId: string;
    /**
     * The budget rule evaluation status. Read-only.
     * @type {string}
     * @memberof SBCampaignBudgetRule
     */
    ruleStatus?: string;
}
/**
 * 
 * @export
 * @interface SBGetAssociatedCampaignsResponse
 */
export interface SBGetAssociatedCampaignsResponse {
    /**
     * A list of campaigns that are associated to this budget rule.
     * @type {Array<AssociatedCampaign>}
     * @memberof SBGetAssociatedCampaignsResponse
     */
    associatedCampaigns?: Array<AssociatedCampaign>;
    /**
     * To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
     * @type {string}
     * @memberof SBGetAssociatedCampaignsResponse
     */
    nextToken?: string;
}
/**
 * 
 * @export
 * @interface SBListAssociatedBudgetRulesResponse
 */
export interface SBListAssociatedBudgetRulesResponse {
    /**
     * A list of associated budget rules.
     * @type {Array<SBCampaignBudgetRule>}
     * @memberof SBListAssociatedBudgetRulesResponse
     */
    associatedRules?: Array<SBCampaignBudgetRule>;
}
/**
 * 
 * @export
 * @interface SBRuleBasedBudget
 */
export interface SBRuleBasedBudget {
    /**
     * Epoch time of budget rule execution.
     * @type {number}
     * @memberof SBRuleBasedBudget
     */
    executionTime?: number;
    /**
     * 
     * @type {SBBudgetRule}
     * @memberof SBRuleBasedBudget
     */
    appliedRule?: SBBudgetRule;
    /**
     * The budget value.
     * @type {number}
     * @memberof SBRuleBasedBudget
     */
    ruleBasedBudgetValue?: number;
    /**
     * The daily budget value.
     * @type {number}
     * @memberof SBRuleBasedBudget
     */
    dailyBudgetValue?: number;
    /**
     * 
     * @type {PerformanceMetricValue}
     * @memberof SBRuleBasedBudget
     */
    performanceMetric?: PerformanceMetricValue;
}
/**
 * 
 * @export
 * @interface SBRuleDuration
 */
export interface SBRuleDuration {
    /**
     * 
     * @type {DateRangeTypeRuleDuration}
     * @memberof SBRuleDuration
     */
    dateRangeTypeRuleDuration: DateRangeTypeRuleDuration;
}
/**
 * The type of budget rule. SCHEDULE: A budget rule based on a start and end date. PERFORMANCE: A budget rule based on advertising performance criteria.
 * @export
 * @enum {string}
 */

export enum SBRuleType {
    Schedule = 'SCHEDULE',
    Performance = 'PERFORMANCE'
}

/**
 * The error response object.
 * @export
 * @interface SDAPIError
 */
export interface SDAPIError {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof SDAPIError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof SDAPIError
     */
    details?: string;
}
/**
 * A recommended standard Amazon audience to target ads on
 * @export
 * @interface SDAudienceRecommendation
 */
export interface SDAudienceRecommendation {
    /**
     * The audience identifier
     * @type {number}
     * @memberof SDAudienceRecommendation
     */
    audience?: number;
    /**
     * 
     * @type {SDAudienceRecommendationEstimatedAudienceReach}
     * @memberof SDAudienceRecommendation
     */
    estimatedAudienceReach?: SDAudienceRecommendationEstimatedAudienceReach;
    /**
     * The Amazon audience name
     * @type {string}
     * @memberof SDAudienceRecommendation
     */
    name?: string;
    /**
     * A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
     * @type {number}
     * @memberof SDAudienceRecommendation
     */
    rank?: number;
}
/**
 * The range of estimated audience reach
 * @export
 * @interface SDAudienceRecommendationEstimatedAudienceReach
 */
export interface SDAudienceRecommendationEstimatedAudienceReach {
    /**
     * 
     * @type {number}
     * @memberof SDAudienceRecommendationEstimatedAudienceReach
     */
    rangeUpper?: number;
    /**
     * 
     * @type {number}
     * @memberof SDAudienceRecommendationEstimatedAudienceReach
     */
    rangeLower?: number;
}
/**
 * Determines what the recommended bids will be optimized for.  |Name|CostType|Supported Tactics|Description| |----|----------|-----------|-----------| |clicks|cpc|T00020 T00030|Optimize for page visits| |conversions|cpc|T00020 T00030|Optimize for conversion| |reach|vcpm|T00020 T00030|Optimize for viewable impressions|
 * @export
 * @enum {string}
 */

export enum SDBidOptimizationV32 {
    Clicks = 'clicks',
    Conversions = 'conversions',
    Reach = 'reach'
}

/**
 * A recommended bid range to use for a target.
 * @export
 * @interface SDBidRecommendationV31
 */
export interface SDBidRecommendationV31 {
    /**
     * The highest recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDBidRecommendationV31
     */
    rangeUpper: number;
    /**
     * The lowest recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDBidRecommendationV31
     */
    rangeLower: number;
    /**
     * The recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDBidRecommendationV31
     */
    recommended: number;
}
/**
 * 
 * @export
 * @interface SDBrandSafetyDenyListDomain
 */
export interface SDBrandSafetyDenyListDomain {
    /**
     * The website or app identifier. This can be in the form of full domain (eg. \'example.com\' or \'example.net\'), or mobile app identifier (eg. \'com.example.app\' for Android apps or \'1234567890\' for iOS apps) 
     * @type {string}
     * @memberof SDBrandSafetyDenyListDomain
     */
    name: string;
    /**
     * 
     * @type {SDBrandSafetyDenyListDomainType}
     * @memberof SDBrandSafetyDenyListDomain
     */
    type: SDBrandSafetyDenyListDomainType;
}
/**
 * The state of the domain.
 * @export
 * @enum {string}
 */

export enum SDBrandSafetyDenyListDomainState {
    Enabled = 'ENABLED',
    Archived = 'ARCHIVED'
}

/**
 * The domain type.
 * @export
 * @enum {string}
 */

export enum SDBrandSafetyDenyListDomainType {
    Website = 'WEBSITE',
    App = 'APP'
}

/**
 * The state of the domain.
 * @export
 * @enum {string}
 */

export enum SDBrandSafetyDenyListDomainUpdateResultStatus {
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * 
 * @export
 * @interface SDBrandSafetyDenyListProcessedDomain
 */
export interface SDBrandSafetyDenyListProcessedDomain {
    /**
     * The date time the domain was created at. Format: YYYY-MM-ddT:HH:mm:ssZ
     * @type {string}
     * @memberof SDBrandSafetyDenyListProcessedDomain
     */
    createdAt?: string;
    /**
     * The website or app identifier. This can be in the form of full domain (eg. \'example.com\' or \'example.net\'), or mobile app identifier (eg. \'com.example.app\' for Android apps or \'1234567890\' for iOS apps) 
     * @type {string}
     * @memberof SDBrandSafetyDenyListProcessedDomain
     */
    name?: string;
    /**
     * 
     * @type {SDBrandSafetyDenyListDomainState}
     * @memberof SDBrandSafetyDenyListProcessedDomain
     */
    state?: SDBrandSafetyDenyListDomainState;
    /**
     * The date time the domain was last modified. Format: YYYY-MM-ddT:HH:mm:ssZ
     * @type {string}
     * @memberof SDBrandSafetyDenyListProcessedDomain
     */
    lastModified?: string;
    /**
     * 
     * @type {SDBrandSafetyDenyListDomainType}
     * @memberof SDBrandSafetyDenyListProcessedDomain
     */
    type?: SDBrandSafetyDenyListDomainType;
    /**
     * The identifier of the Brand Safety List domain.
     * @type {number}
     * @memberof SDBrandSafetyDenyListProcessedDomain
     */
    domainId?: number;
}
/**
 * Response for Brand Safety Deny List GET requests
 * @export
 * @interface SDBrandSafetyGetResponse
 */
export interface SDBrandSafetyGetResponse {
    /**
     * 
     * @type {SDBrandSafetyGetResponsePagination}
     * @memberof SDBrandSafetyGetResponse
     */
    pagination?: SDBrandSafetyGetResponsePagination;
    /**
     * List of Brand Safety Deny List Domains
     * @type {Array<SDBrandSafetyDenyListProcessedDomain>}
     * @memberof SDBrandSafetyGetResponse
     */
    domains?: Array<SDBrandSafetyDenyListProcessedDomain>;
}
/**
 * Response pagination info for Brand Safety Deny List GET requests
 * @export
 * @interface SDBrandSafetyGetResponsePagination
 */
export interface SDBrandSafetyGetResponsePagination {
    /**
     * The total number of deny list domains created by the advertiser.
     * @type {number}
     * @memberof SDBrandSafetyGetResponsePagination
     */
    total?: number;
    /**
     * The number of deny list domains skipped.
     * @type {number}
     * @memberof SDBrandSafetyGetResponsePagination
     */
    offset?: number;
    /**
     * The maximum number of deny list domains returned from GET request.
     * @type {number}
     * @memberof SDBrandSafetyGetResponsePagination
     */
    limit?: number;
}
/**
 * List of all requests\' status.
 * @export
 * @interface SDBrandSafetyListRequestStatusResponse
 */
export interface SDBrandSafetyListRequestStatusResponse {
    /**
     * List of all requests\' status.
     * @type {Array<SDBrandSafetyRequestStatus>}
     * @memberof SDBrandSafetyListRequestStatusResponse
     */
    requestStatusList?: Array<SDBrandSafetyRequestStatus>;
}
/**
 * POST Request for Brand Safety
 * @export
 * @interface SDBrandSafetyPostRequest
 */
export interface SDBrandSafetyPostRequest {
    /**
     * 
     * @type {Array<SDBrandSafetyDenyListDomain>}
     * @memberof SDBrandSafetyPostRequest
     */
    domains: Array<SDBrandSafetyDenyListDomain>;
}
/**
 * 
 * @export
 * @interface SDBrandSafetyRequestResult
 */
export interface SDBrandSafetyRequestResult {
    /**
     * The website or app identifier.
     * @type {string}
     * @memberof SDBrandSafetyRequestResult
     */
    name?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof SDBrandSafetyRequestResult
     */
    details?: string;
    /**
     * The identifier of the Brand Safety Deny List Domain.
     * @type {number}
     * @memberof SDBrandSafetyRequestResult
     */
    domainId?: number;
    /**
     * 
     * @type {SDBrandSafetyDenyListDomainUpdateResultStatus}
     * @memberof SDBrandSafetyRequestResult
     */
    status?: SDBrandSafetyDenyListDomainUpdateResultStatus;
}
/**
 * 
 * @export
 * @interface SDBrandSafetyRequestResultsResponse
 */
export interface SDBrandSafetyRequestResultsResponse {
    /**
     * A list of results for the given requestId
     * @type {Array<SDBrandSafetyRequestResult>}
     * @memberof SDBrandSafetyRequestResultsResponse
     */
    results?: Array<SDBrandSafetyRequestResult>;
}
/**
 * 
 * @export
 * @interface SDBrandSafetyRequestStatus
 */
export interface SDBrandSafetyRequestStatus {
    /**
     * Request ID
     * @type {string}
     * @memberof SDBrandSafetyRequestStatus
     */
    requestId?: string;
    /**
     * Details related to the request status
     * @type {string}
     * @memberof SDBrandSafetyRequestStatus
     */
    statusDetails?: string;
    /**
     * Request timestamp
     * @type {string}
     * @memberof SDBrandSafetyRequestStatus
     */
    timestamp?: string;
    /**
     * The status of the request
     * @type {string}
     * @memberof SDBrandSafetyRequestStatus
     */
    status?: SDBrandSafetyRequestStatusStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SDBrandSafetyRequestStatusStatusEnum {
    InProgress = 'IN_PROGRESS',
    Completed = 'COMPLETED',
    Failure = 'FAILURE'
}

/**
 * The status of the request.
 * @export
 * @interface SDBrandSafetyRequestStatusResponse
 */
export interface SDBrandSafetyRequestStatusResponse {
    /**
     * 
     * @type {SDBrandSafetyRequestStatus}
     * @memberof SDBrandSafetyRequestStatusResponse
     */
    requestStatus?: SDBrandSafetyRequestStatus;
}
/**
 * Response for Brand Safety POST and DELETE requests
 * @export
 * @interface SDBrandSafetyUpdateResponse
 */
export interface SDBrandSafetyUpdateResponse {
    /**
     * The identifier of the request
     * @type {string}
     * @memberof SDBrandSafetyUpdateResponse
     */
    requestId?: string;
}
/**
 * 
 * @export
 * @interface SDBudgetHistory
 */
export interface SDBudgetHistory {
    /**
     * 
     * @type {Array<SDRuleBasedBudget>}
     * @memberof SDBudgetHistory
     */
    history?: Array<SDRuleBasedBudget>;
}
/**
 * 
 * @export
 * @interface SDBudgetRule
 */
export interface SDBudgetRule {
    /**
     * 
     * @type {State}
     * @memberof SDBudgetRule
     */
    ruleState?: State;
    /**
     * Epoch time of budget rule update. Read-only.
     * @type {number}
     * @memberof SDBudgetRule
     */
    lastUpdatedDate?: number;
    /**
     * Epoch time of budget rule creation. Read-only.
     * @type {number}
     * @memberof SDBudgetRule
     */
    createdDate?: number;
    /**
     * 
     * @type {SDBudgetRuleDetails}
     * @memberof SDBudgetRule
     */
    ruleDetails?: SDBudgetRuleDetails;
    /**
     * The budget rule identifier.
     * @type {string}
     * @memberof SDBudgetRule
     */
    ruleId: string;
    /**
     * The budget rule status. Read-only.
     * @type {string}
     * @memberof SDBudgetRule
     */
    ruleStatus?: string;
}
/**
 * Object representing details of a budget rule for SD campaign
 * @export
 * @interface SDBudgetRuleDetails
 */
export interface SDBudgetRuleDetails {
    /**
     * 
     * @type {RuleDuration}
     * @memberof SDBudgetRuleDetails
     */
    duration?: RuleDuration;
    /**
     * 
     * @type {Recurrence}
     * @memberof SDBudgetRuleDetails
     */
    recurrence?: Recurrence;
    /**
     * 
     * @type {SDRuleType}
     * @memberof SDBudgetRuleDetails
     */
    ruleType?: SDRuleType;
    /**
     * 
     * @type {BudgetIncreaseBy}
     * @memberof SDBudgetRuleDetails
     */
    budgetIncreaseBy?: BudgetIncreaseBy;
    /**
     * The budget rule name. Required to be unique within a campaign.
     * @type {string}
     * @memberof SDBudgetRuleDetails
     */
    name?: string;
    /**
     * 
     * @type {PerformanceMeasureCondition}
     * @memberof SDBudgetRuleDetails
     */
    performanceMeasureCondition?: PerformanceMeasureCondition;
}
/**
 * A recommended category to target ads on
 * @export
 * @interface SDCategoryRecommendation
 */
export interface SDCategoryRecommendation {
    /**
     * The path of the category within the category catalogue
     * @type {Array<string>}
     * @memberof SDCategoryRecommendation
     */
    path?: Array<string>;
    /**
     * The category name
     * @type {string}
     * @memberof SDCategoryRecommendation
     */
    name?: string;
    /**
     * A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
     * @type {number}
     * @memberof SDCategoryRecommendation
     */
    rank?: number;
    /**
     * 
     * @type {SDCategoryRecommendationTargetableAsinCountRange}
     * @memberof SDCategoryRecommendation
     */
    targetableAsinCountRange?: SDCategoryRecommendationTargetableAsinCountRange;
    /**
     * The category identifier
     * @type {number}
     * @memberof SDCategoryRecommendation
     */
    category?: number;
}
/**
 * The range of ASINs available within the category catalogue
 * @export
 * @interface SDCategoryRecommendationTargetableAsinCountRange
 */
export interface SDCategoryRecommendationTargetableAsinCountRange {
    /**
     * 
     * @type {number}
     * @memberof SDCategoryRecommendationTargetableAsinCountRange
     */
    rangeUpper?: number;
    /**
     * 
     * @type {number}
     * @memberof SDCategoryRecommendationTargetableAsinCountRange
     */
    rangeLower?: number;
}
/**
 * Determines what performance metric the bid recommendations will be optimized for. |Name|Supported Tactics|Description| |----|----------|-----------| |CPC|T00020 T00030|The bid recommendations will be optimized for clicks triggered by the ad.| |VCPM|T00020 T00030|The bid recommendations will be optimized for viewed impressions triggered by the ad.|
 * @export
 * @enum {string}
 */

export enum SDCostTypeV31 {
    Cpc = 'cpc',
    Vcpm = 'vcpm'
}

/**
 * 
 * @export
 * @interface SDErrorResponse
 */
export interface SDErrorResponse {
    /**
     * The HTTP status code of the response
     * @type {string}
     * @memberof SDErrorResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof SDErrorResponse
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface SDGetAssociatedCampaignsResponse
 */
export interface SDGetAssociatedCampaignsResponse {
    /**
     * A list of campaigns that are associated to this budget rule.
     * @type {Array<AssociatedCampaign>}
     * @memberof SDGetAssociatedCampaignsResponse
     */
    associatedCampaigns?: Array<AssociatedCampaign>;
    /**
     * To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
     * @type {string}
     * @memberof SDGetAssociatedCampaignsResponse
     */
    nextToken?: string;
}
/**
 * A product an advertisers wants to advertise. Recommendations will be made for specified goal products.
 * @export
 * @interface SDGoalProduct
 */
export interface SDGoalProduct {
    /**
     * Amazon Standard Identification Number
     * @type {string}
     * @memberof SDGoalProduct
     */
    asin: string;
}
/**
 * 
 * @export
 * @interface SDHeadlineRecommendationAccessDeniedException
 */
export interface SDHeadlineRecommendationAccessDeniedException {
    /**
     * AccessDeniedErrorCode.
     * @type {string}
     * @memberof SDHeadlineRecommendationAccessDeniedException
     */
    code?: SDHeadlineRecommendationAccessDeniedExceptionCodeEnum;
    /**
     * A human-readable description of the error response.
     * @type {string}
     * @memberof SDHeadlineRecommendationAccessDeniedException
     */
    details?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SDHeadlineRecommendationAccessDeniedExceptionCodeEnum {
    AccessDenied = 'ACCESS_DENIED'
}

/**
 * 
 * @export
 * @interface SDHeadlineRecommendationIdentifierNotfoundException
 */
export interface SDHeadlineRecommendationIdentifierNotfoundException {
    /**
     * IdentiferNotFoundErrorCode.
     * @type {string}
     * @memberof SDHeadlineRecommendationIdentifierNotfoundException
     */
    code?: SDHeadlineRecommendationIdentifierNotfoundExceptionCodeEnum;
    /**
     * A human-readable description of the error response.
     * @type {string}
     * @memberof SDHeadlineRecommendationIdentifierNotfoundException
     */
    details?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SDHeadlineRecommendationIdentifierNotfoundExceptionCodeEnum {
    IdentifierNotFound = 'IDENTIFIER_NOT_FOUND'
}

/**
 * 
 * @export
 * @interface SDHeadlineRecommendationInternalServerException
 */
export interface SDHeadlineRecommendationInternalServerException {
    /**
     * InternalErrorCode.
     * @type {string}
     * @memberof SDHeadlineRecommendationInternalServerException
     */
    code?: SDHeadlineRecommendationInternalServerExceptionCodeEnum;
    /**
     * A human-readable description of the error response.
     * @type {string}
     * @memberof SDHeadlineRecommendationInternalServerException
     */
    details?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SDHeadlineRecommendationInternalServerExceptionCodeEnum {
    InternalError = 'INTERNAL_ERROR'
}

/**
 * 
 * @export
 * @interface SDHeadlineRecommendationMarsThrottlingException
 */
export interface SDHeadlineRecommendationMarsThrottlingException {
    /**
     * ThrottledErrorCode.
     * @type {string}
     * @memberof SDHeadlineRecommendationMarsThrottlingException
     */
    code?: SDHeadlineRecommendationMarsThrottlingExceptionCodeEnum;
    /**
     * A human-readable description of the error response.
     * @type {string}
     * @memberof SDHeadlineRecommendationMarsThrottlingException
     */
    details?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SDHeadlineRecommendationMarsThrottlingExceptionCodeEnum {
    Throttled = 'THROTTLED'
}

/**
 * Request structure of SD headline recommendation API.
 * @export
 * @interface SDHeadlineRecommendationRequest
 */
export interface SDHeadlineRecommendationRequest {
    /**
     * An array of ASINs associated with the creative.
     * @type {Array<string>}
     * @memberof SDHeadlineRecommendationRequest
     */
    asins?: Array<string>;
    /**
     * Maximum number of recommendations that API should return. Response will [0, maxNumRecommendations] recommendations (recommendations are not guaranteed as there can be instances where the ML model can not generate policy compliant headlines for the given set of asins).
     * @type {number}
     * @memberof SDHeadlineRecommendationRequest
     */
    maxNumRecommendations?: number;
    /**
     * 
     * @type {string}
     * @memberof SDHeadlineRecommendationRequest
     */
    adFormat?: SDHeadlineRecommendationRequestAdFormatEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SDHeadlineRecommendationRequestAdFormatEnum {
    SponsoredDisplay = 'SPONSORED_DISPLAY'
}

/**
 * Response structure of SD headline recommendation API.
 * @export
 * @interface SDHeadlineRecommendationResponse
 */
export interface SDHeadlineRecommendationResponse {
    /**
     * An identifier for request made which is generated by server.
     * @type {string}
     * @memberof SDHeadlineRecommendationResponse
     */
    requestId?: string;
    /**
     * Recommendations are sorted, i.e., more suitable headline has lesser array index value.
     * @type {Array<RecommendedHeadline>}
     * @memberof SDHeadlineRecommendationResponse
     */
    recommendations?: Array<RecommendedHeadline>;
}
/**
 * 
 * @export
 * @interface SDHeadlineRecommendationSchemaValidationException
 */
export interface SDHeadlineRecommendationSchemaValidationException {
    /**
     * InvalidArgumentErrorCode.
     * @type {string}
     * @memberof SDHeadlineRecommendationSchemaValidationException
     */
    code?: SDHeadlineRecommendationSchemaValidationExceptionCodeEnum;
    /**
     * A human-readable description of the error response.
     * @type {string}
     * @memberof SDHeadlineRecommendationSchemaValidationException
     */
    details?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SDHeadlineRecommendationSchemaValidationExceptionCodeEnum {
    InvalidArgument = 'INVALID_ARGUMENT'
}

/**
 * 
 * @export
 * @interface SDListAssociatedBudgetRulesResponse
 */
export interface SDListAssociatedBudgetRulesResponse {
    /**
     * A list of associated budget rules.
     * @type {Array<SDBudgetRule>}
     * @memberof SDListAssociatedBudgetRulesResponse
     */
    associatedRules?: Array<SDBudgetRule>;
}
/**
 * A recommended product to target ads on
 * @export
 * @interface SDProductRecommendation
 */
export interface SDProductRecommendation {
    /**
     * A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
     * @type {number}
     * @memberof SDProductRecommendation
     */
    rank?: number;
    /**
     * Amazon Standard Identification Number
     * @type {string}
     * @memberof SDProductRecommendation
     */
    asin?: string;
}
/**
 * Signifies a type of recommendation
 * @export
 * @enum {string}
 */

export enum SDRecommendationType {
    Product = 'PRODUCT'
}

/**
 * Signifies a type of recommendation
 * @export
 * @enum {string}
 */

export enum SDRecommendationTypeV31 {
    Product = 'PRODUCT',
    Category = 'CATEGORY'
}

/**
 * Signifies a type of recommendation
 * @export
 * @enum {string}
 */

export enum SDRecommendationTypeV32 {
    Product = 'PRODUCT',
    Category = 'CATEGORY',
    Audience = 'AUDIENCE'
}

/**
 * 
 * @export
 * @interface SDRuleBasedBudget
 */
export interface SDRuleBasedBudget {
    /**
     * Epoch time of budget rule execution.
     * @type {number}
     * @memberof SDRuleBasedBudget
     */
    executionTime?: number;
    /**
     * 
     * @type {SDBudgetRule}
     * @memberof SDRuleBasedBudget
     */
    appliedRule?: SDBudgetRule;
    /**
     * The budget value.
     * @type {number}
     * @memberof SDRuleBasedBudget
     */
    ruleBasedBudgetValue?: number;
    /**
     * The daily budget value.
     * @type {number}
     * @memberof SDRuleBasedBudget
     */
    dailyBudgetValue?: number;
    /**
     * 
     * @type {PerformanceMetricValue}
     * @memberof SDRuleBasedBudget
     */
    performanceMetric?: PerformanceMetricValue;
}
/**
 * The type of budget rule. SCHEDULE: A budget rule based on a start and end date. PERFORMANCE: A budget rule based on advertising performance criteria.
 * @export
 * @enum {string}
 */

export enum SDRuleType {
    Schedule = 'SCHEDULE',
    Performance = 'PERFORMANCE'
}

/**
 * The advertising tactic associated with the campaign. The following table lists available tactic names:  |Tactic Name|Type|Description| |-----------|-----|-----------| |T00001&nbsp;|&nbsp;|This tactic name is only applicable for the `requestReport` operation and does not apply to any other campaign management operations. Reach shoppers who showed interest in categories related to your promoted products, or target specific products or product categories on Amazon. This tactic is for use by only vendors. This tactic is used to retrieve metrics for Sponsored Display campaigns that use interest, product or category audiences, including Sponsored Display campaigns that were previously Product Display Ads campaigns.| |T00010&nbsp;|Views&nbsp;|**Note that this advertising tactic is not currently supported. This note will be removed when this advertising tactic is available.** This is the same tactic as \'remarketing\'. Shoppers who viewed the detail pages of your advertised products or similar products.| |remarketing&nbsp;|Views&nbsp;|This is the same tactic as \'T00010\'. Shoppers who viewed the detail pages of your advertised products or similar products.| |T00020&nbsp;|Products&nbsp;|Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.|
 * @export
 * @enum {string}
 */

export enum SDTactic {
    T00001 = 'T00001',
    T00010 = 'T00010',
    T00020 = 'T00020',
    Remarketing = 'remarketing'
}

/**
 * The advertising tactic associated with the campaign. The following table lists available tactic names: |Tactic Name|Type|Description| |-----------|-----|-----------| |T00001&nbsp;|&nbsp;|This tactic name is only applicable for the `requestReport` operation and does not apply to any other campaign management operations. Reach shoppers who showed interest in categories related to your promoted products, or target specific products or product categories on Amazon. This tactic is for use by only vendors. This tactic is used to retrieve metrics for Sponsored Display campaigns that use interest, product or category audiences, including Sponsored Display campaigns that were previously Product Display Ads campaigns.| |T00010&nbsp;|Views&nbsp;|**Note that this advertising tactic is not currently supported. This note will be removed when this advertising tactic is available.** This is the same tactic as \'remarketing\'. Shoppers who viewed the detail pages of your advertised products or similar products.| |remarketing&nbsp;|Views&nbsp;|This is the same tactic as \'T00010\'. Shoppers who viewed the detail pages of your advertised products or similar products.| |T00020&nbsp;|Products&nbsp;|Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.| |T00030&nbsp;|Audiences&nbsp;|Select individual audiences to show your ads.|
 * @export
 * @enum {string}
 */

export enum SDTacticV31 {
    T00001 = 'T00001',
    T00010 = 'T00010',
    T00020 = 'T00020',
    Remarketing = 'remarketing',
    T00030 = 'T00030'
}

/**
 * @type SDTargetExpressionV31
 * @export
 */
export type SDTargetExpressionV31 = SDTargetingPredicateNestedV31 | SDTargetingPredicateV31;

/**
 * Request for targeting bid recommendations.
 * @export
 * @interface SDTargetingBidRecommendationsRequestV31
 */
export interface SDTargetingBidRecommendationsRequestV31 {
    /**
     * A list of targeting clauses to receive bid recommendations for.
     * @type {Array<SDTargetingBidRecommendationsRequestV32TargetingClauses>}
     * @memberof SDTargetingBidRecommendationsRequestV31
     */
    targetingClauses: Array<SDTargetingBidRecommendationsRequestV32TargetingClauses>;
    /**
     * A list of products to tailor bid recommendations for category and audience based targeting clauses.
     * @type {Array<SDGoalProduct>}
     * @memberof SDTargetingBidRecommendationsRequestV31
     */
    products?: Array<SDGoalProduct>;
}
/**
 * Request for targeting bid recommendations.
 * @export
 * @interface SDTargetingBidRecommendationsRequestV32
 */
export interface SDTargetingBidRecommendationsRequestV32 {
    /**
     * 
     * @type {SDBidOptimizationV32}
     * @memberof SDTargetingBidRecommendationsRequestV32
     */
    bidOptimization: SDBidOptimizationV32;
    /**
     * 
     * @type {SDCostTypeV31}
     * @memberof SDTargetingBidRecommendationsRequestV32
     */
    costType: SDCostTypeV31;
    /**
     * A list of targeting clauses to receive bid recommendations for.
     * @type {Array<SDTargetingBidRecommendationsRequestV32TargetingClauses>}
     * @memberof SDTargetingBidRecommendationsRequestV32
     */
    targetingClauses: Array<SDTargetingBidRecommendationsRequestV32TargetingClauses>;
    /**
     * A list of products to tailor bid recommendations for category and audience based targeting clauses.
     * @type {Array<SDGoalProduct>}
     * @memberof SDTargetingBidRecommendationsRequestV32
     */
    products?: Array<SDGoalProduct>;
}
/**
 * 
 * @export
 * @interface SDTargetingBidRecommendationsRequestV32TargetingClauses
 */
export interface SDTargetingBidRecommendationsRequestV32TargetingClauses {
    /**
     * 
     * @type {SDTargetingClauseV31}
     * @memberof SDTargetingBidRecommendationsRequestV32TargetingClauses
     */
    targetingClause: SDTargetingClauseV31;
}
/**
 * Failed bid recommendation response.
 * @export
 * @interface SDTargetingBidRecommendationsResponseItemFailureV31
 */
export interface SDTargetingBidRecommendationsResponseItemFailureV31 {
    /**
     * The HTTP status code of this item.
     * @type {string}
     * @memberof SDTargetingBidRecommendationsResponseItemFailureV31
     */
    code: string;
    /**
     * A human-readable description of this item on error.
     * @type {string}
     * @memberof SDTargetingBidRecommendationsResponseItemFailureV31
     */
    details: string;
}
/**
 * A recommended bid range to use for a target.
 * @export
 * @interface SDTargetingBidRecommendationsResponseItemSuccessV31
 */
export interface SDTargetingBidRecommendationsResponseItemSuccessV31 {
    /**
     * The HTTP status code of this item.
     * @type {string}
     * @memberof SDTargetingBidRecommendationsResponseItemSuccessV31
     */
    code: string;
    /**
     * The highest recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDTargetingBidRecommendationsResponseItemSuccessV31
     */
    rangeUpper: number;
    /**
     * The lowest recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDTargetingBidRecommendationsResponseItemSuccessV31
     */
    rangeLower: number;
    /**
     * The recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDTargetingBidRecommendationsResponseItemSuccessV31
     */
    recommended: number;
}
/**
 * Success response for corresponding targeting clause on the request.
 * @export
 * @interface SDTargetingBidRecommendationsResponseItemSuccessV31AllOf
 */
export interface SDTargetingBidRecommendationsResponseItemSuccessV31AllOf {
    /**
     * The HTTP status code of this item.
     * @type {string}
     * @memberof SDTargetingBidRecommendationsResponseItemSuccessV31AllOf
     */
    code?: string;
}
/**
 * Response to a request for targeting bid recommendations.
 * @export
 * @interface SDTargetingBidRecommendationsResponseV31
 */
export interface SDTargetingBidRecommendationsResponseV31 {
    /**
     * 
     * @type {Array<SDTargetingBidRecommendationsResponseItemSuccessV31 | SDTargetingBidRecommendationsResponseItemFailureV31>}
     * @memberof SDTargetingBidRecommendationsResponseV31
     */
    bidRecommendations: Array<SDTargetingBidRecommendationsResponseItemSuccessV31 | SDTargetingBidRecommendationsResponseItemFailureV31>;
    /**
     * 
     * @type {SDCostTypeV31}
     * @memberof SDTargetingBidRecommendationsResponseV31
     */
    costType: SDCostTypeV31;
}
/**
 * Response to a request for targeting bid recommendations.
 * @export
 * @interface SDTargetingBidRecommendationsResponseV32
 */
export interface SDTargetingBidRecommendationsResponseV32 {
    /**
     * 
     * @type {SDBidOptimizationV32}
     * @memberof SDTargetingBidRecommendationsResponseV32
     */
    bidOptimization: SDBidOptimizationV32;
    /**
     * 
     * @type {Array<SDTargetingBidRecommendationsResponseItemSuccessV31 | SDTargetingBidRecommendationsResponseItemFailureV31>}
     * @memberof SDTargetingBidRecommendationsResponseV32
     */
    bidRecommendations: Array<SDTargetingBidRecommendationsResponseItemSuccessV31 | SDTargetingBidRecommendationsResponseItemFailureV31>;
    /**
     * 
     * @type {SDCostTypeV31}
     * @memberof SDTargetingBidRecommendationsResponseV32
     */
    costType: SDCostTypeV31;
}
/**
 * The targeting clause
 * @export
 * @interface SDTargetingClauseV31
 */
export interface SDTargetingClauseV31 {
    /**
     * The targeting expression to match against.  ------- Applicable to Product targeting (T00020) ------- * A \'TargetingExpression\' in a Product targeting Campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to Audience targeting (T00030) ------- * A \'TargetingExpression\' in an Audience Campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify either auto ASIN-grain (exact products), manual ASIN-grain (similar products), or manual category-grain targeting. * **Future** To exclude parts of an audience, specify a TargetingPredicateNested component that contains a negative TargetingPredicate type.
     * @type {Array<SDTargetExpressionV31>}
     * @memberof SDTargetingClauseV31
     */
    expression: Array<SDTargetExpressionV31>;
    /**
     * Tactic T00020 ad groups only allow manual targeting.
     * @type {string}
     * @memberof SDTargetingClauseV31
     */
    expressionType: SDTargetingClauseV31ExpressionTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SDTargetingClauseV31ExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * A predicate to match against inside the TargetingPredicateNested component (only applicable to Audience targeting - T00030).  * All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Advertising browse system. * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the â€˜betweenâ€™ strings to construct a targeting expression the format of the string is â€˜double-doubleâ€™ where the first double must be smaller than the second double. Prices are not inclusive. * The exactProduct, similarProduct, and negative types do not utilize the value field. * The only type currently applicable to Amazon Audiences targeting is \'audienceSameAs\'. * **Future** A \'negative\' TargetingPredicateBase will exclude that TargetingPredicateNested from the overall audience.
 * @export
 * @interface SDTargetingPredicateBaseV31
 */
export interface SDTargetingPredicateBaseV31 {
    /**
     * 
     * @type {string}
     * @memberof SDTargetingPredicateBaseV31
     */
    type: SDTargetingPredicateBaseV31TypeEnum;
    /**
     * The value to be targeted.
     * @type {string}
     * @memberof SDTargetingPredicateBaseV31
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SDTargetingPredicateBaseV31TypeEnum {
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    SimilarProduct = 'similarProduct',
    ExactProduct = 'exactProduct',
    AsinIsPrimeShippingEligible = 'asinIsPrimeShippingEligible',
    AsinAgeRangeSameAs = 'asinAgeRangeSameAs',
    AsinGenreSameAs = 'asinGenreSameAs',
    AudienceSameAs = 'audienceSameAs',
    Lookback = 'lookback',
    Negative = 'negative',
    RelatedProduct = 'relatedProduct'
}

/**
 * A behavioral event and list of targeting predicates that represents an Audience to target (only applicable to Audience targeting - T00030).  * For auto ASIN-grain targeting, the value array must contain only \'exactProduct\' and \'lookback\' TargetingPredicateBase components. * For manual ASIN-grain targeting, the value array must contain only \'similarProduct\' and \'lookback\' TargetingPredicateBase components. * For manual Category-grain targeting, the value array must contain a \'lookback\' and \'asinCategorySameAs\' TargetingPredicateBase component, which can be further refined with optional brand, price, star-rating and shipping eligibility refinements. * For Amazon Audiences targeting, the TargetingPredicateNested type should be set to \'audience\' and the value array should include one TargetingPredicateBase component with type set to \'audienceSameAs\'. * **Future** For manual Category-grain targeting, adding a \'negative\' TargetingPredicateBase will exclude that TargetingPredicateNested from the overall audience.
 * @export
 * @interface SDTargetingPredicateNestedV31
 */
export interface SDTargetingPredicateNestedV31 {
    /**
     * 
     * @type {string}
     * @memberof SDTargetingPredicateNestedV31
     */
    type: SDTargetingPredicateNestedV31TypeEnum;
    /**
     * 
     * @type {Array<SDTargetingPredicateBaseV31>}
     * @memberof SDTargetingPredicateNestedV31
     */
    value: Array<SDTargetingPredicateBaseV31>;
}

/**
    * @export
    * @enum {string}
    */
export enum SDTargetingPredicateNestedV31TypeEnum {
    Views = 'views',
    Audience = 'audience',
    Purchases = 'purchases'
}

/**
 * A predicate to match against in the Targeting Expression (only applicable to Product targeting - T00020).  * All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Advertising browse system. * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the â€˜betweenâ€™ strings to construct a targeting expression the format of the string is â€˜double-doubleâ€™ where the first double must be smaller than the second double. Prices are not inclusive.
 * @export
 * @interface SDTargetingPredicateV31
 */
export interface SDTargetingPredicateV31 {
    /**
     * 
     * @type {string}
     * @memberof SDTargetingPredicateV31
     */
    type: SDTargetingPredicateV31TypeEnum;
    /**
     * The value to be targeted.
     * @type {string}
     * @memberof SDTargetingPredicateV31
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SDTargetingPredicateV31TypeEnum {
    AsinSameAs = 'asinSameAs',
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    AsinIsPrimeShippingEligible = 'asinIsPrimeShippingEligible',
    AsinAgeRangeSameAs = 'asinAgeRangeSameAs',
    AsinGenreSameAs = 'asinGenreSameAs',
    SimilarProduct = 'similarProduct'
}

/**
 * A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.
 * @export
 * @interface SDTargetingRecommendations
 */
export interface SDTargetingRecommendations {
    /**
     * List of recommended product targets
     * @type {Array<SDProductRecommendation>}
     * @memberof SDTargetingRecommendations
     */
    products?: Array<SDProductRecommendation>;
}
/**
 * Request for targeting recommendations
 * @export
 * @interface SDTargetingRecommendationsRequest
 */
export interface SDTargetingRecommendationsRequest {
    /**
     * A filter to indicate which types of recommendations to request.
     * @type {Array<SDRecommendationType>}
     * @memberof SDTargetingRecommendationsRequest
     */
    typeFilter: Array<SDRecommendationType>;
    /**
     * 
     * @type {SDTactic}
     * @memberof SDTargetingRecommendationsRequest
     */
    tactic: SDTactic;
    /**
     * A list of products for which to get targeting recommendations
     * @type {Array<SDGoalProduct>}
     * @memberof SDTargetingRecommendationsRequest
     */
    products: Array<SDGoalProduct>;
}
/**
 * Request for targeting recommendations
 * @export
 * @interface SDTargetingRecommendationsRequestV31
 */
export interface SDTargetingRecommendationsRequestV31 {
    /**
     * A filter to indicate which types of recommendations to request.
     * @type {Array<SDRecommendationTypeV31>}
     * @memberof SDTargetingRecommendationsRequestV31
     */
    typeFilter: Array<SDRecommendationTypeV31>;
    /**
     * 
     * @type {SDTacticV31}
     * @memberof SDTargetingRecommendationsRequestV31
     */
    tactic: SDTacticV31;
    /**
     * A list of products for which to get targeting recommendations
     * @type {Array<SDGoalProduct>}
     * @memberof SDTargetingRecommendationsRequestV31
     */
    products: Array<SDGoalProduct>;
}
/**
 * Request for targeting recommendations
 * @export
 * @interface SDTargetingRecommendationsRequestV32
 */
export interface SDTargetingRecommendationsRequestV32 {
    /**
     * A filter to indicate which types of recommendations to request.
     * @type {Array<SDRecommendationTypeV32>}
     * @memberof SDTargetingRecommendationsRequestV32
     */
    typeFilter: Array<SDRecommendationTypeV32>;
    /**
     * 
     * @type {SDTacticV31}
     * @memberof SDTargetingRecommendationsRequestV32
     */
    tactic: SDTacticV31;
    /**
     * A list of products for which to get targeting recommendations
     * @type {Array<SDGoalProduct>}
     * @memberof SDTargetingRecommendationsRequestV32
     */
    products: Array<SDGoalProduct>;
}
/**
 * Response to a request for targeting recommendations
 * @export
 * @interface SDTargetingRecommendationsResponse
 */
export interface SDTargetingRecommendationsResponse {
    /**
     * 
     * @type {SDTargetingRecommendations}
     * @memberof SDTargetingRecommendationsResponse
     */
    recommendations?: SDTargetingRecommendations;
}
/**
 * Response to a request for targeting recommendations
 * @export
 * @interface SDTargetingRecommendationsResponseV31
 */
export interface SDTargetingRecommendationsResponseV31 {
    /**
     * 
     * @type {SDTargetingRecommendationsV31}
     * @memberof SDTargetingRecommendationsResponseV31
     */
    recommendations?: SDTargetingRecommendationsV31;
}
/**
 * Response to a request for targeting recommendations
 * @export
 * @interface SDTargetingRecommendationsResponseV32
 */
export interface SDTargetingRecommendationsResponseV32 {
    /**
     * 
     * @type {SDTargetingRecommendationsV32}
     * @memberof SDTargetingRecommendationsResponseV32
     */
    recommendations?: SDTargetingRecommendationsV32;
}
/**
 * A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.
 * @export
 * @interface SDTargetingRecommendationsV31
 */
export interface SDTargetingRecommendationsV31 {
    /**
     * List of recommended category targets
     * @type {Array<SDCategoryRecommendation>}
     * @memberof SDTargetingRecommendationsV31
     */
    categories?: Array<SDCategoryRecommendation>;
    /**
     * List of recommended product targets
     * @type {Array<SDProductRecommendation>}
     * @memberof SDTargetingRecommendationsV31
     */
    products?: Array<SDProductRecommendation>;
}
/**
 * A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.
 * @export
 * @interface SDTargetingRecommendationsV32
 */
export interface SDTargetingRecommendationsV32 {
    /**
     * List of recommended standard Amazon audience targets
     * @type {Array<SDAudienceRecommendation>}
     * @memberof SDTargetingRecommendationsV32
     */
    audiences?: Array<SDAudienceRecommendation>;
    /**
     * List of recommended category targets
     * @type {Array<SDCategoryRecommendation>}
     * @memberof SDTargetingRecommendationsV32
     */
    categories?: Array<SDCategoryRecommendation>;
    /**
     * List of recommended product targets
     * @type {Array<SDProductRecommendation>}
     * @memberof SDTargetingRecommendationsV32
     */
    products?: Array<SDProductRecommendation>;
}
/**
 * 
 * @export
 * @interface SPBudgetHistory
 */
export interface SPBudgetHistory {
    /**
     * To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
     * @type {string}
     * @memberof SPBudgetHistory
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<SPRuleBasedBudget>}
     * @memberof SPBudgetHistory
     */
    history?: Array<SPRuleBasedBudget>;
}
/**
 * 
 * @export
 * @interface SPBudgetRule
 */
export interface SPBudgetRule {
    /**
     * 
     * @type {State}
     * @memberof SPBudgetRule
     */
    ruleState?: State;
    /**
     * Epoch time of budget rule update. Read-only.
     * @type {number}
     * @memberof SPBudgetRule
     */
    lastUpdatedDate?: number;
    /**
     * Epoch time of budget rule creation. Read-only.
     * @type {number}
     * @memberof SPBudgetRule
     */
    createdDate?: number;
    /**
     * 
     * @type {SPBudgetRuleDetails}
     * @memberof SPBudgetRule
     */
    ruleDetails?: SPBudgetRuleDetails;
    /**
     * The budget rule identifier.
     * @type {string}
     * @memberof SPBudgetRule
     */
    ruleId: string;
    /**
     * The budget rule status. Read-only.
     * @type {string}
     * @memberof SPBudgetRule
     */
    ruleStatus?: string;
}
/**
 * Object representing details of a budget rule for SP campaign
 * @export
 * @interface SPBudgetRuleDetails
 */
export interface SPBudgetRuleDetails {
    /**
     * 
     * @type {RuleDuration}
     * @memberof SPBudgetRuleDetails
     */
    duration?: RuleDuration;
    /**
     * 
     * @type {Recurrence}
     * @memberof SPBudgetRuleDetails
     */
    recurrence?: Recurrence;
    /**
     * 
     * @type {SPRuleType}
     * @memberof SPBudgetRuleDetails
     */
    ruleType?: SPRuleType;
    /**
     * 
     * @type {BudgetIncreaseBy}
     * @memberof SPBudgetRuleDetails
     */
    budgetIncreaseBy?: BudgetIncreaseBy;
    /**
     * The budget rule name. Required to be unique within a campaign.
     * @type {string}
     * @memberof SPBudgetRuleDetails
     */
    name?: string;
    /**
     * 
     * @type {PerformanceMeasureCondition}
     * @memberof SPBudgetRuleDetails
     */
    performanceMeasureCondition?: PerformanceMeasureCondition;
}
/**
 * 
 * @export
 * @interface SPCampaignBudgetRule
 */
export interface SPCampaignBudgetRule {
    /**
     * 
     * @type {State}
     * @memberof SPCampaignBudgetRule
     */
    ruleState?: State;
    /**
     * Epoch time of budget rule update. Read-only.
     * @type {number}
     * @memberof SPCampaignBudgetRule
     */
    lastUpdatedDate?: number;
    /**
     * Epoch time of budget rule creation. Read-only.
     * @type {number}
     * @memberof SPCampaignBudgetRule
     */
    createdDate?: number;
    /**
     * 
     * @type {SPBudgetRuleDetails}
     * @memberof SPCampaignBudgetRule
     */
    ruleDetails?: SPBudgetRuleDetails;
    /**
     * The budget rule identifier.
     * @type {string}
     * @memberof SPCampaignBudgetRule
     */
    ruleId: string;
    /**
     * The budget rule evaluation status. Read-only.
     * @type {string}
     * @memberof SPCampaignBudgetRule
     */
    ruleStatus?: string;
}
/**
 * 
 * @export
 * @interface SPGetAssociatedCampaignsResponse
 */
export interface SPGetAssociatedCampaignsResponse {
    /**
     * A list of campaigns that are associated to this budget rule.
     * @type {Array<AssociatedCampaign>}
     * @memberof SPGetAssociatedCampaignsResponse
     */
    associatedCampaigns?: Array<AssociatedCampaign>;
    /**
     * To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
     * @type {string}
     * @memberof SPGetAssociatedCampaignsResponse
     */
    nextToken?: string;
}
/**
 * 
 * @export
 * @interface SPListAssociatedBudgetRulesResponse
 */
export interface SPListAssociatedBudgetRulesResponse {
    /**
     * A list of associated budget rules.
     * @type {Array<SPCampaignBudgetRule>}
     * @memberof SPListAssociatedBudgetRulesResponse
     */
    associatedRules?: Array<SPCampaignBudgetRule>;
}
/**
 * 
 * @export
 * @interface SPRuleBasedBudget
 */
export interface SPRuleBasedBudget {
    /**
     * Epoch time of budget rule execution.
     * @type {number}
     * @memberof SPRuleBasedBudget
     */
    executionTime?: number;
    /**
     * 
     * @type {SPBudgetRule}
     * @memberof SPRuleBasedBudget
     */
    appliedRule?: SPBudgetRule;
    /**
     * The budget value.
     * @type {number}
     * @memberof SPRuleBasedBudget
     */
    ruleBasedBudgetValue?: number;
    /**
     * The daily budget value.
     * @type {number}
     * @memberof SPRuleBasedBudget
     */
    dailyBudgetValue?: number;
    /**
     * 
     * @type {PerformanceMetricValue}
     * @memberof SPRuleBasedBudget
     */
    performanceMetric?: PerformanceMetricValue;
}
/**
 * The type of budget rule. SCHEDULE: A budget rule based on a start and end date. PERFORMANCE: A budget rule based on advertising performance criteria.
 * @export
 * @enum {string}
 */

export enum SPRuleType {
    Schedule = 'SCHEDULE',
    Performance = 'PERFORMANCE'
}

/**
 * The error response object
 * @export
 * @interface SdDefaultError
 */
export interface SdDefaultError {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof SdDefaultError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof SdDefaultError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface SnapshotRequest
 */
export interface SnapshotRequest {
    /**
     * Optional. Restricts results to entities with the advertising tactic associated with the campaign within the specified comma-separated list. The tacticFilter not presenting or passing `null` or `\"\"` would be treated as default behavior is to return entities for all tactics.
     * @type {string}
     * @memberof SnapshotRequest
     */
    tacticFilter?: SnapshotRequestTacticFilterEnum;
    /**
     * Optional. Restricts results to entities with state within the specified comma-separated list. The stateFilter not presenting or passing `null` or `\"\"` would be treated as default behavior is to include enabled and paused.
     * @type {string}
     * @memberof SnapshotRequest
     */
    stateFilter?: SnapshotRequestStateFilterEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SnapshotRequestTacticFilterEnum {
    T00010 = 'T00010',
    T00020 = 'T00020',
    Remarketing = 'remarketing',
    T00010T00020 = 'T00010,T00020',
    T00020remarketing = 'T00020,remarketing',
    T00010remarketing = 'T00010,remarketing',
    T00010T00020remarketing = 'T00010,T00020,remarketing'
}
/**
    * @export
    * @enum {string}
    */
export enum SnapshotRequestStateFilterEnum {
    EnabledPaused = 'enabled, paused',
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived',
    Enabledarchived = 'enabled,archived',
    Pausedarchived = 'paused,archived',
    Enabledpausedarchived = 'enabled,paused,archived'
}

/**
 * 
 * @export
 * @interface SnapshotResponse
 */
export interface SnapshotResponse {
    /**
     * The identifier of the snapshot that was requested.
     * @type {string}
     * @memberof SnapshotResponse
     */
    snapshotId?: string;
    /**
     * The size of the snapshot file in bytes. It\'s only available if status is SUCCESS.
     * @type {number}
     * @memberof SnapshotResponse
     */
    fileSize?: number;
    /**
     * The record type of the snapshot file.
     * @type {string}
     * @memberof SnapshotResponse
     */
    recordType?: SnapshotResponseRecordTypeEnum;
    /**
     * Status information of the call if SUCCESS or FAILURE status, optional for IN_PROCESS.
     * @type {string}
     * @memberof SnapshotResponse
     */
    statusDetails?: string;
    /**
     * The URI for the snapshot. It\'s only available if status is SUCCESS.
     * @type {string}
     * @memberof SnapshotResponse
     */
    location?: string;
    /**
     * The epoch time for expiration of the snapshot file. It\'s only available if status is SUCCESS.
     * @type {number}
     * @memberof SnapshotResponse
     */
    expiration?: number;
    /**
     * The status of the generation of the snapshot.
     * @type {string}
     * @memberof SnapshotResponse
     */
    status?: SnapshotResponseStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SnapshotResponseRecordTypeEnum {
    Campaigns = 'campaigns',
    AdGroups = 'adGroups',
    ProductAds = 'productAds',
    Targets = 'targets',
    NegativeTargets = 'negativeTargets'
}
/**
    * @export
    * @enum {string}
    */
export enum SnapshotResponseStatusEnum {
    InProgress = 'IN_PROGRESS',
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * The budget rule state.
 * @export
 * @enum {string}
 */

export enum State {
    Active = 'ACTIVE',
    Paused = 'PAUSED'
}

/**
 * Suggested Headline in response object.
 * @export
 * @interface SuggestedHeadline
 */
export interface SuggestedHeadline {
    /**
     * Unique Id of suggested headline.
     * @type {string}
     * @memberof SuggestedHeadline
     */
    headlineId?: string;
    /**
     * String that contains suggested headline.
     * @type {string}
     * @memberof SuggestedHeadline
     */
    headline?: string;
}
/**
 * Text component which needs to be pre moderated
 * @export
 * @interface TextComponent
 */
export interface TextComponent {
    /**
     * Type of text component.
     * @type {string}
     * @memberof TextComponent
     */
    componentType: TextComponentComponentTypeEnum;
    /**
     * Id of the component. The same will be returned as part of the response as well. This can be used to uniquely identify the component from the pre moderation response.
     * @type {string}
     * @memberof TextComponent
     */
    id: string;
    /**
     * Text which needs to be moderated.
     * @type {string}
     * @memberof TextComponent
     */
    text: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TextComponentComponentTypeEnum {
    Headline = 'HEADLINE',
    BrandName = 'BRAND_NAME',
    OtherText = 'OTHER_TEXT'
}

/**
 * Pre moderation result for a text component
 * @export
 * @interface TextComponentResponse
 */
export interface TextComponentResponse {
    /**
     * The pre moderation status of the component.
     * @type {string}
     * @memberof TextComponentResponse
     */
    preModerationStatus?: TextComponentResponsePreModerationStatusEnum;
    /**
     * Type of the text component.
     * @type {string}
     * @memberof TextComponentResponse
     */
    componentType?: TextComponentResponseComponentTypeEnum;
    /**
     * A list of corrected text without any policy violation. You could consider replacing the component with one of the corrected texts
     * @type {Array<string>}
     * @memberof TextComponentResponse
     */
    corrections?: Array<string>;
    /**
     * A list of policy violations for the component that were detected during pre moderation. Note that this field is present in the response only when preModerationStatus is set to REJECTED.
     * @type {Array<TextPolicyViolation>}
     * @memberof TextComponentResponse
     */
    policyViolations?: Array<TextPolicyViolation>;
    /**
     * Id of the component. This is the same id sent as part of the request. This can be used to uniquely identify the component.
     * @type {string}
     * @memberof TextComponentResponse
     */
    id?: string;
    /**
     * Text which got pre moderated.
     * @type {string}
     * @memberof TextComponentResponse
     */
    text?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TextComponentResponsePreModerationStatusEnum {
    Rejected = 'REJECTED',
    Approved = 'APPROVED',
    Failed = 'FAILED',
    RetryableFailure = 'RETRYABLE_FAILURE'
}
/**
    * @export
    * @enum {string}
    */
export enum TextComponentResponseComponentTypeEnum {
    Headline = 'HEADLINE',
    BrandName = 'BRAND_NAME',
    OtherText = 'OTHER_TEXT'
}

/**
 * Structure of a text evidence
 * @export
 * @interface TextEvidence
 */
export interface TextEvidence {
    /**
     * The specific text determined to violate the specified policy in reviewedText.
     * @type {string}
     * @memberof TextEvidence
     */
    violatingText?: string;
    /**
     * 
     * @type {TextEvidencePosition}
     * @memberof TextEvidence
     */
    position?: TextEvidencePosition;
}
/**
 * Position in the textComponent where the policy violation is detected.
 * @export
 * @interface TextEvidencePosition
 */
export interface TextEvidencePosition {
    /**
     * Zero-based index into the text in textComponent where the text specified in violatingText starts.
     * @type {number}
     * @memberof TextEvidencePosition
     */
    start?: number;
    /**
     * Zero-based index into the text in textComponent where the text specified in violatingText ends.
     * @type {number}
     * @memberof TextEvidencePosition
     */
    end?: number;
}
/**
 * Structure of policy violation for a text component
 * @export
 * @interface TextPolicyViolation
 */
export interface TextPolicyViolation {
    /**
     * A human-readable description of the policy.
     * @type {string}
     * @memberof TextPolicyViolation
     */
    policyDescription?: string;
    /**
     * A policy violation code.
     * @type {string}
     * @memberof TextPolicyViolation
     */
    name?: string;
    /**
     * Type of policy violation.
     * @type {string}
     * @memberof TextPolicyViolation
     */
    type?: TextPolicyViolationTypeEnum;
    /**
     * Address of the policy documentation. Follow the link to learn more about the specified policy.
     * @type {string}
     * @memberof TextPolicyViolation
     */
    policyLinkUrl?: string;
    /**
     * List of text evidences
     * @type {Array<TextEvidence>}
     * @memberof TextPolicyViolation
     */
    textEvidences?: Array<TextEvidence>;
}

/**
    * @export
    * @enum {string}
    */
export enum TextPolicyViolationTypeEnum {
    Warning = 'WARNING',
    Rejected = 'REJECTED'
}

/**
 * 
 * @export
 * @interface TextPosition
 */
export interface TextPosition {
    /**
     * Zero-based index into the text in reviewedText where the text specified in violatingText starts.
     * @type {number}
     * @memberof TextPosition
     */
    start?: number;
    /**
     * Zero-based index into the text in reviewedText where the text specified in violatingText ends.
     * @type {number}
     * @memberof TextPosition
     */
    end?: number;
}
/**
 * 
 * @export
 * @interface TextRecommendation
 */
export interface TextRecommendation {
    /**
     * Unique ID for generated recommendation.
     * @type {string}
     * @memberof TextRecommendation
     */
    id?: string;
    /**
     * Recommendation value.
     * @type {string}
     * @memberof TextRecommendation
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface UpdateBudgetRulesResponse
 */
export interface UpdateBudgetRulesResponse {
    /**
     * 
     * @type {Array<BudgetRuleResponse>}
     * @memberof UpdateBudgetRulesResponse
     */
    responses?: Array<BudgetRuleResponse>;
}
/**
 * 
 * @export
 * @interface UpdateSBBudgetRulesRequest
 */
export interface UpdateSBBudgetRulesRequest {
    /**
     * A list of budget rule details.
     * @type {Array<SBBudgetRule>}
     * @memberof UpdateSBBudgetRulesRequest
     */
    budgetRulesDetails?: Array<SBBudgetRule>;
}
/**
 * Request object for updating budget rule for SD campaign
 * @export
 * @interface UpdateSDBudgetRulesRequest
 */
export interface UpdateSDBudgetRulesRequest {
    /**
     * A list of budget rule details.
     * @type {Array<SDBudgetRule>}
     * @memberof UpdateSDBudgetRulesRequest
     */
    budgetRulesDetails?: Array<SDBudgetRule>;
}
/**
 * Request object for updating budget rule for SP campaign
 * @export
 * @interface UpdateSPBudgetRulesRequest
 */
export interface UpdateSPBudgetRulesRequest {
    /**
     * A list of budget rule details.
     * @type {Array<SPBudgetRule>}
     * @memberof UpdateSPBudgetRulesRequest
     */
    budgetRulesDetails?: Array<SPBudgetRule>;
}
/**
 * Video component which needs to be pre moderated. A publicly accessible videoUrl must be sent.
 * @export
 * @interface VideoComponent
 */
export interface VideoComponent {
    /**
     * Type of the video component.
     * @type {string}
     * @memberof VideoComponent
     */
    componentType: VideoComponentComponentTypeEnum;
    /**
     * Id of the component. The same will be returned as part of the response as well. This can be used to uniquely identify the component from the pre moderation response.
     * @type {string}
     * @memberof VideoComponent
     */
    id: string;
    /**
     * Url of the video to be pre moderated. The url must be publicly accessible.
     * @type {string}
     * @memberof VideoComponent
     */
    url: string;
}

/**
    * @export
    * @enum {string}
    */
export enum VideoComponentComponentTypeEnum {
    SponsoredBrandsVideo = 'SPONSORED_BRANDS_VIDEO',
    OtherVideo = 'OTHER_VIDEO'
}

/**
 * Pre moderation result for a video component
 * @export
 * @interface VideoComponentResponse
 */
export interface VideoComponentResponse {
    /**
     * The pre moderation status of the component.
     * @type {string}
     * @memberof VideoComponentResponse
     */
    preModerationStatus?: VideoComponentResponsePreModerationStatusEnum;
    /**
     * Type of the video component.
     * @type {string}
     * @memberof VideoComponentResponse
     */
    componentType?: VideoComponentResponseComponentTypeEnum;
    /**
     * A list of policy violations for the component that were detected during pre moderation. Note that this field is present in the response only when preModerationStatus is set to REJECTED.
     * @type {Array<VideoPolicyViolation>}
     * @memberof VideoComponentResponse
     */
    policyViolations?: Array<VideoPolicyViolation>;
    /**
     * Id of the component. This is the same id sent as part of the request. This can be used to uniquely identify the component.
     * @type {string}
     * @memberof VideoComponentResponse
     */
    id?: string;
    /**
     * Publicly accessible url of the video that got pre moderated.
     * @type {string}
     * @memberof VideoComponentResponse
     */
    url?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum VideoComponentResponsePreModerationStatusEnum {
    Rejected = 'REJECTED',
    Approved = 'APPROVED',
    Failed = 'FAILED',
    RetryableFailure = 'RETRYABLE_FAILURE'
}
/**
    * @export
    * @enum {string}
    */
export enum VideoComponentResponseComponentTypeEnum {
    SponsoredBrandsVideo = 'SPONSORED_BRANDS_VIDEO',
    OtherVideo = 'OTHER_VIDEO'
}

/**
 * Structure of a video evidence
 * @export
 * @interface VideoEvidence
 */
export interface VideoEvidence {
    /**
     * The start position (in seconds) of the content that violates the specified policy within the video.
     * @type {number}
     * @memberof VideoEvidence
     */
    start?: number;
    /**
     * The end position (in seconds) of the content that violates the specified policy within the video.
     * @type {number}
     * @memberof VideoEvidence
     */
    end?: number;
}
/**
 * Structure of policy violation for a video component
 * @export
 * @interface VideoPolicyViolation
 */
export interface VideoPolicyViolation {
    /**
     * A human-readable description of the policy.
     * @type {string}
     * @memberof VideoPolicyViolation
     */
    policyDescription?: string;
    /**
     * List of evidences for the policy violations detected on the video component.
     * @type {Array<VideoEvidence>}
     * @memberof VideoPolicyViolation
     */
    videoEvidences?: Array<VideoEvidence>;
    /**
     * A policy violation code.
     * @type {string}
     * @memberof VideoPolicyViolation
     */
    name?: string;
    /**
     * Type of policy violation.
     * @type {string}
     * @memberof VideoPolicyViolation
     */
    type?: VideoPolicyViolationTypeEnum;
    /**
     * Address of the policy documentation. Follow the link to learn more about the specified policy.
     * @type {string}
     * @memberof VideoPolicyViolation
     */
    policyLinkUrl?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum VideoPolicyViolationTypeEnum {
    Warning = 'WARNING',
    Rejected = 'REJECTED'
}

/**
 * 
 * @export
 * @interface VideoPosition
 */
export interface VideoPosition {
    /**
     * Start time of the video having the policy violation.
     * @type {number}
     * @memberof VideoPosition
     */
    start?: number;
    /**
     * End time of the video having the policy violation.
     * @type {number}
     * @memberof VideoPosition
     */
    end?: number;
}
/**
 * 
 * @export
 * @interface ViolatingAsinContent
 */
export interface ViolatingAsinContent {
    /**
     * 
     * @type {Array<ViolatingAsinEvidence>}
     * @memberof ViolatingAsinContent
     */
    violatingAsinEvidences?: Array<ViolatingAsinEvidence>;
    /**
     * Moderation component which marked the policy violation.
     * @type {string}
     * @memberof ViolatingAsinContent
     */
    moderatedComponent?: string;
}
/**
 * 
 * @export
 * @interface ViolatingAsinEvidence
 */
export interface ViolatingAsinEvidence {
    /**
     * ASIN which has the ad policy violation.
     * @type {string}
     * @memberof ViolatingAsinEvidence
     */
    asin?: string;
}
/**
 * 
 * @export
 * @interface ViolatingImageContent
 */
export interface ViolatingImageContent {
    /**
     * 
     * @type {Array<ViolatingImageEvidence>}
     * @memberof ViolatingImageContent
     */
    violatingImageEvidences?: Array<ViolatingImageEvidence>;
    /**
     * Moderation component which marked the policy violation.
     * @type {string}
     * @memberof ViolatingImageContent
     */
    moderatedComponent?: string;
    /**
     * URL of the image which has the ad policy violation.
     * @type {string}
     * @memberof ViolatingImageContent
     */
    reviewedImageUrl?: string;
}
/**
 * 
 * @export
 * @interface ViolatingImageEvidence
 */
export interface ViolatingImageEvidence {
    /**
     * 
     * @type {ImageCrop}
     * @memberof ViolatingImageEvidence
     */
    violatingImageCrop?: ImageCrop;
}
/**
 * Information about the specific text that violates the specified policy in the campaign.
 * @export
 * @interface ViolatingTextContent
 */
export interface ViolatingTextContent {
    /**
     * The actual text on which the moderation was done.
     * @type {string}
     * @memberof ViolatingTextContent
     */
    reviewedText?: string;
    /**
     * 
     * @type {Array<ViolatingTextEvidence>}
     * @memberof ViolatingTextContent
     */
    violatingTextEvidences?: Array<ViolatingTextEvidence>;
    /**
     * Moderation component which marked the policy violation.
     * @type {string}
     * @memberof ViolatingTextContent
     */
    moderatedComponent?: string;
}
/**
 * 
 * @export
 * @interface ViolatingTextEvidence
 */
export interface ViolatingTextEvidence {
    /**
     * 
     * @type {TextPosition}
     * @memberof ViolatingTextEvidence
     */
    violatingTextPosition?: TextPosition;
    /**
     * The specific text determined to violate the specified policy in reviewedText.
     * @type {string}
     * @memberof ViolatingTextEvidence
     */
    violatingText?: string;
}
/**
 * 
 * @export
 * @interface ViolatingVideoContent
 */
export interface ViolatingVideoContent {
    /**
     * 
     * @type {Array<ViolatingVideoEvidence>}
     * @memberof ViolatingVideoContent
     */
    violatingVideoEvidences?: Array<ViolatingVideoEvidence>;
    /**
     * Moderation component which marked the policy violation.
     * @type {string}
     * @memberof ViolatingVideoContent
     */
    moderatedComponent?: string;
    /**
     * URL of the video which has the ad policy violation.
     * @type {string}
     * @memberof ViolatingVideoContent
     */
    reviewedVideoUrl?: string;
}
/**
 * 
 * @export
 * @interface ViolatingVideoEvidence
 */
export interface ViolatingVideoEvidence {
    /**
     * 
     * @type {VideoPosition}
     * @memberof ViolatingVideoEvidence
     */
    violatingVideoPosition?: VideoPosition;
}

/**
 * BrandSafetyDenyListDomainsApi - axios parameter creator
 * @export
 */
export const BrandSafetyDenyListDomainsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
         * @summary Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {SDBrandSafetyPostRequest} sDBrandSafetyPostRequest An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrandSafetyDenyListDomains: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDBrandSafetyPostRequest: SDBrandSafetyPostRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createBrandSafetyDenyListDomains', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createBrandSafetyDenyListDomains', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'sDBrandSafetyPostRequest' is not null or undefined
            assertParamExists('createBrandSafetyDenyListDomains', 'sDBrandSafetyPostRequest', sDBrandSafetyPostRequest)
            const localVarPath = `/sd/brandSafety/deny`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sDBrandSafetyPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
         * @summary Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is \"COMPLETED\", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandSafetyDenyList: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('deleteBrandSafetyDenyList', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('deleteBrandSafetyDenyList', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/brandSafety/deny`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of websites/apps that are on the advertiser\'s Brand Safety Deny List. It can take up to 15 minutes from the time a domain is added/deleted to the time it is reflected in the deny list.   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Gets a list of websites/apps that are on the advertiser\'s Brand Safety Deny List.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 domains, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomains: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listDomains', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listDomains', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/brandSafety/deny`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrandSafetyDenyListDomainsApi - functional programming interface
 * @export
 */
export const BrandSafetyDenyListDomainsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrandSafetyDenyListDomainsApiAxiosParamCreator(configuration)
    return {
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
         * @summary Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {SDBrandSafetyPostRequest} sDBrandSafetyPostRequest An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrandSafetyDenyListDomains(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDBrandSafetyPostRequest: SDBrandSafetyPostRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDBrandSafetyUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrandSafetyDenyListDomains(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDBrandSafetyPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
         * @summary Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is \"COMPLETED\", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrandSafetyDenyList(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDBrandSafetyUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrandSafetyDenyList(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of websites/apps that are on the advertiser\'s Brand Safety Deny List. It can take up to 15 minutes from the time a domain is added/deleted to the time it is reflected in the deny list.   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Gets a list of websites/apps that are on the advertiser\'s Brand Safety Deny List.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 domains, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDomains(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDBrandSafetyGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDomains(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BrandSafetyDenyListDomainsApi - factory interface
 * @export
 */
export const BrandSafetyDenyListDomainsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrandSafetyDenyListDomainsApiFp(configuration)
    return {
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
         * @summary Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {SDBrandSafetyPostRequest} sDBrandSafetyPostRequest An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrandSafetyDenyListDomains(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDBrandSafetyPostRequest: SDBrandSafetyPostRequest, options?: any): AxiosPromise<SDBrandSafetyUpdateResponse> {
            return localVarFp.createBrandSafetyDenyListDomains(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDBrandSafetyPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
         * @summary Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is \"COMPLETED\", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandSafetyDenyList(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): AxiosPromise<SDBrandSafetyUpdateResponse> {
            return localVarFp.deleteBrandSafetyDenyList(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of websites/apps that are on the advertiser\'s Brand Safety Deny List. It can take up to 15 minutes from the time a domain is added/deleted to the time it is reflected in the deny list.   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Gets a list of websites/apps that are on the advertiser\'s Brand Safety Deny List.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 domains, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomains(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, options?: any): AxiosPromise<SDBrandSafetyGetResponse> {
            return localVarFp.listDomains(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBrandSafetyDenyListDomains operation in BrandSafetyDenyListDomainsApi.
 * @export
 * @interface BrandSafetyDenyListDomainsApiCreateBrandSafetyDenyListDomainsRequest
 */
export interface BrandSafetyDenyListDomainsApiCreateBrandSafetyDenyListDomainsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyDenyListDomainsApiCreateBrandSafetyDenyListDomains
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
     * @type {string}
     * @memberof BrandSafetyDenyListDomainsApiCreateBrandSafetyDenyListDomains
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects. 
     * @type {SDBrandSafetyPostRequest}
     * @memberof BrandSafetyDenyListDomainsApiCreateBrandSafetyDenyListDomains
     */
    readonly sDBrandSafetyPostRequest: SDBrandSafetyPostRequest
}

/**
 * Request parameters for deleteBrandSafetyDenyList operation in BrandSafetyDenyListDomainsApi.
 * @export
 * @interface BrandSafetyDenyListDomainsApiDeleteBrandSafetyDenyListRequest
 */
export interface BrandSafetyDenyListDomainsApiDeleteBrandSafetyDenyListRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyDenyListDomainsApiDeleteBrandSafetyDenyList
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
     * @type {string}
     * @memberof BrandSafetyDenyListDomainsApiDeleteBrandSafetyDenyList
     */
    readonly amazonAdvertisingAPIScope: string
}

/**
 * Request parameters for listDomains operation in BrandSafetyDenyListDomainsApi.
 * @export
 * @interface BrandSafetyDenyListDomainsApiListDomainsRequest
 */
export interface BrandSafetyDenyListDomainsApiListDomainsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyDenyListDomainsApiListDomains
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
     * @type {string}
     * @memberof BrandSafetyDenyListDomainsApiListDomains
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
     * @type {number}
     * @memberof BrandSafetyDenyListDomainsApiListDomains
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 domains, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
     * @type {number}
     * @memberof BrandSafetyDenyListDomainsApiListDomains
     */
    readonly count?: number
}

/**
 * BrandSafetyDenyListDomainsApi - object-oriented interface
 * @export
 * @class BrandSafetyDenyListDomainsApi
 * @extends {BaseAPI}
 */
export class BrandSafetyDenyListDomainsApi extends BaseAPI {
    /**
     *   **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
     * @summary Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list. 
     * @param {BrandSafetyDenyListDomainsApiCreateBrandSafetyDenyListDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyDenyListDomainsApi
     */
    public createBrandSafetyDenyListDomains(requestParameters: BrandSafetyDenyListDomainsApiCreateBrandSafetyDenyListDomainsRequest, options?: any) {
        return BrandSafetyDenyListDomainsApiFp(this.configuration).createBrandSafetyDenyListDomains(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.sDBrandSafetyPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *   **Requires one of these permissions**: [\"advertiser_campaign_edit\"]
     * @summary Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is \"COMPLETED\", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted. 
     * @param {BrandSafetyDenyListDomainsApiDeleteBrandSafetyDenyListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyDenyListDomainsApi
     */
    public deleteBrandSafetyDenyList(requestParameters: BrandSafetyDenyListDomainsApiDeleteBrandSafetyDenyListRequest, options?: any) {
        return BrandSafetyDenyListDomainsApiFp(this.configuration).deleteBrandSafetyDenyList(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of websites/apps that are on the advertiser\'s Brand Safety Deny List. It can take up to 15 minutes from the time a domain is added/deleted to the time it is reflected in the deny list.   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @summary Gets a list of websites/apps that are on the advertiser\'s Brand Safety Deny List.
     * @param {BrandSafetyDenyListDomainsApiListDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyDenyListDomainsApi
     */
    public listDomains(requestParameters: BrandSafetyDenyListDomainsApiListDomainsRequest, options?: any) {
        return BrandSafetyDenyListDomainsApiFp(this.configuration).listDomains(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BrandSafetyRequestResultsApi - axios parameter creator
 * @export
 */
export const BrandSafetyRequestResultsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests.   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Gets the results for the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {string} requestId The ID of the request previously submitted.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 results, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestResults: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, startIndex?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getRequestResults', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getRequestResults', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('getRequestResults', 'requestId', requestId)
            const localVarPath = `/sd/brandSafety/{requestId}/results`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrandSafetyRequestResultsApi - functional programming interface
 * @export
 */
export const BrandSafetyRequestResultsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrandSafetyRequestResultsApiAxiosParamCreator(configuration)
    return {
        /**
         * When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests.   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Gets the results for the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {string} requestId The ID of the request previously submitted.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 results, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestResults(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, startIndex?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDBrandSafetyRequestResultsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestResults(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, requestId, startIndex, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BrandSafetyRequestResultsApi - factory interface
 * @export
 */
export const BrandSafetyRequestResultsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrandSafetyRequestResultsApiFp(configuration)
    return {
        /**
         * When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests.   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Gets the results for the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {string} requestId The ID of the request previously submitted.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 results, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestResults(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, startIndex?: number, count?: number, options?: any): AxiosPromise<SDBrandSafetyRequestResultsResponse> {
            return localVarFp.getRequestResults(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, requestId, startIndex, count, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getRequestResults operation in BrandSafetyRequestResultsApi.
 * @export
 * @interface BrandSafetyRequestResultsApiGetRequestResultsRequest
 */
export interface BrandSafetyRequestResultsApiGetRequestResultsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyRequestResultsApiGetRequestResults
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
     * @type {string}
     * @memberof BrandSafetyRequestResultsApiGetRequestResults
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The ID of the request previously submitted.
     * @type {string}
     * @memberof BrandSafetyRequestResultsApiGetRequestResults
     */
    readonly requestId: string

    /**
     * Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
     * @type {number}
     * @memberof BrandSafetyRequestResultsApiGetRequestResults
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 results, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
     * @type {number}
     * @memberof BrandSafetyRequestResultsApiGetRequestResults
     */
    readonly count?: number
}

/**
 * BrandSafetyRequestResultsApi - object-oriented interface
 * @export
 * @class BrandSafetyRequestResultsApi
 * @extends {BaseAPI}
 */
export class BrandSafetyRequestResultsApi extends BaseAPI {
    /**
     * When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests.   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @summary Gets the results for the given request
     * @param {BrandSafetyRequestResultsApiGetRequestResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyRequestResultsApi
     */
    public getRequestResults(requestParameters: BrandSafetyRequestResultsApiGetRequestResultsRequest, options?: any) {
        return BrandSafetyRequestResultsApiFp(this.configuration).getRequestResults(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.requestId, requestParameters.startIndex, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BrandSafetyRequestStatusApi - axios parameter creator
 * @export
 */
export const BrandSafetyRequestStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Gets the status of the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {string} requestId The ID of the request previously submitted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestStatus: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getRequestStatus', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getRequestStatus', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('getRequestStatus', 'requestId', requestId)
            const localVarPath = `/sd/brandSafety/{requestId}/status`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days.   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary List status of all requests
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRequestStatus: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listRequestStatus', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listRequestStatus', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/brandSafety/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrandSafetyRequestStatusApi - functional programming interface
 * @export
 */
export const BrandSafetyRequestStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrandSafetyRequestStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Gets the status of the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {string} requestId The ID of the request previously submitted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDBrandSafetyRequestStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days.   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary List status of all requests
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRequestStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDBrandSafetyListRequestStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRequestStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BrandSafetyRequestStatusApi - factory interface
 * @export
 */
export const BrandSafetyRequestStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrandSafetyRequestStatusApiFp(configuration)
    return {
        /**
         * When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Gets the status of the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {string} requestId The ID of the request previously submitted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, options?: any): AxiosPromise<SDBrandSafetyRequestStatusResponse> {
            return localVarFp.getRequestStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days.   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary List status of all requests
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRequestStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): AxiosPromise<SDBrandSafetyListRequestStatusResponse> {
            return localVarFp.listRequestStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getRequestStatus operation in BrandSafetyRequestStatusApi.
 * @export
 * @interface BrandSafetyRequestStatusApiGetRequestStatusRequest
 */
export interface BrandSafetyRequestStatusApiGetRequestStatusRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyRequestStatusApiGetRequestStatus
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
     * @type {string}
     * @memberof BrandSafetyRequestStatusApiGetRequestStatus
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The ID of the request previously submitted.
     * @type {string}
     * @memberof BrandSafetyRequestStatusApiGetRequestStatus
     */
    readonly requestId: string
}

/**
 * Request parameters for listRequestStatus operation in BrandSafetyRequestStatusApi.
 * @export
 * @interface BrandSafetyRequestStatusApiListRequestStatusRequest
 */
export interface BrandSafetyRequestStatusApiListRequestStatusRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyRequestStatusApiListRequestStatus
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. 
     * @type {string}
     * @memberof BrandSafetyRequestStatusApiListRequestStatus
     */
    readonly amazonAdvertisingAPIScope: string
}

/**
 * BrandSafetyRequestStatusApi - object-oriented interface
 * @export
 * @class BrandSafetyRequestStatusApi
 * @extends {BaseAPI}
 */
export class BrandSafetyRequestStatusApi extends BaseAPI {
    /**
     * When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @summary Gets the status of the given request
     * @param {BrandSafetyRequestStatusApiGetRequestStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyRequestStatusApi
     */
    public getRequestStatus(requestParameters: BrandSafetyRequestStatusApiGetRequestStatusRequest, options?: any) {
        return BrandSafetyRequestStatusApiFp(this.configuration).getRequestStatus(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days.   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @summary List status of all requests
     * @param {BrandSafetyRequestStatusApiListRequestStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyRequestStatusApi
     */
    public listRequestStatus(requestParameters: BrandSafetyRequestStatusApiListRequestStatusRequest, options?: any) {
        return BrandSafetyRequestStatusApiFp(this.configuration).listRequestStatus(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BudgetRulesApi - axios parameter creator
 * @export
 */
export const BudgetRulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A maximum of 250 rules can be associated to a campaign. Note that the name of each rule associated to a campaign is required to be unique.
         * @summary Associates one or more budget rules to a campaign specified by identifer.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} campaignId The campaign identifier.
         * @param {CreateAssociatedBudgetRulesRequest} createAssociatedBudgetRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociatedBudgetRulesForSDCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, createAssociatedBudgetRulesRequest: CreateAssociatedBudgetRulesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createAssociatedBudgetRulesForSDCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createAssociatedBudgetRulesForSDCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('createAssociatedBudgetRulesForSDCampaigns', 'campaignId', campaignId)
            // verify required parameter 'createAssociatedBudgetRulesRequest' is not null or undefined
            assertParamExists('createAssociatedBudgetRulesForSDCampaigns', 'createAssociatedBudgetRulesRequest', createAssociatedBudgetRulesRequest)
            const localVarPath = `/sd/campaigns/{campaignId}/budgetRules`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAssociatedBudgetRulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates one or more budget rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {CreateSDBudgetRulesRequest} createSDBudgetRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBudgetRulesForSDCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createSDBudgetRulesRequest: CreateSDBudgetRulesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createBudgetRulesForSDCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createBudgetRulesForSDCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'createSDBudgetRulesRequest' is not null or undefined
            assertParamExists('createBudgetRulesForSDCampaigns', 'createSDBudgetRulesRequest', createSDBudgetRulesRequest)
            const localVarPath = `/sd/budgetRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSDBudgetRulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disassociates a budget rule specified by identifier from a campaign specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} campaignId The campaign identifier.
         * @param {string} budgetRuleId The budget rule identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disassociateAssociatedBudgetRuleForSDCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, budgetRuleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('disassociateAssociatedBudgetRuleForSDCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('disassociateAssociatedBudgetRuleForSDCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('disassociateAssociatedBudgetRuleForSDCampaigns', 'campaignId', campaignId)
            // verify required parameter 'budgetRuleId' is not null or undefined
            assertParamExists('disassociateAssociatedBudgetRuleForSDCampaigns', 'budgetRuleId', budgetRuleId)
            const localVarPath = `/sd/campaigns/{campaignId}/budgetRules/{budgetRuleId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)))
                .replace(`{${"budgetRuleId"}}`, encodeURIComponent(String(budgetRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a budget rule specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} budgetRuleId The budget rule identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetRuleByRuleIdForSDCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, budgetRuleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getBudgetRuleByRuleIdForSDCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getBudgetRuleByRuleIdForSDCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'budgetRuleId' is not null or undefined
            assertParamExists('getBudgetRuleByRuleIdForSDCampaigns', 'budgetRuleId', budgetRuleId)
            const localVarPath = `/sd/budgetRules/{budgetRuleId}`
                .replace(`{${"budgetRuleId"}}`, encodeURIComponent(String(budgetRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all the campaigns associated with a budget rule
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} budgetRuleId The budget rule identifier.
         * @param {number} pageSize Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
         * @param {string} [nextToken] To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignsAssociatedWithSDBudgetRule: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, budgetRuleId: string, pageSize: number, nextToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getCampaignsAssociatedWithSDBudgetRule', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getCampaignsAssociatedWithSDBudgetRule', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'budgetRuleId' is not null or undefined
            assertParamExists('getCampaignsAssociatedWithSDBudgetRule', 'budgetRuleId', budgetRuleId)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('getCampaignsAssociatedWithSDBudgetRule', 'pageSize', pageSize)
            const localVarPath = `/sd/budgetRules/{budgetRuleId}/campaigns`
                .replace(`{${"budgetRuleId"}}`, encodeURIComponent(String(budgetRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The budget history is returned for the time period specified in the required startDate and endDate parameters. The maximum time period is 90 days.
         * @summary Gets the budget history for a campaign specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a Login with Amazon account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} campaignId The campaign identifier.
         * @param {number} pageSize Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
         * @param {string} startDate The start date of the budget history in YYYYMMDD format.
         * @param {string} endDate The end date of the budget history in YYYYMMDD format.
         * @param {string} [nextToken] To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleBasedBudgetHistoryForSDCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, pageSize: number, startDate: string, endDate: string, nextToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getRuleBasedBudgetHistoryForSDCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getRuleBasedBudgetHistoryForSDCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getRuleBasedBudgetHistoryForSDCampaigns', 'campaignId', campaignId)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('getRuleBasedBudgetHistoryForSDCampaigns', 'pageSize', pageSize)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getRuleBasedBudgetHistoryForSDCampaigns', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getRuleBasedBudgetHistoryForSDCampaigns', 'endDate', endDate)
            const localVarPath = `/sd/campaigns/{campaignId}/budgetRules/budgetHistory`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all budget rules created by an advertiser
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} pageSize Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
         * @param {string} [nextToken] To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSDBudgetRulesForAdvertiser: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, pageSize: number, nextToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getSDBudgetRulesForAdvertiser', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getSDBudgetRulesForAdvertiser', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('getSDBudgetRulesForAdvertiser', 'pageSize', pageSize)
            const localVarPath = `/sd/budgetRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of budget rules associated to a campaign specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} campaignId The campaign identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociatedBudgetRulesForSDCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listAssociatedBudgetRulesForSDCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listAssociatedBudgetRulesForSDCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('listAssociatedBudgetRulesForSDCampaigns', 'campaignId', campaignId)
            const localVarPath = `/sd/campaigns/{campaignId}/budgetRules`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update one or more budget rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {UpdateSDBudgetRulesRequest} updateSDBudgetRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBudgetRulesForSDCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateSDBudgetRulesRequest: UpdateSDBudgetRulesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateBudgetRulesForSDCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateBudgetRulesForSDCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'updateSDBudgetRulesRequest' is not null or undefined
            assertParamExists('updateBudgetRulesForSDCampaigns', 'updateSDBudgetRulesRequest', updateSDBudgetRulesRequest)
            const localVarPath = `/sd/budgetRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSDBudgetRulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BudgetRulesApi - functional programming interface
 * @export
 */
export const BudgetRulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BudgetRulesApiAxiosParamCreator(configuration)
    return {
        /**
         * A maximum of 250 rules can be associated to a campaign. Note that the name of each rule associated to a campaign is required to be unique.
         * @summary Associates one or more budget rules to a campaign specified by identifer.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} campaignId The campaign identifier.
         * @param {CreateAssociatedBudgetRulesRequest} createAssociatedBudgetRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAssociatedBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, createAssociatedBudgetRulesRequest: CreateAssociatedBudgetRulesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAssociatedBudgetRulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAssociatedBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, createAssociatedBudgetRulesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates one or more budget rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {CreateSDBudgetRulesRequest} createSDBudgetRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createSDBudgetRulesRequest: CreateSDBudgetRulesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBudgetRulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createSDBudgetRulesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Disassociates a budget rule specified by identifier from a campaign specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} campaignId The campaign identifier.
         * @param {string} budgetRuleId The budget rule identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disassociateAssociatedBudgetRuleForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, budgetRuleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.disassociateAssociatedBudgetRuleForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, budgetRuleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a budget rule specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} budgetRuleId The budget rule identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBudgetRuleByRuleIdForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, budgetRuleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSDBudgetRuleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBudgetRuleByRuleIdForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, budgetRuleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets all the campaigns associated with a budget rule
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} budgetRuleId The budget rule identifier.
         * @param {number} pageSize Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
         * @param {string} [nextToken] To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignsAssociatedWithSDBudgetRule(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, budgetRuleId: string, pageSize: number, nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDGetAssociatedCampaignsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignsAssociatedWithSDBudgetRule(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, budgetRuleId, pageSize, nextToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The budget history is returned for the time period specified in the required startDate and endDate parameters. The maximum time period is 90 days.
         * @summary Gets the budget history for a campaign specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a Login with Amazon account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} campaignId The campaign identifier.
         * @param {number} pageSize Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
         * @param {string} startDate The start date of the budget history in YYYYMMDD format.
         * @param {string} endDate The end date of the budget history in YYYYMMDD format.
         * @param {string} [nextToken] To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRuleBasedBudgetHistoryForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, pageSize: number, startDate: string, endDate: string, nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDBudgetHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRuleBasedBudgetHistoryForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, pageSize, startDate, endDate, nextToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all budget rules created by an advertiser
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} pageSize Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
         * @param {string} [nextToken] To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSDBudgetRulesForAdvertiser(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, pageSize: number, nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSDBudgetRulesForAdvertiserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSDBudgetRulesForAdvertiser(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, pageSize, nextToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of budget rules associated to a campaign specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} campaignId The campaign identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssociatedBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDListAssociatedBudgetRulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssociatedBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update one or more budget rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {UpdateSDBudgetRulesRequest} updateSDBudgetRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateSDBudgetRulesRequest: UpdateSDBudgetRulesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBudgetRulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateSDBudgetRulesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BudgetRulesApi - factory interface
 * @export
 */
export const BudgetRulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BudgetRulesApiFp(configuration)
    return {
        /**
         * A maximum of 250 rules can be associated to a campaign. Note that the name of each rule associated to a campaign is required to be unique.
         * @summary Associates one or more budget rules to a campaign specified by identifer.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} campaignId The campaign identifier.
         * @param {CreateAssociatedBudgetRulesRequest} createAssociatedBudgetRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAssociatedBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, createAssociatedBudgetRulesRequest: CreateAssociatedBudgetRulesRequest, options?: any): AxiosPromise<CreateAssociatedBudgetRulesResponse> {
            return localVarFp.createAssociatedBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, createAssociatedBudgetRulesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates one or more budget rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {CreateSDBudgetRulesRequest} createSDBudgetRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createSDBudgetRulesRequest: CreateSDBudgetRulesRequest, options?: any): AxiosPromise<CreateBudgetRulesResponse> {
            return localVarFp.createBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createSDBudgetRulesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disassociates a budget rule specified by identifier from a campaign specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} campaignId The campaign identifier.
         * @param {string} budgetRuleId The budget rule identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disassociateAssociatedBudgetRuleForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, budgetRuleId: string, options?: any): AxiosPromise<object> {
            return localVarFp.disassociateAssociatedBudgetRuleForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, budgetRuleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a budget rule specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} budgetRuleId The budget rule identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetRuleByRuleIdForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, budgetRuleId: string, options?: any): AxiosPromise<GetSDBudgetRuleResponse> {
            return localVarFp.getBudgetRuleByRuleIdForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, budgetRuleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets all the campaigns associated with a budget rule
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} budgetRuleId The budget rule identifier.
         * @param {number} pageSize Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
         * @param {string} [nextToken] To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignsAssociatedWithSDBudgetRule(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, budgetRuleId: string, pageSize: number, nextToken?: string, options?: any): AxiosPromise<SDGetAssociatedCampaignsResponse> {
            return localVarFp.getCampaignsAssociatedWithSDBudgetRule(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, budgetRuleId, pageSize, nextToken, options).then((request) => request(axios, basePath));
        },
        /**
         * The budget history is returned for the time period specified in the required startDate and endDate parameters. The maximum time period is 90 days.
         * @summary Gets the budget history for a campaign specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a Login with Amazon account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} campaignId The campaign identifier.
         * @param {number} pageSize Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
         * @param {string} startDate The start date of the budget history in YYYYMMDD format.
         * @param {string} endDate The end date of the budget history in YYYYMMDD format.
         * @param {string} [nextToken] To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleBasedBudgetHistoryForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, pageSize: number, startDate: string, endDate: string, nextToken?: string, options?: any): AxiosPromise<SDBudgetHistory> {
            return localVarFp.getRuleBasedBudgetHistoryForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, pageSize, startDate, endDate, nextToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all budget rules created by an advertiser
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} pageSize Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
         * @param {string} [nextToken] To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSDBudgetRulesForAdvertiser(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, pageSize: number, nextToken?: string, options?: any): AxiosPromise<GetSDBudgetRulesForAdvertiserResponse> {
            return localVarFp.getSDBudgetRulesForAdvertiser(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, pageSize, nextToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of budget rules associated to a campaign specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} campaignId The campaign identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssociatedBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): AxiosPromise<SDListAssociatedBudgetRulesResponse> {
            return localVarFp.listAssociatedBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update one or more budget rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {UpdateSDBudgetRulesRequest} updateSDBudgetRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateSDBudgetRulesRequest: UpdateSDBudgetRulesRequest, options?: any): AxiosPromise<UpdateBudgetRulesResponse> {
            return localVarFp.updateBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateSDBudgetRulesRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAssociatedBudgetRulesForSDCampaigns operation in BudgetRulesApi.
 * @export
 * @interface BudgetRulesApiCreateAssociatedBudgetRulesForSDCampaignsRequest
 */
export interface BudgetRulesApiCreateAssociatedBudgetRulesForSDCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiCreateAssociatedBudgetRulesForSDCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiCreateAssociatedBudgetRulesForSDCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The campaign identifier.
     * @type {number}
     * @memberof BudgetRulesApiCreateAssociatedBudgetRulesForSDCampaigns
     */
    readonly campaignId: number

    /**
     * 
     * @type {CreateAssociatedBudgetRulesRequest}
     * @memberof BudgetRulesApiCreateAssociatedBudgetRulesForSDCampaigns
     */
    readonly createAssociatedBudgetRulesRequest: CreateAssociatedBudgetRulesRequest
}

/**
 * Request parameters for createBudgetRulesForSDCampaigns operation in BudgetRulesApi.
 * @export
 * @interface BudgetRulesApiCreateBudgetRulesForSDCampaignsRequest
 */
export interface BudgetRulesApiCreateBudgetRulesForSDCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiCreateBudgetRulesForSDCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiCreateBudgetRulesForSDCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {CreateSDBudgetRulesRequest}
     * @memberof BudgetRulesApiCreateBudgetRulesForSDCampaigns
     */
    readonly createSDBudgetRulesRequest: CreateSDBudgetRulesRequest
}

/**
 * Request parameters for disassociateAssociatedBudgetRuleForSDCampaigns operation in BudgetRulesApi.
 * @export
 * @interface BudgetRulesApiDisassociateAssociatedBudgetRuleForSDCampaignsRequest
 */
export interface BudgetRulesApiDisassociateAssociatedBudgetRuleForSDCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiDisassociateAssociatedBudgetRuleForSDCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiDisassociateAssociatedBudgetRuleForSDCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The campaign identifier.
     * @type {number}
     * @memberof BudgetRulesApiDisassociateAssociatedBudgetRuleForSDCampaigns
     */
    readonly campaignId: number

    /**
     * The budget rule identifier.
     * @type {string}
     * @memberof BudgetRulesApiDisassociateAssociatedBudgetRuleForSDCampaigns
     */
    readonly budgetRuleId: string
}

/**
 * Request parameters for getBudgetRuleByRuleIdForSDCampaigns operation in BudgetRulesApi.
 * @export
 * @interface BudgetRulesApiGetBudgetRuleByRuleIdForSDCampaignsRequest
 */
export interface BudgetRulesApiGetBudgetRuleByRuleIdForSDCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiGetBudgetRuleByRuleIdForSDCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiGetBudgetRuleByRuleIdForSDCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The budget rule identifier.
     * @type {string}
     * @memberof BudgetRulesApiGetBudgetRuleByRuleIdForSDCampaigns
     */
    readonly budgetRuleId: string
}

/**
 * Request parameters for getCampaignsAssociatedWithSDBudgetRule operation in BudgetRulesApi.
 * @export
 * @interface BudgetRulesApiGetCampaignsAssociatedWithSDBudgetRuleRequest
 */
export interface BudgetRulesApiGetCampaignsAssociatedWithSDBudgetRuleRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiGetCampaignsAssociatedWithSDBudgetRule
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiGetCampaignsAssociatedWithSDBudgetRule
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The budget rule identifier.
     * @type {string}
     * @memberof BudgetRulesApiGetCampaignsAssociatedWithSDBudgetRule
     */
    readonly budgetRuleId: string

    /**
     * Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
     * @type {number}
     * @memberof BudgetRulesApiGetCampaignsAssociatedWithSDBudgetRule
     */
    readonly pageSize: number

    /**
     * To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
     * @type {string}
     * @memberof BudgetRulesApiGetCampaignsAssociatedWithSDBudgetRule
     */
    readonly nextToken?: string
}

/**
 * Request parameters for getRuleBasedBudgetHistoryForSDCampaigns operation in BudgetRulesApi.
 * @export
 * @interface BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaignsRequest
 */
export interface BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaignsRequest {
    /**
     * The identifier of a client associated with a Login with Amazon account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The campaign identifier.
     * @type {number}
     * @memberof BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaigns
     */
    readonly campaignId: number

    /**
     * Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
     * @type {number}
     * @memberof BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaigns
     */
    readonly pageSize: number

    /**
     * The start date of the budget history in YYYYMMDD format.
     * @type {string}
     * @memberof BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaigns
     */
    readonly startDate: string

    /**
     * The end date of the budget history in YYYYMMDD format.
     * @type {string}
     * @memberof BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaigns
     */
    readonly endDate: string

    /**
     * To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
     * @type {string}
     * @memberof BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaigns
     */
    readonly nextToken?: string
}

/**
 * Request parameters for getSDBudgetRulesForAdvertiser operation in BudgetRulesApi.
 * @export
 * @interface BudgetRulesApiGetSDBudgetRulesForAdvertiserRequest
 */
export interface BudgetRulesApiGetSDBudgetRulesForAdvertiserRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiGetSDBudgetRulesForAdvertiser
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiGetSDBudgetRulesForAdvertiser
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
     * @type {number}
     * @memberof BudgetRulesApiGetSDBudgetRulesForAdvertiser
     */
    readonly pageSize: number

    /**
     * To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
     * @type {string}
     * @memberof BudgetRulesApiGetSDBudgetRulesForAdvertiser
     */
    readonly nextToken?: string
}

/**
 * Request parameters for listAssociatedBudgetRulesForSDCampaigns operation in BudgetRulesApi.
 * @export
 * @interface BudgetRulesApiListAssociatedBudgetRulesForSDCampaignsRequest
 */
export interface BudgetRulesApiListAssociatedBudgetRulesForSDCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiListAssociatedBudgetRulesForSDCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiListAssociatedBudgetRulesForSDCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The campaign identifier.
     * @type {number}
     * @memberof BudgetRulesApiListAssociatedBudgetRulesForSDCampaigns
     */
    readonly campaignId: number
}

/**
 * Request parameters for updateBudgetRulesForSDCampaigns operation in BudgetRulesApi.
 * @export
 * @interface BudgetRulesApiUpdateBudgetRulesForSDCampaignsRequest
 */
export interface BudgetRulesApiUpdateBudgetRulesForSDCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiUpdateBudgetRulesForSDCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiUpdateBudgetRulesForSDCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {UpdateSDBudgetRulesRequest}
     * @memberof BudgetRulesApiUpdateBudgetRulesForSDCampaigns
     */
    readonly updateSDBudgetRulesRequest: UpdateSDBudgetRulesRequest
}

/**
 * BudgetRulesApi - object-oriented interface
 * @export
 * @class BudgetRulesApi
 * @extends {BaseAPI}
 */
export class BudgetRulesApi extends BaseAPI {
    /**
     * A maximum of 250 rules can be associated to a campaign. Note that the name of each rule associated to a campaign is required to be unique.
     * @summary Associates one or more budget rules to a campaign specified by identifer.
     * @param {BudgetRulesApiCreateAssociatedBudgetRulesForSDCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetRulesApi
     */
    public createAssociatedBudgetRulesForSDCampaigns(requestParameters: BudgetRulesApiCreateAssociatedBudgetRulesForSDCampaignsRequest, options?: any) {
        return BudgetRulesApiFp(this.configuration).createAssociatedBudgetRulesForSDCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.campaignId, requestParameters.createAssociatedBudgetRulesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates one or more budget rules.
     * @param {BudgetRulesApiCreateBudgetRulesForSDCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetRulesApi
     */
    public createBudgetRulesForSDCampaigns(requestParameters: BudgetRulesApiCreateBudgetRulesForSDCampaignsRequest, options?: any) {
        return BudgetRulesApiFp(this.configuration).createBudgetRulesForSDCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createSDBudgetRulesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disassociates a budget rule specified by identifier from a campaign specified by identifier.
     * @param {BudgetRulesApiDisassociateAssociatedBudgetRuleForSDCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetRulesApi
     */
    public disassociateAssociatedBudgetRuleForSDCampaigns(requestParameters: BudgetRulesApiDisassociateAssociatedBudgetRuleForSDCampaignsRequest, options?: any) {
        return BudgetRulesApiFp(this.configuration).disassociateAssociatedBudgetRuleForSDCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.campaignId, requestParameters.budgetRuleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a budget rule specified by identifier.
     * @param {BudgetRulesApiGetBudgetRuleByRuleIdForSDCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetRulesApi
     */
    public getBudgetRuleByRuleIdForSDCampaigns(requestParameters: BudgetRulesApiGetBudgetRuleByRuleIdForSDCampaignsRequest, options?: any) {
        return BudgetRulesApiFp(this.configuration).getBudgetRuleByRuleIdForSDCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.budgetRuleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets all the campaigns associated with a budget rule
     * @param {BudgetRulesApiGetCampaignsAssociatedWithSDBudgetRuleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetRulesApi
     */
    public getCampaignsAssociatedWithSDBudgetRule(requestParameters: BudgetRulesApiGetCampaignsAssociatedWithSDBudgetRuleRequest, options?: any) {
        return BudgetRulesApiFp(this.configuration).getCampaignsAssociatedWithSDBudgetRule(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.budgetRuleId, requestParameters.pageSize, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The budget history is returned for the time period specified in the required startDate and endDate parameters. The maximum time period is 90 days.
     * @summary Gets the budget history for a campaign specified by identifier.
     * @param {BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetRulesApi
     */
    public getRuleBasedBudgetHistoryForSDCampaigns(requestParameters: BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaignsRequest, options?: any) {
        return BudgetRulesApiFp(this.configuration).getRuleBasedBudgetHistoryForSDCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.campaignId, requestParameters.pageSize, requestParameters.startDate, requestParameters.endDate, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all budget rules created by an advertiser
     * @param {BudgetRulesApiGetSDBudgetRulesForAdvertiserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetRulesApi
     */
    public getSDBudgetRulesForAdvertiser(requestParameters: BudgetRulesApiGetSDBudgetRulesForAdvertiserRequest, options?: any) {
        return BudgetRulesApiFp(this.configuration).getSDBudgetRulesForAdvertiser(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.pageSize, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of budget rules associated to a campaign specified by identifier.
     * @param {BudgetRulesApiListAssociatedBudgetRulesForSDCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetRulesApi
     */
    public listAssociatedBudgetRulesForSDCampaigns(requestParameters: BudgetRulesApiListAssociatedBudgetRulesForSDCampaignsRequest, options?: any) {
        return BudgetRulesApiFp(this.configuration).listAssociatedBudgetRulesForSDCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update one or more budget rules.
     * @param {BudgetRulesApiUpdateBudgetRulesForSDCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetRulesApi
     */
    public updateBudgetRulesForSDCampaigns(requestParameters: BudgetRulesApiUpdateBudgetRulesForSDCampaignsRequest, options?: any) {
        return BudgetRulesApiFp(this.configuration).updateBudgetRulesForSDCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateSDBudgetRulesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BudgetUsageApi - axios parameter creator
 * @export
 */
export const BudgetUsageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Budget usage API for SD campaigns
         * @param {any} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {any} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {BudgetUsageCampaignRequest} [budgetUsageCampaignRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sdCampaignsBudgetUsage: async (amazonAdvertisingAPIClientId: any, amazonAdvertisingAPIScope: any, budgetUsageCampaignRequest?: BudgetUsageCampaignRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('sdCampaignsBudgetUsage', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('sdCampaignsBudgetUsage', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/campaigns/budget/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(JSON.stringify(amazonAdvertisingAPIClientId));
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(JSON.stringify(amazonAdvertisingAPIScope));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.sdcampaignbudgetusage.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(budgetUsageCampaignRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BudgetUsageApi - functional programming interface
 * @export
 */
export const BudgetUsageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BudgetUsageApiAxiosParamCreator(configuration)
    return {
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Budget usage API for SD campaigns
         * @param {any} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {any} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {BudgetUsageCampaignRequest} [budgetUsageCampaignRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sdCampaignsBudgetUsage(amazonAdvertisingAPIClientId: any, amazonAdvertisingAPIScope: any, budgetUsageCampaignRequest?: BudgetUsageCampaignRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetUsageCampaignResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sdCampaignsBudgetUsage(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, budgetUsageCampaignRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BudgetUsageApi - factory interface
 * @export
 */
export const BudgetUsageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BudgetUsageApiFp(configuration)
    return {
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Budget usage API for SD campaigns
         * @param {any} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {any} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {BudgetUsageCampaignRequest} [budgetUsageCampaignRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sdCampaignsBudgetUsage(amazonAdvertisingAPIClientId: any, amazonAdvertisingAPIScope: any, budgetUsageCampaignRequest?: BudgetUsageCampaignRequest, options?: any): AxiosPromise<BudgetUsageCampaignResponse> {
            return localVarFp.sdCampaignsBudgetUsage(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, budgetUsageCampaignRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for sdCampaignsBudgetUsage operation in BudgetUsageApi.
 * @export
 * @interface BudgetUsageApiSdCampaignsBudgetUsageRequest
 */
export interface BudgetUsageApiSdCampaignsBudgetUsageRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {any}
     * @memberof BudgetUsageApiSdCampaignsBudgetUsage
     */
    readonly amazonAdvertisingAPIClientId: any

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {any}
     * @memberof BudgetUsageApiSdCampaignsBudgetUsage
     */
    readonly amazonAdvertisingAPIScope: any

    /**
     * 
     * @type {BudgetUsageCampaignRequest}
     * @memberof BudgetUsageApiSdCampaignsBudgetUsage
     */
    readonly budgetUsageCampaignRequest?: BudgetUsageCampaignRequest
}

/**
 * BudgetUsageApi - object-oriented interface
 * @export
 * @class BudgetUsageApi
 * @extends {BaseAPI}
 */
export class BudgetUsageApi extends BaseAPI {
    /**
     *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @summary Budget usage API for SD campaigns
     * @param {BudgetUsageApiSdCampaignsBudgetUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetUsageApi
     */
    public sdCampaignsBudgetUsage(requestParameters: BudgetUsageApiSdCampaignsBudgetUsageRequest, options?: any) {
        return BudgetUsageApiFp(this.configuration).sdCampaignsBudgetUsage(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.budgetUsageCampaignRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RecommendationsApi - axios parameter creator
 * @export
 */
export const RecommendationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * You can use this Sponsored Display API to retrieve creative headline recommendations from an array of ASINs.  **Requires one of these permissions**: [\"advertiser_campaign_view\"]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {SDHeadlineRecommendationRequest} sDHeadlineRecommendationRequest Request body for SD headline recommendations API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeadlineRecommendationsForSD: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDHeadlineRecommendationRequest: SDHeadlineRecommendationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getHeadlineRecommendationsForSD', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getHeadlineRecommendationsForSD', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'sDHeadlineRecommendationRequest' is not null or undefined
            assertParamExists('getHeadlineRecommendationsForSD', 'sDHeadlineRecommendationRequest', sDHeadlineRecommendationRequest)
            const localVarPath = `/sd/recommendations/creative/headline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.sdheadlinerecommendationrequest.v4.0+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sDHeadlineRecommendationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecommendationsApi - functional programming interface
 * @export
 */
export const RecommendationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecommendationsApiAxiosParamCreator(configuration)
    return {
        /**
         * You can use this Sponsored Display API to retrieve creative headline recommendations from an array of ASINs.  **Requires one of these permissions**: [\"advertiser_campaign_view\"]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {SDHeadlineRecommendationRequest} sDHeadlineRecommendationRequest Request body for SD headline recommendations API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeadlineRecommendationsForSD(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDHeadlineRecommendationRequest: SDHeadlineRecommendationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDHeadlineRecommendationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeadlineRecommendationsForSD(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDHeadlineRecommendationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecommendationsApi - factory interface
 * @export
 */
export const RecommendationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecommendationsApiFp(configuration)
    return {
        /**
         * You can use this Sponsored Display API to retrieve creative headline recommendations from an array of ASINs.  **Requires one of these permissions**: [\"advertiser_campaign_view\"]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {SDHeadlineRecommendationRequest} sDHeadlineRecommendationRequest Request body for SD headline recommendations API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeadlineRecommendationsForSD(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDHeadlineRecommendationRequest: SDHeadlineRecommendationRequest, options?: any): AxiosPromise<SDHeadlineRecommendationResponse> {
            return localVarFp.getHeadlineRecommendationsForSD(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDHeadlineRecommendationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getHeadlineRecommendationsForSD operation in RecommendationsApi.
 * @export
 * @interface RecommendationsApiGetHeadlineRecommendationsForSDRequest
 */
export interface RecommendationsApiGetHeadlineRecommendationsForSDRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof RecommendationsApiGetHeadlineRecommendationsForSD
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof RecommendationsApiGetHeadlineRecommendationsForSD
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Request body for SD headline recommendations API.
     * @type {SDHeadlineRecommendationRequest}
     * @memberof RecommendationsApiGetHeadlineRecommendationsForSD
     */
    readonly sDHeadlineRecommendationRequest: SDHeadlineRecommendationRequest
}

/**
 * RecommendationsApi - object-oriented interface
 * @export
 * @class RecommendationsApi
 * @extends {BaseAPI}
 */
export class RecommendationsApi extends BaseAPI {
    /**
     * You can use this Sponsored Display API to retrieve creative headline recommendations from an array of ASINs.  **Requires one of these permissions**: [\"advertiser_campaign_view\"]
     * @param {RecommendationsApiGetHeadlineRecommendationsForSDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecommendationsApi
     */
    public getHeadlineRecommendationsForSD(requestParameters: RecommendationsApiGetHeadlineRecommendationsForSDRequest, options?: any) {
        return RecommendationsApiFp(this.configuration).getHeadlineRecommendationsForSD(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.sDHeadlineRecommendationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SnapshotAPIsApi - axios parameter creator
 * @export
 */
export const SnapshotAPIsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'negativeTargets'} recordType 
         * @param {SnapshotRequest} snapshotRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSnapshot: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'negativeTargets', snapshotRequest: SnapshotRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createSnapshot', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createSnapshot', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'recordType' is not null or undefined
            assertParamExists('createSnapshot', 'recordType', recordType)
            // verify required parameter 'snapshotRequest' is not null or undefined
            assertParamExists('createSnapshot', 'snapshotRequest', snapshotRequest)
            const localVarPath = `/sd/{recordType}/snapshot`
                .replace(`{${"recordType"}}`, encodeURIComponent(String(recordType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(snapshotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadSnapshotById: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('downloadSnapshotById', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('downloadSnapshotById', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('downloadSnapshotById', 'snapshotId', snapshotId)
            const localVarPath = `/sd/snapshots/{snapshotId}/download`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSnapshotById: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getSnapshotById', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getSnapshotById', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSnapshotById', 'snapshotId', snapshotId)
            const localVarPath = `/sd/snapshots/{snapshotId}`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SnapshotAPIsApi - functional programming interface
 * @export
 */
export const SnapshotAPIsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SnapshotAPIsApiAxiosParamCreator(configuration)
    return {
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'negativeTargets'} recordType 
         * @param {SnapshotRequest} snapshotRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'negativeTargets', snapshotRequest: SnapshotRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, snapshotRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadSnapshotById(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadSnapshotById(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSnapshotById(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSnapshotById(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SnapshotAPIsApi - factory interface
 * @export
 */
export const SnapshotAPIsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SnapshotAPIsApiFp(configuration)
    return {
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'negativeTargets'} recordType 
         * @param {SnapshotRequest} snapshotRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'negativeTargets', snapshotRequest: SnapshotRequest, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.createSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, snapshotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadSnapshotById(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.downloadSnapshotById(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options).then((request) => request(axios, basePath));
        },
        /**
         *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSnapshotById(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.getSnapshotById(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSnapshot operation in SnapshotAPIsApi.
 * @export
 * @interface SnapshotAPIsApiCreateSnapshotRequest
 */
export interface SnapshotAPIsApiCreateSnapshotRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof SnapshotAPIsApiCreateSnapshot
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SnapshotAPIsApiCreateSnapshot
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'negativeTargets'}
     * @memberof SnapshotAPIsApiCreateSnapshot
     */
    readonly recordType: 'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'negativeTargets'

    /**
     * 
     * @type {SnapshotRequest}
     * @memberof SnapshotAPIsApiCreateSnapshot
     */
    readonly snapshotRequest: SnapshotRequest
}

/**
 * Request parameters for downloadSnapshotById operation in SnapshotAPIsApi.
 * @export
 * @interface SnapshotAPIsApiDownloadSnapshotByIdRequest
 */
export interface SnapshotAPIsApiDownloadSnapshotByIdRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof SnapshotAPIsApiDownloadSnapshotById
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SnapshotAPIsApiDownloadSnapshotById
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {string}
     * @memberof SnapshotAPIsApiDownloadSnapshotById
     */
    readonly snapshotId: string
}

/**
 * Request parameters for getSnapshotById operation in SnapshotAPIsApi.
 * @export
 * @interface SnapshotAPIsApiGetSnapshotByIdRequest
 */
export interface SnapshotAPIsApiGetSnapshotByIdRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof SnapshotAPIsApiGetSnapshotById
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SnapshotAPIsApiGetSnapshotById
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {string}
     * @memberof SnapshotAPIsApiGetSnapshotById
     */
    readonly snapshotId: string
}

/**
 * SnapshotAPIsApi - object-oriented interface
 * @export
 * @class SnapshotAPIsApi
 * @extends {BaseAPI}
 */
export class SnapshotAPIsApi extends BaseAPI {
    /**
     *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @param {SnapshotAPIsApiCreateSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotAPIsApi
     */
    public createSnapshot(requestParameters: SnapshotAPIsApiCreateSnapshotRequest, options?: any) {
        return SnapshotAPIsApiFp(this.configuration).createSnapshot(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.recordType, requestParameters.snapshotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @param {SnapshotAPIsApiDownloadSnapshotByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotAPIsApi
     */
    public downloadSnapshotById(requestParameters: SnapshotAPIsApiDownloadSnapshotByIdRequest, options?: any) {
        return SnapshotAPIsApiFp(this.configuration).downloadSnapshotById(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.snapshotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *   **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @param {SnapshotAPIsApiGetSnapshotByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotAPIsApi
     */
    public getSnapshotById(requestParameters: SnapshotAPIsApiGetSnapshotByIdRequest, options?: any) {
        return SnapshotAPIsApiFp(this.configuration).getSnapshotById(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.snapshotId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TargetingRecommendationsApi - axios parameter creator
 * @export
 */
export const TargetingRecommendationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses.  The recommended bids are derrived from the last 7 days of winning auction bids for the related targeting clause.   Receive bid recommendations using the following: Product targeting clause|Description| |-----------|----| |asinSameAs=B0123456789|Receive a bid recommendation for this target product |asinCategorySameAs=12345|Receive a bid recommendation for this target category |similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.   Audience targeting clause|Description| |-----------|----| |views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category |views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins   |views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins   #### Refinement Notes: - Refinements are currently not supported and if included will not impact the bid recommendation for the target   #### Advertised ASIN Notes: - For asinSameAs targets the advertised asins will not impact the bid recommendation - For asinCategrySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation - For similarProduct & exactProduct targets the advertised asins are required  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Returns a set of bid recommendations for targeting clauses
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingBidRecommendationsRequestV32} [sDTargetingBidRecommendationsRequestV32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetBidRecommendations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDTargetingBidRecommendationsRequestV32?: SDTargetingBidRecommendationsRequestV32, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getTargetBidRecommendations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getTargetBidRecommendations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/targets/bid/recommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.sdtargetingrecommendations.v3.2+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sDTargetingBidRecommendationsRequestV32, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a list of products to target based on the list of input ASINs. Currently the API will return up to 100 recommended products and categories. The currently available tactic identifiers are:  |Tactic Name|Type|Description| |-----------|----|-----------| |T00020&nbsp;|Product Targeting|Products: Choose individual products to show your ads in placements related to those products.| |T00030&nbsp;|Audience Targeting|Audiences: Select individual audiences to show your ads.|  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Returns a set of recommended products and categories to target
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingRecommendationsRequest} [sDTargetingRecommendationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetRecommendations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDTargetingRecommendationsRequest?: SDTargetingRecommendationsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getTargetRecommendations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getTargetRecommendations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/targets/recommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.sdtargetingrecommendations.v3.0+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sDTargetingRecommendationsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TargetingRecommendationsApi - functional programming interface
 * @export
 */
export const TargetingRecommendationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TargetingRecommendationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses.  The recommended bids are derrived from the last 7 days of winning auction bids for the related targeting clause.   Receive bid recommendations using the following: Product targeting clause|Description| |-----------|----| |asinSameAs=B0123456789|Receive a bid recommendation for this target product |asinCategorySameAs=12345|Receive a bid recommendation for this target category |similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.   Audience targeting clause|Description| |-----------|----| |views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category |views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins   |views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins   #### Refinement Notes: - Refinements are currently not supported and if included will not impact the bid recommendation for the target   #### Advertised ASIN Notes: - For asinSameAs targets the advertised asins will not impact the bid recommendation - For asinCategrySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation - For similarProduct & exactProduct targets the advertised asins are required  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Returns a set of bid recommendations for targeting clauses
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingBidRecommendationsRequestV32} [sDTargetingBidRecommendationsRequestV32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargetBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDTargetingBidRecommendationsRequestV32?: SDTargetingBidRecommendationsRequestV32, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDTargetingBidRecommendationsResponseV32>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargetBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDTargetingBidRecommendationsRequestV32, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides a list of products to target based on the list of input ASINs. Currently the API will return up to 100 recommended products and categories. The currently available tactic identifiers are:  |Tactic Name|Type|Description| |-----------|----|-----------| |T00020&nbsp;|Product Targeting|Products: Choose individual products to show your ads in placements related to those products.| |T00030&nbsp;|Audience Targeting|Audiences: Select individual audiences to show your ads.|  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Returns a set of recommended products and categories to target
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingRecommendationsRequest} [sDTargetingRecommendationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargetRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDTargetingRecommendationsRequest?: SDTargetingRecommendationsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDTargetingRecommendationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargetRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDTargetingRecommendationsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TargetingRecommendationsApi - factory interface
 * @export
 */
export const TargetingRecommendationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TargetingRecommendationsApiFp(configuration)
    return {
        /**
         * Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses.  The recommended bids are derrived from the last 7 days of winning auction bids for the related targeting clause.   Receive bid recommendations using the following: Product targeting clause|Description| |-----------|----| |asinSameAs=B0123456789|Receive a bid recommendation for this target product |asinCategorySameAs=12345|Receive a bid recommendation for this target category |similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.   Audience targeting clause|Description| |-----------|----| |views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category |views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins   |views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins   #### Refinement Notes: - Refinements are currently not supported and if included will not impact the bid recommendation for the target   #### Advertised ASIN Notes: - For asinSameAs targets the advertised asins will not impact the bid recommendation - For asinCategrySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation - For similarProduct & exactProduct targets the advertised asins are required  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Returns a set of bid recommendations for targeting clauses
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingBidRecommendationsRequestV32} [sDTargetingBidRecommendationsRequestV32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDTargetingBidRecommendationsRequestV32?: SDTargetingBidRecommendationsRequestV32, options?: any): AxiosPromise<SDTargetingBidRecommendationsResponseV32> {
            return localVarFp.getTargetBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDTargetingBidRecommendationsRequestV32, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a list of products to target based on the list of input ASINs. Currently the API will return up to 100 recommended products and categories. The currently available tactic identifiers are:  |Tactic Name|Type|Description| |-----------|----|-----------| |T00020&nbsp;|Product Targeting|Products: Choose individual products to show your ads in placements related to those products.| |T00030&nbsp;|Audience Targeting|Audiences: Select individual audiences to show your ads.|  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Returns a set of recommended products and categories to target
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingRecommendationsRequest} [sDTargetingRecommendationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDTargetingRecommendationsRequest?: SDTargetingRecommendationsRequest, options?: any): AxiosPromise<SDTargetingRecommendationsResponse> {
            return localVarFp.getTargetRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDTargetingRecommendationsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTargetBidRecommendations operation in TargetingRecommendationsApi.
 * @export
 * @interface TargetingRecommendationsApiGetTargetBidRecommendationsRequest
 */
export interface TargetingRecommendationsApiGetTargetBidRecommendationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingRecommendationsApiGetTargetBidRecommendations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingRecommendationsApiGetTargetBidRecommendations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {SDTargetingBidRecommendationsRequestV32}
     * @memberof TargetingRecommendationsApiGetTargetBidRecommendations
     */
    readonly sDTargetingBidRecommendationsRequestV32?: SDTargetingBidRecommendationsRequestV32
}

/**
 * Request parameters for getTargetRecommendations operation in TargetingRecommendationsApi.
 * @export
 * @interface TargetingRecommendationsApiGetTargetRecommendationsRequest
 */
export interface TargetingRecommendationsApiGetTargetRecommendationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingRecommendationsApiGetTargetRecommendations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingRecommendationsApiGetTargetRecommendations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {SDTargetingRecommendationsRequest}
     * @memberof TargetingRecommendationsApiGetTargetRecommendations
     */
    readonly sDTargetingRecommendationsRequest?: SDTargetingRecommendationsRequest
}

/**
 * TargetingRecommendationsApi - object-oriented interface
 * @export
 * @class TargetingRecommendationsApi
 * @extends {BaseAPI}
 */
export class TargetingRecommendationsApi extends BaseAPI {
    /**
     * Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses.  The recommended bids are derrived from the last 7 days of winning auction bids for the related targeting clause.   Receive bid recommendations using the following: Product targeting clause|Description| |-----------|----| |asinSameAs=B0123456789|Receive a bid recommendation for this target product |asinCategorySameAs=12345|Receive a bid recommendation for this target category |similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.   Audience targeting clause|Description| |-----------|----| |views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category |views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins   |views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins   #### Refinement Notes: - Refinements are currently not supported and if included will not impact the bid recommendation for the target   #### Advertised ASIN Notes: - For asinSameAs targets the advertised asins will not impact the bid recommendation - For asinCategrySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation - For similarProduct & exactProduct targets the advertised asins are required  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @summary Returns a set of bid recommendations for targeting clauses
     * @param {TargetingRecommendationsApiGetTargetBidRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingRecommendationsApi
     */
    public getTargetBidRecommendations(requestParameters: TargetingRecommendationsApiGetTargetBidRecommendationsRequest, options?: any) {
        return TargetingRecommendationsApiFp(this.configuration).getTargetBidRecommendations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.sDTargetingBidRecommendationsRequestV32, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a list of products to target based on the list of input ASINs. Currently the API will return up to 100 recommended products and categories. The currently available tactic identifiers are:  |Tactic Name|Type|Description| |-----------|----|-----------| |T00020&nbsp;|Product Targeting|Products: Choose individual products to show your ads in placements related to those products.| |T00030&nbsp;|Audience Targeting|Audiences: Select individual audiences to show your ads.|  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @summary Returns a set of recommended products and categories to target
     * @param {TargetingRecommendationsApiGetTargetRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingRecommendationsApi
     */
    public getTargetRecommendations(requestParameters: TargetingRecommendationsApiGetTargetRecommendationsRequest, options?: any) {
        return TargetingRecommendationsApiFp(this.configuration).getTargetRecommendations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.sDTargetingRecommendationsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


