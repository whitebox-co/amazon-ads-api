/* tslint:disable */
/* eslint-disable */
/**
 * Amazon Ads API - Amazon DSP
 * Use the Amazon Ads API for DSP for campaign, creative, line item and association operations. For onboarding information, see the [account setup](https://advertising.amazon.com/API/docs/v3/guides/account_setup) topic.<br/><br/> .
 *
 * The version of the OpenAPI document: 3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AapMobileAppTargeting
 */
export interface AapMobileAppTargeting {
    /**
     * 
     * @type {UserLocationTargeting}
     * @memberof AapMobileAppTargeting
     */
    userLocationTargeting?: UserLocationTargeting;
    /**
     * 
     * @type {AmazonViewabilityTargeting}
     * @memberof AapMobileAppTargeting
     */
    amazonViewabilityTargeting?: AmazonViewabilityTargeting;
    /**
     * 
     * @type {ThirdPartyPreBidTargeting}
     * @memberof AapMobileAppTargeting
     */
    thirdPartyPreBidTargeting?: ThirdPartyPreBidTargeting;
    /**
     * 
     * @type {SupplyTargeting}
     * @memberof AapMobileAppTargeting
     */
    supplyTargeting?: SupplyTargeting;
    /**
     * 
     * @type {GeoLocationTargeting}
     * @memberof AapMobileAppTargeting
     */
    geoLocationTargeting?: GeoLocationTargeting;
    /**
     * 
     * @type {SegmentTargeting}
     * @memberof AapMobileAppTargeting
     */
    segmentTargeting?: SegmentTargeting;
    /**
     * 
     * @type {DayPartTargeting}
     * @memberof AapMobileAppTargeting
     */
    dayPartTargeting?: DayPartTargeting;
    /**
     * 
     * @type {MobileAppTargeting}
     * @memberof AapMobileAppTargeting
     */
    mobileAppTargeting?: MobileAppTargeting;
    /**
     * The targeted mobile application device type. Note that this is applicable only for the `AAP_MOBILE APP` type of line item. It is required input for `AAP_MOBILE APP` line item type.
     * @type {Array<string>}
     * @memberof AapMobileAppTargeting
     */
    deviceTypeTargeting?: Array<AapMobileAppTargetingDeviceTypeTargetingEnum>;
    /**
     * The mobile device orientation targeting type.
     * @type {string}
     * @memberof AapMobileAppTargeting
     */
    deviceOrientationTargeting?: AapMobileAppTargetingDeviceOrientationTargetingEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AapMobileAppTargetingDeviceTypeTargetingEnum {
    Iphone = 'IPHONE',
    Ipad = 'IPAD',
    Android = 'ANDROID',
    KindleFire = 'KINDLE_FIRE',
    KindleFireHd = 'KINDLE_FIRE_HD'
}
/**
    * @export
    * @enum {string}
    */
export enum AapMobileAppTargetingDeviceOrientationTargetingEnum {
    Any = 'ANY',
    Portrait = 'PORTRAIT',
    Landscape = 'LANDSCAPE'
}

/**
 * 
 * @export
 * @interface AapMobileAppTargetingV3
 */
export interface AapMobileAppTargetingV3 {
    /**
     * 
     * @type {UserLocationTargetingV3}
     * @memberof AapMobileAppTargetingV3
     */
    userLocationTargeting?: UserLocationTargetingV3;
    /**
     * 
     * @type {AmazonViewabilityTargeting}
     * @memberof AapMobileAppTargetingV3
     */
    amazonViewabilityTargeting?: AmazonViewabilityTargeting;
    /**
     * 
     * @type {MobileAppThirdPartyPreBidTargeting}
     * @memberof AapMobileAppTargetingV3
     */
    thirdPartyPreBidTargeting?: MobileAppThirdPartyPreBidTargeting;
    /**
     * 
     * @type {SupplyTargeting}
     * @memberof AapMobileAppTargetingV3
     */
    supplyTargeting?: SupplyTargeting;
    /**
     * 
     * @type {GeoLocationTargeting}
     * @memberof AapMobileAppTargetingV3
     */
    geoLocationTargeting?: GeoLocationTargeting;
    /**
     * 
     * @type {SegmentTargeting}
     * @memberof AapMobileAppTargetingV3
     */
    segmentTargeting?: SegmentTargeting;
    /**
     * 
     * @type {DayPartTargeting}
     * @memberof AapMobileAppTargetingV3
     */
    dayPartTargeting?: DayPartTargeting;
    /**
     * 
     * @type {MobileAppTargeting}
     * @memberof AapMobileAppTargetingV3
     */
    mobileAppTargeting?: MobileAppTargeting;
    /**
     * The targeted mobile application device type. Note that this is applicable only for the `AAP_MOBILE APP` type of line item. It is required input for `AAP_MOBILE APP` line item type.
     * @type {Array<string>}
     * @memberof AapMobileAppTargetingV3
     */
    deviceTypeTargeting?: Array<AapMobileAppTargetingV3DeviceTypeTargetingEnum>;
    /**
     * The mobile device orientation targeting type.
     * @type {string}
     * @memberof AapMobileAppTargetingV3
     */
    deviceOrientationTargeting?: AapMobileAppTargetingV3DeviceOrientationTargetingEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AapMobileAppTargetingV3DeviceTypeTargetingEnum {
    Iphone = 'IPHONE',
    Ipad = 'IPAD',
    Android = 'ANDROID',
    KindleFire = 'KINDLE_FIRE',
    KindleFireHd = 'KINDLE_FIRE_HD'
}
/**
    * @export
    * @enum {string}
    */
export enum AapMobileAppTargetingV3DeviceOrientationTargetingEnum {
    Any = 'ANY',
    Portrait = 'PORTRAIT',
    Landscape = 'LANDSCAPE'
}

/**
 * The service fee associated with an agency.
 * @export
 * @interface AgencyFee
 */
export interface AgencyFee {
    /**
     * Fee expressed as a percentage of the total budget.
     * @type {number}
     * @memberof AgencyFee
     */
    feePercentage?: number;
}
/**
 * A service fee for using the Amazon Ad Platform. Fees are applied as a percentage of supply costs.
 * @export
 * @interface AmazonConsoleFee
 */
export interface AmazonConsoleFee {
    /**
     * The service fee expressed as a percentage.
     * @type {number}
     * @memberof AmazonConsoleFee
     */
    feePercentage: number;
}
/**
 * 
 * @export
 * @interface AmazonMobileDisplayTargeting
 */
export interface AmazonMobileDisplayTargeting {
    /**
     * 
     * @type {UserLocationTargeting}
     * @memberof AmazonMobileDisplayTargeting
     */
    userLocationTargeting?: UserLocationTargeting;
    /**
     * 
     * @type {AmazonViewabilityTargeting}
     * @memberof AmazonMobileDisplayTargeting
     */
    amazonViewabilityTargeting?: AmazonViewabilityTargeting;
    /**
     * 
     * @type {ThirdPartyPreBidTargeting}
     * @memberof AmazonMobileDisplayTargeting
     */
    thirdPartyPreBidTargeting?: ThirdPartyPreBidTargeting;
    /**
     * 
     * @type {SupplyTargeting}
     * @memberof AmazonMobileDisplayTargeting
     */
    supplyTargeting?: SupplyTargeting;
    /**
     * 
     * @type {GeoLocationTargeting}
     * @memberof AmazonMobileDisplayTargeting
     */
    geoLocationTargeting?: GeoLocationTargeting;
    /**
     * 
     * @type {SegmentTargeting}
     * @memberof AmazonMobileDisplayTargeting
     */
    segmentTargeting?: SegmentTargeting;
    /**
     * 
     * @type {DayPartTargeting}
     * @memberof AmazonMobileDisplayTargeting
     */
    dayPartTargeting?: DayPartTargeting;
    /**
     * 
     * @type {MobileOsTargeting}
     * @memberof AmazonMobileDisplayTargeting
     */
    mobileOsTargeting?: MobileOsTargeting;
    /**
     * Set to `true` to enable contextual targeting. Contextual targeting targets the detail page of products that are frequently viewed or purchased with the products in your ad. Note that this feature applies to Dynamic eCommerce ads only.
     * @type {boolean}
     * @memberof AmazonMobileDisplayTargeting
     */
    contextualTargeting?: boolean;
}
/**
 * 
 * @export
 * @interface AmazonMobileDisplayTargetingV3
 */
export interface AmazonMobileDisplayTargetingV3 {
    /**
     * 
     * @type {UserLocationTargetingV3}
     * @memberof AmazonMobileDisplayTargetingV3
     */
    userLocationTargeting?: UserLocationTargetingV3;
    /**
     * 
     * @type {AmazonViewabilityTargeting}
     * @memberof AmazonMobileDisplayTargetingV3
     */
    amazonViewabilityTargeting?: AmazonViewabilityTargeting;
    /**
     * 
     * @type {MobileDisplayThirdPartyPreBidTargeting}
     * @memberof AmazonMobileDisplayTargetingV3
     */
    thirdPartyPreBidTargeting?: MobileDisplayThirdPartyPreBidTargeting;
    /**
     * 
     * @type {SupplyTargeting}
     * @memberof AmazonMobileDisplayTargetingV3
     */
    supplyTargeting?: SupplyTargeting;
    /**
     * 
     * @type {GeoLocationTargeting}
     * @memberof AmazonMobileDisplayTargetingV3
     */
    geoLocationTargeting?: GeoLocationTargeting;
    /**
     * 
     * @type {SegmentTargeting}
     * @memberof AmazonMobileDisplayTargetingV3
     */
    segmentTargeting?: SegmentTargeting;
    /**
     * 
     * @type {DayPartTargeting}
     * @memberof AmazonMobileDisplayTargetingV3
     */
    dayPartTargeting?: DayPartTargeting;
    /**
     * 
     * @type {MobileOsTargeting}
     * @memberof AmazonMobileDisplayTargetingV3
     */
    mobileOsTargeting?: MobileOsTargeting;
    /**
     * Set to `true` to enable contextual targeting. Contextual targeting targets the detail page of products that are frequently viewed or purchased with the products in your ad. Note that this feature applies to Dynamic eCommerce ads only.
     * @type {boolean}
     * @memberof AmazonMobileDisplayTargetingV3
     */
    contextualTargeting?: boolean;
}
/**
 * Selects a viewability tier to target. The predicted view rate percentages are based on historical data and are not guaranteed. Actual view rates may vary by measurement provider and order.
 * @export
 * @interface AmazonViewabilityTargeting
 */
export interface AmazonViewabilityTargeting {
    /**
     * 
     * @type {ViewabilityTier}
     * @memberof AmazonViewabilityTargeting
     */
    viewabilityTier: ViewabilityTier;
    /**
     * Set to `true` to include impressions where impressions can\'t be measured.
     * @type {boolean}
     * @memberof AmazonViewabilityTargeting
     */
    includeUnmeasurableImpressions: boolean;
}
/**
 * 
 * @export
 * @interface App
 */
export interface App {
    /**
     * The app identifier.
     * @type {string}
     * @memberof App
     */
    id?: string;
    /**
     * The app name.
     * @type {string}
     * @memberof App
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface AppliedFees
 */
export interface AppliedFees {
    /**
     * The list of third party fees associated with the line item.
     * @type {Array<ThirdPartyFee>}
     * @memberof AppliedFees
     */
    thirdPartyFees?: Array<ThirdPartyFee>;
    /**
     * The list of audience fees associated with the line item.
     * @type {Array<AudienceFee>}
     * @memberof AppliedFees
     */
    audienceFees?: Array<AudienceFee>;
    /**
     * 
     * @type {AmazonConsoleFee}
     * @memberof AppliedFees
     */
    amazonDspConsoleFee?: AmazonConsoleFee;
}
/**
 * 
 * @export
 * @interface Apps
 */
export interface Apps {
    /**
     * 
     * @type {string}
     * @memberof Apps
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<App>}
     * @memberof Apps
     */
    apps?: Array<App>;
}
/**
 * The audience fee applied to Amazon (in-market and lifestyle) third-party (automotive).
 * @export
 * @interface AudienceFee
 */
export interface AudienceFee {
    /**
     * The category of the audience fee.
     * @type {string}
     * @memberof AudienceFee
     */
    feeName: AudienceFeeFeeNameEnum;
    /**
     * The amount of the audience fee.
     * @type {number}
     * @memberof AudienceFee
     */
    amount: number;
}

/**
    * @export
    * @enum {string}
    */
export enum AudienceFeeFeeNameEnum {
    InMarketLifestyle = 'IN_MARKET_LIFESTYLE',
    Automotive = 'AUTOMOTIVE'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum AutoOptimization {
    Budget = 'BUDGET',
    Bid = 'BID'
}

/**
 * The bid values associated with a line item.
 * @export
 * @interface Bidding
 */
export interface Bidding {
    /**
     * The base bid per thousand impressions for ad inventory. Expressed in dollars.
     * @type {number}
     * @memberof Bidding
     */
    baseSupplyBid: number;
    /**
     * The maximum cost-per-thousand impressions bid for media supply. Expressed in dollars.
     * @type {number}
     * @memberof Bidding
     */
    maxSupplyBid?: number;
}
/**
 * The Double Verify brand suitability risk level.
 * @export
 * @enum {string}
 */

export enum BrandSuitabilityRiskLevel {
    AllowAll = 'ALLOW_ALL',
    High = 'HIGH',
    HighMedium = 'HIGH_MEDIUM',
    HighMediumLow = 'HIGH_MEDIUM_LOW'
}

/**
 * The per day or per month spending limit.
 * @export
 * @interface BudgetCap
 */
export interface BudgetCap {
    /**
     * The type of recurrence for the spending limit.
     * @type {string}
     * @memberof BudgetCap
     */
    recurrenceTimePeriod: BudgetCapRecurrenceTimePeriodEnum;
    /**
     * The spending limit amount.
     * @type {number}
     * @memberof BudgetCap
     */
    amount: number;
}

/**
    * @export
    * @enum {string}
    */
export enum BudgetCapRecurrenceTimePeriodEnum {
    Uncapped = 'UNCAPPED',
    Daily = 'DAILY',
    Monthly = 'MONTHLY'
}

/**
 * 
 * @export
 * @interface ConversionTracking
 */
export interface ConversionTracking {
    /**
     * 
     * @type {ProductTracking}
     * @memberof ConversionTracking
     */
    products?: ProductTracking;
    /**
     * A list of pixels associated with the campaign.
     * @type {Array<string>}
     * @memberof ConversionTracking
     */
    pixels?: Array<string>;
}
/**
 * 
 * @export
 * @interface ConversionTrackingV21
 */
export interface ConversionTrackingV21 {
    /**
     * 
     * @type {ProductTrackingV21}
     * @memberof ConversionTrackingV21
     */
    products?: ProductTrackingV21;
    /**
     * A list of pixels associated with the campaign.
     * @type {Array<string>}
     * @memberof ConversionTrackingV21
     */
    pixels?: Array<string>;
}
/**
 * 
 * @export
 * @interface Creative
 */
export interface Creative {
    /**
     * The identifier of the advertiser.
     * @type {string}
     * @memberof Creative
     */
    advertiserId?: string;
    /**
     * The identifier of the creative.
     * @type {string}
     * @memberof Creative
     */
    creativeId?: string;
    /**
     * The creative type.
     * @type {string}
     * @memberof Creative
     */
    type?: string;
    /**
     * The creative name.
     * @type {string}
     * @memberof Creative
     */
    name?: string;
    /**
     * The external identifier of the creative.
     * @type {string}
     * @memberof Creative
     */
    externalId?: string;
    /**
     * The creative size.
     * @type {string}
     * @memberof Creative
     */
    size?: string;
    /**
     * Supported lineItemTypes where creatives can be associated. VIDEO line item type is supported since version `application/vnd.dspcreatives.v2.1+json`
     * @type {Array<SupportedLineItemTypes>}
     * @memberof Creative
     */
    supportedLineItemTypes?: Array<SupportedLineItemTypes>;
}
/**
 * 
 * @export
 * @interface CreativeOptions
 */
export interface CreativeOptions {
    /**
     * The creative rotation type.
     * @type {string}
     * @memberof CreativeOptions
     */
    creativeRotationType?: CreativeOptionsCreativeRotationTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CreativeOptionsCreativeRotationTypeEnum {
    Weighted = 'WEIGHTED',
    Random = 'RANDOM'
}

/**
 * 
 * @export
 * @interface Creatives
 */
export interface Creatives {
    /**
     * Total number of results which satisfy the filtering criteria. This will help to support pagination.
     * @type {number}
     * @memberof Creatives
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<Creative>}
     * @memberof Creatives
     */
    response?: Array<Creative>;
}
/**
 * The currency code.
 * @export
 * @enum {string}
 */

export enum CurrencyCode {
    Usd = 'USD',
    Cad = 'CAD',
    Mxn = 'MXN'
}

/**
 * 
 * @export
 * @interface CurrencyCodeV3
 */
export interface CurrencyCodeV3 {
}
/**
 * The parts of a day.
 * @export
 * @interface DayPart
 */
export interface DayPart {
    /**
     * 
     * @type {Array<number>}
     * @memberof DayPart
     */
    hourSlots: Array<number>;
    /**
     * The day of the week.
     * @type {string}
     * @memberof DayPart
     */
    dayOfWeek: DayPartDayOfWeekEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DayPartDayOfWeekEnum {
    Sunday = 'SUNDAY',
    Monday = 'MONDAY',
    Tuesday = 'TUESDAY',
    Wednesday = 'WEDNESDAY',
    Thursday = 'THURSDAY',
    Friday = 'FRIDAY',
    Saturday = 'SATURDAY'
}

/**
 * Specifies time zone and parts of the day to target delivery of the line item.
 * @export
 * @interface DayPartTargeting
 */
export interface DayPartTargeting {
    /**
     * The time zone associated with line item delivery.
     * @type {string}
     * @memberof DayPartTargeting
     */
    timeZonePreference: DayPartTargetingTimeZonePreferenceEnum;
    /**
     * The list of parts of the day.
     * @type {Array<DayPart>}
     * @memberof DayPartTargeting
     */
    dayParts: Array<DayPart>;
}

/**
    * @export
    * @enum {string}
    */
export enum DayPartTargetingTimeZonePreferenceEnum {
    UserTimezone = 'USER_TIMEZONE',
    AdServerTimezone = 'AD_SERVER_TIMEZONE'
}

/**
 * The fee associated with the deal. This will be the same value as deal price, but includes more information such as currency code.
 * @export
 * @interface DealFee
 */
export interface DealFee {
    /**
     * The price agreed upon with the publisher. Given in base currency units multiplied by scaling factor (\'scale\').
     * @type {number}
     * @memberof DealFee
     */
    amount?: number;
    /**
     * Base currency, such as US Dollar, given in ISO 4217.
     * @type {string}
     * @memberof DealFee
     */
    currency?: string;
    /**
     * Scale of the amount relative to the base currency unit. For instance, if the scale is 100000, the currency is USD, and the amount is 50000, the human-readable fee is $0.50.
     * @type {number}
     * @memberof DealFee
     */
    scale?: number;
    /**
     * How the fee is applied.
     * @type {string}
     * @memberof DealFee
     */
    feeCalculationType?: DealFeeFeeCalculationTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DealFeeFeeCalculationTypeEnum {
    FixedCpm = 'FIXED_CPM',
    FloorRate = 'FLOOR_RATE'
}

/**
 * Deal metadata present only for the DEAL type.
 * @export
 * @interface DealInfo
 */
export interface DealInfo {
    /**
     * 
     * @type {string}
     * @memberof DealInfo
     */
    dealType?: DealInfoDealTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DealInfo
     */
    dealGroup?: string;
    /**
     * 
     * @type {string}
     * @memberof DealInfo
     */
    publisherName?: string;
    /**
     * Price of the deal
     * @type {number}
     * @memberof DealInfo
     */
    dealPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof DealInfo
     */
    startDate?: string;
    /**
     * 
     * @type {string}
     * @memberof DealInfo
     */
    endDate?: string;
    /**
     * 
     * @type {string}
     * @memberof DealInfo
     */
    exchangeName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DealInfoDealTypeEnum {
    PreferredDeal = 'PREFERRED_DEAL',
    PrivateAuction = 'PRIVATE_AUCTION'
}

/**
 * 
 * @export
 * @interface DealInfoV11
 */
export interface DealInfoV11 {
    /**
     * 
     * @type {DealFee}
     * @memberof DealInfoV11
     */
    dealFee?: DealFee;
    /**
     * 
     * @type {string}
     * @memberof DealInfoV11
     */
    dealType?: DealInfoV11DealTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DealInfoV11
     */
    dealGroup?: string;
    /**
     * 
     * @type {string}
     * @memberof DealInfoV11
     */
    publisherName?: string;
    /**
     * Price of the deal
     * @type {number}
     * @memberof DealInfoV11
     */
    dealPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof DealInfoV11
     */
    startDate?: string;
    /**
     * 
     * @type {string}
     * @memberof DealInfoV11
     */
    endDate?: string;
    /**
     * 
     * @type {string}
     * @memberof DealInfoV11
     */
    exchangeName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DealInfoV11DealTypeEnum {
    PreferredDeal = 'PREFERRED_DEAL',
    PrivateAuction = 'PRIVATE_AUCTION'
}

/**
 * This will be used to control the delivery activation status of order and lineitem  resource. Active - Activate order or lineitem. INACTIVE - Pause the order or lineitem. 
 * @export
 * @enum {string}
 */

export enum DeliveryActivationStatus {
    Active = 'ACTIVE',
    Inactive = 'INACTIVE'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum DiscoveryLineItemTypes {
    StandardDisplay = 'STANDARD_DISPLAY',
    AmazonMobileDisplay = 'AMAZON_MOBILE_DISPLAY',
    AapMobileApp = 'AAP_MOBILE_APP',
    Video = 'VIDEO'
}

/**
 * 
 * @export
 * @interface DomainList
 */
export interface DomainList {
    /**
     * 
     * @type {MergedDomainList}
     * @memberof DomainList
     */
    mergedDomainList?: MergedDomainList;
    /**
     * Inherit domains from advertiser settings.
     * @type {boolean}
     * @memberof DomainList
     */
    inheritFromAdvertiser?: boolean;
}
/**
 * 
 * @export
 * @interface DomainListMetadata
 */
export interface DomainListMetadata {
    /**
     * 
     * @type {string}
     * @memberof DomainListMetadata
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListMetadata
     */
    name?: string;
    /**
     * Number of URLs specified in this list
     * @type {number}
     * @memberof DomainListMetadata
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof DomainListMetadata
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof DomainListMetadata
     */
    updated?: string;
}
/**
 * Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
 * @export
 * @interface DoubleVerify
 */
export interface DoubleVerify {
    /**
     * 
     * @type {DoubleVerifyBrandSafety}
     * @memberof DoubleVerify
     */
    brandSafety?: DoubleVerifyBrandSafety;
    /**
     * 
     * @type {DoubleVerifyFraudInvalidTraffic}
     * @memberof DoubleVerify
     */
    fraudInvalidTraffic?: DoubleVerifyFraudInvalidTraffic;
    /**
     * 
     * @type {DoubleVerifyAuthenticBrandSafety}
     * @memberof DoubleVerify
     */
    authenticBrandSafety?: DoubleVerifyAuthenticBrandSafety;
    /**
     * 
     * @type {DoubleVerifyViewability}
     * @memberof DoubleVerify
     */
    viewability?: DoubleVerifyViewability;
    /**
     * The custom segment identifier.
     * @type {string}
     * @memberof DoubleVerify
     */
    customContextualSegmentId?: string;
}
/**
 * 
 * @export
 * @interface DoubleVerifyAuthenticBrandSafety
 */
export interface DoubleVerifyAuthenticBrandSafety {
    /**
     * The segment identifier.
     * @type {string}
     * @memberof DoubleVerifyAuthenticBrandSafety
     */
    doubleVerifySegmentId?: string;
}
/**
 * In an update from Double Verify (DV), support for `HATE_SPEECH_PROFANITY`, medium severity `ADULT_CONTENT`, and `SEX_EDUCATION` has been dropped. Additionally, DV has moved away from high severity content and medium severity content in favor of content categories and content categories with risk. Any value found below that is represented as a content category will continue to exclude the particular content category that the value represents. Any value found below that is represented as a content category with risk will now exclude the high and medium content category with risk that the value represents. Please consider adopting the latest version of the line item APIs for updated support of DV brand safety.
 * @export
 * @interface DoubleVerifyBrandSafety
 */
export interface DoubleVerifyBrandSafety {
    /**
     * A list of high severity content and corresponding status.
     * @type {Array<string>}
     * @memberof DoubleVerifyBrandSafety
     */
    highSeverityContent?: Array<DoubleVerifyBrandSafetyHighSeverityContentEnum>;
    /**
     * A list of medium severity content and corresponding status.
     * @type {Array<string>}
     * @memberof DoubleVerifyBrandSafety
     */
    mediumSeverityContent?: Array<DoubleVerifyBrandSafetyMediumSeverityContentEnum>;
    /**
     * Set to `true` to exclude unknown content.
     * @type {boolean}
     * @memberof DoubleVerifyBrandSafety
     */
    unknownContent?: boolean;
    /**
     * A list of app age rating to be used for excluding apps.
     * @type {Array<string>}
     * @memberof DoubleVerifyBrandSafety
     */
    appAgeRating?: Array<DoubleVerifyBrandSafetyAppAgeRatingEnum>;
    /**
     * Exclude by app star rating (app inventory only)
     * @type {string}
     * @memberof DoubleVerifyBrandSafety
     */
    appStarRating?: DoubleVerifyBrandSafetyAppStarRatingEnum;
    /**
     * Set to `true` to exclude unofficial apps or apps with insufficient user ratings (<100 lifetime).
     * @type {boolean}
     * @memberof DoubleVerifyBrandSafety
     */
    excludeAppsWithInsufficientRating?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum DoubleVerifyBrandSafetyHighSeverityContentEnum {
    AdultContent = 'ADULT_CONTENT',
    DrugsSubstances = 'DRUGS_SUBSTANCES',
    ExtremeGraphicsViolenceWeapons = 'EXTREME_GRAPHICS_VIOLENCE_WEAPONS',
    HateSpeechProfanity = 'HATE_SPEECH_PROFANITY',
    IllegalActivities = 'ILLEGAL_ACTIVITIES',
    IncentivizedMalwareClutter = 'INCENTIVIZED_MALWARE_CLUTTER',
    PiracyCopyrightInfringement = 'PIRACY_COPYRIGHT_INFRINGEMENT'
}
/**
    * @export
    * @enum {string}
    */
export enum DoubleVerifyBrandSafetyMediumSeverityContentEnum {
    AdServer = 'AD_SERVER',
    AdultContent = 'ADULT_CONTENT',
    CultsSurvivalism = 'CULTS_SURVIVALISM',
    CelebrityGossip = 'CELEBRITY_GOSSIP',
    Gambling = 'GAMBLING',
    DisasterAviation = 'DISASTER_AVIATION',
    DisasterManMade = 'DISASTER_MAN_MADE',
    DisasterNatural = 'DISASTER_NATURAL',
    DisasterTerroristsEvents = 'DISASTER_TERRORISTS_EVENTS',
    DisasterVehicle = 'DISASTER_VEHICLE',
    DrugsAlcohol = 'DRUGS_ALCOHOL',
    DrugsSmoking = 'DRUGS_SMOKING',
    InflammatoryPoliticsNews = 'INFLAMMATORY_POLITICS_NEWS',
    NegativeNewsFinancial = 'NEGATIVE_NEWS_FINANCIAL',
    NegativeNewsPharmaceutical = 'NEGATIVE_NEWS_PHARMACEUTICAL',
    NonStandardContentNonEnglish = 'NON_STANDARD_CONTENT_NON_ENGLISH',
    NonStandardContentParkingPage = 'NON_STANDARD_CONTENT_PARKING_PAGE',
    Occult = 'OCCULT',
    SexEducation = 'SEX_EDUCATION',
    UnmoderatedUgcForumsImagesVideo = 'UNMODERATED_UGC_FORUMS_IMAGES_VIDEO'
}
/**
    * @export
    * @enum {string}
    */
export enum DoubleVerifyBrandSafetyAppAgeRatingEnum {
    Everyone = 'EVERYONE',
    Tweens = 'TWEENS',
    Teen = 'TEEN',
    Mature = 'MATURE',
    AdultsOnly = 'ADULTS_ONLY',
    Unknown = 'UNKNOWN'
}
/**
    * @export
    * @enum {string}
    */
export enum DoubleVerifyBrandSafetyAppStarRatingEnum {
    AllowAll = 'ALLOW_ALL',
    AppStarRatingLt15 = 'APP_STAR_RATING_LT_15',
    AppStarRatingLt20 = 'APP_STAR_RATING_LT_20',
    AppStarRatingLt25 = 'APP_STAR_RATING_LT_25',
    AppStarRatingLt30 = 'APP_STAR_RATING_LT_30',
    AppStarRatingLt35 = 'APP_STAR_RATING_LT_35',
    AppStarRatingLt40 = 'APP_STAR_RATING_LT_40',
    AppStarRatingLt45 = 'APP_STAR_RATING_LT_45'
}

/**
 * 
 * @export
 * @interface DoubleVerifyFraudInvalidTraffic
 */
export interface DoubleVerifyFraudInvalidTraffic {
    /**
     * Set to `true` to exclude impressions delivered to devices identified to be fraudulent or invalid.
     * @type {boolean}
     * @memberof DoubleVerifyFraudInvalidTraffic
     */
    excludeImpressions?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DoubleVerifyFraudInvalidTraffic
     */
    excludeAppsAndSites?: DoubleVerifyFraudInvalidTrafficExcludeAppsAndSitesEnum;
    /**
     * Set to `true` to block applications and sites with insufficient historical fraud and invalid traffic statistics. This will not be applicable if ALLOW_ALL is chosen.
     * @type {boolean}
     * @memberof DoubleVerifyFraudInvalidTraffic
     */
    blockAppAndSites?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum DoubleVerifyFraudInvalidTrafficExcludeAppsAndSitesEnum {
    AllowAll = 'ALLOW_ALL',
    FraudTrafficLevelGte100 = 'FRAUD_TRAFFIC_LEVEL_GTE_100',
    FraudTrafficLevelGte50 = 'FRAUD_TRAFFIC_LEVEL_GTE_50',
    FraudTrafficLevelGte25 = 'FRAUD_TRAFFIC_LEVEL_GTE_25',
    FraudTrafficLevelGte10 = 'FRAUD_TRAFFIC_LEVEL_GTE_10',
    FraudTrafficLevelGte08 = 'FRAUD_TRAFFIC_LEVEL_GTE_08',
    FraudTrafficLevelGte06 = 'FRAUD_TRAFFIC_LEVEL_GTE_06',
    FraudTrafficLevelGte04 = 'FRAUD_TRAFFIC_LEVEL_GTE_04',
    FraudTrafficLevelGte02 = 'FRAUD_TRAFFIC_LEVEL_GTE_02'
}

/**
 * 
 * @export
 * @interface DoubleVerifyV21
 */
export interface DoubleVerifyV21 {
    /**
     * 
     * @type {DoubleVerifyViewabilityV21}
     * @memberof DoubleVerifyV21
     */
    viewability?: DoubleVerifyViewabilityV21;
    /**
     * 
     * @type {DoubleVerifyBrandSafety}
     * @memberof DoubleVerifyV21
     */
    brandSafety?: DoubleVerifyBrandSafety;
    /**
     * 
     * @type {DoubleVerifyFraudInvalidTraffic}
     * @memberof DoubleVerifyV21
     */
    fraudInvalidTraffic?: DoubleVerifyFraudInvalidTraffic;
    /**
     * 
     * @type {DoubleVerifyAuthenticBrandSafety}
     * @memberof DoubleVerifyV21
     */
    authenticBrandSafety?: DoubleVerifyAuthenticBrandSafety;
    /**
     * The custom segment identifier.
     * @type {string}
     * @memberof DoubleVerifyV21
     */
    customContextualSegmentId?: string;
}
/**
 * 
 * @export
 * @interface DoubleVerifyViewability
 */
export interface DoubleVerifyViewability {
    /**
     * The type of MRC viewability targeting.
     * @type {string}
     * @memberof DoubleVerifyViewability
     */
    mrcViewabilityTargeting?: DoubleVerifyViewabilityMrcViewabilityTargetingEnum;
    /**
     * The type of brand exposure viewability targeting.
     * @type {string}
     * @memberof DoubleVerifyViewability
     */
    brandExposureViewabilityTargeting?: DoubleVerifyViewabilityBrandExposureViewabilityTargetingEnum;
    /**
     * Set to `true` to include impressions where impressions can\'t be measured.
     * @type {boolean}
     * @memberof DoubleVerifyViewability
     */
    includeUnmeasurableImpressions?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum DoubleVerifyViewabilityMrcViewabilityTargetingEnum {
    AllowAll = 'ALLOW_ALL',
    MrcViewabilityGte80 = 'MRC_VIEWABILITY_GTE_80',
    MrcViewabilityGte75 = 'MRC_VIEWABILITY_GTE_75',
    MrcViewabilityGte70 = 'MRC_VIEWABILITY_GTE_70',
    MrcViewabilityGte65 = 'MRC_VIEWABILITY_GTE_65',
    MrcViewabilityGte60 = 'MRC_VIEWABILITY_GTE_60',
    MrcViewabilityGte55 = 'MRC_VIEWABILITY_GTE_55',
    MrcViewabilityGte50 = 'MRC_VIEWABILITY_GTE_50',
    MrcViewabilityGte40 = 'MRC_VIEWABILITY_GTE_40',
    MrcViewabilityGte30 = 'MRC_VIEWABILITY_GTE_30'
}
/**
    * @export
    * @enum {string}
    */
export enum DoubleVerifyViewabilityBrandExposureViewabilityTargetingEnum {
    AllowAll = 'ALLOW_ALL',
    BrandExposureViewabilityGte15SecAvgDuration = 'BRAND_EXPOSURE_VIEWABILITY_GTE_15_SEC_AVG_DURATION',
    BrandExposureViewabilityGte10SecAvgDuration = 'BRAND_EXPOSURE_VIEWABILITY_GTE_10_SEC_AVG_DURATION',
    BrandExposureViewabilityGte5SecAvgDuration = 'BRAND_EXPOSURE_VIEWABILITY_GTE_5_SEC_AVG_DURATION'
}

/**
 * 
 * @export
 * @interface DoubleVerifyViewabilityV21
 */
export interface DoubleVerifyViewabilityV21 {
    /**
     * The type of average completion and fully viewable rate targeting.
     * @type {string}
     * @memberof DoubleVerifyViewabilityV21
     */
    averageCompletionAndFullyViewableRateTargeting?: DoubleVerifyViewabilityV21AverageCompletionAndFullyViewableRateTargetingEnum;
    /**
     * The type of MRC viewability targeting.
     * @type {string}
     * @memberof DoubleVerifyViewabilityV21
     */
    mrcViewabilityTargeting?: DoubleVerifyViewabilityV21MrcViewabilityTargetingEnum;
    /**
     * The type of brand exposure viewability targeting.
     * @type {string}
     * @memberof DoubleVerifyViewabilityV21
     */
    brandExposureViewabilityTargeting?: DoubleVerifyViewabilityV21BrandExposureViewabilityTargetingEnum;
    /**
     * Set to `true` to include impressions where impressions can\'t be measured.
     * @type {boolean}
     * @memberof DoubleVerifyViewabilityV21
     */
    includeUnmeasurableImpressions?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum DoubleVerifyViewabilityV21AverageCompletionAndFullyViewableRateTargetingEnum {
    AllowAll = 'ALLOW_ALL',
    AvgCompletionFullyViewableGte10 = 'AVG_COMPLETION_FULLY_VIEWABLE_GTE_10',
    AvgCompletionFullyViewableGte20 = 'AVG_COMPLETION_FULLY_VIEWABLE_GTE_20',
    AvgCompletionFullyViewableGte25 = 'AVG_COMPLETION_FULLY_VIEWABLE_GTE_25',
    AvgCompletionFullyViewableGte30 = 'AVG_COMPLETION_FULLY_VIEWABLE_GTE_30',
    AvgCompletionFullyViewableGte35 = 'AVG_COMPLETION_FULLY_VIEWABLE_GTE_35',
    AvgCompletionFullyViewableGte40 = 'AVG_COMPLETION_FULLY_VIEWABLE_GTE_40'
}
/**
    * @export
    * @enum {string}
    */
export enum DoubleVerifyViewabilityV21MrcViewabilityTargetingEnum {
    AllowAll = 'ALLOW_ALL',
    MrcViewabilityGte80 = 'MRC_VIEWABILITY_GTE_80',
    MrcViewabilityGte75 = 'MRC_VIEWABILITY_GTE_75',
    MrcViewabilityGte70 = 'MRC_VIEWABILITY_GTE_70',
    MrcViewabilityGte65 = 'MRC_VIEWABILITY_GTE_65',
    MrcViewabilityGte60 = 'MRC_VIEWABILITY_GTE_60',
    MrcViewabilityGte55 = 'MRC_VIEWABILITY_GTE_55',
    MrcViewabilityGte50 = 'MRC_VIEWABILITY_GTE_50',
    MrcViewabilityGte40 = 'MRC_VIEWABILITY_GTE_40',
    MrcViewabilityGte30 = 'MRC_VIEWABILITY_GTE_30'
}
/**
    * @export
    * @enum {string}
    */
export enum DoubleVerifyViewabilityV21BrandExposureViewabilityTargetingEnum {
    AllowAll = 'ALLOW_ALL',
    BrandExposureViewabilityGte15SecAvgDuration = 'BRAND_EXPOSURE_VIEWABILITY_GTE_15_SEC_AVG_DURATION',
    BrandExposureViewabilityGte10SecAvgDuration = 'BRAND_EXPOSURE_VIEWABILITY_GTE_10_SEC_AVG_DURATION',
    BrandExposureViewabilityGte5SecAvgDuration = 'BRAND_EXPOSURE_VIEWABILITY_GTE_5_SEC_AVG_DURATION'
}

/**
 * Default value is TOP_RIGHT.
 * @export
 * @enum {string}
 */

export enum DspAdChoicesPositionV1 {
    TopRight = 'TOP_RIGHT',
    TopLeft = 'TOP_LEFT',
    BottomRight = 'BOTTOM_RIGHT',
    BottomLeft = 'BOTTOM_LEFT'
}

/**
 * Asset to be associated with creative.
 * @export
 * @interface DspAssetV1
 */
export interface DspAssetV1 {
    /**
     * The uploaded asset Id. This Id is provided by Creative Assets API when user registers an asset with assetType after upload.
     * @type {string}
     * @memberof DspAssetV1
     */
    assetId: string;
    /**
     * The uploaded asset version. This version is provided by Creative Assets API when user registers an asset with assetType after upload.
     * @type {string}
     * @memberof DspAssetV1
     */
    version: string;
    /**
     * The asset\'s URL. This will be provided if asset linked with the creative being read is not registered in Creative Assets API.
     * @type {string}
     * @memberof DspAssetV1
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface DspBaseCreateCreativeRequestV1
 */
export interface DspBaseCreateCreativeRequestV1 {
    /**
     * The creative name.
     * @type {string}
     * @memberof DspBaseCreateCreativeRequestV1
     */
    name: string;
    /**
     * The advertiser Id. It\'s an immutable field.
     * @type {string}
     * @memberof DspBaseCreateCreativeRequestV1
     */
    advertiserId: string;
    /**
     * 
     * @type {DspCreativeMarketplaceV1}
     * @memberof DspBaseCreateCreativeRequestV1
     */
    marketplace: DspCreativeMarketplaceV1;
}
/**
 * This holds common immutable properties of all creative types create request.
 * @export
 * @interface DspBaseCreateCreativeRequestV1AllOf
 */
export interface DspBaseCreateCreativeRequestV1AllOf {
    /**
     * The advertiser Id. It\'s an immutable field.
     * @type {string}
     * @memberof DspBaseCreateCreativeRequestV1AllOf
     */
    advertiserId: string;
    /**
     * 
     * @type {DspCreativeMarketplaceV1}
     * @memberof DspBaseCreateCreativeRequestV1AllOf
     */
    marketplace: DspCreativeMarketplaceV1;
}
/**
 * This holds common read-only properties of all creative types.
 * @export
 * @interface DspBaseReadCreativeV1
 */
export interface DspBaseReadCreativeV1 {
    /**
     * 
     * @type {DspCreativeApprovalStatusV1}
     * @memberof DspBaseReadCreativeV1
     */
    approvalStatus?: DspCreativeApprovalStatusV1;
    /**
     * The creative created date.
     * @type {string}
     * @memberof DspBaseReadCreativeV1
     */
    createdDate?: string;
    /**
     * The creative last updated date.
     * @type {string}
     * @memberof DspBaseReadCreativeV1
     */
    lastUpdatedDate?: string;
}
/**
 * 
 * @export
 * @interface DspBaseUpdateCreativeRequestV1
 */
export interface DspBaseUpdateCreativeRequestV1 {
    /**
     * The creative name.
     * @type {string}
     * @memberof DspBaseUpdateCreativeRequestV1
     */
    name: string;
    /**
     * The creative Id. It will be used to perform update operation. It\'s an immutable field.
     * @type {string}
     * @memberof DspBaseUpdateCreativeRequestV1
     */
    creativeId: string;
}
/**
 * This holds common server-assigned mutable properties of all creative types update request.
 * @export
 * @interface DspBaseUpdateCreativeRequestV1AllOf
 */
export interface DspBaseUpdateCreativeRequestV1AllOf {
    /**
     * The creative Id. It will be used to perform update operation. It\'s an immutable field.
     * @type {string}
     * @memberof DspBaseUpdateCreativeRequestV1AllOf
     */
    creativeId: string;
}
/**
 * This holds common mutable properties of all creative types update request.
 * @export
 * @interface DspBaseWriteCreativeV1
 */
export interface DspBaseWriteCreativeV1 {
    /**
     * The creative name.
     * @type {string}
     * @memberof DspBaseWriteCreativeV1
     */
    name: string;
}
/**
 * To target Android app download as click through action, at least `storeId`, `productAsin` or `downloadUrl` must be provided. If both `storeId` and `productAsin` is provided, `storePriority` must be provided as well. This is applicable only to `MOBILE_AAP` and `MOBILE_OO` supply.
 * @export
 * @interface DspClickThroughAndroidAppDownloadActionV1
 */
export interface DspClickThroughAndroidAppDownloadActionV1 {
    /**
     * Indicates whether it\'s for real time bidding or not. Default value is `false`. This is applicable only to `MOBILE_AAP` supply.
     * @type {boolean}
     * @memberof DspClickThroughAndroidAppDownloadActionV1
     */
    isRtb?: boolean;
    /**
     * Android play store Id for app, used to build the download URL.
     * @type {string}
     * @memberof DspClickThroughAndroidAppDownloadActionV1
     */
    storeId?: string;
    /**
     * Amazon product Asin, used to build the download URL. This is applicable only to `MOBILE_AAP` supply.
     * @type {string}
     * @memberof DspClickThroughAndroidAppDownloadActionV1
     */
    productAsin?: string;
    /**
     * The higher priority store will be tried first, then if it does not exist on device the second store will be tried. Default value is `PLAY_STORE_THEN_AMAZON_APP_STORE`. This is applicable only to `MOBILE_AAP` supply.
     * @type {string}
     * @memberof DspClickThroughAndroidAppDownloadActionV1
     */
    storePriority?: DspClickThroughAndroidAppDownloadActionV1StorePriorityEnum;
    /**
     * URL to direct users to download app. By default, This will be built automatically using `playStoreId` and `productAsin` information provided. It can be overriden.
     * @type {string}
     * @memberof DspClickThroughAndroidAppDownloadActionV1
     */
    downloadUrl?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DspClickThroughAndroidAppDownloadActionV1StorePriorityEnum {
    PlayStoreThenAmazonAppStore = 'PLAY_STORE_THEN_AMAZON_APP_STORE',
    AmazonAppStoreThenPlayStore = 'AMAZON_APP_STORE_THEN_PLAY_STORE'
}

/**
 * Click through Action - Detail Page. This is applicable only to `MOBILE_OO` and `MOBILE_AAP` supply.
 * @export
 * @interface DspClickThroughDetailPageActionV1
 */
export interface DspClickThroughDetailPageActionV1 {
    /**
     * Define which product\'s detail page the customer should be taken to when tapping on the creative.
     * @type {string}
     * @memberof DspClickThroughDetailPageActionV1
     */
    productAsin: string;
    /**
     * Allow to open URL in Amazon App, if available on device. By default it is false. This will be considered only for `MOBILE_AAP` supply.
     * @type {boolean}
     * @memberof DspClickThroughDetailPageActionV1
     */
    enableDeepLinking?: boolean;
}
/**
 * Click through action - IOS App Download. This is applicable only to `MOBILE_AAP` supply.
 * @export
 * @interface DspClickThroughIosAppDownloadActionV1
 */
export interface DspClickThroughIosAppDownloadActionV1 {
    /**
     * Apple app store link for app, used to build the download URL.
     * @type {string}
     * @memberof DspClickThroughIosAppDownloadActionV1
     */
    storeLink: string;
    /**
     * URL to direct users to download app. By default, This will be built automatically using `storeLink` information provided. It can be overridden.
     * @type {string}
     * @memberof DspClickThroughIosAppDownloadActionV1
     */
    downloadUrl?: string;
}
/**
 * Click through Action - Kindle App Download. This is applicable only to `MOBILE_AAP` supply.
 * @export
 * @interface DspClickThroughKindleAppDownloadActionV1
 */
export interface DspClickThroughKindleAppDownloadActionV1 {
    /**
     * Amazon product Asin, used to build the download URL.
     * @type {string}
     * @memberof DspClickThroughKindleAppDownloadActionV1
     */
    productAsin: string;
    /**
     * URL to direct users to download app. By default, this will be built automatically using `productAsin` information provided. It can be overridden.
     * @type {string}
     * @memberof DspClickThroughKindleAppDownloadActionV1
     */
    downloadUrl?: string;
}
/**
 * Click through Action - Search Asins. This is applicable only to `MOBILE_AAP` and `MOBILE_OO` supply.
 * @export
 * @interface DspClickThroughSearchAsinActionV1
 */
export interface DspClickThroughSearchAsinActionV1 {
    /**
     * Define the Asins to query for in the search results that will be displayed on click-through.
     * @type {Array<string>}
     * @memberof DspClickThroughSearchAsinActionV1
     */
    productAsins: Array<string>;
    /**
     * Allow to open URL in Amazon App, if available on device. This will be considered only for `MOBILE_AAP` supply. Default value is `false`.
     * @type {boolean}
     * @memberof DspClickThroughSearchAsinActionV1
     */
    enableDeepLinking?: boolean;
}
/**
 * Click through action - Search Keywords. This is applicable only to `MOBILE_AAP` and `MOBILE_OO` supply.
 * @export
 * @interface DspClickThroughSearchKeywordActionV1
 */
export interface DspClickThroughSearchKeywordActionV1 {
    /**
     * Define the keywords to query for in the search results that will be displayed on click-through.
     * @type {Array<string>}
     * @memberof DspClickThroughSearchKeywordActionV1
     */
    keywords: Array<string>;
    /**
     * Allow to open URL in Amazon App, if available on device. This will be considered only for `MOBILE_AAP` supply. By default it is `false`.
     * @type {boolean}
     * @memberof DspClickThroughSearchKeywordActionV1
     */
    enableDeepLinking?: boolean;
}
/**
 * 
 * @export
 * @interface DspCreateImageCreativeRequestV1
 */
export interface DspCreateImageCreativeRequestV1 {
    /**
     * The creative name.
     * @type {string}
     * @memberof DspCreateImageCreativeRequestV1
     */
    name: string;
    /**
     * The advertiser Id. It\'s an immutable field.
     * @type {string}
     * @memberof DspCreateImageCreativeRequestV1
     */
    advertiserId: string;
    /**
     * 
     * @type {DspCreativeMarketplaceV1}
     * @memberof DspCreateImageCreativeRequestV1
     */
    marketplace: DspCreativeMarketplaceV1;
    /**
     * The creative external Id.
     * @type {string}
     * @memberof DspCreateImageCreativeRequestV1
     */
    externalId?: string;
    /**
     * 
     * @type {DspSizeV1}
     * @memberof DspCreateImageCreativeRequestV1
     */
    size: DspSizeV1;
    /**
     * 
     * @type {DspAssetV1}
     * @memberof DspCreateImageCreativeRequestV1
     */
    asset: DspAssetV1;
    /**
     * 
     * @type {DspImageClickThroughActionV1}
     * @memberof DspCreateImageCreativeRequestV1
     */
    clickThroughAction: DspImageClickThroughActionV1;
    /**
     * This URL is pinged when the creative is clicked. The URL can contain macros.
     * @type {Array<string>}
     * @memberof DspCreateImageCreativeRequestV1
     */
    thirdPartyClickTrackers?: Array<string>;
    /**
     * 
     * @type {Array<DspThirdPartyTrackerV1>}
     * @memberof DspCreateImageCreativeRequestV1
     */
    thirdPartyTrackers?: Array<DspThirdPartyTrackerV1>;
    /**
     * Add HTML to the creative for surveys or other arbitrary HTML.
     * @type {string}
     * @memberof DspCreateImageCreativeRequestV1
     */
    additionalHtml?: string;
    /**
     * 
     * @type {DspAdChoicesPositionV1}
     * @memberof DspCreateImageCreativeRequestV1
     */
    adChoicesPosition?: DspAdChoicesPositionV1;
    /**
     * 
     * @type {DspImageCreativeSupplyV1}
     * @memberof DspCreateImageCreativeRequestV1
     */
    supply: DspImageCreativeSupplyV1;
}
/**
 * Create image creative request.
 * @export
 * @interface DspCreateImageCreativeRequestV1AllOf
 */
export interface DspCreateImageCreativeRequestV1AllOf {
    /**
     * 
     * @type {DspImageCreativeSupplyV1}
     * @memberof DspCreateImageCreativeRequestV1AllOf
     */
    supply: DspImageCreativeSupplyV1;
}
/**
 * Create Responsive eCommerce creative (REC) request.
 * @export
 * @interface DspCreateRecCreativeRequestV1
 */
export interface DspCreateRecCreativeRequestV1 {
    /**
     * The creative name.
     * @type {string}
     * @memberof DspCreateRecCreativeRequestV1
     */
    name: string;
    /**
     * The advertiser Id. It\'s an immutable field.
     * @type {string}
     * @memberof DspCreateRecCreativeRequestV1
     */
    advertiserId: string;
    /**
     * 
     * @type {DspCreativeMarketplaceV1}
     * @memberof DspCreateRecCreativeRequestV1
     */
    marketplace: DspCreativeMarketplaceV1;
    /**
     * Add HTML to the creative for surveys or other arbitrary HTML.
     * @type {string}
     * @memberof DspCreateRecCreativeRequestV1
     */
    additionalHtml?: string;
    /**
     * If it\'s true, orders can be fulfilled by third party sellers.
     * @type {boolean}
     * @memberof DspCreateRecCreativeRequestV1
     */
    allowThirdPartySellers?: boolean;
    /**
     * 
     * @type {DspRecContentV1}
     * @memberof DspCreateRecCreativeRequestV1
     */
    content?: DspRecContentV1;
    /**
     * A list of formats configured to display for the creative.
     * @type {Array<DspRecFormatV1>}
     * @memberof DspCreateRecCreativeRequestV1
     */
    allowedFormats?: Array<DspRecFormatV1>;
    /**
     * 
     * @type {DspRecOptimizationGoalV1}
     * @memberof DspCreateRecCreativeRequestV1
     */
    optimizationGoal?: DspRecOptimizationGoalV1;
    /**
     * A list of sizes configured to display for the creative. This overrides the default REC supported sizes.
     * @type {Array<DspSizeV1>}
     * @memberof DspCreateRecCreativeRequestV1
     */
    allowedSizes?: Array<DspSizeV1>;
    /**
     * Product objects associated with the creative.
     * @type {Array<DspRecProductV1>}
     * @memberof DspCreateRecCreativeRequestV1
     */
    associatedProducts: Array<DspRecProductV1>;
    /**
     * This URL is pinged when the creative is clicked. The URL can contain macros.
     * @type {Array<string>}
     * @memberof DspCreateRecCreativeRequestV1
     */
    thirdPartyClickTrackers?: Array<string>;
    /**
     * URL used for tracking interactions with third party
     * @type {Array<DspThirdPartyTrackerV1>}
     * @memberof DspCreateRecCreativeRequestV1
     */
    thirdPartyTrackers?: Array<DspThirdPartyTrackerV1>;
}
/**
 * Create video creative request
 * @export
 * @interface DspCreateVideoCreativeRequestV1
 */
export interface DspCreateVideoCreativeRequestV1 {
    /**
     * The creative name.
     * @type {string}
     * @memberof DspCreateVideoCreativeRequestV1
     */
    name: string;
    /**
     * The advertiser Id. It\'s an immutable field.
     * @type {string}
     * @memberof DspCreateVideoCreativeRequestV1
     */
    advertiserId: string;
    /**
     * 
     * @type {DspCreativeMarketplaceV1}
     * @memberof DspCreateVideoCreativeRequestV1
     */
    marketplace: DspCreativeMarketplaceV1;
    /**
     * The creative external identifier.
     * @type {string}
     * @memberof DspCreateVideoCreativeRequestV1
     */
    externalId?: string;
    /**
     * 
     * @type {DspAssetV1}
     * @memberof DspCreateVideoCreativeRequestV1
     */
    asset: DspAssetV1;
    /**
     * 
     * @type {DspVideoClickThroughActionV1}
     * @memberof DspCreateVideoCreativeRequestV1
     */
    clickThroughAction: DspVideoClickThroughActionV1;
    /**
     * 
     * @type {Array<DspThirdPartyTrackerV1>}
     * @memberof DspCreateVideoCreativeRequestV1
     */
    thirdPartyTrackers?: Array<DspThirdPartyTrackerV1>;
}
/**
 * The creative approval status.
 * @export
 * @enum {string}
 */

export enum DspCreativeApprovalStatusV1 {
    Pending = 'PENDING',
    Approved = 'APPROVED',
    NotApproved = 'NOT_APPROVED',
    WaitingForLineitem = 'WAITING_FOR_LINEITEM',
    ApprovedWithExceptions = 'APPROVED_WITH_EXCEPTIONS'
}

/**
 * Marketplace where this creative is applicable.
 * @export
 * @enum {string}
 */

export enum DspCreativeMarketplaceV1 {
    Us = 'US',
    Ca = 'CA',
    Br = 'BR',
    Mx = 'MX'
}

/**
 * The creative moderation summary.
 * @export
 * @interface DspCreativeModerationV1
 */
export interface DspCreativeModerationV1 {
    /**
     * 
     * @type {string}
     * @memberof DspCreativeModerationV1
     */
    creativeId?: string;
    /**
     * 
     * @type {DspCreativeApprovalStatusV1}
     * @memberof DspCreativeModerationV1
     */
    status?: DspCreativeApprovalStatusV1;
    /**
     * The reasons why creative is not approved.
     * @type {Array<string>}
     * @memberof DspCreativeModerationV1
     */
    reasons?: Array<string>;
    /**
     * The additional notes.
     * @type {Array<string>}
     * @memberof DspCreativeModerationV1
     */
    additionalNotes?: Array<string>;
}
/**
 * Creative preview response.
 * @export
 * @interface DspCreativePreviewResponseV1
 */
export interface DspCreativePreviewResponseV1 {
    /**
     * The HTML content
     * @type {string}
     * @memberof DspCreativePreviewResponseV1
     */
    previewContent?: string;
}
/**
 * Response for the creative create/update operations. If operation is successful, it contains only creativeId. If it is a failure, it contains only errorDetails.
 * @export
 * @interface DspCreativeResponseV1
 */
export interface DspCreativeResponseV1 {
    /**
     * The creative Id.
     * @type {string}
     * @memberof DspCreativeResponseV1
     */
    creativeId?: string;
    /**
     * 
     * @type {Error}
     * @memberof DspCreativeResponseV1
     */
    errorDetails?: Error;
}
/**
 * Click through Action - Custom Url.
 * @export
 * @interface DspCustomUrlActionV1
 */
export interface DspCustomUrlActionV1 {
    /**
     * Define where the creative links to on click.
     * @type {string}
     * @memberof DspCustomUrlActionV1
     */
    url: string;
}
/**
 * Image\'s click through action which can have any one of the following properties. One action and one action alone must be provided.
 * @export
 * @interface DspImageClickThroughActionV1
 */
export interface DspImageClickThroughActionV1 {
    /**
     * 
     * @type {DspCustomUrlActionV1}
     * @memberof DspImageClickThroughActionV1
     */
    customUrl?: DspCustomUrlActionV1;
    /**
     * 
     * @type {DspClickThroughDetailPageActionV1}
     * @memberof DspImageClickThroughActionV1
     */
    detailPage?: DspClickThroughDetailPageActionV1;
    /**
     * 
     * @type {DspClickThroughSearchAsinActionV1}
     * @memberof DspImageClickThroughActionV1
     */
    searchAsin?: DspClickThroughSearchAsinActionV1;
    /**
     * 
     * @type {DspClickThroughSearchKeywordActionV1}
     * @memberof DspImageClickThroughActionV1
     */
    searchKeyword?: DspClickThroughSearchKeywordActionV1;
    /**
     * 
     * @type {DspClickThroughAndroidAppDownloadActionV1}
     * @memberof DspImageClickThroughActionV1
     */
    androidAppDownload?: DspClickThroughAndroidAppDownloadActionV1;
    /**
     * 
     * @type {DspClickThroughIosAppDownloadActionV1}
     * @memberof DspImageClickThroughActionV1
     */
    iosAppDownload?: DspClickThroughIosAppDownloadActionV1;
    /**
     * 
     * @type {DspClickThroughKindleAppDownloadActionV1}
     * @memberof DspImageClickThroughActionV1
     */
    kindleAppDownload?: DspClickThroughKindleAppDownloadActionV1;
}
/**
 * Image creative preview model. Populate this to preview a new creative.
 * @export
 * @interface DspImageCreativePreviewModelV1
 */
export interface DspImageCreativePreviewModelV1 {
    /**
     * 
     * @type {DspCreativeMarketplaceV1}
     * @memberof DspImageCreativePreviewModelV1
     */
    marketplace: DspCreativeMarketplaceV1;
    /**
     * 
     * @type {DspImageCreativeSupplyV1}
     * @memberof DspImageCreativePreviewModelV1
     */
    supply: DspImageCreativeSupplyV1;
    /**
     * 
     * @type {DspSizeV1}
     * @memberof DspImageCreativePreviewModelV1
     */
    size: DspSizeV1;
    /**
     * 
     * @type {DspAssetV1}
     * @memberof DspImageCreativePreviewModelV1
     */
    asset: DspAssetV1;
    /**
     * 
     * @type {DspImageClickThroughActionV1}
     * @memberof DspImageCreativePreviewModelV1
     */
    clickThroughAction?: DspImageClickThroughActionV1;
    /**
     * Add HTML to the creative for surveys or other arbitrary HTML.
     * @type {string}
     * @memberof DspImageCreativePreviewModelV1
     */
    additionalHtml?: string;
    /**
     * 
     * @type {DspAdChoicesPositionV1}
     * @memberof DspImageCreativePreviewModelV1
     */
    adChoicesPosition: DspAdChoicesPositionV1;
    /**
     * This URL is pinged when the creative is clicked. The URL can contain macros.
     * @type {Array<string>}
     * @memberof DspImageCreativePreviewModelV1
     */
    thirdPartyClickTrackers?: Array<string>;
    /**
     * 
     * @type {Array<DspThirdPartyTrackerV1>}
     * @memberof DspImageCreativePreviewModelV1
     */
    thirdPartyTrackers?: Array<DspThirdPartyTrackerV1>;
}
/**
 * Image creative preview request. Either `creativeId` or `creativeModel` must be provided, but not both.
 * @export
 * @interface DspImageCreativePreviewRequestV1
 */
export interface DspImageCreativePreviewRequestV1 {
    /**
     * The creative Id.
     * @type {string}
     * @memberof DspImageCreativePreviewRequestV1
     */
    creativeId?: string;
    /**
     * 
     * @type {DspImageCreativePreviewModelV1}
     * @memberof DspImageCreativePreviewRequestV1
     */
    creativeModel?: DspImageCreativePreviewModelV1;
    /**
     * 
     * @type {DspPreviewConfigurationV1}
     * @memberof DspImageCreativePreviewRequestV1
     */
    previewConfiguration?: DspPreviewConfigurationV1;
}
/**
 * Different supply of image creative.
 * @export
 * @enum {string}
 */

export enum DspImageCreativeSupplyV1 {
    Desktop = 'DESKTOP',
    MobileOo = 'MOBILE_OO',
    MobileAap = 'MOBILE_AAP'
}

/**
 * 
 * @export
 * @interface DspImageCreativeV1
 */
export interface DspImageCreativeV1 {
    /**
     * The creative name.
     * @type {string}
     * @memberof DspImageCreativeV1
     */
    name: string;
    /**
     * The advertiser Id. It\'s an immutable field.
     * @type {string}
     * @memberof DspImageCreativeV1
     */
    advertiserId: string;
    /**
     * 
     * @type {DspCreativeMarketplaceV1}
     * @memberof DspImageCreativeV1
     */
    marketplace: DspCreativeMarketplaceV1;
    /**
     * The creative external Id.
     * @type {string}
     * @memberof DspImageCreativeV1
     */
    externalId?: string;
    /**
     * 
     * @type {DspSizeV1}
     * @memberof DspImageCreativeV1
     */
    size: DspSizeV1;
    /**
     * 
     * @type {DspAssetV1}
     * @memberof DspImageCreativeV1
     */
    asset: DspAssetV1;
    /**
     * 
     * @type {DspImageClickThroughActionV1}
     * @memberof DspImageCreativeV1
     */
    clickThroughAction: DspImageClickThroughActionV1;
    /**
     * This URL is pinged when the creative is clicked. The URL can contain macros.
     * @type {Array<string>}
     * @memberof DspImageCreativeV1
     */
    thirdPartyClickTrackers?: Array<string>;
    /**
     * 
     * @type {Array<DspThirdPartyTrackerV1>}
     * @memberof DspImageCreativeV1
     */
    thirdPartyTrackers?: Array<DspThirdPartyTrackerV1>;
    /**
     * Add HTML to the creative for surveys or other arbitrary HTML.
     * @type {string}
     * @memberof DspImageCreativeV1
     */
    additionalHtml?: string;
    /**
     * 
     * @type {DspAdChoicesPositionV1}
     * @memberof DspImageCreativeV1
     */
    adChoicesPosition?: DspAdChoicesPositionV1;
    /**
     * 
     * @type {DspImageCreativeSupplyV1}
     * @memberof DspImageCreativeV1
     */
    supply: DspImageCreativeSupplyV1;
    /**
     * The creative Id. It will be used to perform update operation. It\'s an immutable field.
     * @type {string}
     * @memberof DspImageCreativeV1
     */
    creativeId: string;
    /**
     * 
     * @type {DspCreativeApprovalStatusV1}
     * @memberof DspImageCreativeV1
     */
    approvalStatus?: DspCreativeApprovalStatusV1;
    /**
     * The creative created date.
     * @type {string}
     * @memberof DspImageCreativeV1
     */
    createdDate?: string;
    /**
     * The creative last updated date.
     * @type {string}
     * @memberof DspImageCreativeV1
     */
    lastUpdatedDate?: string;
}
/**
 * Configuration settings for preview
 * @export
 * @interface DspPreviewConfigurationV1
 */
export interface DspPreviewConfigurationV1 {
    /**
     * If it\'s true, shows preview in amazon websites, else shows in other websites
     * @type {boolean}
     * @memberof DspPreviewConfigurationV1
     */
    isOnAmazon?: boolean;
}
/**
 * Read image creatives response.
 * @export
 * @interface DspReadImageCreativesResponseV1
 */
export interface DspReadImageCreativesResponseV1 {
    /**
     * 
     * @type {Array<DspImageCreativeV1>}
     * @memberof DspReadImageCreativesResponseV1
     */
    creatives?: Array<DspImageCreativeV1>;
}
/**
 * Read Responsive eCommerce creative (REC) creatives response.
 * @export
 * @interface DspReadRecCreativesResponseV1
 */
export interface DspReadRecCreativesResponseV1 {
    /**
     * 
     * @type {Array<DspRecCreativeV1>}
     * @memberof DspReadRecCreativesResponseV1
     */
    creatives?: Array<DspRecCreativeV1>;
}
/**
 * Read video creatives response.
 * @export
 * @interface DspReadVideoCreativesResponseV1
 */
export interface DspReadVideoCreativesResponseV1 {
    /**
     * 
     * @type {Array<DspVideoCreativeV1>}
     * @memberof DspReadVideoCreativesResponseV1
     */
    creatives?: Array<DspVideoCreativeV1>;
}
/**
 * This holds common properties that can we written and updated for image creative.
 * @export
 * @interface DspReadWriteImageCreativeAttributesV1
 */
export interface DspReadWriteImageCreativeAttributesV1 {
    /**
     * The creative external Id.
     * @type {string}
     * @memberof DspReadWriteImageCreativeAttributesV1
     */
    externalId?: string;
    /**
     * 
     * @type {DspSizeV1}
     * @memberof DspReadWriteImageCreativeAttributesV1
     */
    size: DspSizeV1;
    /**
     * 
     * @type {DspAssetV1}
     * @memberof DspReadWriteImageCreativeAttributesV1
     */
    asset: DspAssetV1;
    /**
     * 
     * @type {DspImageClickThroughActionV1}
     * @memberof DspReadWriteImageCreativeAttributesV1
     */
    clickThroughAction: DspImageClickThroughActionV1;
    /**
     * This URL is pinged when the creative is clicked. The URL can contain macros.
     * @type {Array<string>}
     * @memberof DspReadWriteImageCreativeAttributesV1
     */
    thirdPartyClickTrackers?: Array<string>;
    /**
     * 
     * @type {Array<DspThirdPartyTrackerV1>}
     * @memberof DspReadWriteImageCreativeAttributesV1
     */
    thirdPartyTrackers?: Array<DspThirdPartyTrackerV1>;
    /**
     * Add HTML to the creative for surveys or other arbitrary HTML.
     * @type {string}
     * @memberof DspReadWriteImageCreativeAttributesV1
     */
    additionalHtml?: string;
    /**
     * 
     * @type {DspAdChoicesPositionV1}
     * @memberof DspReadWriteImageCreativeAttributesV1
     */
    adChoicesPosition?: DspAdChoicesPositionV1;
}
/**
 * This holds common properties that can we written and updated for REC creative.
 * @export
 * @interface DspReadWriteRecCreativeAttributesV1
 */
export interface DspReadWriteRecCreativeAttributesV1 {
    /**
     * Add HTML to the creative for surveys or other arbitrary HTML.
     * @type {string}
     * @memberof DspReadWriteRecCreativeAttributesV1
     */
    additionalHtml?: string;
    /**
     * If it\'s true, orders can be fulfilled by third party sellers.
     * @type {boolean}
     * @memberof DspReadWriteRecCreativeAttributesV1
     */
    allowThirdPartySellers?: boolean;
    /**
     * 
     * @type {DspRecContentV1}
     * @memberof DspReadWriteRecCreativeAttributesV1
     */
    content?: DspRecContentV1;
    /**
     * A list of formats configured to display for the creative.
     * @type {Array<DspRecFormatV1>}
     * @memberof DspReadWriteRecCreativeAttributesV1
     */
    allowedFormats?: Array<DspRecFormatV1>;
    /**
     * 
     * @type {DspRecOptimizationGoalV1}
     * @memberof DspReadWriteRecCreativeAttributesV1
     */
    optimizationGoal?: DspRecOptimizationGoalV1;
    /**
     * A list of sizes configured to display for the creative. This overrides the default REC supported sizes.
     * @type {Array<DspSizeV1>}
     * @memberof DspReadWriteRecCreativeAttributesV1
     */
    allowedSizes?: Array<DspSizeV1>;
    /**
     * Product objects associated with the creative.
     * @type {Array<DspRecProductV1>}
     * @memberof DspReadWriteRecCreativeAttributesV1
     */
    associatedProducts: Array<DspRecProductV1>;
    /**
     * This URL is pinged when the creative is clicked. The URL can contain macros.
     * @type {Array<string>}
     * @memberof DspReadWriteRecCreativeAttributesV1
     */
    thirdPartyClickTrackers?: Array<string>;
    /**
     * URL used for tracking interactions with third party
     * @type {Array<DspThirdPartyTrackerV1>}
     * @memberof DspReadWriteRecCreativeAttributesV1
     */
    thirdPartyTrackers?: Array<DspThirdPartyTrackerV1>;
}
/**
 * This holds common properties that can we written and updated for video creative
 * @export
 * @interface DspReadWriteVideoCreativeAttributesV1
 */
export interface DspReadWriteVideoCreativeAttributesV1 {
    /**
     * The creative external identifier.
     * @type {string}
     * @memberof DspReadWriteVideoCreativeAttributesV1
     */
    externalId?: string;
    /**
     * 
     * @type {DspAssetV1}
     * @memberof DspReadWriteVideoCreativeAttributesV1
     */
    asset: DspAssetV1;
    /**
     * 
     * @type {DspVideoClickThroughActionV1}
     * @memberof DspReadWriteVideoCreativeAttributesV1
     */
    clickThroughAction: DspVideoClickThroughActionV1;
    /**
     * 
     * @type {Array<DspThirdPartyTrackerV1>}
     * @memberof DspReadWriteVideoCreativeAttributesV1
     */
    thirdPartyTrackers?: Array<DspThirdPartyTrackerV1>;
}
/**
 * Responsive eCommerce creative field for displaying customized content. Provide either Background or LogoHeadline but not both.
 * @export
 * @interface DspRecContentV1
 */
export interface DspRecContentV1 {
    /**
     * Creative customization field for displaying custom images.
     * @type {Array<DspAssetV1>}
     * @memberof DspRecContentV1
     */
    background?: Array<DspAssetV1>;
    /**
     * 
     * @type {DspRecContentV1LogoHeadline}
     * @memberof DspRecContentV1
     */
    logoHeadline?: DspRecContentV1LogoHeadline;
}
/**
 * Creative customization field for displaying brandlogo and headline.
 * @export
 * @interface DspRecContentV1LogoHeadline
 */
export interface DspRecContentV1LogoHeadline {
    /**
     * 
     * @type {DspAssetV1}
     * @memberof DspRecContentV1LogoHeadline
     */
    brandLogo: DspAssetV1;
    /**
     * Creative customization field for displaying headline.
     * @type {string}
     * @memberof DspRecContentV1LogoHeadline
     */
    headline?: string;
}
/**
 * Responsive eCommerce Creative preview model. Populate this to preview a new creative.
 * @export
 * @interface DspRecCreativePreviewModelV1
 */
export interface DspRecCreativePreviewModelV1 {
    /**
     * 
     * @type {DspRecContentV1}
     * @memberof DspRecCreativePreviewModelV1
     */
    content?: DspRecContentV1;
    /**
     * 
     * @type {DspCreativeMarketplaceV1}
     * @memberof DspRecCreativePreviewModelV1
     */
    marketplace: DspCreativeMarketplaceV1;
    /**
     * This URL is pinged when the creative is clicked. The URL can contain macros.
     * @type {Array<string>}
     * @memberof DspRecCreativePreviewModelV1
     */
    thirdPartyClickTrackers?: Array<string>;
    /**
     * 
     * @type {Array<DspThirdPartyTrackerV1>}
     * @memberof DspRecCreativePreviewModelV1
     */
    thirdPartyTrackers?: Array<DspThirdPartyTrackerV1>;
}
/**
 * Responsive eCommerce creative preview request. Either `creativeId` or `creativeModel` must be provided, but not both.
 * @export
 * @interface DspRecCreativePreviewRequestV1
 */
export interface DspRecCreativePreviewRequestV1 {
    /**
     * The identifier of the creative.
     * @type {string}
     * @memberof DspRecCreativePreviewRequestV1
     */
    creativeId?: string;
    /**
     * 
     * @type {DspRecCreativePreviewModelV1}
     * @memberof DspRecCreativePreviewRequestV1
     */
    creativeModel?: DspRecCreativePreviewModelV1;
    /**
     * 
     * @type {DspRecPreviewConfigurationV1}
     * @memberof DspRecCreativePreviewRequestV1
     */
    previewConfiguration: DspRecPreviewConfigurationV1;
}
/**
 * 
 * @export
 * @interface DspRecCreativeV1
 */
export interface DspRecCreativeV1 {
    /**
     * The creative name.
     * @type {string}
     * @memberof DspRecCreativeV1
     */
    name: string;
    /**
     * The advertiser Id. It\'s an immutable field.
     * @type {string}
     * @memberof DspRecCreativeV1
     */
    advertiserId: string;
    /**
     * 
     * @type {DspCreativeMarketplaceV1}
     * @memberof DspRecCreativeV1
     */
    marketplace: DspCreativeMarketplaceV1;
    /**
     * Add HTML to the creative for surveys or other arbitrary HTML.
     * @type {string}
     * @memberof DspRecCreativeV1
     */
    additionalHtml?: string;
    /**
     * If it\'s true, orders can be fulfilled by third party sellers.
     * @type {boolean}
     * @memberof DspRecCreativeV1
     */
    allowThirdPartySellers?: boolean;
    /**
     * 
     * @type {DspRecContentV1}
     * @memberof DspRecCreativeV1
     */
    content?: DspRecContentV1;
    /**
     * A list of formats configured to display for the creative.
     * @type {Array<DspRecFormatV1>}
     * @memberof DspRecCreativeV1
     */
    allowedFormats?: Array<DspRecFormatV1>;
    /**
     * 
     * @type {DspRecOptimizationGoalV1}
     * @memberof DspRecCreativeV1
     */
    optimizationGoal?: DspRecOptimizationGoalV1;
    /**
     * A list of sizes configured to display for the creative. This overrides the default REC supported sizes.
     * @type {Array<DspSizeV1>}
     * @memberof DspRecCreativeV1
     */
    allowedSizes?: Array<DspSizeV1>;
    /**
     * Product objects associated with the creative.
     * @type {Array<DspRecProductV1>}
     * @memberof DspRecCreativeV1
     */
    associatedProducts: Array<DspRecProductV1>;
    /**
     * This URL is pinged when the creative is clicked. The URL can contain macros.
     * @type {Array<string>}
     * @memberof DspRecCreativeV1
     */
    thirdPartyClickTrackers?: Array<string>;
    /**
     * URL used for tracking interactions with third party
     * @type {Array<DspThirdPartyTrackerV1>}
     * @memberof DspRecCreativeV1
     */
    thirdPartyTrackers?: Array<DspThirdPartyTrackerV1>;
    /**
     * The creative Id. It will be used to perform update operation. It\'s an immutable field.
     * @type {string}
     * @memberof DspRecCreativeV1
     */
    creativeId: string;
    /**
     * 
     * @type {DspCreativeApprovalStatusV1}
     * @memberof DspRecCreativeV1
     */
    approvalStatus?: DspCreativeApprovalStatusV1;
    /**
     * The creative created date.
     * @type {string}
     * @memberof DspRecCreativeV1
     */
    createdDate?: string;
    /**
     * The creative last updated date.
     * @type {string}
     * @memberof DspRecCreativeV1
     */
    lastUpdatedDate?: string;
}
/**
 * Formats configured to display for the creative. * `SHOP_NOW`: Clicking on the ad will take customer to the relevant product detail page. * `ADD_TO_CART`: Clicking on the ad will add the product to the customer’s Cart. * `COUPON`: Clicking on the ad will clip the coupon and take the customer to the product detail page for that item, if signed in; otherwise take them to the coupon landing page where the customer is instructed to sign in. 
 * @export
 * @enum {string}
 */

export enum DspRecFormatV1 {
    ShopNow = 'SHOP_NOW',
    AddToCart = 'ADD_TO_CART',
    Coupon = 'COUPON'
}

/**
 * Metric which creative optimization should attempt to improve.
 * @export
 * @enum {string}
 */

export enum DspRecOptimizationGoalV1 {
    PurchaseRate = 'PURCHASE_RATE',
    ClickThroughRate = 'CLICK_THROUGH_RATE',
    DetailPageViewRate = 'DETAIL_PAGE_VIEW_RATE'
}

/**
 * 
 * @export
 * @interface DspRecPreviewConfigurationV1
 */
export interface DspRecPreviewConfigurationV1 {
    /**
     * If it\'s true, shows preview in amazon websites, else shows in other websites
     * @type {boolean}
     * @memberof DspRecPreviewConfigurationV1
     */
    isOnAmazon?: boolean;
    /**
     * 
     * @type {DspSizeV1}
     * @memberof DspRecPreviewConfigurationV1
     */
    allowedSize: DspSizeV1;
    /**
     * 
     * @type {DspRecFormatV1}
     * @memberof DspRecPreviewConfigurationV1
     */
    allowedFormat: DspRecFormatV1;
    /**
     * 
     * @type {DspRecProductV1}
     * @memberof DspRecPreviewConfigurationV1
     */
    associatedProduct: DspRecProductV1;
}
/**
 * REC Creative Preview Configuration
 * @export
 * @interface DspRecPreviewConfigurationV1AllOf
 */
export interface DspRecPreviewConfigurationV1AllOf {
    /**
     * 
     * @type {DspSizeV1}
     * @memberof DspRecPreviewConfigurationV1AllOf
     */
    allowedSize: DspSizeV1;
    /**
     * 
     * @type {DspRecFormatV1}
     * @memberof DspRecPreviewConfigurationV1AllOf
     */
    allowedFormat: DspRecFormatV1;
    /**
     * 
     * @type {DspRecProductV1}
     * @memberof DspRecPreviewConfigurationV1AllOf
     */
    associatedProduct: DspRecProductV1;
}
/**
 * The object representation of a product.
 * @export
 * @interface DspRecProductV1
 */
export interface DspRecProductV1 {
    /**
     * Amazon standard identification number.
     * @type {string}
     * @memberof DspRecProductV1
     */
    asin: string;
    /**
     * Retail product title.
     * @type {string}
     * @memberof DspRecProductV1
     */
    productTitle?: string;
}
/**
 * Size of the creative.
 * @export
 * @interface DspSizeV1
 */
export interface DspSizeV1 {
    /**
     * The creative width in pixels.
     * @type {number}
     * @memberof DspSizeV1
     */
    width: number;
    /**
     * The creative height in pixels.
     * @type {number}
     * @memberof DspSizeV1
     */
    height: number;
}
/**
 * Third party creative tracker type.
 * @export
 * @enum {string}
 */

export enum DspThirdPartyTrackerTypeV1 {
    Impression = 'IMPRESSION'
}

/**
 * Trackers used for tracking interactions with third party
 * @export
 * @interface DspThirdPartyTrackerV1
 */
export interface DspThirdPartyTrackerV1 {
    /**
     * 
     * @type {DspThirdPartyTrackerTypeV1}
     * @memberof DspThirdPartyTrackerV1
     */
    type: DspThirdPartyTrackerTypeV1;
    /**
     * URL used for tracking interactions with third party
     * @type {string}
     * @memberof DspThirdPartyTrackerV1
     */
    trackerUrl: string;
}
/**
 * Update image creative request
 * @export
 * @interface DspUpdateImageCreativeRequestV1
 */
export interface DspUpdateImageCreativeRequestV1 {
    /**
     * The creative name.
     * @type {string}
     * @memberof DspUpdateImageCreativeRequestV1
     */
    name: string;
    /**
     * The creative Id. It will be used to perform update operation. It\'s an immutable field.
     * @type {string}
     * @memberof DspUpdateImageCreativeRequestV1
     */
    creativeId: string;
    /**
     * The creative external Id.
     * @type {string}
     * @memberof DspUpdateImageCreativeRequestV1
     */
    externalId?: string;
    /**
     * 
     * @type {DspSizeV1}
     * @memberof DspUpdateImageCreativeRequestV1
     */
    size: DspSizeV1;
    /**
     * 
     * @type {DspAssetV1}
     * @memberof DspUpdateImageCreativeRequestV1
     */
    asset: DspAssetV1;
    /**
     * 
     * @type {DspImageClickThroughActionV1}
     * @memberof DspUpdateImageCreativeRequestV1
     */
    clickThroughAction: DspImageClickThroughActionV1;
    /**
     * This URL is pinged when the creative is clicked. The URL can contain macros.
     * @type {Array<string>}
     * @memberof DspUpdateImageCreativeRequestV1
     */
    thirdPartyClickTrackers?: Array<string>;
    /**
     * 
     * @type {Array<DspThirdPartyTrackerV1>}
     * @memberof DspUpdateImageCreativeRequestV1
     */
    thirdPartyTrackers?: Array<DspThirdPartyTrackerV1>;
    /**
     * Add HTML to the creative for surveys or other arbitrary HTML.
     * @type {string}
     * @memberof DspUpdateImageCreativeRequestV1
     */
    additionalHtml?: string;
    /**
     * 
     * @type {DspAdChoicesPositionV1}
     * @memberof DspUpdateImageCreativeRequestV1
     */
    adChoicesPosition?: DspAdChoicesPositionV1;
}
/**
 * Update Responsive eCommerce creative (REC) request.
 * @export
 * @interface DspUpdateRecCreativeRequestV1
 */
export interface DspUpdateRecCreativeRequestV1 {
    /**
     * The creative name.
     * @type {string}
     * @memberof DspUpdateRecCreativeRequestV1
     */
    name: string;
    /**
     * The creative Id. It will be used to perform update operation. It\'s an immutable field.
     * @type {string}
     * @memberof DspUpdateRecCreativeRequestV1
     */
    creativeId: string;
    /**
     * Add HTML to the creative for surveys or other arbitrary HTML.
     * @type {string}
     * @memberof DspUpdateRecCreativeRequestV1
     */
    additionalHtml?: string;
    /**
     * If it\'s true, orders can be fulfilled by third party sellers.
     * @type {boolean}
     * @memberof DspUpdateRecCreativeRequestV1
     */
    allowThirdPartySellers?: boolean;
    /**
     * 
     * @type {DspRecContentV1}
     * @memberof DspUpdateRecCreativeRequestV1
     */
    content?: DspRecContentV1;
    /**
     * A list of formats configured to display for the creative.
     * @type {Array<DspRecFormatV1>}
     * @memberof DspUpdateRecCreativeRequestV1
     */
    allowedFormats?: Array<DspRecFormatV1>;
    /**
     * 
     * @type {DspRecOptimizationGoalV1}
     * @memberof DspUpdateRecCreativeRequestV1
     */
    optimizationGoal?: DspRecOptimizationGoalV1;
    /**
     * A list of sizes configured to display for the creative. This overrides the default REC supported sizes.
     * @type {Array<DspSizeV1>}
     * @memberof DspUpdateRecCreativeRequestV1
     */
    allowedSizes?: Array<DspSizeV1>;
    /**
     * Product objects associated with the creative.
     * @type {Array<DspRecProductV1>}
     * @memberof DspUpdateRecCreativeRequestV1
     */
    associatedProducts: Array<DspRecProductV1>;
    /**
     * This URL is pinged when the creative is clicked. The URL can contain macros.
     * @type {Array<string>}
     * @memberof DspUpdateRecCreativeRequestV1
     */
    thirdPartyClickTrackers?: Array<string>;
    /**
     * URL used for tracking interactions with third party
     * @type {Array<DspThirdPartyTrackerV1>}
     * @memberof DspUpdateRecCreativeRequestV1
     */
    thirdPartyTrackers?: Array<DspThirdPartyTrackerV1>;
}
/**
 * Update video creative request
 * @export
 * @interface DspUpdateVideoCreativeRequestV1
 */
export interface DspUpdateVideoCreativeRequestV1 {
    /**
     * The creative name.
     * @type {string}
     * @memberof DspUpdateVideoCreativeRequestV1
     */
    name: string;
    /**
     * The creative Id. It will be used to perform update operation. It\'s an immutable field.
     * @type {string}
     * @memberof DspUpdateVideoCreativeRequestV1
     */
    creativeId: string;
    /**
     * The creative external identifier.
     * @type {string}
     * @memberof DspUpdateVideoCreativeRequestV1
     */
    externalId?: string;
    /**
     * 
     * @type {DspAssetV1}
     * @memberof DspUpdateVideoCreativeRequestV1
     */
    asset: DspAssetV1;
    /**
     * 
     * @type {DspVideoClickThroughActionV1}
     * @memberof DspUpdateVideoCreativeRequestV1
     */
    clickThroughAction: DspVideoClickThroughActionV1;
    /**
     * 
     * @type {Array<DspThirdPartyTrackerV1>}
     * @memberof DspUpdateVideoCreativeRequestV1
     */
    thirdPartyTrackers?: Array<DspThirdPartyTrackerV1>;
}
/**
 * Click through action for video creatives
 * @export
 * @interface DspVideoClickThroughActionV1
 */
export interface DspVideoClickThroughActionV1 {
    /**
     * 
     * @type {DspCustomUrlActionV1}
     * @memberof DspVideoClickThroughActionV1
     */
    customUrl?: DspCustomUrlActionV1;
}
/**
 * Video creative preview model. Populate this to preview a new creative.
 * @export
 * @interface DspVideoCreativePreviewModelV1
 */
export interface DspVideoCreativePreviewModelV1 {
    /**
     * 
     * @type {DspCreativeMarketplaceV1}
     * @memberof DspVideoCreativePreviewModelV1
     */
    marketplace: DspCreativeMarketplaceV1;
    /**
     * 
     * @type {DspAssetV1}
     * @memberof DspVideoCreativePreviewModelV1
     */
    asset: DspAssetV1;
    /**
     * 
     * @type {DspVideoClickThroughActionV1}
     * @memberof DspVideoCreativePreviewModelV1
     */
    clickThroughAction?: DspVideoClickThroughActionV1;
    /**
     * 
     * @type {Array<DspThirdPartyTrackerV1>}
     * @memberof DspVideoCreativePreviewModelV1
     */
    thirdPartyTrackers?: Array<DspThirdPartyTrackerV1>;
}
/**
 * Video creative preview request. Either `creativeId` or `creativeModel` must be provided, but not both.
 * @export
 * @interface DspVideoCreativePreviewRequestV1
 */
export interface DspVideoCreativePreviewRequestV1 {
    /**
     * The creative Id.
     * @type {string}
     * @memberof DspVideoCreativePreviewRequestV1
     */
    creativeId?: string;
    /**
     * 
     * @type {DspVideoCreativePreviewModelV1}
     * @memberof DspVideoCreativePreviewRequestV1
     */
    creativeModel?: DspVideoCreativePreviewModelV1;
}
/**
 * 
 * @export
 * @interface DspVideoCreativeV1
 */
export interface DspVideoCreativeV1 {
    /**
     * The creative name.
     * @type {string}
     * @memberof DspVideoCreativeV1
     */
    name: string;
    /**
     * The advertiser Id. It\'s an immutable field.
     * @type {string}
     * @memberof DspVideoCreativeV1
     */
    advertiserId: string;
    /**
     * 
     * @type {DspCreativeMarketplaceV1}
     * @memberof DspVideoCreativeV1
     */
    marketplace: DspCreativeMarketplaceV1;
    /**
     * The creative external identifier.
     * @type {string}
     * @memberof DspVideoCreativeV1
     */
    externalId?: string;
    /**
     * 
     * @type {DspAssetV1}
     * @memberof DspVideoCreativeV1
     */
    asset: DspAssetV1;
    /**
     * 
     * @type {DspVideoClickThroughActionV1}
     * @memberof DspVideoCreativeV1
     */
    clickThroughAction: DspVideoClickThroughActionV1;
    /**
     * 
     * @type {Array<DspThirdPartyTrackerV1>}
     * @memberof DspVideoCreativeV1
     */
    thirdPartyTrackers?: Array<DspThirdPartyTrackerV1>;
    /**
     * The creative Id. It will be used to perform update operation. It\'s an immutable field.
     * @type {string}
     * @memberof DspVideoCreativeV1
     */
    creativeId: string;
    /**
     * 
     * @type {DspCreativeApprovalStatusV1}
     * @memberof DspVideoCreativeV1
     */
    approvalStatus?: DspCreativeApprovalStatusV1;
    /**
     * The creative created date.
     * @type {string}
     * @memberof DspVideoCreativeV1
     */
    createdDate?: string;
    /**
     * The creative last updated date.
     * @type {string}
     * @memberof DspVideoCreativeV1
     */
    lastUpdatedDate?: string;
}
/**
 * App star rating to be used for excluding apps.
 * @export
 * @enum {string}
 */

export enum DvBrandSafetyAppStarRating {
    AllowAll = 'ALLOW_ALL',
    AppStarRatingLt1Point5Stars = 'APP_STAR_RATING_LT_1_POINT_5_STARS',
    AppStarRatingLt2Stars = 'APP_STAR_RATING_LT_2_STARS',
    AppStarRatingLt2Point5Stars = 'APP_STAR_RATING_LT_2_POINT_5_STARS',
    AppStarRatingLt3Stars = 'APP_STAR_RATING_LT_3_STARS',
    AppStarRatingLt3Point5Stars = 'APP_STAR_RATING_LT_3_POINT_5_STARS',
    AppStarRatingLt4Stars = 'APP_STAR_RATING_LT_4_STARS',
    AppStarRatingLt4Point5Stars = 'APP_STAR_RATING_LT_4_POINT_5_STARS'
}

/**
 * 
 * @export
 * @interface DvCustomContextualSegment
 */
export interface DvCustomContextualSegment {
    /**
     * The segment identifier.
     * @type {string}
     * @memberof DvCustomContextualSegment
     */
    id: string;
    /**
     * The segment name.
     * @type {string}
     * @memberof DvCustomContextualSegment
     */
    name: string;
}
/**
 * 
 * @export
 * @interface DvCustomContextualSegments
 */
export interface DvCustomContextualSegments {
    /**
     * 
     * @type {string}
     * @memberof DvCustomContextualSegments
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<DvCustomContextualSegment>}
     * @memberof DvCustomContextualSegments
     */
    customContextualSegments?: Array<DvCustomContextualSegment>;
}
/**
 * 
 * @export
 * @interface FileUploadPolicy
 */
export interface FileUploadPolicy {
    /**
     * The AWS S3 url for file upload. It will be used as POST request URL.
     * @type {string}
     * @memberof FileUploadPolicy
     */
    url?: string;
    /**
     * Fields used in Post request. See more details at https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/modules/_aws_sdk_s3_presigned_post.html#post-file-using-formdata-in-nodejs
     * @type {{ [key: string]: string; }}
     * @memberof FileUploadPolicy
     */
    fields?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface FrequencyCap
 */
export interface FrequencyCap {
    /**
     * The type of advertising frequency cap. If `UNCAPPED`, no other fields are used.
     * @type {string}
     * @memberof FrequencyCap
     */
    type: FrequencyCapTypeEnum;
    /**
     * The maximum number of times an ad is displayed.
     * @type {number}
     * @memberof FrequencyCap
     */
    maxImpressions?: number;
    /**
     * The count of time units.
     * @type {number}
     * @memberof FrequencyCap
     */
    timeUnitCount?: number;
    /**
     * The time unit.
     * @type {string}
     * @memberof FrequencyCap
     */
    timeUnit?: FrequencyCapTimeUnitEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FrequencyCapTypeEnum {
    Uncapped = 'UNCAPPED',
    Custom = 'CUSTOM'
}
/**
    * @export
    * @enum {string}
    */
export enum FrequencyCapTimeUnitEnum {
    Days = 'DAYS',
    Hours = 'HOURS'
}

/**
 * Single geo location information.
 * @export
 * @interface GeoLocation
 */
export interface GeoLocation {
    /**
     * 
     * @type {string}
     * @memberof GeoLocation
     */
    id?: string;
    /**
     * Name of geo location.
     * @type {string}
     * @memberof GeoLocation
     */
    name?: string;
    /**
     * Category of the geo location.
     * @type {string}
     * @memberof GeoLocation
     */
    category?: GeoLocationCategoryEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum GeoLocationCategoryEnum {
    Country = 'COUNTRY',
    State = 'STATE',
    City = 'CITY',
    PostalCode = 'POSTAL_CODE',
    Dma = 'DMA'
}

/**
 * Targets based on city, state, country, DMA , or postal code.
 * @export
 * @interface GeoLocationTargeting
 */
export interface GeoLocationTargeting {
    /**
     * The geographic location targeting type. IPADDRESS: includes IP address only. IPADDRESS_POSTALCODE: includes both IP address and postal code.
     * @type {string}
     * @memberof GeoLocationTargeting
     */
    locationTargetingBy?: GeoLocationTargetingLocationTargetingByEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof GeoLocationTargeting
     */
    inclusions?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GeoLocationTargeting
     */
    exclusions?: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum GeoLocationTargetingLocationTargetingByEnum {
    Ipaddress = 'IPADDRESS',
    IpaddressPostalcode = 'IPADDRESS_POSTALCODE'
}

/**
 * The primary goal that a campaign using this configuration is trying to achieve.
 * @export
 * @enum {string}
 */

export enum Goal {
    Awareness = 'AWARENESS',
    EngagementWithMyAd = 'ENGAGEMENT_WITH_MY_AD',
    ConsiderationsOnAmazon = 'CONSIDERATIONS_ON_AMAZON',
    ConversionsOffAmazon = 'CONVERSIONS_OFF_AMAZON',
    PurchasesOnAmazon = 'PURCHASES_ON_AMAZON',
    MobileAppInstalls = 'MOBILE_APP_INSTALLS'
}

/**
 * 
 * @export
 * @interface GoalConfiguration
 */
export interface GoalConfiguration {
    /**
     * 
     * @type {Goal}
     * @memberof GoalConfiguration
     */
    goalName?: Goal;
    /**
     * 
     * @type {Array<GoalConfigurationAvailableKpis>}
     * @memberof GoalConfiguration
     */
    availableKpis?: Array<GoalConfigurationAvailableKpis>;
}
/**
 * 
 * @export
 * @interface GoalConfigurationAvailableKpis
 */
export interface GoalConfigurationAvailableKpis {
    /**
     * 
     * @type {GoalKpi}
     * @memberof GoalConfigurationAvailableKpis
     */
    kpiName?: GoalKpi;
    /**
     * Which optimizations can be applied for this KPI
     * @type {Array<AutoOptimization>}
     * @memberof GoalConfigurationAvailableKpis
     */
    autoOptimizations?: Array<AutoOptimization>;
}
/**
 * Performance metrics that may be chosen to measure how effectively an order is achieving the desired goal. Although some goals may have multiple possible KPIs, exactly one KPI must be chosen during order creation.
 * @export
 * @enum {string}
 */

export enum GoalKpi {
    ClickThroughRate = 'CLICK_THROUGH_RATE',
    CostPerAcquisition = 'COST_PER_ACQUISITION',
    CostPerClick = 'COST_PER_CLICK',
    CostPerDetailPageView = 'COST_PER_DETAIL_PAGE_VIEW',
    CostPerDownload = 'COST_PER_DOWNLOAD',
    CostPerVideoCompletion = 'COST_PER_VIDEO_COMPLETION',
    DetailPageViewRate = 'DETAIL_PAGE_VIEW_RATE',
    None = 'NONE',
    Other = 'OTHER',
    Reach = 'REACH',
    ReturnOnAdSpend = 'RETURN_ON_AD_SPEND',
    TotalReturnAdSpend = 'TOTAL_RETURN_AD_SPEND',
    VideoCompletionRate = 'VIDEO_COMPLETION_RATE'
}

/**
 * 
 * @export
 * @interface IABContentCategory
 */
export interface IABContentCategory {
    /**
     * The category identifier.
     * @type {string}
     * @memberof IABContentCategory
     */
    id: string;
    /**
     * The category name.
     * @type {string}
     * @memberof IABContentCategory
     */
    name: string;
    /**
     * The identifier of the parent category. This is blank if the category is a parent category.
     * @type {string}
     * @memberof IABContentCategory
     */
    parentId?: string;
}
/**
 * 
 * @export
 * @interface IasBrandSafety
 */
export interface IasBrandSafety {
    /**
     * 
     * @type {IasBrandSafetyLevel}
     * @memberof IasBrandSafety
     */
    iasBrandSafetyAdult: IasBrandSafetyLevel;
    /**
     * 
     * @type {IasBrandSafetyLevel}
     * @memberof IasBrandSafety
     */
    iasBrandSafetyAlcohol: IasBrandSafetyLevel;
    /**
     * 
     * @type {IasBrandSafetyLevel}
     * @memberof IasBrandSafety
     */
    iasBrandSafetyGambling: IasBrandSafetyLevel;
    /**
     * 
     * @type {IasBrandSafetyLevel}
     * @memberof IasBrandSafety
     */
    iasBrandSafetyHateSpeech: IasBrandSafetyLevel;
    /**
     * 
     * @type {IasBrandSafetyLevel}
     * @memberof IasBrandSafety
     */
    iasBrandSafetyIllegalDownloads: IasBrandSafetyLevel;
    /**
     * 
     * @type {IasBrandSafetyLevel}
     * @memberof IasBrandSafety
     */
    iasBrandSafetyIllegalDrugs: IasBrandSafetyLevel;
    /**
     * 
     * @type {IasBrandSafetyLevel}
     * @memberof IasBrandSafety
     */
    iasBrandSafetyOffensiveLanguage: IasBrandSafetyLevel;
    /**
     * 
     * @type {IasBrandSafetyLevel}
     * @memberof IasBrandSafety
     */
    iasBrandSafetyViolence: IasBrandSafetyLevel;
    /**
     * Set to `true` to exclude content that Integral Ad Science is not able to rate.
     * @type {boolean}
     * @memberof IasBrandSafety
     */
    excludeContent: boolean;
}
/**
 * The IAS brand safety risk level.
 * @export
 * @enum {string}
 */

export enum IasBrandSafetyLevel {
    AllowAll = 'ALLOW_ALL',
    BrandSafetyExclueHighRisk = 'BRAND_SAFETY_EXCLUE_HIGH_RISK',
    BrandSafetyExclueHighAndModerateRisk = 'BRAND_SAFETY_EXCLUE_HIGH_AND_MODERATE_RISK'
}

/**
 * The IAS brand safety risk level.
 * @export
 * @enum {string}
 */

export enum IasBrandSafetyLevelV3 {
    AllowAll = 'ALLOW_ALL',
    BrandSafetyExcludeHighRisk = 'BRAND_SAFETY_EXCLUDE_HIGH_RISK',
    BrandSafetyExcludeHighAndModerateRisk = 'BRAND_SAFETY_EXCLUDE_HIGH_AND_MODERATE_RISK'
}

/**
 * 
 * @export
 * @interface IasBrandSafetyV3
 */
export interface IasBrandSafetyV3 {
    /**
     * 
     * @type {IasBrandSafetyLevelV3}
     * @memberof IasBrandSafetyV3
     */
    iasBrandSafetyAdult?: IasBrandSafetyLevelV3;
    /**
     * 
     * @type {IasBrandSafetyLevelV3}
     * @memberof IasBrandSafetyV3
     */
    iasBrandSafetyAlcohol?: IasBrandSafetyLevelV3;
    /**
     * 
     * @type {IasBrandSafetyLevelV3}
     * @memberof IasBrandSafetyV3
     */
    iasBrandSafetyGambling?: IasBrandSafetyLevelV3;
    /**
     * 
     * @type {IasBrandSafetyLevelV3}
     * @memberof IasBrandSafetyV3
     */
    iasBrandSafetyHateSpeech?: IasBrandSafetyLevelV3;
    /**
     * 
     * @type {IasBrandSafetyLevelV3}
     * @memberof IasBrandSafetyV3
     */
    iasBrandSafetyIllegalDownloads?: IasBrandSafetyLevelV3;
    /**
     * 
     * @type {IasBrandSafetyLevelV3}
     * @memberof IasBrandSafetyV3
     */
    iasBrandSafetyIllegalDrugs?: IasBrandSafetyLevelV3;
    /**
     * 
     * @type {IasBrandSafetyLevelV3}
     * @memberof IasBrandSafetyV3
     */
    iasBrandSafetyOffensiveLanguage?: IasBrandSafetyLevelV3;
    /**
     * 
     * @type {IasBrandSafetyLevelV3}
     * @memberof IasBrandSafetyV3
     */
    iasBrandSafetyViolence?: IasBrandSafetyLevelV3;
    /**
     * Set to `true` to exclude content that Integral Ad Science is not able to rate.
     * @type {boolean}
     * @memberof IasBrandSafetyV3
     */
    excludeContent: boolean;
}
/**
 * The type of fraud invalid traffic.
 * @export
 * @enum {string}
 */

export enum IasFraudInvalidTraffic {
    AllowAll = 'ALLOW_ALL',
    FraudInvalidTrafficExcludeHighRisk = 'FRAUD_INVALID_TRAFFIC_EXCLUDE_HIGH_RISK',
    FraudInvalidTrafficExcludeHighModerateRisk = 'FRAUD_INVALID_TRAFFIC_EXCLUDE_HIGH_MODERATE_RISK'
}

/**
 * The IAS viewability standard.
 * @export
 * @interface IasViewability
 */
export interface IasViewability {
    /**
     * The viewability standard
     * @type {string}
     * @memberof IasViewability
     */
    standard: IasViewabilityStandardEnum;
    /**
     * 
     * @type {ViewabilityTier}
     * @memberof IasViewability
     */
    viewabilityTargeting: ViewabilityTier;
}

/**
    * @export
    * @enum {string}
    */
export enum IasViewabilityStandardEnum {
    None = 'NONE',
    Mrc = 'MRC',
    Groupm = 'GROUPM',
    Publicis = 'PUBLICIS'
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    nextToken?: string;
    /**
     * Array of pixels sorted by create time, earliest first.
     * @type {Array<Pixel>}
     * @memberof InlineResponse200
     */
    pixels?: Array<Pixel>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    nextToken?: string;
    /**
     * Array of ProductCategory sorted by ID in ascending lexicographical order.
     * @type {Array<ProductCategory>}
     * @memberof InlineResponse2001
     */
    productCategories?: Array<ProductCategory>;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002
     */
    nextToken?: string;
    /**
     * Array of domain lists sorted by creation time, ascending
     * @type {Array<DomainListMetadata>}
     * @memberof InlineResponse2002
     */
    domainLists?: Array<DomainListMetadata>;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * Array of results matching the given IDs or text query
     * @type {Array<GeoLocation>}
     * @memberof InlineResponse2003
     */
    geoLocations?: Array<GeoLocation>;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004
     */
    nextToken?: string;
    /**
     * Array of IABContentCategory sorted by ID in ascending lexicographical order.
     * @type {Array<IABContentCategory>}
     * @memberof InlineResponse2004
     */
    iabContentCategories?: Array<IABContentCategory>;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * Array of GoalConfiguration sorted by goal name in ascending lexicographical order.
     * @type {Array<GoalConfiguration>}
     * @memberof InlineResponse2005
     */
    goalConfigurations?: Array<GoalConfiguration>;
}
/**
 * Integral Ad Science (IAS) is a third party provider in digital ad verification. IAS offers technologies to drive high-quality advertising media.
 * @export
 * @interface IntegralAdScience
 */
export interface IntegralAdScience {
    /**
     * 
     * @type {IasBrandSafety}
     * @memberof IntegralAdScience
     */
    brandSafety?: IasBrandSafety;
    /**
     * The type of fraud invalid traffic.
     * @type {string}
     * @memberof IntegralAdScience
     */
    fraudInvalidTraffic?: IntegralAdScienceFraudInvalidTrafficEnum;
    /**
     * 
     * @type {IasViewability}
     * @memberof IntegralAdScience
     */
    viewability?: IasViewability;
}

/**
    * @export
    * @enum {string}
    */
export enum IntegralAdScienceFraudInvalidTrafficEnum {
    AllowAll = 'ALLOW_ALL',
    FraudInvalidTrafficExcludeHighRisk = 'FRAUD_INVALID_TRAFFIC_EXCLUDE_HIGH_RISK',
    FraudInvalidTrafficExcludeHighModerateRisk = 'FRAUD_INVALID_TRAFFIC_EXCLUDE_HIGH_MODERATE_RISK'
}

/**
 * 
 * @export
 * @interface LineItem
 */
export interface LineItem {
    /**
     * The line item identifier. This is required when we perform update operations. Immutable field.
     * @type {string}
     * @memberof LineItem
     */
    lineItemId?: string;
    /**
     * 
     * @type {LineItemType}
     * @memberof LineItem
     */
    lineItemType: LineItemType;
    /**
     * The line item name.
     * @type {string}
     * @memberof LineItem
     */
    name: string;
    /**
     * The order to which the line item is associated. Immutable field.
     * @type {string}
     * @memberof LineItem
     */
    orderId: string;
    /**
     * The external identifier of the line item.
     * @type {string}
     * @memberof LineItem
     */
    externalId?: string;
    /**
     * The line item start date in ISO date format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-07-16T19:20:30+01:00.
     * @type {string}
     * @memberof LineItem
     */
    startDateTime: string;
    /**
     * The line item end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-07-16T19:20:30+01:00
     * @type {string}
     * @memberof LineItem
     */
    endDateTime: string;
    /**
     * The line item comments.
     * @type {string}
     * @memberof LineItem
     */
    comments?: string;
    /**
     * 
     * @type {DeliveryActivationStatus}
     * @memberof LineItem
     */
    deliveryActivationStatus?: DeliveryActivationStatus;
    /**
     * 
     * @type {LineItemDeliveryStatus}
     * @memberof LineItem
     */
    deliveryStatus?: LineItemDeliveryStatus;
    /**
     * 
     * @type {LineItemClassification}
     * @memberof LineItem
     */
    lineItemClassification: LineItemClassification;
    /**
     * 
     * @type {FrequencyCap}
     * @memberof LineItem
     */
    frequencyCap: FrequencyCap;
    /**
     * 
     * @type {LineItemTargeting}
     * @memberof LineItem
     */
    targeting?: LineItemTargeting;
    /**
     * 
     * @type {LineItemBudget}
     * @memberof LineItem
     */
    budget?: LineItemBudget;
    /**
     * 
     * @type {CurrencyCode}
     * @memberof LineItem
     */
    currencyCode?: CurrencyCode;
    /**
     * 
     * @type {AppliedFees}
     * @memberof LineItem
     */
    appliedFees?: AppliedFees;
    /**
     * 
     * @type {Bidding}
     * @memberof LineItem
     */
    bidding: Bidding;
    /**
     * 
     * @type {LineItemOptimization}
     * @memberof LineItem
     */
    optimization: LineItemOptimization;
    /**
     * 
     * @type {CreativeOptions}
     * @memberof LineItem
     */
    creativeOptions?: CreativeOptions;
    /**
     * The line item creation date.
     * @type {string}
     * @memberof LineItem
     */
    creationDate?: string;
    /**
     * The line item last update date.
     * @type {string}
     * @memberof LineItem
     */
    lastUpdateDate?: string;
}
/**
 * 
 * @export
 * @interface LineItemBasic
 */
export interface LineItemBasic {
    /**
     * The line item identifier.
     * @type {string}
     * @memberof LineItemBasic
     */
    lineItemId?: string;
    /**
     * 
     * @type {LineItemType}
     * @memberof LineItemBasic
     */
    lineItemType?: LineItemType;
    /**
     * The line item name.
     * @type {string}
     * @memberof LineItemBasic
     */
    name?: string;
    /**
     * The line item external identifier.
     * @type {string}
     * @memberof LineItemBasic
     */
    externalId?: string;
    /**
     * The line item comments.
     * @type {string}
     * @memberof LineItemBasic
     */
    comments?: string;
    /**
     * The order to which the line item is associated.
     * @type {string}
     * @memberof LineItemBasic
     */
    orderId?: string;
    /**
     * The line item start date in ISO date format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-07-16T19:20:30+01:00
     * @type {string}
     * @memberof LineItemBasic
     */
    startDateTime?: string;
    /**
     * The line item end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example,2020-07-16T19:20:30+01:00
     * @type {string}
     * @memberof LineItemBasic
     */
    endDateTime?: string;
    /**
     * 
     * @type {DeliveryActivationStatus}
     * @memberof LineItemBasic
     */
    deliveryActivationStatus?: DeliveryActivationStatus;
    /**
     * 
     * @type {LineItemDeliveryStatus}
     * @memberof LineItemBasic
     */
    deliveryStatus?: LineItemDeliveryStatus;
    /**
     * 
     * @type {CurrencyCode}
     * @memberof LineItemBasic
     */
    currencyCode?: CurrencyCode;
    /**
     * 
     * @type {Bidding}
     * @memberof LineItemBasic
     */
    bidding?: Bidding;
    /**
     * 
     * @type {LineItemBudget}
     * @memberof LineItemBasic
     */
    budget?: LineItemBudget;
    /**
     * 
     * @type {FrequencyCap}
     * @memberof LineItemBasic
     */
    frequencyCap?: FrequencyCap;
    /**
     * 
     * @type {LineItemOptimization}
     * @memberof LineItemBasic
     */
    optimization?: LineItemOptimization;
}
/**
 * 
 * @export
 * @interface LineItemBasicV21
 */
export interface LineItemBasicV21 {
    /**
     * 
     * @type {LineItemTypeBasicV21}
     * @memberof LineItemBasicV21
     */
    lineItemType?: LineItemTypeBasicV21;
    /**
     * The line item identifier.
     * @type {string}
     * @memberof LineItemBasicV21
     */
    lineItemId?: string;
    /**
     * The line item name.
     * @type {string}
     * @memberof LineItemBasicV21
     */
    name?: string;
    /**
     * The line item external identifier.
     * @type {string}
     * @memberof LineItemBasicV21
     */
    externalId?: string;
    /**
     * The line item comments.
     * @type {string}
     * @memberof LineItemBasicV21
     */
    comments?: string;
    /**
     * The order to which the line item is associated.
     * @type {string}
     * @memberof LineItemBasicV21
     */
    orderId?: string;
    /**
     * The line item start date in ISO date format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-07-16T19:20:30+01:00
     * @type {string}
     * @memberof LineItemBasicV21
     */
    startDateTime?: string;
    /**
     * The line item end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example,2020-07-16T19:20:30+01:00
     * @type {string}
     * @memberof LineItemBasicV21
     */
    endDateTime?: string;
    /**
     * 
     * @type {DeliveryActivationStatus}
     * @memberof LineItemBasicV21
     */
    deliveryActivationStatus?: DeliveryActivationStatus;
    /**
     * 
     * @type {LineItemDeliveryStatus}
     * @memberof LineItemBasicV21
     */
    deliveryStatus?: LineItemDeliveryStatus;
    /**
     * 
     * @type {CurrencyCode}
     * @memberof LineItemBasicV21
     */
    currencyCode?: CurrencyCode;
    /**
     * 
     * @type {Bidding}
     * @memberof LineItemBasicV21
     */
    bidding?: Bidding;
    /**
     * 
     * @type {LineItemBudget}
     * @memberof LineItemBasicV21
     */
    budget?: LineItemBudget;
    /**
     * 
     * @type {FrequencyCap}
     * @memberof LineItemBasicV21
     */
    frequencyCap?: FrequencyCap;
    /**
     * 
     * @type {LineItemOptimization}
     * @memberof LineItemBasicV21
     */
    optimization?: LineItemOptimization;
}
/**
 * 
 * @export
 * @interface LineItemBasicV22
 */
export interface LineItemBasicV22 {
    /**
     * 
     * @type {LineItemTypeBasicV21}
     * @memberof LineItemBasicV22
     */
    lineItemType?: LineItemTypeBasicV21;
    /**
     * The line item creation date. This field is available since version `application/vnd.dsplineitems.v2.2+json`.
     * @type {string}
     * @memberof LineItemBasicV22
     */
    creationDate?: string;
    /**
     * The line item last updated date. This field is available since version `application/vnd.dsplineitems.v2.2+json`.
     * @type {string}
     * @memberof LineItemBasicV22
     */
    lastUpdatedDate?: string;
    /**
     * The line item identifier.
     * @type {string}
     * @memberof LineItemBasicV22
     */
    lineItemId?: string;
    /**
     * The line item name.
     * @type {string}
     * @memberof LineItemBasicV22
     */
    name?: string;
    /**
     * The line item external identifier.
     * @type {string}
     * @memberof LineItemBasicV22
     */
    externalId?: string;
    /**
     * The line item comments.
     * @type {string}
     * @memberof LineItemBasicV22
     */
    comments?: string;
    /**
     * The order to which the line item is associated.
     * @type {string}
     * @memberof LineItemBasicV22
     */
    orderId?: string;
    /**
     * The line item start date in ISO date format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-07-16T19:20:30+01:00
     * @type {string}
     * @memberof LineItemBasicV22
     */
    startDateTime?: string;
    /**
     * The line item end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example,2020-07-16T19:20:30+01:00
     * @type {string}
     * @memberof LineItemBasicV22
     */
    endDateTime?: string;
    /**
     * 
     * @type {DeliveryActivationStatus}
     * @memberof LineItemBasicV22
     */
    deliveryActivationStatus?: DeliveryActivationStatus;
    /**
     * 
     * @type {LineItemDeliveryStatus}
     * @memberof LineItemBasicV22
     */
    deliveryStatus?: LineItemDeliveryStatus;
    /**
     * 
     * @type {CurrencyCode}
     * @memberof LineItemBasicV22
     */
    currencyCode?: CurrencyCode;
    /**
     * 
     * @type {Bidding}
     * @memberof LineItemBasicV22
     */
    bidding?: Bidding;
    /**
     * 
     * @type {LineItemBudget}
     * @memberof LineItemBasicV22
     */
    budget?: LineItemBudget;
    /**
     * 
     * @type {FrequencyCap}
     * @memberof LineItemBasicV22
     */
    frequencyCap?: FrequencyCap;
    /**
     * 
     * @type {LineItemOptimization}
     * @memberof LineItemBasicV22
     */
    optimization?: LineItemOptimization;
}
/**
 * 
 * @export
 * @interface LineItemBudget
 */
export interface LineItemBudget {
    /**
     * The total budget amount.
     * @type {number}
     * @memberof LineItemBudget
     */
    totalBudgetAmount?: number;
    /**
     * 
     * @type {Array<BudgetCap>}
     * @memberof LineItemBudget
     */
    budgetCaps?: Array<BudgetCap>;
    /**
     * 
     * @type {Pacing}
     * @memberof LineItemBudget
     */
    pacing?: Pacing;
}
/**
 * 
 * @export
 * @interface LineItemClassification
 */
export interface LineItemClassification {
    /**
     * The array of identifiers of product categories associated with the line item. For `VIDEO` line item type only one parent product category or multiple sub-categories from one parent product category are allowed.
     * @type {Array<string>}
     * @memberof LineItemClassification
     */
    productCategories: Array<string>;
}
/**
 * 
 * @export
 * @interface LineItemCreativeAssociation
 */
export interface LineItemCreativeAssociation {
    /**
     * The lineitem to operate on.
     * @type {string}
     * @memberof LineItemCreativeAssociation
     */
    lineItemId: string;
    /**
     * The creative to operate on.
     * @type {string}
     * @memberof LineItemCreativeAssociation
     */
    creativeId: string;
    /**
     * The creative start date in ISO format (YYYY-MM-DD hh:mm:ss z). Timezone is UTC. For example, 2020-10-21 03:59:00 UTC.
     * @type {string}
     * @memberof LineItemCreativeAssociation
     */
    startDate?: string;
    /**
     * The creative end date in in ISO format (YYYY-MM-DD hh:mm:ss z). Timezone is UTC. For example, 2020-10-21 03:59:00 UTC.
     * @type {string}
     * @memberof LineItemCreativeAssociation
     */
    endDate?: string;
    /**
     * The weight of the creative. This field will be available only if the creative rotation type is `WEIGHTED`.
     * @type {number}
     * @memberof LineItemCreativeAssociation
     */
    weight?: number;
}
/**
 * A lineItemCreativeAssociation operation.
 * @export
 * @enum {string}
 */

export enum LineItemCreativeAssociationOperation {
    Create = 'CREATE',
    Delete = 'DELETE'
}

/**
 * 
 * @export
 * @interface LineItemCreativeAssociations
 */
export interface LineItemCreativeAssociations {
    /**
     * Total number of results which satisfy the filtering criteria. This will help to support pagination.
     * @type {number}
     * @memberof LineItemCreativeAssociations
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<LineItemCreativeAssociation>}
     * @memberof LineItemCreativeAssociations
     */
    response?: Array<LineItemCreativeAssociation>;
}
/**
 * 
 * @export
 * @interface LineItemCreativeAssociationsRequest
 */
export interface LineItemCreativeAssociationsRequest {
    /**
     * The advertiser identifier.
     * @type {string}
     * @memberof LineItemCreativeAssociationsRequest
     */
    advertiserId: string;
    /**
     * 
     * @type {LineItemCreativeAssociationOperation}
     * @memberof LineItemCreativeAssociationsRequest
     */
    operation: LineItemCreativeAssociationOperation;
    /**
     * A list of the associations to operate on. This object requires only lineItemId and creativeId and other fields are not required.
     * @type {Array<LineItemCreativeAssociation>}
     * @memberof LineItemCreativeAssociationsRequest
     */
    associations: Array<LineItemCreativeAssociation>;
}
/**
 * Response for the update operation. This object will have either success or failure property for the corresponding requests on the index.
 * @export
 * @interface LineItemCreativeAssociationsResponse
 */
export interface LineItemCreativeAssociationsResponse {
    /**
     * 
     * @type {LineItemCreativeAssociation}
     * @memberof LineItemCreativeAssociationsResponse
     */
    success?: LineItemCreativeAssociation;
    /**
     * 
     * @type {Error}
     * @memberof LineItemCreativeAssociationsResponse
     */
    errorDetails?: Error;
}
/**
 * The lineitem delivery status. DELIVERING: The line item is delivering. OUT_OF_BUDGET: The line item is out of budget. ENDED: The line item has ended. CREATIVES_NOT_RUNNING: The line item doesn\'t have any active creatives to deliver. INACTIVE: The line item is paused by the user. READY_TO_DELIVER: The line item has not yet started.
 * @export
 * @enum {string}
 */

export enum LineItemDeliveryStatus {
    Delivering = 'DELIVERING',
    Ended = 'ENDED',
    OutOfBudget = 'OUT_OF_BUDGET',
    Inactive = 'INACTIVE',
    ReadyToDeliver = 'READY_TO_DELIVER',
    CreativesNotRunning = 'CREATIVES_NOT_RUNNING'
}

/**
 * 
 * @export
 * @interface LineItemOptimization
 */
export interface LineItemOptimization {
    /**
     * Set to `true` to enable budget optimization for the line item.
     * @type {boolean}
     * @memberof LineItemOptimization
     */
    budgetOptimization: boolean;
}
/**
 * Response for the line item create/update operations. Success contains only lineItemId and failure contains only errorDetails corresponding to that requested index in that batch (array of items).
 * @export
 * @interface LineItemResponse
 */
export interface LineItemResponse {
    /**
     * The Line item identifier.
     * @type {string}
     * @memberof LineItemResponse
     */
    lineItemId?: string;
    /**
     * 
     * @type {Error}
     * @memberof LineItemResponse
     */
    errorDetails?: Error;
}
/**
 * 
 * @export
 * @interface LineItemTargeting
 */
export interface LineItemTargeting {
    /**
     * 
     * @type {StandardDisplayTargeting}
     * @memberof LineItemTargeting
     */
    standardDisplayTargeting?: StandardDisplayTargeting;
    /**
     * 
     * @type {AapMobileAppTargeting}
     * @memberof LineItemTargeting
     */
    aapMobileAppTargeting?: AapMobileAppTargeting;
    /**
     * 
     * @type {AmazonMobileDisplayTargeting}
     * @memberof LineItemTargeting
     */
    amazonMobileDisplayTargeting?: AmazonMobileDisplayTargeting;
}
/**
 * 
 * @export
 * @interface LineItemTargetingV21
 */
export interface LineItemTargetingV21 {
    /**
     * 
     * @type {VideoTargeting}
     * @memberof LineItemTargetingV21
     */
    videoTargeting?: VideoTargeting;
    /**
     * 
     * @type {StandardDisplayTargeting}
     * @memberof LineItemTargetingV21
     */
    standardDisplayTargeting?: StandardDisplayTargeting;
    /**
     * 
     * @type {AapMobileAppTargeting}
     * @memberof LineItemTargetingV21
     */
    aapMobileAppTargeting?: AapMobileAppTargeting;
    /**
     * 
     * @type {AmazonMobileDisplayTargeting}
     * @memberof LineItemTargetingV21
     */
    amazonMobileDisplayTargeting?: AmazonMobileDisplayTargeting;
}
/**
 * 
 * @export
 * @interface LineItemTargetingV3
 */
export interface LineItemTargetingV3 {
    /**
     * 
     * @type {StandardDisplayTargetingV3}
     * @memberof LineItemTargetingV3
     */
    standardDisplayTargeting?: StandardDisplayTargetingV3;
    /**
     * 
     * @type {AapMobileAppTargetingV3}
     * @memberof LineItemTargetingV3
     */
    aapMobileAppTargeting?: AapMobileAppTargetingV3;
    /**
     * 
     * @type {AmazonMobileDisplayTargetingV3}
     * @memberof LineItemTargetingV3
     */
    amazonMobileDisplayTargeting?: AmazonMobileDisplayTargetingV3;
    /**
     * 
     * @type {VideoTargetingV3}
     * @memberof LineItemTargetingV3
     */
    videoTargeting?: VideoTargetingV3;
}
/**
 * The line item type.
 * @export
 * @enum {string}
 */

export enum LineItemType {
    StandardDisplay = 'STANDARD_DISPLAY',
    AmazonMobileDisplay = 'AMAZON_MOBILE_DISPLAY',
    AapMobileApp = 'AAP_MOBILE_APP'
}

/**
 * The line item type. All operations are supported for VIDEO line item type since version `application/vnd.dsplineitems.v2.1+json`. OTT_GUARANTEED is supported only for batch read API since version `application/vnd.dsplineitems.v2.1+json`.
 * @export
 * @interface LineItemTypeBasicV21
 */
export interface LineItemTypeBasicV21 {
}
/**
 * The line item type. All operations are supported for VIDEO line item type since version `application/vnd.dsplineitems.v2.1+json`.
 * @export
 * @interface LineItemTypeV21
 */
export interface LineItemTypeV21 {
}
/**
 * 
 * @export
 * @interface LineItemV21
 */
export interface LineItemV21 {
    /**
     * 
     * @type {LineItemTypeV21}
     * @memberof LineItemV21
     */
    lineItemType?: LineItemTypeV21;
    /**
     * 
     * @type {LineItemTargetingV21}
     * @memberof LineItemV21
     */
    targeting?: LineItemTargetingV21;
    /**
     * The line item identifier. This is required when we perform update operations. Immutable field.
     * @type {string}
     * @memberof LineItemV21
     */
    lineItemId?: string;
    /**
     * The line item name.
     * @type {string}
     * @memberof LineItemV21
     */
    name: string;
    /**
     * The order to which the line item is associated. Immutable field.
     * @type {string}
     * @memberof LineItemV21
     */
    orderId: string;
    /**
     * The external identifier of the line item.
     * @type {string}
     * @memberof LineItemV21
     */
    externalId?: string;
    /**
     * The line item start date in ISO date format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-07-16T19:20:30+01:00.
     * @type {string}
     * @memberof LineItemV21
     */
    startDateTime: string;
    /**
     * The line item end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-07-16T19:20:30+01:00
     * @type {string}
     * @memberof LineItemV21
     */
    endDateTime: string;
    /**
     * The line item comments.
     * @type {string}
     * @memberof LineItemV21
     */
    comments?: string;
    /**
     * 
     * @type {DeliveryActivationStatus}
     * @memberof LineItemV21
     */
    deliveryActivationStatus?: DeliveryActivationStatus;
    /**
     * 
     * @type {LineItemDeliveryStatus}
     * @memberof LineItemV21
     */
    deliveryStatus?: LineItemDeliveryStatus;
    /**
     * 
     * @type {LineItemClassification}
     * @memberof LineItemV21
     */
    lineItemClassification: LineItemClassification;
    /**
     * 
     * @type {FrequencyCap}
     * @memberof LineItemV21
     */
    frequencyCap: FrequencyCap;
    /**
     * 
     * @type {LineItemBudget}
     * @memberof LineItemV21
     */
    budget?: LineItemBudget;
    /**
     * 
     * @type {CurrencyCode}
     * @memberof LineItemV21
     */
    currencyCode?: CurrencyCode;
    /**
     * 
     * @type {AppliedFees}
     * @memberof LineItemV21
     */
    appliedFees?: AppliedFees;
    /**
     * 
     * @type {Bidding}
     * @memberof LineItemV21
     */
    bidding: Bidding;
    /**
     * 
     * @type {LineItemOptimization}
     * @memberof LineItemV21
     */
    optimization: LineItemOptimization;
    /**
     * 
     * @type {CreativeOptions}
     * @memberof LineItemV21
     */
    creativeOptions?: CreativeOptions;
    /**
     * The line item creation date.
     * @type {string}
     * @memberof LineItemV21
     */
    creationDate?: string;
    /**
     * The line item last update date.
     * @type {string}
     * @memberof LineItemV21
     */
    lastUpdateDate?: string;
}
/**
 * 
 * @export
 * @interface LineItemV3
 */
export interface LineItemV3 {
    /**
     * The line item identifier. This is required when we perform update operations. Immutable field.
     * @type {string}
     * @memberof LineItemV3
     */
    lineItemId?: string;
    /**
     * 
     * @type {LineItemTypeV21}
     * @memberof LineItemV3
     */
    lineItemType: LineItemTypeV21;
    /**
     * The line item name.
     * @type {string}
     * @memberof LineItemV3
     */
    name: string;
    /**
     * The order to which the line item is associated. Immutable field.
     * @type {string}
     * @memberof LineItemV3
     */
    orderId: string;
    /**
     * The external identifier of the line item.
     * @type {string}
     * @memberof LineItemV3
     */
    externalId?: string;
    /**
     * The line item start date in ISO date format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-07-16T19:20:30+01:00.
     * @type {string}
     * @memberof LineItemV3
     */
    startDateTime: string;
    /**
     * The line item end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-07-16T19:20:30+01:00
     * @type {string}
     * @memberof LineItemV3
     */
    endDateTime: string;
    /**
     * The line item comments.
     * @type {string}
     * @memberof LineItemV3
     */
    comments?: string;
    /**
     * 
     * @type {DeliveryActivationStatus}
     * @memberof LineItemV3
     */
    deliveryActivationStatus?: DeliveryActivationStatus;
    /**
     * 
     * @type {LineItemDeliveryStatus}
     * @memberof LineItemV3
     */
    deliveryStatus?: LineItemDeliveryStatus;
    /**
     * 
     * @type {LineItemClassification}
     * @memberof LineItemV3
     */
    lineItemClassification: LineItemClassification;
    /**
     * 
     * @type {FrequencyCap}
     * @memberof LineItemV3
     */
    frequencyCap: FrequencyCap;
    /**
     * 
     * @type {LineItemTargetingV3}
     * @memberof LineItemV3
     */
    targeting?: LineItemTargetingV3;
    /**
     * 
     * @type {LineItemBudget}
     * @memberof LineItemV3
     */
    budget?: LineItemBudget;
    /**
     * 
     * @type {CurrencyCodeV3}
     * @memberof LineItemV3
     */
    currencyCode?: CurrencyCodeV3;
    /**
     * 
     * @type {AppliedFees}
     * @memberof LineItemV3
     */
    appliedFees?: AppliedFees;
    /**
     * 
     * @type {Bidding}
     * @memberof LineItemV3
     */
    bidding: Bidding;
    /**
     * 
     * @type {LineItemOptimization}
     * @memberof LineItemV3
     */
    optimization: LineItemOptimization;
    /**
     * 
     * @type {CreativeOptions}
     * @memberof LineItemV3
     */
    creativeOptions?: CreativeOptions;
    /**
     * The line item creation date.
     * @type {string}
     * @memberof LineItemV3
     */
    creationDate?: string;
    /**
     * The line item last updated date.
     * @type {string}
     * @memberof LineItemV3
     */
    lastUpdatedDate?: string;
}
/**
 * 
 * @export
 * @interface LineItems
 */
export interface LineItems {
    /**
     * Total number of results which satisfy the filtering criteria. This will help to support pagination.
     * @type {number}
     * @memberof LineItems
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<LineItemBasic>}
     * @memberof LineItems
     */
    response?: Array<LineItemBasic>;
}
/**
 * 
 * @export
 * @interface LineItemsV21
 */
export interface LineItemsV21 {
    /**
     * Total number of results which satisfy the filtering criteria. This will help to support pagination.
     * @type {number}
     * @memberof LineItemsV21
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<LineItemBasicV21>}
     * @memberof LineItemsV21
     */
    response?: Array<LineItemBasicV21>;
}
/**
 * 
 * @export
 * @interface LineItemsV22
 */
export interface LineItemsV22 {
    /**
     * Total number of results which satisfy the filtering criteria. This will help to support pagination.
     * @type {number}
     * @memberof LineItemsV22
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<LineItemBasicV22>}
     * @memberof LineItemsV22
     */
    response?: Array<LineItemBasicV22>;
}
/**
 * 
 * @export
 * @interface MergedDomainList
 */
export interface MergedDomainList {
    /**
     * The list type of the domain. Either include or exclude
     * @type {string}
     * @memberof MergedDomainList
     */
    domainListMergedTargetingType?: MergedDomainListDomainListMergedTargetingTypeEnum;
    /**
     * The URL address of the domain list file after merging all domains into single file\"
     * @type {string}
     * @memberof MergedDomainList
     */
    domainListMergedFile?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum MergedDomainListDomainListMergedTargetingTypeEnum {
    Exclude = 'EXCLUDE',
    Include = 'INCLUDE'
}

/**
 * Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
 * @export
 * @interface MobileAppDoubleVerify
 */
export interface MobileAppDoubleVerify {
    /**
     * 
     * @type {MobileAppDoubleVerifyBrandSafety}
     * @memberof MobileAppDoubleVerify
     */
    brandSafety?: MobileAppDoubleVerifyBrandSafety;
    /**
     * 
     * @type {DoubleVerifyFraudInvalidTraffic}
     * @memberof MobileAppDoubleVerify
     */
    fraudInvalidTraffic?: DoubleVerifyFraudInvalidTraffic;
    /**
     * 
     * @type {DoubleVerifyAuthenticBrandSafety}
     * @memberof MobileAppDoubleVerify
     */
    authenticBrandSafety?: DoubleVerifyAuthenticBrandSafety;
    /**
     * 
     * @type {DoubleVerifyViewabilityV21}
     * @memberof MobileAppDoubleVerify
     */
    viewability?: DoubleVerifyViewabilityV21;
    /**
     * The custom segment identifier.
     * @type {string}
     * @memberof MobileAppDoubleVerify
     */
    customContextualSegmentId?: string;
}
/**
 * 
 * @export
 * @interface MobileAppDoubleVerifyBrandSafety
 */
export interface MobileAppDoubleVerifyBrandSafety {
    /**
     * A list of content categories to exclude from targeting.
     * @type {Array<string>}
     * @memberof MobileAppDoubleVerifyBrandSafety
     */
    contentCategories?: Array<MobileAppDoubleVerifyBrandSafetyContentCategoriesEnum>;
    /**
     * A map from content categories to risk level to exclude from targeting. Available keys are: [`ADULT_CONTENT`, `ALCOHOL`, `CRIME`, `DISASTER_AVIATION`, `DISASTER_MAN_MADE`, `DISASTER_NATURAL`, `DISASTER_TERRORIST_EVENTS`, `DISASTER_VEHICLE`, `HATE_SPEECH`, `PROFANITY`, `SUBSTANCE_ABUSE`, `TOBACCO_ECIGARETTES`, `VIOLENCE_EXTREME_GRAPHIC`]
     * @type {{ [key: string]: BrandSuitabilityRiskLevel; }}
     * @memberof MobileAppDoubleVerifyBrandSafety
     */
    contentCategoriesWithRisk?: { [key: string]: BrandSuitabilityRiskLevel; };
    /**
     * Set to `true` to exclude unknown content.
     * @type {boolean}
     * @memberof MobileAppDoubleVerifyBrandSafety
     */
    unknownContent?: boolean;
    /**
     * A list of app age ratings to be used for excluding apps. For example, `TEENS_12_PLUS` will only exclude apps with content rated for everyone ages 12 and over. `UNKNOWN` will exclude apps with content unrated or unknown to Double Verify.
     * @type {Array<string>}
     * @memberof MobileAppDoubleVerifyBrandSafety
     */
    appAgeRating?: Array<MobileAppDoubleVerifyBrandSafetyAppAgeRatingEnum>;
    /**
     * 
     * @type {DvBrandSafetyAppStarRating}
     * @memberof MobileAppDoubleVerifyBrandSafety
     */
    appStarRating?: DvBrandSafetyAppStarRating;
    /**
     * Set to `true` to exclude unofficial apps or apps with insufficient user ratings (<100 lifetime).
     * @type {boolean}
     * @memberof MobileAppDoubleVerifyBrandSafety
     */
    excludeAppsWithInsufficientRating?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum MobileAppDoubleVerifyBrandSafetyContentCategoriesEnum {
    AdServer = 'AD_SERVER',
    CelebrityGossip = 'CELEBRITY_GOSSIP',
    CultsSurvivalism = 'CULTS_SURVIVALISM',
    Gambling = 'GAMBLING',
    IncentivizedMalwareClutter = 'INCENTIVIZED_MALWARE_CLUTTER',
    InflammatoryPoliticsNews = 'INFLAMMATORY_POLITICS_NEWS',
    NegativeNewsFinancial = 'NEGATIVE_NEWS_FINANCIAL',
    NegativeNewsPharmaceutical = 'NEGATIVE_NEWS_PHARMACEUTICAL',
    NonStandardContentNonEnglish = 'NON_STANDARD_CONTENT_NON_ENGLISH',
    NonStandardContentParkingPage = 'NON_STANDARD_CONTENT_PARKING_PAGE',
    Occult = 'OCCULT',
    PiracyCopyrightInfringement = 'PIRACY_COPYRIGHT_INFRINGEMENT',
    UnmoderatedUgcForumsImagesVideo = 'UNMODERATED_UGC_FORUMS_IMAGES_VIDEO'
}
/**
    * @export
    * @enum {string}
    */
export enum MobileAppDoubleVerifyBrandSafetyAppAgeRatingEnum {
    Everyone4Plus = 'EVERYONE_4_PLUS',
    Tweens9Plus = 'TWEENS_9_PLUS',
    Teens12Plus = 'TEENS_12_PLUS',
    Mature17Plus = 'MATURE_17_PLUS',
    AdultsOnly18Plus = 'ADULTS_ONLY_18_PLUS',
    Unknown = 'UNKNOWN'
}

/**
 * Integral Ad Science (IAS) is a third party provider in digital ad verification. IAS offers technologies to drive high-quality advertising media.
 * @export
 * @interface MobileAppIntegralAdScience
 */
export interface MobileAppIntegralAdScience {
    /**
     * 
     * @type {IasFraudInvalidTraffic}
     * @memberof MobileAppIntegralAdScience
     */
    fraudInvalidTraffic?: IasFraudInvalidTraffic;
    /**
     * 
     * @type {IasBrandSafetyV3}
     * @memberof MobileAppIntegralAdScience
     */
    brandSafety?: IasBrandSafetyV3;
}
/**
 * 
 * @export
 * @interface MobileAppTargeting
 */
export interface MobileAppTargeting {
    /**
     * The mobile application targeting inclusion type.
     * @type {string}
     * @memberof MobileAppTargeting
     */
    appTargetingOption: MobileAppTargetingAppTargetingOptionEnum;
    /**
     * The list of application identifiers.
     * @type {Array<string>}
     * @memberof MobileAppTargeting
     */
    appIds: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum MobileAppTargetingAppTargetingOptionEnum {
    IncludeApps = 'INCLUDE_APPS',
    ExcludeApps = 'EXCLUDE_APPS'
}

/**
 * Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
 * @export
 * @interface MobileAppThirdPartyPreBidTargeting
 */
export interface MobileAppThirdPartyPreBidTargeting {
    /**
     * 
     * @type {MobileAppDoubleVerify}
     * @memberof MobileAppThirdPartyPreBidTargeting
     */
    doubleVerify?: MobileAppDoubleVerify;
    /**
     * 
     * @type {OracleDataCloud}
     * @memberof MobileAppThirdPartyPreBidTargeting
     */
    oracleDataCloud?: OracleDataCloud;
    /**
     * 
     * @type {MobileAppIntegralAdScience}
     * @memberof MobileAppThirdPartyPreBidTargeting
     */
    integralAdScience?: MobileAppIntegralAdScience;
}
/**
 * Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
 * @export
 * @interface MobileDisplayDoubleVerify
 */
export interface MobileDisplayDoubleVerify {
    /**
     * 
     * @type {DoubleVerifyFraudInvalidTraffic}
     * @memberof MobileDisplayDoubleVerify
     */
    fraudInvalidTraffic?: DoubleVerifyFraudInvalidTraffic;
}
/**
 * Integral Ad Science (IAS) is a third party provider in digital ad verification. IAS offers technologies to drive high-quality advertising media.
 * @export
 * @interface MobileDisplayIntegralAdScience
 */
export interface MobileDisplayIntegralAdScience {
    /**
     * 
     * @type {IasFraudInvalidTraffic}
     * @memberof MobileDisplayIntegralAdScience
     */
    fraudInvalidTraffic?: IasFraudInvalidTraffic;
}
/**
 * Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
 * @export
 * @interface MobileDisplayThirdPartyPreBidTargeting
 */
export interface MobileDisplayThirdPartyPreBidTargeting {
    /**
     * 
     * @type {MobileDisplayDoubleVerify}
     * @memberof MobileDisplayThirdPartyPreBidTargeting
     */
    doubleVerify?: MobileDisplayDoubleVerify;
    /**
     * 
     * @type {MobileDisplayIntegralAdScience}
     * @memberof MobileDisplayThirdPartyPreBidTargeting
     */
    integralAdScience?: MobileDisplayIntegralAdScience;
}
/**
 * The mobile operating system targeting type.
 * @export
 * @enum {string}
 */

export enum MobileOsTargeting {
    Any = 'ANY',
    Ios = 'IOS',
    Android = 'ANDROID'
}

/**
 * The error response object.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Request Id that uniquely identifies your request.
     * @type {string}
     * @memberof ModelError
     */
    requestId?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof ModelError
     */
    message?: string;
    /**
     * 
     * @type {Array<SubError>}
     * @memberof ModelError
     */
    errors?: Array<SubError>;
}
/**
 * 
 * @export
 * @interface OdcCustomPredict
 */
export interface OdcCustomPredict {
    /**
     * The segment identifier.
     * @type {string}
     * @memberof OdcCustomPredict
     */
    id: string;
    /**
     * The segment name.
     * @type {string}
     * @memberof OdcCustomPredict
     */
    name: string;
}
/**
 * 
 * @export
 * @interface OdcCustomPredicts
 */
export interface OdcCustomPredicts {
    /**
     * 
     * @type {string}
     * @memberof OdcCustomPredicts
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<OdcCustomPredict>}
     * @memberof OdcCustomPredicts
     */
    customPredicts?: Array<OdcCustomPredict>;
}
/**
 * Oracle Data Cloud is a third party provider in digital ad verification. Oracle Data Cloud offers technologies to drive high-quality advertising media.
 * @export
 * @interface OracleDataCloud
 */
export interface OracleDataCloud {
    /**
     * 
     * @type {OracleDataCloudBrandSafety}
     * @memberof OracleDataCloud
     */
    brandSafety?: OracleDataCloudBrandSafety;
    /**
     * The fraud invalid traffic type.
     * @type {string}
     * @memberof OracleDataCloud
     */
    fraudInvalidTraffic?: OracleDataCloudFraudInvalidTrafficEnum;
    /**
     * The custom segment identifier.
     * @type {string}
     * @memberof OracleDataCloud
     */
    customSegmentId?: string;
    /**
     * The custom segment predict identifier.
     * @type {string}
     * @memberof OracleDataCloud
     */
    contextualPredictsSegmentId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum OracleDataCloudFraudInvalidTrafficEnum {
    AllowAll = 'ALLOW_ALL',
    FraudInvalidTrafficEssentialProtection = 'FRAUD_INVALID_TRAFFIC_ESSENTIAL_PROTECTION',
    FraudInvalidTrafficMaximumProtection = 'FRAUD_INVALID_TRAFFIC_MAXIMUM_PROTECTION'
}

/**
 * The oracle data cloud brand safety.
 * @export
 * @interface OracleDataCloudBrandSafety
 */
export interface OracleDataCloudBrandSafety {
    /**
     * 
     * @type {string}
     * @memberof OracleDataCloudBrandSafety
     */
    targetingOption?: OracleDataCloudBrandSafetyTargetingOptionEnum;
    /**
     * 
     * @type {string}
     * @memberof OracleDataCloudBrandSafety
     */
    essentialProtection?: OracleDataCloudBrandSafetyEssentialProtectionEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum OracleDataCloudBrandSafetyTargetingOptionEnum {
    NoBrandSafety = 'NO_BRAND_SAFETY',
    MaximumProtection = 'MAXIMUM_PROTECTION',
    EssentialProtection = 'ESSENTIAL_PROTECTION'
}
/**
    * @export
    * @enum {string}
    */
export enum OracleDataCloudBrandSafetyEssentialProtectionEnum {
    Adult = 'ADULT',
    Arms = 'ARMS',
    Crime = 'CRIME',
    Injury = 'INJURY',
    Piracy = 'PIRACY',
    Drugs = 'DRUGS',
    HateSpeech = 'HATE_SPEECH',
    Military = 'MILITARY',
    Obscenity = 'OBSCENITY',
    Terrorism = 'TERRORISM',
    Tobacco = 'TOBACCO'
}

/**
 * Complete order model which willl be used for create/update and get.
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * The order identifier. It will be used to perform update operation. Immutable field.
     * @type {string}
     * @memberof Order
     */
    orderId?: string;
    /**
     * The advertiser identifier. Immutable field.
     * @type {string}
     * @memberof Order
     */
    advertiserId: string;
    /**
     * The order name.
     * @type {string}
     * @memberof Order
     */
    name: string;
    /**
     * The order external identifier, also known as purchase order number (PO number). This field is required if \"Mandatory PO numbers\" is set at the entity level. `N/A` (not applicable) is a valid value. This field will be deprecated and renamed to `poNumber` in a future release.
     * @type {string}
     * @memberof Order
     */
    externalId?: string;
    /**
     * The order comments.
     * @type {string}
     * @memberof Order
     */
    comments?: string;
    /**
     * The order start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC. The start date has to be modeled as a part of flights object. 
     * @type {string}
     * @memberof Order
     */
    startDateTime?: string;
    /**
     * The order end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC. The end date has to be modeled as a part of flights object. 
     * @type {string}
     * @memberof Order
     */
    endDateTime?: string;
    /**
     * 
     * @type {OrderBudget}
     * @memberof Order
     */
    budget: OrderBudget;
    /**
     * 
     * @type {CurrencyCode}
     * @memberof Order
     */
    currencyCode?: CurrencyCode;
    /**
     * 
     * @type {AgencyFee}
     * @memberof Order
     */
    agencyFee?: AgencyFee;
    /**
     * 
     * @type {FrequencyCap}
     * @memberof Order
     */
    frequencyCap: FrequencyCap;
    /**
     * 
     * @type {OrderOptimization}
     * @memberof Order
     */
    optimization: OrderOptimization;
    /**
     * 
     * @type {DeliveryActivationStatus}
     * @memberof Order
     */
    deliveryActivationStatus?: DeliveryActivationStatus;
    /**
     * 
     * @type {OrderDeliveryStatus}
     * @memberof Order
     */
    deliveryStatus?: OrderDeliveryStatus;
    /**
     * The order creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00.
     * @type {string}
     * @memberof Order
     */
    creationDate?: string;
    /**
     * The order last update date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00.
     * @type {string}
     * @memberof Order
     */
    lastUpdatedDate?: string;
}
/**
 * This model is designed to support batch get operation for better performance.
 * @export
 * @interface OrderBasic
 */
export interface OrderBasic {
    /**
     * The order identifier.
     * @type {string}
     * @memberof OrderBasic
     */
    orderId?: string;
    /**
     * The advertiser identifier.
     * @type {string}
     * @memberof OrderBasic
     */
    advertiserId?: string;
    /**
     * The order name.
     * @type {string}
     * @memberof OrderBasic
     */
    name?: string;
    /**
     * The order external identifier, also known as purchase order number (PO number). This field is required if \"Mandatory PO numbers\" is set at the entity level. `N/A` (not applicable) is a valid value. This field will be deprecated and renamed to `poNumber` in a future release.
     * @type {string}
     * @memberof OrderBasic
     */
    externalId?: string;
    /**
     * The order comments.
     * @type {string}
     * @memberof OrderBasic
     */
    comments?: string;
    /**
     * The order start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC
     * @type {string}
     * @memberof OrderBasic
     */
    startDateTime?: string;
    /**
     * The order end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC
     * @type {string}
     * @memberof OrderBasic
     */
    endDateTime?: string;
    /**
     * 
     * @type {OrderBudgetBasic}
     * @memberof OrderBasic
     */
    budget?: OrderBudgetBasic;
    /**
     * 
     * @type {AgencyFee}
     * @memberof OrderBasic
     */
    agencyFee?: AgencyFee;
    /**
     * 
     * @type {CurrencyCode}
     * @memberof OrderBasic
     */
    currencyCode?: CurrencyCode;
    /**
     * 
     * @type {DeliveryActivationStatus}
     * @memberof OrderBasic
     */
    deliveryActivationStatus?: DeliveryActivationStatus;
    /**
     * 
     * @type {OrderDeliveryStatus}
     * @memberof OrderBasic
     */
    deliveryStatus?: OrderDeliveryStatus;
    /**
     * 
     * @type {FrequencyCap}
     * @memberof OrderBasic
     */
    frequencyCap?: FrequencyCap;
    /**
     * 
     * @type {OrderOptimization}
     * @memberof OrderBasic
     */
    optimization?: OrderOptimization;
}
/**
 * 
 * @export
 * @interface OrderBasicV21
 */
export interface OrderBasicV21 {
    /**
     * The order creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00. This field is available since version `application/vnd.dsporders.v2.1+json`.
     * @type {string}
     * @memberof OrderBasicV21
     */
    creationDate?: string;
    /**
     * The order last update date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00. This field is available since version `application/vnd.dsporders.v2.1+json`.
     * @type {string}
     * @memberof OrderBasicV21
     */
    lastUpdatedDate?: string;
    /**
     * The order identifier.
     * @type {string}
     * @memberof OrderBasicV21
     */
    orderId?: string;
    /**
     * The advertiser identifier.
     * @type {string}
     * @memberof OrderBasicV21
     */
    advertiserId?: string;
    /**
     * The order name.
     * @type {string}
     * @memberof OrderBasicV21
     */
    name?: string;
    /**
     * The order external identifier, also known as purchase order number (PO number). This field is required if \"Mandatory PO numbers\" is set at the entity level. `N/A` (not applicable) is a valid value. This field will be deprecated and renamed to `poNumber` in a future release.
     * @type {string}
     * @memberof OrderBasicV21
     */
    externalId?: string;
    /**
     * The order comments.
     * @type {string}
     * @memberof OrderBasicV21
     */
    comments?: string;
    /**
     * The order start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC
     * @type {string}
     * @memberof OrderBasicV21
     */
    startDateTime?: string;
    /**
     * The order end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC
     * @type {string}
     * @memberof OrderBasicV21
     */
    endDateTime?: string;
    /**
     * 
     * @type {OrderBudgetBasic}
     * @memberof OrderBasicV21
     */
    budget?: OrderBudgetBasic;
    /**
     * 
     * @type {AgencyFee}
     * @memberof OrderBasicV21
     */
    agencyFee?: AgencyFee;
    /**
     * 
     * @type {CurrencyCode}
     * @memberof OrderBasicV21
     */
    currencyCode?: CurrencyCode;
    /**
     * 
     * @type {DeliveryActivationStatus}
     * @memberof OrderBasicV21
     */
    deliveryActivationStatus?: DeliveryActivationStatus;
    /**
     * 
     * @type {OrderDeliveryStatus}
     * @memberof OrderBasicV21
     */
    deliveryStatus?: OrderDeliveryStatus;
    /**
     * 
     * @type {FrequencyCap}
     * @memberof OrderBasicV21
     */
    frequencyCap?: FrequencyCap;
    /**
     * 
     * @type {OrderOptimization}
     * @memberof OrderBasicV21
     */
    optimization?: OrderOptimization;
}
/**
 * 
 * @export
 * @interface OrderBasicV22
 */
export interface OrderBasicV22 {
    /**
     * 
     * @type {CurrencyCodeV3}
     * @memberof OrderBasicV22
     */
    currencyCode?: CurrencyCodeV3;
    /**
     * The order identifier.
     * @type {string}
     * @memberof OrderBasicV22
     */
    orderId?: string;
    /**
     * The advertiser identifier.
     * @type {string}
     * @memberof OrderBasicV22
     */
    advertiserId?: string;
    /**
     * The order name.
     * @type {string}
     * @memberof OrderBasicV22
     */
    name?: string;
    /**
     * The order external identifier, also known as purchase order number (PO number). This field is required if \"Mandatory PO numbers\" is set at the entity level. `N/A` (not applicable) is a valid value. This field will be deprecated and renamed to `poNumber` in a future release.
     * @type {string}
     * @memberof OrderBasicV22
     */
    externalId?: string;
    /**
     * The order comments.
     * @type {string}
     * @memberof OrderBasicV22
     */
    comments?: string;
    /**
     * The order start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC
     * @type {string}
     * @memberof OrderBasicV22
     */
    startDateTime?: string;
    /**
     * The order end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC
     * @type {string}
     * @memberof OrderBasicV22
     */
    endDateTime?: string;
    /**
     * 
     * @type {OrderBudgetBasic}
     * @memberof OrderBasicV22
     */
    budget?: OrderBudgetBasic;
    /**
     * 
     * @type {AgencyFee}
     * @memberof OrderBasicV22
     */
    agencyFee?: AgencyFee;
    /**
     * 
     * @type {DeliveryActivationStatus}
     * @memberof OrderBasicV22
     */
    deliveryActivationStatus?: DeliveryActivationStatus;
    /**
     * 
     * @type {OrderDeliveryStatus}
     * @memberof OrderBasicV22
     */
    deliveryStatus?: OrderDeliveryStatus;
    /**
     * 
     * @type {FrequencyCap}
     * @memberof OrderBasicV22
     */
    frequencyCap?: FrequencyCap;
    /**
     * 
     * @type {OrderOptimization}
     * @memberof OrderBasicV22
     */
    optimization?: OrderOptimization;
}
/**
 * 
 * @export
 * @interface OrderBudget
 */
export interface OrderBudget {
    /**
     * The total budget amount. For create/update operations, budget has to be modeled as part of flights object. 
     * @type {number}
     * @memberof OrderBudget
     */
    totalBudgetAmount?: number;
    /**
     * 
     * @type {Array<BudgetCap>}
     * @memberof OrderBudget
     */
    budgetCaps?: Array<BudgetCap>;
    /**
     * The budget, start date and end date for an order have to be modeled as flight object. An order can have multiple flights. 
     * @type {Array<OrderFlight>}
     * @memberof OrderBudget
     */
    flights?: Array<OrderFlight>;
}
/**
 * 
 * @export
 * @interface OrderBudgetAllOf
 */
export interface OrderBudgetAllOf {
    /**
     * The budget, start date and end date for an order have to be modeled as flight object. An order can have multiple flights. 
     * @type {Array<OrderFlight>}
     * @memberof OrderBudgetAllOf
     */
    flights?: Array<OrderFlight>;
}
/**
 * 
 * @export
 * @interface OrderBudgetBasic
 */
export interface OrderBudgetBasic {
    /**
     * The total budget amount. For create/update operations, budget has to be modeled as part of flights object. 
     * @type {number}
     * @memberof OrderBudgetBasic
     */
    totalBudgetAmount?: number;
    /**
     * 
     * @type {Array<BudgetCap>}
     * @memberof OrderBudgetBasic
     */
    budgetCaps?: Array<BudgetCap>;
}
/**
 * The order delivery status. DELIVERING: The order is delivering. OUT_OF_BUDGET: The order is out of budget. ENDED: The order has ended. LINEITEMS_NOT_RUNNING: The order doesn’t have any active line items to deliver. INACTIVE: The order is paused by the user. READY_TO_DELIVER: The order has not yet started.
 * @export
 * @enum {string}
 */

export enum OrderDeliveryStatus {
    Delivering = 'DELIVERING',
    Ended = 'ENDED',
    OutOfBudget = 'OUT_OF_BUDGET',
    LineitemsNotRunning = 'LINEITEMS_NOT_RUNNING',
    Inactive = 'INACTIVE',
    ReadyToDeliver = 'READY_TO_DELIVER'
}

/**
 * 
 * @export
 * @interface OrderFlight
 */
export interface OrderFlight {
    /**
     * The flight identifier. Immutable field.
     * @type {string}
     * @memberof OrderFlight
     */
    flightId?: string;
    /**
     * The flight start date in ISO format (YYYY-MM-DD hh:mm:ss z). Timezone is UTC. For example, 2020-10-21 03:59:00 UTC.
     * @type {string}
     * @memberof OrderFlight
     */
    startDateTime: string;
    /**
     * The flight start date in ISO format (YYYY-MM-DD hh:mm:ss z). Timezone is UTC. For example, 2020-10-21 03:59:00 UTC.
     * @type {string}
     * @memberof OrderFlight
     */
    endDateTime: string;
    /**
     * The total flight budget amount.
     * @type {number}
     * @memberof OrderFlight
     */
    amount: number;
    /**
     * The spent flight budget amount.
     * @type {number}
     * @memberof OrderFlight
     */
    spentAmount?: number;
    /**
     * The remaining flight budget amount.
     * @type {number}
     * @memberof OrderFlight
     */
    remainingAmount?: number;
}
/**
 * 
 * @export
 * @interface OrderOptimization
 */
export interface OrderOptimization {
    /**
     * The product location indicates whether the product is endemic or non-endemic.
     * @type {string}
     * @memberof OrderOptimization
     */
    productLocation: OrderOptimizationProductLocationEnum;
    /**
     * The budget optimization goal type.
     * @type {string}
     * @memberof OrderOptimization
     */
    goal: OrderOptimizationGoalEnum;
    /**
     * KPI for the selected goal.
     * @type {string}
     * @memberof OrderOptimization
     */
    goalKpi: OrderOptimizationGoalKpiEnum;
    /**
     * The list of optimizations supported.
     * @type {Array<string>}
     * @memberof OrderOptimization
     */
    autoOptimizations?: Array<OrderOptimizationAutoOptimizationsEnum>;
    /**
     * It specifies how Amazon Ads determines bids on your behalf for each opportunity to serve an impression. It is immutable once the order has started delivering. 
     * @type {string}
     * @memberof OrderOptimization
     */
    biddingStrategy?: OrderOptimizationBiddingStrategyEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderOptimizationProductLocationEnum {
    SoldOnAmazon = 'SOLD_ON_AMAZON',
    NotSoldOnAmazon = 'NOT_SOLD_ON_AMAZON'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderOptimizationGoalEnum {
    Awareness = 'AWARENESS',
    EngagementWithMyAd = 'ENGAGEMENT_WITH_MY_AD',
    ConsiderationsOnAmazon = 'CONSIDERATIONS_ON_AMAZON',
    ConversionsOffAmazon = 'CONVERSIONS_OFF_AMAZON',
    PurchasesOnAmazon = 'PURCHASES_ON_AMAZON',
    MobileAppInstalls = 'MOBILE_APP_INSTALLS'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderOptimizationGoalKpiEnum {
    VideoCompletionRate = 'VIDEO_COMPLETION_RATE',
    ClickThroughRate = 'CLICK_THROUGH_RATE',
    CostPerClick = 'COST_PER_CLICK',
    CostPerAcquisition = 'COST_PER_ACQUISITION',
    CostPerDownload = 'COST_PER_DOWNLOAD',
    DetailPageViewRate = 'DETAIL_PAGE_VIEW_RATE',
    CostPerDetailPageView = 'COST_PER_DETAIL_PAGE_VIEW',
    ReturnOnAdSpend = 'RETURN_ON_AD_SPEND',
    TotalReturnOnAdSpend = 'TOTAL_RETURN_ON_AD_SPEND',
    CostPerVideoCompletion = 'COST_PER_VIDEO_COMPLETION',
    None = 'NONE',
    Other = 'OTHER',
    Reach = 'REACH'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderOptimizationAutoOptimizationsEnum {
    Budget = 'BUDGET',
    Bid = 'BID'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderOptimizationBiddingStrategyEnum {
    SpendBudgetInFull = 'SPEND_BUDGET_IN_FULL',
    MaximizePerformance = 'MAXIMIZE_PERFORMANCE'
}

/**
 * Response for the order create/update operations. If operation is successful, it contains only orderId. If it is a failure, it contains only errorDetails. success and failure will be corresponding to that requested index in that batch (array of items). 
 * @export
 * @interface OrderResponse
 */
export interface OrderResponse {
    /**
     * The order Identifier.
     * @type {string}
     * @memberof OrderResponse
     */
    orderId?: string;
    /**
     * 
     * @type {Error}
     * @memberof OrderResponse
     */
    errorDetails?: Error;
}
/**
 * 
 * @export
 * @interface OrderV22
 */
export interface OrderV22 {
    /**
     * 
     * @type {CurrencyCodeV3}
     * @memberof OrderV22
     */
    currencyCode?: CurrencyCodeV3;
    /**
     * The order identifier. It will be used to perform update operation. Immutable field.
     * @type {string}
     * @memberof OrderV22
     */
    orderId?: string;
    /**
     * The advertiser identifier. Immutable field.
     * @type {string}
     * @memberof OrderV22
     */
    advertiserId: string;
    /**
     * The order name.
     * @type {string}
     * @memberof OrderV22
     */
    name: string;
    /**
     * The order external identifier, also known as purchase order number (PO number). This field is required if \"Mandatory PO numbers\" is set at the entity level. `N/A` (not applicable) is a valid value. This field will be deprecated and renamed to `poNumber` in a future release.
     * @type {string}
     * @memberof OrderV22
     */
    externalId?: string;
    /**
     * The order comments.
     * @type {string}
     * @memberof OrderV22
     */
    comments?: string;
    /**
     * The order start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC. The start date has to be modeled as a part of flights object. 
     * @type {string}
     * @memberof OrderV22
     */
    startDateTime?: string;
    /**
     * The order end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00 UTC. The end date has to be modeled as a part of flights object. 
     * @type {string}
     * @memberof OrderV22
     */
    endDateTime?: string;
    /**
     * 
     * @type {OrderBudget}
     * @memberof OrderV22
     */
    budget: OrderBudget;
    /**
     * 
     * @type {AgencyFee}
     * @memberof OrderV22
     */
    agencyFee?: AgencyFee;
    /**
     * 
     * @type {FrequencyCap}
     * @memberof OrderV22
     */
    frequencyCap: FrequencyCap;
    /**
     * 
     * @type {OrderOptimization}
     * @memberof OrderV22
     */
    optimization: OrderOptimization;
    /**
     * 
     * @type {DeliveryActivationStatus}
     * @memberof OrderV22
     */
    deliveryActivationStatus?: DeliveryActivationStatus;
    /**
     * 
     * @type {OrderDeliveryStatus}
     * @memberof OrderV22
     */
    deliveryStatus?: OrderDeliveryStatus;
    /**
     * The order creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00.
     * @type {string}
     * @memberof OrderV22
     */
    creationDate?: string;
    /**
     * The order last update date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. For example, 2020-12-16T19:20:30+01:00.
     * @type {string}
     * @memberof OrderV22
     */
    lastUpdatedDate?: string;
}
/**
 * 
 * @export
 * @interface Orders
 */
export interface Orders {
    /**
     * Total number of results which satisfy the filtering criteria. This will help to support pagination.
     * @type {number}
     * @memberof Orders
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<OrderBasic>}
     * @memberof Orders
     */
    response?: Array<OrderBasic>;
}
/**
 * 
 * @export
 * @interface OrdersV21
 */
export interface OrdersV21 {
    /**
     * Total number of results which satisfy the filtering criteria. This will help to support pagination.
     * @type {number}
     * @memberof OrdersV21
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<OrderBasicV21>}
     * @memberof OrdersV21
     */
    response?: Array<OrderBasicV21>;
}
/**
 * 
 * @export
 * @interface OrdersV22
 */
export interface OrdersV22 {
    /**
     * Total number of results which satisfy the filtering criteria. This will help to support pagination.
     * @type {number}
     * @memberof OrdersV22
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<OrderBasicV22>}
     * @memberof OrdersV22
     */
    response?: Array<OrderBasicV22>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum OttContentGenres {
    Action = 'ACTION',
    Adventure = 'ADVENTURE',
    Animation = 'ANIMATION',
    Biography = 'BIOGRAPHY',
    Comedy = 'COMEDY',
    Crime = 'CRIME',
    Documentary = 'DOCUMENTARY',
    Drama = 'DRAMA',
    Family = 'FAMILY',
    Fantasy = 'FANTASY',
    FilmNoir = 'FILM_NOIR',
    GameShow = 'GAME_SHOW',
    History = 'HISTORY',
    Horror = 'HORROR',
    Musical = 'MUSICAL',
    Mystery = 'MYSTERY',
    News = 'NEWS',
    RealityTv = 'REALITY_TV',
    Romance = 'ROMANCE',
    ScienceFiction = 'SCIENCE_FICTION',
    Short = 'SHORT',
    Sport = 'SPORT',
    SuperHero = 'SUPER_HERO',
    TalkShow = 'TALK_SHOW',
    Thriller = 'THRILLER',
    War = 'WAR',
    Western = 'WESTERN',
    GenreNotAvailable = 'GENRE_NOT_AVAILABLE'
}

/**
 * This targeting only applies to Amazon O&O and Amazon Publisher Services (APS) inventory. It can only be provided when CONNECTED_TV is selected in deviceTypeTargeting. Currently API does not support excluding delivery to audience according to content ratings. This feature will be added in later versions. If a user creates or updates a line item with this field on UI, they will not see the data for this field in API and updates via API will not update this field.
 * @export
 * @interface OttTargeting
 */
export interface OttTargeting {
    /**
     * Select genres to exclude delivery to that audience.
     * @type {Array<OttContentGenres>}
     * @memberof OttTargeting
     */
    ottContentGenres?: Array<OttContentGenres>;
    /**
     * Select the apps that should be excluded.
     * @type {Array<string>}
     * @memberof OttTargeting
     */
    ottAppBlocking?: Array<string>;
}
/**
 * 
 * @export
 * @interface Pacing
 */
export interface Pacing {
    /**
     * The type of line item delivery profile. FRONT_LOADED: Initially front-load 20% of the budget. Remaining delivery is spread evenly across the remaining duration of the line item. Note that catchup boosts do not apply to this delivery profile. EVENLY: Distributes the delivery evenly across the duration of the line items. Catchup boosts are enabled for this delivery profile.
     * @type {string}
     * @memberof Pacing
     */
    deliveryProfile: PacingDeliveryProfileEnum;
    /**
     * The catch up boost value associated with the line item. Represents the percentage of additional delivery that can be targeted when the line item is under-pacing. A catchup boost only applies to the EVENLY deliver profile. CatchUpBoost_2X: 200. CatchUpBoost_3X: 300. CatchUpBoost_4X: 400.
     * @type {string}
     * @memberof Pacing
     */
    catchUpBoost?: PacingCatchUpBoostEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PacingDeliveryProfileEnum {
    FrontLoaded = 'FRONT_LOADED',
    Evenly = 'EVENLY'
}
/**
    * @export
    * @enum {string}
    */
export enum PacingCatchUpBoostEnum {
    CatchUpBoost2X = 'CATCH_UP_BOOST_2X',
    CatchUpBoost3X = 'CATCH_UP_BOOST_3X',
    CatchUpBoost4X = 'CATCH_UP_BOOST_4X',
    None = 'NONE'
}

/**
 * 
 * @export
 * @interface Pixel
 */
export interface Pixel {
    /**
     * 
     * @type {string}
     * @memberof Pixel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Pixel
     */
    name?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pixel
     */
    purpose?: Array<PixelPurposeEnum>;
    /**
     * 
     * @type {string}
     * @memberof Pixel
     */
    event?: PixelEventEnum;
    /**
     * 
     * @type {string}
     * @memberof Pixel
     */
    domain?: string;
    /**
     * 
     * @type {string}
     * @memberof Pixel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Pixel
     */
    advertiserId?: string;
    /**
     * 
     * @type {string}
     * @memberof Pixel
     */
    created?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PixelPurposeEnum {
    Engagement = 'ENGAGEMENT',
    Remarketing = 'REMARKETING',
    Conversion = 'CONVERSION'
}
/**
    * @export
    * @enum {string}
    */
export enum PixelEventEnum {
    MarketingLandingPage = 'MARKETING_LANDING_PAGE'
}

/**
 * 
 * @export
 * @interface ProductCategory
 */
export interface ProductCategory {
    /**
     * The category identifier.
     * @type {string}
     * @memberof ProductCategory
     */
    id: string;
    /**
     * The category name.
     * @type {string}
     * @memberof ProductCategory
     */
    name: string;
    /**
     * The identifier of the parent category. This is blank if the category is a parent category.
     * @type {string}
     * @memberof ProductCategory
     */
    parentId?: string;
}
/**
 * 
 * @export
 * @interface ProductTracking
 */
export interface ProductTracking {
    /**
     * The tracking product list.
     * @type {Array<ProductTrackingItem>}
     * @memberof ProductTracking
     */
    productList?: Array<ProductTrackingItem>;
    /**
     * The URL of the product tracking file.
     * @type {string}
     * @memberof ProductTracking
     */
    productFile?: string;
}
/**
 * The ASIN domain type. Applicable to ASIN line item type only.
 * @export
 * @enum {string}
 */

export enum ProductTrackingDomain {
    AmazonUs = 'AMAZON_US',
    AmazonCa = 'AMAZON_CA',
    AmazonMx = 'AMAZON_MX',
    PrimeNowUs = 'PRIME_NOW_US',
    PrimeNowCa = 'PRIME_NOW_CA',
    WholeFoodsMarketUs = 'WHOLE_FOODS_MARKET_US'
}

/**
 * The ASIN domain type. Applicable to ASIN line item type only. FRESH_STORES_US is available since application/vnd.dsporders.v2.1+json.
 * @export
 * @interface ProductTrackingDomainV21
 */
export interface ProductTrackingDomainV21 {
}
/**
 * 
 * @export
 * @interface ProductTrackingItem
 */
export interface ProductTrackingItem {
    /**
     * The product identifier.
     * @type {string}
     * @memberof ProductTrackingItem
     */
    productId: string;
    /**
     * The product feature type.
     * @type {string}
     * @memberof ProductTrackingItem
     */
    productAssociation: ProductTrackingItemProductAssociationEnum;
    /**
     * 
     * @type {ProductTrackingDomain}
     * @memberof ProductTrackingItem
     */
    domain: ProductTrackingDomain;
}

/**
    * @export
    * @enum {string}
    */
export enum ProductTrackingItemProductAssociationEnum {
    Featured = 'FEATURED',
    NotFeatured = 'NOT_FEATURED'
}

/**
 * 
 * @export
 * @interface ProductTrackingItemV1
 */
export interface ProductTrackingItemV1 {
    /**
     * The product identifier.
     * @type {string}
     * @memberof ProductTrackingItemV1
     */
    productId: string;
    /**
     * 
     * @type {SupportedProductAssociationV1}
     * @memberof ProductTrackingItemV1
     */
    productAssociation: SupportedProductAssociationV1;
    /**
     * 
     * @type {SupportedProductTrackingDomainV1}
     * @memberof ProductTrackingItemV1
     */
    domain: SupportedProductTrackingDomainV1;
}
/**
 * 
 * @export
 * @interface ProductTrackingItemV21
 */
export interface ProductTrackingItemV21 {
    /**
     * 
     * @type {ProductTrackingDomainV21}
     * @memberof ProductTrackingItemV21
     */
    domain: ProductTrackingDomainV21;
    /**
     * The product identifier.
     * @type {string}
     * @memberof ProductTrackingItemV21
     */
    productId: string;
    /**
     * The product feature type.
     * @type {string}
     * @memberof ProductTrackingItemV21
     */
    productAssociation: ProductTrackingItemV21ProductAssociationEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ProductTrackingItemV21ProductAssociationEnum {
    Featured = 'FEATURED',
    NotFeatured = 'NOT_FEATURED'
}

/**
 * 
 * @export
 * @interface ProductTrackingV1
 */
export interface ProductTrackingV1 {
    /**
     * The tracking product list.
     * @type {Array<ProductTrackingItemV1>}
     * @memberof ProductTrackingV1
     */
    productList?: Array<ProductTrackingItemV1>;
    /**
     * The URL of the product tracking file.
     * @type {string}
     * @memberof ProductTrackingV1
     */
    productFile?: string;
}
/**
 * 
 * @export
 * @interface ProductTrackingV21
 */
export interface ProductTrackingV21 {
    /**
     * 
     * @type {Array<ProductTrackingItemV21>}
     * @memberof ProductTrackingV21
     */
    productList?: Array<ProductTrackingItemV21>;
    /**
     * The URL of the product tracking file.
     * @type {string}
     * @memberof ProductTrackingV21
     */
    productFile?: string;
}
/**
 * The segment clause.
 * @export
 * @interface SegmentClause
 */
export interface SegmentClause {
    /**
     * The unique identifier of the DSP resource/object.
     * @type {string}
     * @memberof SegmentClause
     */
    segmentId: string;
    /**
     * Set to `true` to set to negative targeting. Set to `false` to set to  positive targeting. Default is false.
     * @type {boolean}
     * @memberof SegmentClause
     */
    isNot?: boolean;
}
/**
 * This segment group.
 * @export
 * @interface SegmentGroup
 */
export interface SegmentGroup {
    /**
     * The list of segment clauses.
     * @type {Array<SegmentClause>}
     * @memberof SegmentGroup
     */
    segments: Array<SegmentClause>;
    /**
     * The intra operator used between two segment groups.
     * @type {string}
     * @memberof SegmentGroup
     */
    intraOperator: SegmentGroupIntraOperatorEnum;
    /**
     * The inter operator used among segments within the same segment group.
     * @type {string}
     * @memberof SegmentGroup
     */
    interOperator: SegmentGroupInterOperatorEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SegmentGroupIntraOperatorEnum {
    And = 'AND',
    Or = 'OR'
}
/**
    * @export
    * @enum {string}
    */
export enum SegmentGroupInterOperatorEnum {
    Any = 'ANY',
    All = 'ALL'
}

/**
 * 
 * @export
 * @interface SegmentTargeting
 */
export interface SegmentTargeting {
    /**
     * The list of segment groups.
     * @type {Array<SegmentGroup>}
     * @memberof SegmentTargeting
     */
    segmentGroups?: Array<SegmentGroup>;
}
/**
 * The site language targeting type. For example, `EN`, `ES`.
 * @export
 * @enum {string}
 */

export enum SiteLanguageTargeting {
    En = 'EN',
    Es = 'ES'
}

/**
 * The site language targeting type. For example, US/Mexico advertisers can choose from `EN`, `ES`; Canada advertisers can choose from `EN`, `FR`; Brazil advertisers can choose from `EN`, `PT`.
 * @export
 * @interface SiteLanguageTargetingV3
 */
export interface SiteLanguageTargetingV3 {
}
/**
 * Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
 * @export
 * @interface StandardDisplayDoubleVerify
 */
export interface StandardDisplayDoubleVerify {
    /**
     * 
     * @type {StandardDisplayDoubleVerifyBrandSafety}
     * @memberof StandardDisplayDoubleVerify
     */
    brandSafety?: StandardDisplayDoubleVerifyBrandSafety;
    /**
     * 
     * @type {DoubleVerifyFraudInvalidTraffic}
     * @memberof StandardDisplayDoubleVerify
     */
    fraudInvalidTraffic?: DoubleVerifyFraudInvalidTraffic;
    /**
     * 
     * @type {DoubleVerifyAuthenticBrandSafety}
     * @memberof StandardDisplayDoubleVerify
     */
    authenticBrandSafety?: DoubleVerifyAuthenticBrandSafety;
    /**
     * 
     * @type {DoubleVerifyViewabilityV21}
     * @memberof StandardDisplayDoubleVerify
     */
    viewability?: DoubleVerifyViewabilityV21;
    /**
     * The custom segment identifier.
     * @type {string}
     * @memberof StandardDisplayDoubleVerify
     */
    customContextualSegmentId?: string;
}
/**
 * 
 * @export
 * @interface StandardDisplayDoubleVerifyBrandSafety
 */
export interface StandardDisplayDoubleVerifyBrandSafety {
    /**
     * A list of content categories to exclude from targeting.
     * @type {Array<string>}
     * @memberof StandardDisplayDoubleVerifyBrandSafety
     */
    contentCategories?: Array<StandardDisplayDoubleVerifyBrandSafetyContentCategoriesEnum>;
    /**
     * A map from content categories to risk level to exclude from targeting. Available keys are: [`ADULT_CONTENT`, `ALCOHOL`, `CRIME`, `DISASTER_AVIATION`, `DISASTER_MAN_MADE`, `DISASTER_NATURAL`, `DISASTER_TERRORIST_EVENTS`, `DISASTER_VEHICLE`, `HATE_SPEECH`, `PROFANITY`, `SUBSTANCE_ABUSE`, `TOBACCO_ECIGARETTES`, `VIOLENCE_EXTREME_GRAPHIC`]
     * @type {{ [key: string]: BrandSuitabilityRiskLevel; }}
     * @memberof StandardDisplayDoubleVerifyBrandSafety
     */
    contentCategoriesWithRisk?: { [key: string]: BrandSuitabilityRiskLevel; };
    /**
     * Set to `true` to exclude unknown content.
     * @type {boolean}
     * @memberof StandardDisplayDoubleVerifyBrandSafety
     */
    unknownContent?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum StandardDisplayDoubleVerifyBrandSafetyContentCategoriesEnum {
    AdServer = 'AD_SERVER',
    CelebrityGossip = 'CELEBRITY_GOSSIP',
    CultsSurvivalism = 'CULTS_SURVIVALISM',
    Gambling = 'GAMBLING',
    IncentivizedMalwareClutter = 'INCENTIVIZED_MALWARE_CLUTTER',
    InflammatoryPoliticsNews = 'INFLAMMATORY_POLITICS_NEWS',
    NegativeNewsFinancial = 'NEGATIVE_NEWS_FINANCIAL',
    NegativeNewsPharmaceutical = 'NEGATIVE_NEWS_PHARMACEUTICAL',
    NonStandardContentNonEnglish = 'NON_STANDARD_CONTENT_NON_ENGLISH',
    NonStandardContentParkingPage = 'NON_STANDARD_CONTENT_PARKING_PAGE',
    Occult = 'OCCULT',
    PiracyCopyrightInfringement = 'PIRACY_COPYRIGHT_INFRINGEMENT',
    UnmoderatedUgcForumsImagesVideo = 'UNMODERATED_UGC_FORUMS_IMAGES_VIDEO'
}

/**
 * Integral Ad Science (IAS) is a third party provider in digital ad verification. IAS offers technologies to drive high-quality advertising media.
 * @export
 * @interface StandardDisplayIntegralAdScience
 */
export interface StandardDisplayIntegralAdScience {
    /**
     * 
     * @type {IasFraudInvalidTraffic}
     * @memberof StandardDisplayIntegralAdScience
     */
    fraudInvalidTraffic?: IasFraudInvalidTraffic;
    /**
     * 
     * @type {IasBrandSafetyV3}
     * @memberof StandardDisplayIntegralAdScience
     */
    brandSafety?: IasBrandSafetyV3;
    /**
     * 
     * @type {IasViewability}
     * @memberof StandardDisplayIntegralAdScience
     */
    viewability?: IasViewability;
}
/**
 * 
 * @export
 * @interface StandardDisplayTargeting
 */
export interface StandardDisplayTargeting {
    /**
     * 
     * @type {UserLocationTargeting}
     * @memberof StandardDisplayTargeting
     */
    userLocationTargeting?: UserLocationTargeting;
    /**
     * 
     * @type {AmazonViewabilityTargeting}
     * @memberof StandardDisplayTargeting
     */
    amazonViewabilityTargeting?: AmazonViewabilityTargeting;
    /**
     * 
     * @type {ThirdPartyPreBidTargeting}
     * @memberof StandardDisplayTargeting
     */
    thirdPartyPreBidTargeting?: ThirdPartyPreBidTargeting;
    /**
     * 
     * @type {SupplyTargeting}
     * @memberof StandardDisplayTargeting
     */
    supplyTargeting?: SupplyTargeting;
    /**
     * 
     * @type {GeoLocationTargeting}
     * @memberof StandardDisplayTargeting
     */
    geoLocationTargeting?: GeoLocationTargeting;
    /**
     * 
     * @type {SegmentTargeting}
     * @memberof StandardDisplayTargeting
     */
    segmentTargeting?: SegmentTargeting;
    /**
     * 
     * @type {DayPartTargeting}
     * @memberof StandardDisplayTargeting
     */
    dayPartTargeting?: DayPartTargeting;
    /**
     * 
     * @type {DomainList}
     * @memberof StandardDisplayTargeting
     */
    domainListTargeting?: DomainList;
    /**
     * The targeted device type for standard display line item type. It is required input for `STANDARD_DISPLAY` line item type.
     * @type {string}
     * @memberof StandardDisplayTargeting
     */
    deviceTypeTargeting?: StandardDisplayTargetingDeviceTypeTargetingEnum;
    /**
     * 
     * @type {MobileOsTargeting}
     * @memberof StandardDisplayTargeting
     */
    mobileOsTargeting?: MobileOsTargeting;
    /**
     * 
     * @type {SiteLanguageTargeting}
     * @memberof StandardDisplayTargeting
     */
    siteLanguageTargeting?: SiteLanguageTargeting;
    /**
     * The IAB content category type. IAB content categories enable advertisers to target websites according to their subject matter by scanning their content. This helps deliver ads to relevant sites while ensuring that the ads are not displayed near undesirable content.
     * @type {Array<string>}
     * @memberof StandardDisplayTargeting
     */
    contentTargeting?: Array<string>;
    /**
     * Set to `true` to enable contextual targeting. Contextual targeting targets the detail page of products that are frequently viewed or purchased with the products in your ad. Note that this feature applies to Dynamic eCommerce ads only.
     * @type {boolean}
     * @memberof StandardDisplayTargeting
     */
    contextualTargeting?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum StandardDisplayTargetingDeviceTypeTargetingEnum {
    DesktopAndMobile = 'DESKTOP_AND_MOBILE',
    Mobile = 'MOBILE',
    Desktop = 'DESKTOP'
}

/**
 * 
 * @export
 * @interface StandardDisplayTargetingV3
 */
export interface StandardDisplayTargetingV3 {
    /**
     * 
     * @type {UserLocationTargetingV3}
     * @memberof StandardDisplayTargetingV3
     */
    userLocationTargeting?: UserLocationTargetingV3;
    /**
     * 
     * @type {AmazonViewabilityTargeting}
     * @memberof StandardDisplayTargetingV3
     */
    amazonViewabilityTargeting?: AmazonViewabilityTargeting;
    /**
     * 
     * @type {StandardDisplayThirdPartyPreBidTargeting}
     * @memberof StandardDisplayTargetingV3
     */
    thirdPartyPreBidTargeting?: StandardDisplayThirdPartyPreBidTargeting;
    /**
     * 
     * @type {SupplyTargeting}
     * @memberof StandardDisplayTargetingV3
     */
    supplyTargeting?: SupplyTargeting;
    /**
     * 
     * @type {GeoLocationTargeting}
     * @memberof StandardDisplayTargetingV3
     */
    geoLocationTargeting?: GeoLocationTargeting;
    /**
     * 
     * @type {SegmentTargeting}
     * @memberof StandardDisplayTargetingV3
     */
    segmentTargeting?: SegmentTargeting;
    /**
     * 
     * @type {DayPartTargeting}
     * @memberof StandardDisplayTargetingV3
     */
    dayPartTargeting?: DayPartTargeting;
    /**
     * 
     * @type {DomainList}
     * @memberof StandardDisplayTargetingV3
     */
    domainListTargeting?: DomainList;
    /**
     * The targeted device type for standard display line item type. It is required input for `STANDARD_DISPLAY` line item type.
     * @type {string}
     * @memberof StandardDisplayTargetingV3
     */
    deviceTypeTargeting?: StandardDisplayTargetingV3DeviceTypeTargetingEnum;
    /**
     * 
     * @type {MobileOsTargeting}
     * @memberof StandardDisplayTargetingV3
     */
    mobileOsTargeting?: MobileOsTargeting;
    /**
     * 
     * @type {SiteLanguageTargetingV3}
     * @memberof StandardDisplayTargetingV3
     */
    siteLanguageTargeting?: SiteLanguageTargetingV3;
    /**
     * The IAB content category type. IAB content categories enable advertisers to target websites according to their subject matter by scanning their content. This helps deliver ads to relevant sites while ensuring that the ads are not displayed near undesirable content.
     * @type {Array<string>}
     * @memberof StandardDisplayTargetingV3
     */
    contentTargeting?: Array<string>;
    /**
     * Set to `true` to enable contextual targeting. Contextual targeting targets the detail page of products that are frequently viewed or purchased with the products in your ad. Note that this feature applies to Dynamic eCommerce ads only.
     * @type {boolean}
     * @memberof StandardDisplayTargetingV3
     */
    contextualTargeting?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum StandardDisplayTargetingV3DeviceTypeTargetingEnum {
    DesktopAndMobile = 'DESKTOP_AND_MOBILE',
    Mobile = 'MOBILE',
    Desktop = 'DESKTOP'
}

/**
 * Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
 * @export
 * @interface StandardDisplayThirdPartyPreBidTargeting
 */
export interface StandardDisplayThirdPartyPreBidTargeting {
    /**
     * 
     * @type {StandardDisplayDoubleVerify}
     * @memberof StandardDisplayThirdPartyPreBidTargeting
     */
    doubleVerify?: StandardDisplayDoubleVerify;
    /**
     * 
     * @type {OracleDataCloud}
     * @memberof StandardDisplayThirdPartyPreBidTargeting
     */
    oracleDataCloud?: OracleDataCloud;
    /**
     * 
     * @type {StandardDisplayIntegralAdScience}
     * @memberof StandardDisplayThirdPartyPreBidTargeting
     */
    integralAdScience?: StandardDisplayIntegralAdScience;
}
/**
 * The sub error object.
 * @export
 * @interface SubError
 */
export interface SubError {
    /**
     * 
     * @type {string}
     * @memberof SubError
     */
    errorType: string;
    /**
     * 
     * @type {string}
     * @memberof SubError
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof SubError
     */
    fieldName?: string;
}
/**
 * 
 * @export
 * @interface SupplyDealTargeting
 */
export interface SupplyDealTargeting {
    /**
     * The list of deal supply sources to target.
     * @type {Array<string>}
     * @memberof SupplyDealTargeting
     */
    deals?: Array<string>;
}
/**
 * 
 * @export
 * @interface SupplySource
 */
export interface SupplySource {
    /**
     * ID of the supply source item
     * @type {string}
     * @memberof SupplySource
     */
    id?: string;
    /**
     * User friendly name of the supply source item
     * @type {string}
     * @memberof SupplySource
     */
    name?: string;
    /**
     * Type of this item
     * @type {string}
     * @memberof SupplySource
     */
    supplySourceType?: SupplySourceSupplySourceTypeEnum;
    /**
     * 
     * @type {DealInfo}
     * @memberof SupplySource
     */
    dealInfo?: DealInfo;
}

/**
    * @export
    * @enum {string}
    */
export enum SupplySourceSupplySourceTypeEnum {
    AmazonExclusive = 'AMAZON_EXCLUSIVE',
    OpenExchange = 'OPEN_EXCHANGE',
    Deal = 'DEAL'
}

/**
 * 
 * @export
 * @interface SupplySourceResponse
 */
export interface SupplySourceResponse {
    /**
     * 
     * @type {string}
     * @memberof SupplySourceResponse
     */
    nextToken?: string;
    /**
     * Array of supply source items sorted by deal start time (if available) then ID, ascending.
     * @type {Array<SupplySource>}
     * @memberof SupplySourceResponse
     */
    supplySources?: Array<SupplySource>;
}
/**
 * 
 * @export
 * @interface SupplySourceResponseV11
 */
export interface SupplySourceResponseV11 {
    /**
     * 
     * @type {string}
     * @memberof SupplySourceResponseV11
     */
    nextToken?: string;
    /**
     * Array of supply source items sorted by deal start time (if available) then ID, ascending.
     * @type {Array<SupplySource>}
     * @memberof SupplySourceResponseV11
     */
    supplySources?: Array<SupplySource>;
}
/**
 * 
 * @export
 * @interface SupplySourceTargeting
 */
export interface SupplySourceTargeting {
    /**
     * The list of supply sources to target.
     * @type {Array<string>}
     * @memberof SupplySourceTargeting
     */
    supplySources?: Array<string>;
}
/**
 * 
 * @export
 * @interface SupplyTargeting
 */
export interface SupplyTargeting {
    /**
     * 
     * @type {SupplySourceTargeting}
     * @memberof SupplyTargeting
     */
    supplySourceTargeting?: SupplySourceTargeting;
    /**
     * 
     * @type {SupplyDealTargeting}
     * @memberof SupplyTargeting
     */
    supplyDealTargeting?: SupplyDealTargeting;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum SupportedLineItemTypes {
    StandardDisplay = 'STANDARD_DISPLAY',
    AmazonMobileDisplay = 'AMAZON_MOBILE_DISPLAY',
    AapMobileApp = 'AAP_MOBILE_APP',
    Video = 'VIDEO'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum SupportedPolicyType {
    Product = 'PRODUCT'
}

/**
 * The product feature type.
 * @export
 * @enum {string}
 */

export enum SupportedProductAssociationV1 {
    Featured = 'FEATURED',
    NotFeatured = 'NOT_FEATURED',
    FeaturedWithVariation = 'FEATURED_WITH_VARIATION'
}

/**
 * The ASIN domain type.
 * @export
 * @enum {string}
 */

export enum SupportedProductTrackingDomainV1 {
    AmazonUs = 'AMAZON_US',
    AmazonCa = 'AMAZON_CA',
    AmazonMx = 'AMAZON_MX',
    PrimeNowUs = 'PRIME_NOW_US',
    PrimeNowCa = 'PRIME_NOW_CA',
    WholeFoodsMarketUs = 'WHOLE_FOODS_MARKET_US',
    FreshStoresUs = 'FRESH_STORES_US',
    PrimeVideoRowNa = 'PRIME_VIDEO_ROW_NA'
}

/**
 * Third-party fees enable the platform to apply an additional fee. For example, a third-party vendor fee for ad verification, an agency markup fee, and the like.
 * @export
 * @interface ThirdPartyFee
 */
export interface ThirdPartyFee {
    /**
     * The provider name.
     * @type {string}
     * @memberof ThirdPartyFee
     */
    providerName: ThirdPartyFeeProviderNameEnum;
    /**
     * The fee amount associated a third-party provider.
     * @type {number}
     * @memberof ThirdPartyFee
     */
    feeAmount: number;
    /**
     * The type of fee allocation.
     * @type {string}
     * @memberof ThirdPartyFee
     */
    feeAllocation: ThirdPartyFeeFeeAllocationEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ThirdPartyFeeProviderNameEnum {
    IntegralAdScience = 'INTEGRAL_AD_SCIENCE',
    DoubleVerify = 'DOUBLE_VERIFY',
    DoubleClickCampaignManager = 'DOUBLE_CLICK_CAMPAIGN_MANAGER',
    ComScore = 'COM_SCORE',
    Cpm1 = 'CPM_1',
    Cpm2 = 'CPM_2',
    Cpm3 = 'CPM_3'
}
/**
    * @export
    * @enum {string}
    */
export enum ThirdPartyFeeFeeAllocationEnum {
    AbsorbWithAgencyFee = 'ABSORB_WITH_AGENCY_FEE',
    PassToAdvertiser = 'PASS_TO_ADVERTISER'
}

/**
 * Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
 * @export
 * @interface ThirdPartyPreBidTargeting
 */
export interface ThirdPartyPreBidTargeting {
    /**
     * 
     * @type {DoubleVerify}
     * @memberof ThirdPartyPreBidTargeting
     */
    doubleVerify?: DoubleVerify;
    /**
     * 
     * @type {OracleDataCloud}
     * @memberof ThirdPartyPreBidTargeting
     */
    oracleDataCloud?: OracleDataCloud;
    /**
     * 
     * @type {IntegralAdScience}
     * @memberof ThirdPartyPreBidTargeting
     */
    integralAdScience?: IntegralAdScience;
}
/**
 * 
 * @export
 * @interface ThirdPartyPreBidTargetingV21
 */
export interface ThirdPartyPreBidTargetingV21 {
    /**
     * 
     * @type {DoubleVerifyV21}
     * @memberof ThirdPartyPreBidTargetingV21
     */
    doubleVerify?: DoubleVerifyV21;
    /**
     * 
     * @type {OracleDataCloud}
     * @memberof ThirdPartyPreBidTargetingV21
     */
    oracleDataCloud?: OracleDataCloud;
    /**
     * 
     * @type {IntegralAdScience}
     * @memberof ThirdPartyPreBidTargetingV21
     */
    integralAdScience?: IntegralAdScience;
}
/**
 * The geographical location type of Amazon customers targeted. For example, `US`, `EVERYWHERE`, `NON-US`.
 * @export
 * @enum {string}
 */

export enum UserLocationTargeting {
    Us = 'US',
    Everywhere = 'EVERYWHERE',
    NonUs = 'NON_US'
}

/**
 * The geographical location type of Amazon customers targeted. For example, US advertisers can choose from `US`, `EVERYWHERE`, `NON-US`; Canada advertisers can choose from `CA`, `EVERYWHERE`; Mexico advertisers can choose from `MX`, `EVERYWHERE`; Brazil advertisers can choose from `BR`, `EVERYWHERE`.
 * @export
 * @interface UserLocationTargetingV3
 */
export interface UserLocationTargetingV3 {
}
/**
 * Double Verify (DV) is a third party provider for digital ad verification. Double Verify offers technologies that drive high-quality advertising media.
 * @export
 * @interface VideoDoubleVerify
 */
export interface VideoDoubleVerify {
    /**
     * 
     * @type {VideoDoubleVerifyBrandSafety}
     * @memberof VideoDoubleVerify
     */
    brandSafety?: VideoDoubleVerifyBrandSafety;
    /**
     * 
     * @type {DoubleVerifyFraudInvalidTraffic}
     * @memberof VideoDoubleVerify
     */
    fraudInvalidTraffic?: DoubleVerifyFraudInvalidTraffic;
    /**
     * 
     * @type {DoubleVerifyAuthenticBrandSafety}
     * @memberof VideoDoubleVerify
     */
    authenticBrandSafety?: DoubleVerifyAuthenticBrandSafety;
    /**
     * 
     * @type {DoubleVerifyViewabilityV21}
     * @memberof VideoDoubleVerify
     */
    viewability?: DoubleVerifyViewabilityV21;
    /**
     * The custom segment identifier.
     * @type {string}
     * @memberof VideoDoubleVerify
     */
    customContextualSegmentId?: string;
}
/**
 * 
 * @export
 * @interface VideoDoubleVerifyBrandSafety
 */
export interface VideoDoubleVerifyBrandSafety {
    /**
     * A list of content categories to exclude from targeting.
     * @type {Array<string>}
     * @memberof VideoDoubleVerifyBrandSafety
     */
    contentCategories?: Array<VideoDoubleVerifyBrandSafetyContentCategoriesEnum>;
    /**
     * A map from content categories to risk level to exclude from targeting. Available keys are: [`ADULT_CONTENT`, `ALCOHOL`, `CRIME`, `DISASTER_AVIATION`, `DISASTER_MAN_MADE`, `DISASTER_NATURAL`, `DISASTER_TERRORIST_EVENTS`, `DISASTER_VEHICLE`, `HATE_SPEECH`, `PROFANITY`, `SUBSTANCE_ABUSE`, `TOBACCO_ECIGARETTES`, `VIOLENCE_EXTREME_GRAPHIC`]
     * @type {{ [key: string]: BrandSuitabilityRiskLevel; }}
     * @memberof VideoDoubleVerifyBrandSafety
     */
    contentCategoriesWithRisk?: { [key: string]: BrandSuitabilityRiskLevel; };
    /**
     * Set to `true` to exclude unknown content.
     * @type {boolean}
     * @memberof VideoDoubleVerifyBrandSafety
     */
    unknownContent?: boolean;
    /**
     * A list of app age ratings to be used for excluding apps. For example, `TEENS_12_PLUS` will only exclude apps with content rated for everyone ages 12 and over. `UNKNOWN` will exclude apps with content unrated or unknown to Double Verify.
     * @type {Array<string>}
     * @memberof VideoDoubleVerifyBrandSafety
     */
    appAgeRating?: Array<VideoDoubleVerifyBrandSafetyAppAgeRatingEnum>;
    /**
     * 
     * @type {DvBrandSafetyAppStarRating}
     * @memberof VideoDoubleVerifyBrandSafety
     */
    appStarRating?: DvBrandSafetyAppStarRating;
    /**
     * Set to `true` to exclude unofficial apps or apps with insufficient user ratings (<100 lifetime).
     * @type {boolean}
     * @memberof VideoDoubleVerifyBrandSafety
     */
    excludeAppsWithInsufficientRating?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum VideoDoubleVerifyBrandSafetyContentCategoriesEnum {
    AdServer = 'AD_SERVER',
    CelebrityGossip = 'CELEBRITY_GOSSIP',
    CultsSurvivalism = 'CULTS_SURVIVALISM',
    Gambling = 'GAMBLING',
    IncentivizedMalwareClutter = 'INCENTIVIZED_MALWARE_CLUTTER',
    InflammatoryPoliticsNews = 'INFLAMMATORY_POLITICS_NEWS',
    NegativeNewsFinancial = 'NEGATIVE_NEWS_FINANCIAL',
    NegativeNewsPharmaceutical = 'NEGATIVE_NEWS_PHARMACEUTICAL',
    NonStandardContentNonEnglish = 'NON_STANDARD_CONTENT_NON_ENGLISH',
    NonStandardContentParkingPage = 'NON_STANDARD_CONTENT_PARKING_PAGE',
    Occult = 'OCCULT',
    PiracyCopyrightInfringement = 'PIRACY_COPYRIGHT_INFRINGEMENT',
    UnmoderatedUgcForumsImagesVideo = 'UNMODERATED_UGC_FORUMS_IMAGES_VIDEO'
}
/**
    * @export
    * @enum {string}
    */
export enum VideoDoubleVerifyBrandSafetyAppAgeRatingEnum {
    Everyone4Plus = 'EVERYONE_4_PLUS',
    Tweens9Plus = 'TWEENS_9_PLUS',
    Teens12Plus = 'TEENS_12_PLUS',
    Mature17Plus = 'MATURE_17_PLUS',
    AdultsOnly18Plus = 'ADULTS_ONLY_18_PLUS',
    Unknown = 'UNKNOWN'
}

/**
 * Integral Ad Science (IAS) is a third party provider in digital ad verification. IAS offers technologies to drive high-quality advertising media.
 * @export
 * @interface VideoIntegralAdScience
 */
export interface VideoIntegralAdScience {
    /**
     * 
     * @type {IasFraudInvalidTraffic}
     * @memberof VideoIntegralAdScience
     */
    fraudInvalidTraffic?: IasFraudInvalidTraffic;
    /**
     * 
     * @type {IasBrandSafetyV3}
     * @memberof VideoIntegralAdScience
     */
    brandSafety?: IasBrandSafetyV3;
    /**
     * 
     * @type {IasViewability}
     * @memberof VideoIntegralAdScience
     */
    viewability?: IasViewability;
}
/**
 * This field is available since version `application/vnd.dsplineitems.v2.1+json`.
 * @export
 * @interface VideoTargeting
 */
export interface VideoTargeting {
    /**
     * 
     * @type {UserLocationTargeting}
     * @memberof VideoTargeting
     */
    userLocationTargeting?: UserLocationTargeting;
    /**
     * 
     * @type {AmazonViewabilityTargeting}
     * @memberof VideoTargeting
     */
    amazonViewabilityTargeting?: AmazonViewabilityTargeting;
    /**
     * 
     * @type {ThirdPartyPreBidTargetingV21}
     * @memberof VideoTargeting
     */
    thirdPartyPreBidTargeting?: ThirdPartyPreBidTargetingV21;
    /**
     * 
     * @type {SupplyTargeting}
     * @memberof VideoTargeting
     */
    supplyTargeting?: SupplyTargeting;
    /**
     * 
     * @type {GeoLocationTargeting}
     * @memberof VideoTargeting
     */
    geoLocationTargeting?: GeoLocationTargeting;
    /**
     * 
     * @type {SegmentTargeting}
     * @memberof VideoTargeting
     */
    segmentTargeting?: SegmentTargeting;
    /**
     * 
     * @type {DayPartTargeting}
     * @memberof VideoTargeting
     */
    dayPartTargeting?: DayPartTargeting;
    /**
     * 
     * @type {DomainList}
     * @memberof VideoTargeting
     */
    domainListTargeting?: DomainList;
    /**
     * The targeted device type for video line item type. A list of device types can be provided.
     * @type {Array<string>}
     * @memberof VideoTargeting
     */
    deviceTypeTargeting?: Array<VideoTargetingDeviceTypeTargetingEnum>;
    /**
     * The targeted mobile environment for video line item type. It is required only when `MOBILE` device type is selected.
     * @type {Array<string>}
     * @memberof VideoTargeting
     */
    mobileEnvironmentTargeting?: Array<VideoTargetingMobileEnvironmentTargetingEnum>;
    /**
     * 
     * @type {SiteLanguageTargeting}
     * @memberof VideoTargeting
     */
    siteLanguageTargeting?: SiteLanguageTargeting;
    /**
     * The IAB content category type. IAB content categories enable advertisers to target websites according to their subject matter by scanning their content. This helps deliver ads to relevant sites while ensuring that the ads are not displayed near undesirable content.
     * @type {Array<string>}
     * @memberof VideoTargeting
     */
    contentTargeting?: Array<string>;
    /**
     * Target video inventory by how the video will be started. A list can be provided. If ANY is selected, no other type can be provided.
     * @type {Array<string>}
     * @memberof VideoTargeting
     */
    videoInitiationTypeTargeting?: Array<VideoTargetingVideoInitiationTypeTargetingEnum>;
    /**
     * Target a specific type of ad slot used to serve the video. A list can be provided.
     * @type {Array<string>}
     * @memberof VideoTargeting
     */
    videoAdFormatTargeting?: Array<VideoTargetingVideoAdFormatTargetingEnum>;
    /**
     * Limit IN STREAM ad slot to full episode players (FEP).
     * @type {boolean}
     * @memberof VideoTargeting
     */
    limitToFepTargeting?: boolean;
    /**
     * Target video inventory by publisher’s player size. A list can be provided.
     * @type {Array<string>}
     * @memberof VideoTargeting
     */
    videoPlayerSizeTargeting?: Array<VideoTargetingVideoPlayerSizeTargetingEnum>;
    /**
     * These are predictions based on machine learning and aren’t guaranteed. Selecting a higher percentage limits overall reach.
     * @type {string}
     * @memberof VideoTargeting
     */
    videoCompletionTargeting?: VideoTargetingVideoCompletionTargetingEnum;
    /**
     * 
     * @type {OttTargeting}
     * @memberof VideoTargeting
     */
    ottTargeting?: OttTargeting;
}

/**
    * @export
    * @enum {string}
    */
export enum VideoTargetingDeviceTypeTargetingEnum {
    Mobile = 'MOBILE',
    Desktop = 'DESKTOP',
    ConnectedTv = 'CONNECTED_TV'
}
/**
    * @export
    * @enum {string}
    */
export enum VideoTargetingMobileEnvironmentTargetingEnum {
    Web = 'WEB',
    App = 'APP'
}
/**
    * @export
    * @enum {string}
    */
export enum VideoTargetingVideoInitiationTypeTargetingEnum {
    Any = 'ANY',
    UserInitiatedOnly = 'USER_INITIATED_ONLY',
    AutoplayOnly = 'AUTOPLAY_ONLY',
    Unknown = 'UNKNOWN'
}
/**
    * @export
    * @enum {string}
    */
export enum VideoTargetingVideoAdFormatTargetingEnum {
    InStream = 'IN_STREAM',
    OutStream = 'OUT_STREAM',
    InStreamAndOutStream = 'IN_STREAM_AND_OUT_STREAM'
}
/**
    * @export
    * @enum {string}
    */
export enum VideoTargetingVideoPlayerSizeTargetingEnum {
    Any = 'ANY',
    Small = 'SMALL',
    Medium = 'MEDIUM',
    Large = 'LARGE',
    Unknown = 'UNKNOWN'
}
/**
    * @export
    * @enum {string}
    */
export enum VideoTargetingVideoCompletionTargetingEnum {
    NoTargeting = 'NO_TARGETING',
    VideoCompletionGte10 = 'VIDEO_COMPLETION_GTE_10',
    VideoCompletionGte20 = 'VIDEO_COMPLETION_GTE_20',
    VideoCompletionGte30 = 'VIDEO_COMPLETION_GTE_30',
    VideoCompletionGte40 = 'VIDEO_COMPLETION_GTE_40',
    VideoCompletionGte50 = 'VIDEO_COMPLETION_GTE_50',
    VideoCompletionGte60 = 'VIDEO_COMPLETION_GTE_60',
    VideoCompletionGte70 = 'VIDEO_COMPLETION_GTE_70',
    VideoCompletionGte80 = 'VIDEO_COMPLETION_GTE_80',
    VideoCompletionGte90 = 'VIDEO_COMPLETION_GTE_90'
}

/**
 * This field is available since version `application/vnd.dsplineitems.v2.1+json`.
 * @export
 * @interface VideoTargetingV3
 */
export interface VideoTargetingV3 {
    /**
     * 
     * @type {UserLocationTargetingV3}
     * @memberof VideoTargetingV3
     */
    userLocationTargeting?: UserLocationTargetingV3;
    /**
     * 
     * @type {AmazonViewabilityTargeting}
     * @memberof VideoTargetingV3
     */
    amazonViewabilityTargeting?: AmazonViewabilityTargeting;
    /**
     * 
     * @type {VideoThirdPartyPreBidTargeting}
     * @memberof VideoTargetingV3
     */
    thirdPartyPreBidTargeting?: VideoThirdPartyPreBidTargeting;
    /**
     * 
     * @type {SupplyTargeting}
     * @memberof VideoTargetingV3
     */
    supplyTargeting?: SupplyTargeting;
    /**
     * 
     * @type {GeoLocationTargeting}
     * @memberof VideoTargetingV3
     */
    geoLocationTargeting?: GeoLocationTargeting;
    /**
     * 
     * @type {SegmentTargeting}
     * @memberof VideoTargetingV3
     */
    segmentTargeting?: SegmentTargeting;
    /**
     * 
     * @type {DayPartTargeting}
     * @memberof VideoTargetingV3
     */
    dayPartTargeting?: DayPartTargeting;
    /**
     * 
     * @type {DomainList}
     * @memberof VideoTargetingV3
     */
    domainListTargeting?: DomainList;
    /**
     * The targeted device type for video line item type. A list of device types can be provided.
     * @type {Array<string>}
     * @memberof VideoTargetingV3
     */
    deviceTypeTargeting?: Array<VideoTargetingV3DeviceTypeTargetingEnum>;
    /**
     * The targeted mobile environment for video line item type. It is required only when `MOBILE` device type is selected.
     * @type {Array<string>}
     * @memberof VideoTargetingV3
     */
    mobileEnvironmentTargeting?: Array<VideoTargetingV3MobileEnvironmentTargetingEnum>;
    /**
     * 
     * @type {SiteLanguageTargetingV3}
     * @memberof VideoTargetingV3
     */
    siteLanguageTargeting?: SiteLanguageTargetingV3;
    /**
     * The IAB content category type. IAB content categories enable advertisers to target websites according to their subject matter by scanning their content. This helps deliver ads to relevant sites while ensuring that the ads are not displayed near undesirable content.
     * @type {Array<string>}
     * @memberof VideoTargetingV3
     */
    contentTargeting?: Array<string>;
    /**
     * Target video inventory by how the video will be started. A list can be provided. If ANY is selected, no other type can be provided.
     * @type {Array<string>}
     * @memberof VideoTargetingV3
     */
    videoInitiationTypeTargeting?: Array<VideoTargetingV3VideoInitiationTypeTargetingEnum>;
    /**
     * Target a specific type of ad slot used to serve the video. A list can be provided.
     * @type {Array<string>}
     * @memberof VideoTargetingV3
     */
    videoAdFormatTargeting?: Array<VideoTargetingV3VideoAdFormatTargetingEnum>;
    /**
     * Limit IN STREAM ad slot to full episode players (FEP).
     * @type {boolean}
     * @memberof VideoTargetingV3
     */
    limitToFepTargeting?: boolean;
    /**
     * Target video inventory by publisher’s player size. A list can be provided.
     * @type {Array<string>}
     * @memberof VideoTargetingV3
     */
    videoPlayerSizeTargeting?: Array<VideoTargetingV3VideoPlayerSizeTargetingEnum>;
    /**
     * These are predictions based on machine learning and aren’t guaranteed. Selecting a higher percentage limits overall reach.
     * @type {string}
     * @memberof VideoTargetingV3
     */
    videoCompletionTargeting?: VideoTargetingV3VideoCompletionTargetingEnum;
    /**
     * 
     * @type {OttTargeting}
     * @memberof VideoTargetingV3
     */
    ottTargeting?: OttTargeting;
}

/**
    * @export
    * @enum {string}
    */
export enum VideoTargetingV3DeviceTypeTargetingEnum {
    Mobile = 'MOBILE',
    Desktop = 'DESKTOP',
    ConnectedTv = 'CONNECTED_TV'
}
/**
    * @export
    * @enum {string}
    */
export enum VideoTargetingV3MobileEnvironmentTargetingEnum {
    Web = 'WEB',
    App = 'APP'
}
/**
    * @export
    * @enum {string}
    */
export enum VideoTargetingV3VideoInitiationTypeTargetingEnum {
    Any = 'ANY',
    UserInitiatedOnly = 'USER_INITIATED_ONLY',
    AutoplayOnly = 'AUTOPLAY_ONLY',
    Unknown = 'UNKNOWN'
}
/**
    * @export
    * @enum {string}
    */
export enum VideoTargetingV3VideoAdFormatTargetingEnum {
    InStream = 'IN_STREAM',
    OutStream = 'OUT_STREAM',
    InStreamAndOutStream = 'IN_STREAM_AND_OUT_STREAM'
}
/**
    * @export
    * @enum {string}
    */
export enum VideoTargetingV3VideoPlayerSizeTargetingEnum {
    Any = 'ANY',
    Small = 'SMALL',
    Medium = 'MEDIUM',
    Large = 'LARGE',
    Unknown = 'UNKNOWN'
}
/**
    * @export
    * @enum {string}
    */
export enum VideoTargetingV3VideoCompletionTargetingEnum {
    NoTargeting = 'NO_TARGETING',
    VideoCompletionGte10 = 'VIDEO_COMPLETION_GTE_10',
    VideoCompletionGte20 = 'VIDEO_COMPLETION_GTE_20',
    VideoCompletionGte30 = 'VIDEO_COMPLETION_GTE_30',
    VideoCompletionGte40 = 'VIDEO_COMPLETION_GTE_40',
    VideoCompletionGte50 = 'VIDEO_COMPLETION_GTE_50',
    VideoCompletionGte60 = 'VIDEO_COMPLETION_GTE_60',
    VideoCompletionGte70 = 'VIDEO_COMPLETION_GTE_70',
    VideoCompletionGte80 = 'VIDEO_COMPLETION_GTE_80',
    VideoCompletionGte90 = 'VIDEO_COMPLETION_GTE_90'
}

/**
 * Amazon DSP automatically filters fraudulent and invalid traffic as well as unsafe content using a combination of proprietary technology and solutions from comScore and Sizmek. This service is available by default and at no extra charge for Amazon DSP customers. You may choose to augment the default filters with pre-bid targeting products offered by third parties. These services are currently offered at no charge.
 * @export
 * @interface VideoThirdPartyPreBidTargeting
 */
export interface VideoThirdPartyPreBidTargeting {
    /**
     * 
     * @type {VideoDoubleVerify}
     * @memberof VideoThirdPartyPreBidTargeting
     */
    doubleVerify?: VideoDoubleVerify;
    /**
     * 
     * @type {OracleDataCloud}
     * @memberof VideoThirdPartyPreBidTargeting
     */
    oracleDataCloud?: OracleDataCloud;
    /**
     * 
     * @type {VideoIntegralAdScience}
     * @memberof VideoThirdPartyPreBidTargeting
     */
    integralAdScience?: VideoIntegralAdScience;
}
/**
 * The type of viewability tier.
 * @export
 * @enum {string}
 */

export enum ViewabilityTier {
    AllowAll = 'ALLOW_ALL',
    ViewabilityTierGt70 = 'VIEWABILITY_TIER_GT70',
    ViewabilityTierGt60 = 'VIEWABILITY_TIER_GT60',
    ViewabilityTierGt50 = 'VIEWABILITY_TIER_GT50',
    ViewabilityTierGt40 = 'VIEWABILITY_TIER_GT40',
    ViewabilityTierLt40 = 'VIEWABILITY_TIER_LT40'
}


/**
 * CreativeApi - axios parameter creator
 * @export
 */
export const CreativeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets one or more creatives.
         * @summary Gets one or more creatives.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [startIndex] Optional. Sets a zero-based offset into the requested set of creatives. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
         * @param {string} [count] Optional. Sets the number of creatives in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creatives set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creatives, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
         * @param {string} [creativeIdFilter] The returned array is filtered to include only creatives with identifiers matching those specified in the comma-delimited string. Either one of (creativeIdFilter or advertiserIdFilter) should be given.
         * @param {string} [advertiserIdFilter] The returned array is filtered to include only creatives with identifiers matching those specified in the comma-delimited string. Either one of (creativeIdFilter or advertiserIdFilter) should be given.
         * @param {SupportedLineItemTypes} [lineItemTypeFilter] The returned array is filtered to include only creatives with line item type matching those specified in the comma-delimited string. If the given filter value is not part of enumeration (LineItemType), Response code will be 404. VIDEO line item type filter is available since version &#x60;application/vnd.dspcreatives.v2.1+json&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreatives: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: string, count?: string, creativeIdFilter?: string, advertiserIdFilter?: string, lineItemTypeFilter?: SupportedLineItemTypes, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getCreatives', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getCreatives', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/creatives/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (creativeIdFilter !== undefined) {
                localVarQueryParameter['creativeIdFilter'] = creativeIdFilter;
            }

            if (advertiserIdFilter !== undefined) {
                localVarQueryParameter['advertiserIdFilter'] = advertiserIdFilter;
            }

            if (lineItemTypeFilter !== undefined) {
                localVarQueryParameter['lineItemTypeFilter'] = lineItemTypeFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreativeApi - functional programming interface
 * @export
 */
export const CreativeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreativeApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets one or more creatives.
         * @summary Gets one or more creatives.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [startIndex] Optional. Sets a zero-based offset into the requested set of creatives. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
         * @param {string} [count] Optional. Sets the number of creatives in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creatives set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creatives, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
         * @param {string} [creativeIdFilter] The returned array is filtered to include only creatives with identifiers matching those specified in the comma-delimited string. Either one of (creativeIdFilter or advertiserIdFilter) should be given.
         * @param {string} [advertiserIdFilter] The returned array is filtered to include only creatives with identifiers matching those specified in the comma-delimited string. Either one of (creativeIdFilter or advertiserIdFilter) should be given.
         * @param {SupportedLineItemTypes} [lineItemTypeFilter] The returned array is filtered to include only creatives with line item type matching those specified in the comma-delimited string. If the given filter value is not part of enumeration (LineItemType), Response code will be 404. VIDEO line item type filter is available since version &#x60;application/vnd.dspcreatives.v2.1+json&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: string, count?: string, creativeIdFilter?: string, advertiserIdFilter?: string, lineItemTypeFilter?: SupportedLineItemTypes, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Creatives>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, creativeIdFilter, advertiserIdFilter, lineItemTypeFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreativeApi - factory interface
 * @export
 */
export const CreativeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreativeApiFp(configuration)
    return {
        /**
         * Gets one or more creatives.
         * @summary Gets one or more creatives.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [startIndex] Optional. Sets a zero-based offset into the requested set of creatives. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
         * @param {string} [count] Optional. Sets the number of creatives in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creatives set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creatives, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
         * @param {string} [creativeIdFilter] The returned array is filtered to include only creatives with identifiers matching those specified in the comma-delimited string. Either one of (creativeIdFilter or advertiserIdFilter) should be given.
         * @param {string} [advertiserIdFilter] The returned array is filtered to include only creatives with identifiers matching those specified in the comma-delimited string. Either one of (creativeIdFilter or advertiserIdFilter) should be given.
         * @param {SupportedLineItemTypes} [lineItemTypeFilter] The returned array is filtered to include only creatives with line item type matching those specified in the comma-delimited string. If the given filter value is not part of enumeration (LineItemType), Response code will be 404. VIDEO line item type filter is available since version &#x60;application/vnd.dspcreatives.v2.1+json&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: string, count?: string, creativeIdFilter?: string, advertiserIdFilter?: string, lineItemTypeFilter?: SupportedLineItemTypes, options?: any): AxiosPromise<Creatives> {
            return localVarFp.getCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, creativeIdFilter, advertiserIdFilter, lineItemTypeFilter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCreatives operation in CreativeApi.
 * @export
 * @interface CreativeApiGetCreativesRequest
 */
export interface CreativeApiGetCreativesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CreativeApiGetCreatives
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof CreativeApiGetCreatives
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a zero-based offset into the requested set of creatives. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
     * @type {string}
     * @memberof CreativeApiGetCreatives
     */
    readonly startIndex?: string

    /**
     * Optional. Sets the number of creatives in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creatives set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creatives, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
     * @type {string}
     * @memberof CreativeApiGetCreatives
     */
    readonly count?: string

    /**
     * The returned array is filtered to include only creatives with identifiers matching those specified in the comma-delimited string. Either one of (creativeIdFilter or advertiserIdFilter) should be given.
     * @type {string}
     * @memberof CreativeApiGetCreatives
     */
    readonly creativeIdFilter?: string

    /**
     * The returned array is filtered to include only creatives with identifiers matching those specified in the comma-delimited string. Either one of (creativeIdFilter or advertiserIdFilter) should be given.
     * @type {string}
     * @memberof CreativeApiGetCreatives
     */
    readonly advertiserIdFilter?: string

    /**
     * The returned array is filtered to include only creatives with line item type matching those specified in the comma-delimited string. If the given filter value is not part of enumeration (LineItemType), Response code will be 404. VIDEO line item type filter is available since version &#x60;application/vnd.dspcreatives.v2.1+json&#x60;.
     * @type {SupportedLineItemTypes}
     * @memberof CreativeApiGetCreatives
     */
    readonly lineItemTypeFilter?: SupportedLineItemTypes
}

/**
 * CreativeApi - object-oriented interface
 * @export
 * @class CreativeApi
 * @extends {BaseAPI}
 */
export class CreativeApi extends BaseAPI {
    /**
     * Gets one or more creatives.
     * @summary Gets one or more creatives.
     * @param {CreativeApiGetCreativesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativeApi
     */
    public getCreatives(requestParameters: CreativeApiGetCreativesRequest, options?: any) {
        return CreativeApiFp(this.configuration).getCreatives(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.creativeIdFilter, requestParameters.advertiserIdFilter, requestParameters.lineItemTypeFilter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DiscoveryApi - axios parameter creator
 * @export
 */
export const DiscoveryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets apps based on app Ids or text querys. Either one of app Ids or text query may be supplied, but not both.
         * @summary Gets apps based on app Id or text query
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<string>} [appIdFilter] An array of app Ids to retrieve, up to 20 in one request.
         * @param {string} [textQuery] Filter by text. Retrieves up to 1000 results in sorted lexicographically, descending order of relevancy. Results may be paginated to retrieve these items in pages, but no query will return more than 1000 items total.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of apps in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,1000] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApps: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, appIdFilter?: Array<string>, textQuery?: string, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getApps', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getApps', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appIdFilter) {
                localVarQueryParameter['appIdFilter'] = appIdFilter.join(COLLECTION_FORMATS.csv);
            }

            if (textQuery !== undefined) {
                localVarQueryParameter['textQuery'] = textQuery;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the list of domain lists for inclusion/exclusion based on entity. Lists are sorted by creation time.
         * @summary Gets the list of domain lists for inclusion/exclusion based on entity
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of domain lists in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomains: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getDomains', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getDomains', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/domainLists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves custom contextual segments pre-bid targeting data for an account that is already linked to Double Verify. If an account is not linked to the provider, no data will be returned.
         * @summary Gets Double Verify provided custom contextual segments for pre-bid targeting.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} advertiserId The advertiser to retrieve pre-bid targeting for.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of segments in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDvCustomContextualSegments: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, advertiserId: string, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getDvCustomContextualSegments', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getDvCustomContextualSegments', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('getDvCustomContextualSegments', 'advertiserId', advertiserId)
            const localVarPath = `/dsp/preBidTargeting/doubleVerify/customContextualSegments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (advertiserId !== undefined) {
                localVarQueryParameter['advertiserId'] = advertiserId;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets locationTargeting objects based on locationTargetingId or text query, such as city name, zip code, or other address text. Either one of locationTargetingId or text query may be supplied, but not both.
         * @summary Gets locationTargeting objects based on locationTargetingId or text query
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<string>} [geoLocationIDFilter] An array of location IDs to retrieve, up to 10 in one request.
         * @param {string} [textQuery] Filter by text such as city, state, country, dma, or postal code. Retrieves top 100 results in decreasing order of relevancy. Results may be paginated to retrieve these items in pages, but no query will return more than 100 items total.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of locations in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeoLocations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, geoLocationIDFilter?: Array<string>, textQuery?: string, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getGeoLocations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getGeoLocations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/geoLocations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (geoLocationIDFilter) {
                localVarQueryParameter['geoLocationIDFilter'] = geoLocationIDFilter;
            }

            if (textQuery !== undefined) {
                localVarQueryParameter['textQuery'] = textQuery;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of configurations that can be applied to orders to optimize for a desired campaign goal, sorted by goal name.
         * @summary Gets possible configurations for campaign goals.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {'SOLD_ON_AMAZON' | 'NOT_SOLD_ON_AMAZON'} productLocation Whether to retrieve the goal configurations available for an endemic (sold on Amazon) or non-endemic order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoalConfigurations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, productLocation: 'SOLD_ON_AMAZON' | 'NOT_SOLD_ON_AMAZON', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getGoalConfigurations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getGoalConfigurations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'productLocation' is not null or undefined
            assertParamExists('getGoalConfigurations', 'productLocation', productLocation)
            const localVarPath = `/dsp/goalConfigurations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (productLocation !== undefined) {
                localVarQueryParameter['productLocation'] = productLocation;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the hierarchy of IAB content categories as a list sorted by ID in ascending order.
         * @summary Gets the hierarchy of IAB content categories.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {DiscoveryLineItemTypes} [lineItemType] The line item type to retrieve content categories for. This was introduced in version - &#x60;application/vnd.dspiabcontentcategories.v1+json&#x60;.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of categories in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,1000] with default as 250. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIabContentCategories: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemType?: DiscoveryLineItemTypes, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getIabContentCategories', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getIabContentCategories', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/iabContentCategories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lineItemType !== undefined) {
                localVarQueryParameter['lineItemType'] = lineItemType;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves custom predict pre-bid targeting data for an account that is already linked to Oracle Data Cloud. If an account is not linked to the provider, no data will be returned.
         * @summary Gets Oracle Data Cloud provided custom predicts for pre-bid targeting.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of segments in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOdcCustomPredicts: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getOdcCustomPredicts', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getOdcCustomPredicts', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/preBidTargeting/oracleDataCloud/customPredicts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of pixels based on filters. AdvertiserIdFilter must be provided. Results are sorted by create time in ascending order (earliest first).
         * @summary Gets a list of pixel objects based on filters
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<string>} advertiserIdFilter The returned array is filtered to include only pixels owned by the advertiserIds specified. Up to 5 advertisers may be specified in a single request, unless pixelIdFilter is also present (see pixelIdFilter).
         * @param {Array<string>} [pixelIdFilter] The returned array is filtered to include only pixels with ID matching those specified in the comma-delimited string. Limited to 25 pixel IDs per request. All pixels specified must belong to the same advertiser and therefore advertiserIdFilter is limited to a single advertiser if pixelIdFilter is non-null.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of pixels in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPixels: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, advertiserIdFilter: Array<string>, pixelIdFilter?: Array<string>, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getPixels', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getPixels', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'advertiserIdFilter' is not null or undefined
            assertParamExists('getPixels', 'advertiserIdFilter', advertiserIdFilter)
            const localVarPath = `/dsp/pixels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (advertiserIdFilter) {
                localVarQueryParameter['advertiserIdFilter'] = advertiserIdFilter.join(COLLECTION_FORMATS.csv);
            }

            if (pixelIdFilter) {
                localVarQueryParameter['pixelIdFilter'] = pixelIdFilter.join(COLLECTION_FORMATS.csv);
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the hierarchy of product category objects as a list sorted by ID in ascending order.
         * @summary Gets the hierarchy of product category objects
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of categories in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,1000] with default as 250. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCategories: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getProductCategories', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getProductCategories', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/productCategories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the supply sources based on line item type, advertiser and supply source type. When the supply source type is deal, orderId must be supplied. The returned list of deal supply sources will be filtered to include only those valid for the advertiser that owns the order and are running during the order dates.
         * @summary Gets the supply sources based on line item type, advertiser and supply source type
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {DiscoveryLineItemTypes} lineItemType Line item type to retrieve supply sources for
         * @param {'AMAZON_EXCLUSIVE' | 'OPEN_EXCHANGE' | 'DEAL'} supplySourceType Type of supply source to retrieve
         * @param {string} [orderId] Required for deal supply source type. The start time of the Order will be used to determine which deals to fetch. Returned deals will be valid for the advertiserId used to create the Order.
         * @param {string} [advertiserId] Optional, but recommended. If specified, the result set of supply sources will be filtered to only those valid for the given advertiserId. If orderId is also provided, the order must belong to the specified advertiser.
         * @param {Array<'DESKTOP' | 'MOBILE' | 'DESKTOP_AND_MOBILE' | 'CONNECTED_TV'>} [deviceTypes] Restricts query to the specified device types. If not specified, all valid device types for a line item type will be returned.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of supply sources in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupplySources: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemType: DiscoveryLineItemTypes, supplySourceType: 'AMAZON_EXCLUSIVE' | 'OPEN_EXCHANGE' | 'DEAL', orderId?: string, advertiserId?: string, deviceTypes?: Array<'DESKTOP' | 'MOBILE' | 'DESKTOP_AND_MOBILE' | 'CONNECTED_TV'>, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getSupplySources', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getSupplySources', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'lineItemType' is not null or undefined
            assertParamExists('getSupplySources', 'lineItemType', lineItemType)
            // verify required parameter 'supplySourceType' is not null or undefined
            assertParamExists('getSupplySources', 'supplySourceType', supplySourceType)
            const localVarPath = `/dsp/supplySources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lineItemType !== undefined) {
                localVarQueryParameter['lineItemType'] = lineItemType;
            }

            if (supplySourceType !== undefined) {
                localVarQueryParameter['supplySourceType'] = supplySourceType;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (advertiserId !== undefined) {
                localVarQueryParameter['advertiserId'] = advertiserId;
            }

            if (deviceTypes) {
                localVarQueryParameter['deviceTypes'] = deviceTypes.join(COLLECTION_FORMATS.csv);
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DiscoveryApi - functional programming interface
 * @export
 */
export const DiscoveryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DiscoveryApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets apps based on app Ids or text querys. Either one of app Ids or text query may be supplied, but not both.
         * @summary Gets apps based on app Id or text query
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<string>} [appIdFilter] An array of app Ids to retrieve, up to 20 in one request.
         * @param {string} [textQuery] Filter by text. Retrieves up to 1000 results in sorted lexicographically, descending order of relevancy. Results may be paginated to retrieve these items in pages, but no query will return more than 1000 items total.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of apps in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,1000] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApps(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, appIdFilter?: Array<string>, textQuery?: string, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Apps>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApps(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, appIdFilter, textQuery, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the list of domain lists for inclusion/exclusion based on entity. Lists are sorted by creation time.
         * @summary Gets the list of domain lists for inclusion/exclusion based on entity
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of domain lists in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDomains(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDomains(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves custom contextual segments pre-bid targeting data for an account that is already linked to Double Verify. If an account is not linked to the provider, no data will be returned.
         * @summary Gets Double Verify provided custom contextual segments for pre-bid targeting.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} advertiserId The advertiser to retrieve pre-bid targeting for.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of segments in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDvCustomContextualSegments(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, advertiserId: string, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DvCustomContextualSegments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDvCustomContextualSegments(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, advertiserId, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets locationTargeting objects based on locationTargetingId or text query, such as city name, zip code, or other address text. Either one of locationTargetingId or text query may be supplied, but not both.
         * @summary Gets locationTargeting objects based on locationTargetingId or text query
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<string>} [geoLocationIDFilter] An array of location IDs to retrieve, up to 10 in one request.
         * @param {string} [textQuery] Filter by text such as city, state, country, dma, or postal code. Retrieves top 100 results in decreasing order of relevancy. Results may be paginated to retrieve these items in pages, but no query will return more than 100 items total.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of locations in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGeoLocations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, geoLocationIDFilter?: Array<string>, textQuery?: string, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGeoLocations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, geoLocationIDFilter, textQuery, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a list of configurations that can be applied to orders to optimize for a desired campaign goal, sorted by goal name.
         * @summary Gets possible configurations for campaign goals.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {'SOLD_ON_AMAZON' | 'NOT_SOLD_ON_AMAZON'} productLocation Whether to retrieve the goal configurations available for an endemic (sold on Amazon) or non-endemic order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGoalConfigurations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, productLocation: 'SOLD_ON_AMAZON' | 'NOT_SOLD_ON_AMAZON', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGoalConfigurations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, productLocation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the hierarchy of IAB content categories as a list sorted by ID in ascending order.
         * @summary Gets the hierarchy of IAB content categories.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {DiscoveryLineItemTypes} [lineItemType] The line item type to retrieve content categories for. This was introduced in version - &#x60;application/vnd.dspiabcontentcategories.v1+json&#x60;.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of categories in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,1000] with default as 250. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIabContentCategories(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemType?: DiscoveryLineItemTypes, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIabContentCategories(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemType, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves custom predict pre-bid targeting data for an account that is already linked to Oracle Data Cloud. If an account is not linked to the provider, no data will be returned.
         * @summary Gets Oracle Data Cloud provided custom predicts for pre-bid targeting.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of segments in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOdcCustomPredicts(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OdcCustomPredicts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOdcCustomPredicts(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a list of pixels based on filters. AdvertiserIdFilter must be provided. Results are sorted by create time in ascending order (earliest first).
         * @summary Gets a list of pixel objects based on filters
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<string>} advertiserIdFilter The returned array is filtered to include only pixels owned by the advertiserIds specified. Up to 5 advertisers may be specified in a single request, unless pixelIdFilter is also present (see pixelIdFilter).
         * @param {Array<string>} [pixelIdFilter] The returned array is filtered to include only pixels with ID matching those specified in the comma-delimited string. Limited to 25 pixel IDs per request. All pixels specified must belong to the same advertiser and therefore advertiserIdFilter is limited to a single advertiser if pixelIdFilter is non-null.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of pixels in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPixels(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, advertiserIdFilter: Array<string>, pixelIdFilter?: Array<string>, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPixels(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, advertiserIdFilter, pixelIdFilter, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the hierarchy of product category objects as a list sorted by ID in ascending order.
         * @summary Gets the hierarchy of product category objects
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of categories in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,1000] with default as 250. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductCategories(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductCategories(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the supply sources based on line item type, advertiser and supply source type. When the supply source type is deal, orderId must be supplied. The returned list of deal supply sources will be filtered to include only those valid for the advertiser that owns the order and are running during the order dates.
         * @summary Gets the supply sources based on line item type, advertiser and supply source type
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {DiscoveryLineItemTypes} lineItemType Line item type to retrieve supply sources for
         * @param {'AMAZON_EXCLUSIVE' | 'OPEN_EXCHANGE' | 'DEAL'} supplySourceType Type of supply source to retrieve
         * @param {string} [orderId] Required for deal supply source type. The start time of the Order will be used to determine which deals to fetch. Returned deals will be valid for the advertiserId used to create the Order.
         * @param {string} [advertiserId] Optional, but recommended. If specified, the result set of supply sources will be filtered to only those valid for the given advertiserId. If orderId is also provided, the order must belong to the specified advertiser.
         * @param {Array<'DESKTOP' | 'MOBILE' | 'DESKTOP_AND_MOBILE' | 'CONNECTED_TV'>} [deviceTypes] Restricts query to the specified device types. If not specified, all valid device types for a line item type will be returned.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of supply sources in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupplySources(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemType: DiscoveryLineItemTypes, supplySourceType: 'AMAZON_EXCLUSIVE' | 'OPEN_EXCHANGE' | 'DEAL', orderId?: string, advertiserId?: string, deviceTypes?: Array<'DESKTOP' | 'MOBILE' | 'DESKTOP_AND_MOBILE' | 'CONNECTED_TV'>, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplySourceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSupplySources(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemType, supplySourceType, orderId, advertiserId, deviceTypes, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DiscoveryApi - factory interface
 * @export
 */
export const DiscoveryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DiscoveryApiFp(configuration)
    return {
        /**
         * Gets apps based on app Ids or text querys. Either one of app Ids or text query may be supplied, but not both.
         * @summary Gets apps based on app Id or text query
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<string>} [appIdFilter] An array of app Ids to retrieve, up to 20 in one request.
         * @param {string} [textQuery] Filter by text. Retrieves up to 1000 results in sorted lexicographically, descending order of relevancy. Results may be paginated to retrieve these items in pages, but no query will return more than 1000 items total.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of apps in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,1000] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApps(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, appIdFilter?: Array<string>, textQuery?: string, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<Apps> {
            return localVarFp.getApps(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, appIdFilter, textQuery, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the list of domain lists for inclusion/exclusion based on entity. Lists are sorted by creation time.
         * @summary Gets the list of domain lists for inclusion/exclusion based on entity
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of domain lists in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDomains(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getDomains(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves custom contextual segments pre-bid targeting data for an account that is already linked to Double Verify. If an account is not linked to the provider, no data will be returned.
         * @summary Gets Double Verify provided custom contextual segments for pre-bid targeting.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} advertiserId The advertiser to retrieve pre-bid targeting for.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of segments in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDvCustomContextualSegments(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, advertiserId: string, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<DvCustomContextualSegments> {
            return localVarFp.getDvCustomContextualSegments(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, advertiserId, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets locationTargeting objects based on locationTargetingId or text query, such as city name, zip code, or other address text. Either one of locationTargetingId or text query may be supplied, but not both.
         * @summary Gets locationTargeting objects based on locationTargetingId or text query
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<string>} [geoLocationIDFilter] An array of location IDs to retrieve, up to 10 in one request.
         * @param {string} [textQuery] Filter by text such as city, state, country, dma, or postal code. Retrieves top 100 results in decreasing order of relevancy. Results may be paginated to retrieve these items in pages, but no query will return more than 100 items total.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of locations in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeoLocations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, geoLocationIDFilter?: Array<string>, textQuery?: string, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.getGeoLocations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, geoLocationIDFilter, textQuery, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of configurations that can be applied to orders to optimize for a desired campaign goal, sorted by goal name.
         * @summary Gets possible configurations for campaign goals.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {'SOLD_ON_AMAZON' | 'NOT_SOLD_ON_AMAZON'} productLocation Whether to retrieve the goal configurations available for an endemic (sold on Amazon) or non-endemic order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoalConfigurations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, productLocation: 'SOLD_ON_AMAZON' | 'NOT_SOLD_ON_AMAZON', options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.getGoalConfigurations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, productLocation, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the hierarchy of IAB content categories as a list sorted by ID in ascending order.
         * @summary Gets the hierarchy of IAB content categories.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {DiscoveryLineItemTypes} [lineItemType] The line item type to retrieve content categories for. This was introduced in version - &#x60;application/vnd.dspiabcontentcategories.v1+json&#x60;.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of categories in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,1000] with default as 250. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIabContentCategories(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemType?: DiscoveryLineItemTypes, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.getIabContentCategories(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemType, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves custom predict pre-bid targeting data for an account that is already linked to Oracle Data Cloud. If an account is not linked to the provider, no data will be returned.
         * @summary Gets Oracle Data Cloud provided custom predicts for pre-bid targeting.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of segments in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOdcCustomPredicts(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<OdcCustomPredicts> {
            return localVarFp.getOdcCustomPredicts(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of pixels based on filters. AdvertiserIdFilter must be provided. Results are sorted by create time in ascending order (earliest first).
         * @summary Gets a list of pixel objects based on filters
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<string>} advertiserIdFilter The returned array is filtered to include only pixels owned by the advertiserIds specified. Up to 5 advertisers may be specified in a single request, unless pixelIdFilter is also present (see pixelIdFilter).
         * @param {Array<string>} [pixelIdFilter] The returned array is filtered to include only pixels with ID matching those specified in the comma-delimited string. Limited to 25 pixel IDs per request. All pixels specified must belong to the same advertiser and therefore advertiserIdFilter is limited to a single advertiser if pixelIdFilter is non-null.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of pixels in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPixels(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, advertiserIdFilter: Array<string>, pixelIdFilter?: Array<string>, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getPixels(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, advertiserIdFilter, pixelIdFilter, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the hierarchy of product category objects as a list sorted by ID in ascending order.
         * @summary Gets the hierarchy of product category objects
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of categories in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,1000] with default as 250. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCategories(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getProductCategories(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the supply sources based on line item type, advertiser and supply source type. When the supply source type is deal, orderId must be supplied. The returned list of deal supply sources will be filtered to include only those valid for the advertiser that owns the order and are running during the order dates.
         * @summary Gets the supply sources based on line item type, advertiser and supply source type
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {DiscoveryLineItemTypes} lineItemType Line item type to retrieve supply sources for
         * @param {'AMAZON_EXCLUSIVE' | 'OPEN_EXCHANGE' | 'DEAL'} supplySourceType Type of supply source to retrieve
         * @param {string} [orderId] Required for deal supply source type. The start time of the Order will be used to determine which deals to fetch. Returned deals will be valid for the advertiserId used to create the Order.
         * @param {string} [advertiserId] Optional, but recommended. If specified, the result set of supply sources will be filtered to only those valid for the given advertiserId. If orderId is also provided, the order must belong to the specified advertiser.
         * @param {Array<'DESKTOP' | 'MOBILE' | 'DESKTOP_AND_MOBILE' | 'CONNECTED_TV'>} [deviceTypes] Restricts query to the specified device types. If not specified, all valid device types for a line item type will be returned.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of supply sources in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupplySources(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemType: DiscoveryLineItemTypes, supplySourceType: 'AMAZON_EXCLUSIVE' | 'OPEN_EXCHANGE' | 'DEAL', orderId?: string, advertiserId?: string, deviceTypes?: Array<'DESKTOP' | 'MOBILE' | 'DESKTOP_AND_MOBILE' | 'CONNECTED_TV'>, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<SupplySourceResponse> {
            return localVarFp.getSupplySources(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemType, supplySourceType, orderId, advertiserId, deviceTypes, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getApps operation in DiscoveryApi.
 * @export
 * @interface DiscoveryApiGetAppsRequest
 */
export interface DiscoveryApiGetAppsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof DiscoveryApiGetApps
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof DiscoveryApiGetApps
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of app Ids to retrieve, up to 20 in one request.
     * @type {Array<string>}
     * @memberof DiscoveryApiGetApps
     */
    readonly appIdFilter?: Array<string>

    /**
     * Filter by text. Retrieves up to 1000 results in sorted lexicographically, descending order of relevancy. Results may be paginated to retrieve these items in pages, but no query will return more than 1000 items total.
     * @type {string}
     * @memberof DiscoveryApiGetApps
     */
    readonly textQuery?: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof DiscoveryApiGetApps
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of apps in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,1000] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof DiscoveryApiGetApps
     */
    readonly maxResults?: number
}

/**
 * Request parameters for getDomains operation in DiscoveryApi.
 * @export
 * @interface DiscoveryApiGetDomainsRequest
 */
export interface DiscoveryApiGetDomainsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof DiscoveryApiGetDomains
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof DiscoveryApiGetDomains
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof DiscoveryApiGetDomains
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of domain lists in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof DiscoveryApiGetDomains
     */
    readonly maxResults?: number
}

/**
 * Request parameters for getDvCustomContextualSegments operation in DiscoveryApi.
 * @export
 * @interface DiscoveryApiGetDvCustomContextualSegmentsRequest
 */
export interface DiscoveryApiGetDvCustomContextualSegmentsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof DiscoveryApiGetDvCustomContextualSegments
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof DiscoveryApiGetDvCustomContextualSegments
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The advertiser to retrieve pre-bid targeting for.
     * @type {string}
     * @memberof DiscoveryApiGetDvCustomContextualSegments
     */
    readonly advertiserId: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof DiscoveryApiGetDvCustomContextualSegments
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of segments in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof DiscoveryApiGetDvCustomContextualSegments
     */
    readonly maxResults?: number
}

/**
 * Request parameters for getGeoLocations operation in DiscoveryApi.
 * @export
 * @interface DiscoveryApiGetGeoLocationsRequest
 */
export interface DiscoveryApiGetGeoLocationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof DiscoveryApiGetGeoLocations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof DiscoveryApiGetGeoLocations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of location IDs to retrieve, up to 10 in one request.
     * @type {Array<string>}
     * @memberof DiscoveryApiGetGeoLocations
     */
    readonly geoLocationIDFilter?: Array<string>

    /**
     * Filter by text such as city, state, country, dma, or postal code. Retrieves top 100 results in decreasing order of relevancy. Results may be paginated to retrieve these items in pages, but no query will return more than 100 items total.
     * @type {string}
     * @memberof DiscoveryApiGetGeoLocations
     */
    readonly textQuery?: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof DiscoveryApiGetGeoLocations
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of locations in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof DiscoveryApiGetGeoLocations
     */
    readonly maxResults?: number
}

/**
 * Request parameters for getGoalConfigurations operation in DiscoveryApi.
 * @export
 * @interface DiscoveryApiGetGoalConfigurationsRequest
 */
export interface DiscoveryApiGetGoalConfigurationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof DiscoveryApiGetGoalConfigurations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof DiscoveryApiGetGoalConfigurations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Whether to retrieve the goal configurations available for an endemic (sold on Amazon) or non-endemic order.
     * @type {'SOLD_ON_AMAZON' | 'NOT_SOLD_ON_AMAZON'}
     * @memberof DiscoveryApiGetGoalConfigurations
     */
    readonly productLocation: 'SOLD_ON_AMAZON' | 'NOT_SOLD_ON_AMAZON'
}

/**
 * Request parameters for getIabContentCategories operation in DiscoveryApi.
 * @export
 * @interface DiscoveryApiGetIabContentCategoriesRequest
 */
export interface DiscoveryApiGetIabContentCategoriesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof DiscoveryApiGetIabContentCategories
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof DiscoveryApiGetIabContentCategories
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The line item type to retrieve content categories for. This was introduced in version - &#x60;application/vnd.dspiabcontentcategories.v1+json&#x60;.
     * @type {DiscoveryLineItemTypes}
     * @memberof DiscoveryApiGetIabContentCategories
     */
    readonly lineItemType?: DiscoveryLineItemTypes

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof DiscoveryApiGetIabContentCategories
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of categories in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,1000] with default as 250. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof DiscoveryApiGetIabContentCategories
     */
    readonly maxResults?: number
}

/**
 * Request parameters for getOdcCustomPredicts operation in DiscoveryApi.
 * @export
 * @interface DiscoveryApiGetOdcCustomPredictsRequest
 */
export interface DiscoveryApiGetOdcCustomPredictsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof DiscoveryApiGetOdcCustomPredicts
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof DiscoveryApiGetOdcCustomPredicts
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof DiscoveryApiGetOdcCustomPredicts
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of segments in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof DiscoveryApiGetOdcCustomPredicts
     */
    readonly maxResults?: number
}

/**
 * Request parameters for getPixels operation in DiscoveryApi.
 * @export
 * @interface DiscoveryApiGetPixelsRequest
 */
export interface DiscoveryApiGetPixelsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof DiscoveryApiGetPixels
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof DiscoveryApiGetPixels
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The returned array is filtered to include only pixels owned by the advertiserIds specified. Up to 5 advertisers may be specified in a single request, unless pixelIdFilter is also present (see pixelIdFilter).
     * @type {Array<string>}
     * @memberof DiscoveryApiGetPixels
     */
    readonly advertiserIdFilter: Array<string>

    /**
     * The returned array is filtered to include only pixels with ID matching those specified in the comma-delimited string. Limited to 25 pixel IDs per request. All pixels specified must belong to the same advertiser and therefore advertiserIdFilter is limited to a single advertiser if pixelIdFilter is non-null.
     * @type {Array<string>}
     * @memberof DiscoveryApiGetPixels
     */
    readonly pixelIdFilter?: Array<string>

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof DiscoveryApiGetPixels
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of pixels in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof DiscoveryApiGetPixels
     */
    readonly maxResults?: number
}

/**
 * Request parameters for getProductCategories operation in DiscoveryApi.
 * @export
 * @interface DiscoveryApiGetProductCategoriesRequest
 */
export interface DiscoveryApiGetProductCategoriesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof DiscoveryApiGetProductCategories
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof DiscoveryApiGetProductCategories
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof DiscoveryApiGetProductCategories
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of categories in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,1000] with default as 250. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof DiscoveryApiGetProductCategories
     */
    readonly maxResults?: number
}

/**
 * Request parameters for getSupplySources operation in DiscoveryApi.
 * @export
 * @interface DiscoveryApiGetSupplySourcesRequest
 */
export interface DiscoveryApiGetSupplySourcesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof DiscoveryApiGetSupplySources
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof DiscoveryApiGetSupplySources
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Line item type to retrieve supply sources for
     * @type {DiscoveryLineItemTypes}
     * @memberof DiscoveryApiGetSupplySources
     */
    readonly lineItemType: DiscoveryLineItemTypes

    /**
     * Type of supply source to retrieve
     * @type {'AMAZON_EXCLUSIVE' | 'OPEN_EXCHANGE' | 'DEAL'}
     * @memberof DiscoveryApiGetSupplySources
     */
    readonly supplySourceType: 'AMAZON_EXCLUSIVE' | 'OPEN_EXCHANGE' | 'DEAL'

    /**
     * Required for deal supply source type. The start time of the Order will be used to determine which deals to fetch. Returned deals will be valid for the advertiserId used to create the Order.
     * @type {string}
     * @memberof DiscoveryApiGetSupplySources
     */
    readonly orderId?: string

    /**
     * Optional, but recommended. If specified, the result set of supply sources will be filtered to only those valid for the given advertiserId. If orderId is also provided, the order must belong to the specified advertiser.
     * @type {string}
     * @memberof DiscoveryApiGetSupplySources
     */
    readonly advertiserId?: string

    /**
     * Restricts query to the specified device types. If not specified, all valid device types for a line item type will be returned.
     * @type {Array<'DESKTOP' | 'MOBILE' | 'DESKTOP_AND_MOBILE' | 'CONNECTED_TV'>}
     * @memberof DiscoveryApiGetSupplySources
     */
    readonly deviceTypes?: Array<'DESKTOP' | 'MOBILE' | 'DESKTOP_AND_MOBILE' | 'CONNECTED_TV'>

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof DiscoveryApiGetSupplySources
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of supply sources in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof DiscoveryApiGetSupplySources
     */
    readonly maxResults?: number
}

/**
 * DiscoveryApi - object-oriented interface
 * @export
 * @class DiscoveryApi
 * @extends {BaseAPI}
 */
export class DiscoveryApi extends BaseAPI {
    /**
     * Gets apps based on app Ids or text querys. Either one of app Ids or text query may be supplied, but not both.
     * @summary Gets apps based on app Id or text query
     * @param {DiscoveryApiGetAppsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public getApps(requestParameters: DiscoveryApiGetAppsRequest, options?: any) {
        return DiscoveryApiFp(this.configuration).getApps(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.appIdFilter, requestParameters.textQuery, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the list of domain lists for inclusion/exclusion based on entity. Lists are sorted by creation time.
     * @summary Gets the list of domain lists for inclusion/exclusion based on entity
     * @param {DiscoveryApiGetDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public getDomains(requestParameters: DiscoveryApiGetDomainsRequest, options?: any) {
        return DiscoveryApiFp(this.configuration).getDomains(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves custom contextual segments pre-bid targeting data for an account that is already linked to Double Verify. If an account is not linked to the provider, no data will be returned.
     * @summary Gets Double Verify provided custom contextual segments for pre-bid targeting.
     * @param {DiscoveryApiGetDvCustomContextualSegmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public getDvCustomContextualSegments(requestParameters: DiscoveryApiGetDvCustomContextualSegmentsRequest, options?: any) {
        return DiscoveryApiFp(this.configuration).getDvCustomContextualSegments(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.advertiserId, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets locationTargeting objects based on locationTargetingId or text query, such as city name, zip code, or other address text. Either one of locationTargetingId or text query may be supplied, but not both.
     * @summary Gets locationTargeting objects based on locationTargetingId or text query
     * @param {DiscoveryApiGetGeoLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public getGeoLocations(requestParameters: DiscoveryApiGetGeoLocationsRequest, options?: any) {
        return DiscoveryApiFp(this.configuration).getGeoLocations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.geoLocationIDFilter, requestParameters.textQuery, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of configurations that can be applied to orders to optimize for a desired campaign goal, sorted by goal name.
     * @summary Gets possible configurations for campaign goals.
     * @param {DiscoveryApiGetGoalConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public getGoalConfigurations(requestParameters: DiscoveryApiGetGoalConfigurationsRequest, options?: any) {
        return DiscoveryApiFp(this.configuration).getGoalConfigurations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.productLocation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the hierarchy of IAB content categories as a list sorted by ID in ascending order.
     * @summary Gets the hierarchy of IAB content categories.
     * @param {DiscoveryApiGetIabContentCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public getIabContentCategories(requestParameters: DiscoveryApiGetIabContentCategoriesRequest, options?: any) {
        return DiscoveryApiFp(this.configuration).getIabContentCategories(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.lineItemType, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves custom predict pre-bid targeting data for an account that is already linked to Oracle Data Cloud. If an account is not linked to the provider, no data will be returned.
     * @summary Gets Oracle Data Cloud provided custom predicts for pre-bid targeting.
     * @param {DiscoveryApiGetOdcCustomPredictsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public getOdcCustomPredicts(requestParameters: DiscoveryApiGetOdcCustomPredictsRequest, options?: any) {
        return DiscoveryApiFp(this.configuration).getOdcCustomPredicts(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of pixels based on filters. AdvertiserIdFilter must be provided. Results are sorted by create time in ascending order (earliest first).
     * @summary Gets a list of pixel objects based on filters
     * @param {DiscoveryApiGetPixelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public getPixels(requestParameters: DiscoveryApiGetPixelsRequest, options?: any) {
        return DiscoveryApiFp(this.configuration).getPixels(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.advertiserIdFilter, requestParameters.pixelIdFilter, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the hierarchy of product category objects as a list sorted by ID in ascending order.
     * @summary Gets the hierarchy of product category objects
     * @param {DiscoveryApiGetProductCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public getProductCategories(requestParameters: DiscoveryApiGetProductCategoriesRequest, options?: any) {
        return DiscoveryApiFp(this.configuration).getProductCategories(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the supply sources based on line item type, advertiser and supply source type. When the supply source type is deal, orderId must be supplied. The returned list of deal supply sources will be filtered to include only those valid for the advertiser that owns the order and are running during the order dates.
     * @summary Gets the supply sources based on line item type, advertiser and supply source type
     * @param {DiscoveryApiGetSupplySourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscoveryApi
     */
    public getSupplySources(requestParameters: DiscoveryApiGetSupplySourcesRequest, options?: any) {
        return DiscoveryApiFp(this.configuration).getSupplySources(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.lineItemType, requestParameters.supplySourceType, requestParameters.orderId, requestParameters.advertiserId, requestParameters.deviceTypes, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FileUploadsApi - axios parameter creator
 * @export
 */
export const FileUploadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create file upload policy that used to upload file to AWS S3. File upload policy will expire in 15 minutes.
         * @summary Create file upload policy.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {SupportedPolicyType} policyType The returned file upload policy is determined by policyType.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFileUploadsPolicy: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, policyType: SupportedPolicyType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createFileUploadsPolicy', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createFileUploadsPolicy', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'policyType' is not null or undefined
            assertParamExists('createFileUploadsPolicy', 'policyType', policyType)
            const localVarPath = `/dsp/fileUploads/policy/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (policyType !== undefined) {
                localVarQueryParameter['policyType'] = policyType;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileUploadsApi - functional programming interface
 * @export
 */
export const FileUploadsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileUploadsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create file upload policy that used to upload file to AWS S3. File upload policy will expire in 15 minutes.
         * @summary Create file upload policy.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {SupportedPolicyType} policyType The returned file upload policy is determined by policyType.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFileUploadsPolicy(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, policyType: SupportedPolicyType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileUploadPolicy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFileUploadsPolicy(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, policyType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileUploadsApi - factory interface
 * @export
 */
export const FileUploadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileUploadsApiFp(configuration)
    return {
        /**
         * Create file upload policy that used to upload file to AWS S3. File upload policy will expire in 15 minutes.
         * @summary Create file upload policy.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {SupportedPolicyType} policyType The returned file upload policy is determined by policyType.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFileUploadsPolicy(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, policyType: SupportedPolicyType, options?: any): AxiosPromise<FileUploadPolicy> {
            return localVarFp.createFileUploadsPolicy(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, policyType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createFileUploadsPolicy operation in FileUploadsApi.
 * @export
 * @interface FileUploadsApiCreateFileUploadsPolicyRequest
 */
export interface FileUploadsApiCreateFileUploadsPolicyRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof FileUploadsApiCreateFileUploadsPolicy
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof FileUploadsApiCreateFileUploadsPolicy
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The returned file upload policy is determined by policyType.
     * @type {SupportedPolicyType}
     * @memberof FileUploadsApiCreateFileUploadsPolicy
     */
    readonly policyType: SupportedPolicyType
}

/**
 * FileUploadsApi - object-oriented interface
 * @export
 * @class FileUploadsApi
 * @extends {BaseAPI}
 */
export class FileUploadsApi extends BaseAPI {
    /**
     * Create file upload policy that used to upload file to AWS S3. File upload policy will expire in 15 minutes.
     * @summary Create file upload policy.
     * @param {FileUploadsApiCreateFileUploadsPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUploadsApi
     */
    public createFileUploadsPolicy(requestParameters: FileUploadsApiCreateFileUploadsPolicyRequest, options?: any) {
        return FileUploadsApiFp(this.configuration).createFileUploadsPolicy(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.policyType, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ImageCreativeApi - axios parameter creator
 * @export
 */
export const ImageCreativeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an image creative.  Callout - A future update will add support to create multiple Image creatives at a time. 
         * @summary Create image creative(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspCreateImageCreativeRequestV1>} [dspCreateImageCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImageCreative: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspCreateImageCreativeRequestV1?: Array<DspCreateImageCreativeRequestV1>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createImageCreative', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createImageCreative', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/creatives/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dspcreateimagecreatives.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dspCreateImageCreativeRequestV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an image creative matching criteria provided in request.  Callout - A future update will add support to get multiple Image creatives at a time. 
         * @summary Get image creative(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} creativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageCreatives: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeIdFilter: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getImageCreatives', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getImageCreatives', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'creativeIdFilter' is not null or undefined
            assertParamExists('getImageCreatives', 'creativeIdFilter', creativeIdFilter)
            const localVarPath = `/dsp/creatives/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (creativeIdFilter !== undefined) {
                localVarQueryParameter['creativeIdFilter'] = creativeIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Preview an image creative. 
         * @summary Preview an image creative.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {DspImageCreativePreviewRequestV1} [dspImageCreativePreviewRequestV1] A preview request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewImageCreative: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspImageCreativePreviewRequestV1?: DspImageCreativePreviewRequestV1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('previewImageCreative', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('previewImageCreative', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/creatives/image/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dsppreviewimagecreatives.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dspImageCreativePreviewRequestV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an image creative.  Callout - A future update will add support to update multiple Image creatives at a time. 
         * @summary Update image creative(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspUpdateImageCreativeRequestV1>} [dspUpdateImageCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImageCreative: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspUpdateImageCreativeRequestV1?: Array<DspUpdateImageCreativeRequestV1>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateImageCreative', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateImageCreative', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/creatives/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dspupdateimagecreatives.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dspUpdateImageCreativeRequestV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageCreativeApi - functional programming interface
 * @export
 */
export const ImageCreativeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageCreativeApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an image creative.  Callout - A future update will add support to create multiple Image creatives at a time. 
         * @summary Create image creative(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspCreateImageCreativeRequestV1>} [dspCreateImageCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createImageCreative(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspCreateImageCreativeRequestV1?: Array<DspCreateImageCreativeRequestV1>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DspCreativeResponseV1>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createImageCreative(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspCreateImageCreativeRequestV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an image creative matching criteria provided in request.  Callout - A future update will add support to get multiple Image creatives at a time. 
         * @summary Get image creative(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} creativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeIdFilter: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DspReadImageCreativesResponseV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativeIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Preview an image creative. 
         * @summary Preview an image creative.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {DspImageCreativePreviewRequestV1} [dspImageCreativePreviewRequestV1] A preview request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async previewImageCreative(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspImageCreativePreviewRequestV1?: DspImageCreativePreviewRequestV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DspCreativePreviewResponseV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.previewImageCreative(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspImageCreativePreviewRequestV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an image creative.  Callout - A future update will add support to update multiple Image creatives at a time. 
         * @summary Update image creative(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspUpdateImageCreativeRequestV1>} [dspUpdateImageCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateImageCreative(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspUpdateImageCreativeRequestV1?: Array<DspUpdateImageCreativeRequestV1>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DspCreativeResponseV1>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImageCreative(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspUpdateImageCreativeRequestV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ImageCreativeApi - factory interface
 * @export
 */
export const ImageCreativeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageCreativeApiFp(configuration)
    return {
        /**
         * Create an image creative.  Callout - A future update will add support to create multiple Image creatives at a time. 
         * @summary Create image creative(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspCreateImageCreativeRequestV1>} [dspCreateImageCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImageCreative(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspCreateImageCreativeRequestV1?: Array<DspCreateImageCreativeRequestV1>, options?: any): AxiosPromise<Array<DspCreativeResponseV1>> {
            return localVarFp.createImageCreative(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspCreateImageCreativeRequestV1, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an image creative matching criteria provided in request.  Callout - A future update will add support to get multiple Image creatives at a time. 
         * @summary Get image creative(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} creativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeIdFilter: string, options?: any): AxiosPromise<DspReadImageCreativesResponseV1> {
            return localVarFp.getImageCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativeIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Preview an image creative. 
         * @summary Preview an image creative.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {DspImageCreativePreviewRequestV1} [dspImageCreativePreviewRequestV1] A preview request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewImageCreative(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspImageCreativePreviewRequestV1?: DspImageCreativePreviewRequestV1, options?: any): AxiosPromise<DspCreativePreviewResponseV1> {
            return localVarFp.previewImageCreative(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspImageCreativePreviewRequestV1, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an image creative.  Callout - A future update will add support to update multiple Image creatives at a time. 
         * @summary Update image creative(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspUpdateImageCreativeRequestV1>} [dspUpdateImageCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImageCreative(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspUpdateImageCreativeRequestV1?: Array<DspUpdateImageCreativeRequestV1>, options?: any): AxiosPromise<Array<DspCreativeResponseV1>> {
            return localVarFp.updateImageCreative(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspUpdateImageCreativeRequestV1, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createImageCreative operation in ImageCreativeApi.
 * @export
 * @interface ImageCreativeApiCreateImageCreativeRequest
 */
export interface ImageCreativeApiCreateImageCreativeRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ImageCreativeApiCreateImageCreative
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof ImageCreativeApiCreateImageCreative
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<DspCreateImageCreativeRequestV1>}
     * @memberof ImageCreativeApiCreateImageCreative
     */
    readonly dspCreateImageCreativeRequestV1?: Array<DspCreateImageCreativeRequestV1>
}

/**
 * Request parameters for getImageCreatives operation in ImageCreativeApi.
 * @export
 * @interface ImageCreativeApiGetImageCreativesRequest
 */
export interface ImageCreativeApiGetImageCreativesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ImageCreativeApiGetImageCreatives
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof ImageCreativeApiGetImageCreatives
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
     * @type {string}
     * @memberof ImageCreativeApiGetImageCreatives
     */
    readonly creativeIdFilter: string
}

/**
 * Request parameters for previewImageCreative operation in ImageCreativeApi.
 * @export
 * @interface ImageCreativeApiPreviewImageCreativeRequest
 */
export interface ImageCreativeApiPreviewImageCreativeRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ImageCreativeApiPreviewImageCreative
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof ImageCreativeApiPreviewImageCreative
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A preview request.
     * @type {DspImageCreativePreviewRequestV1}
     * @memberof ImageCreativeApiPreviewImageCreative
     */
    readonly dspImageCreativePreviewRequestV1?: DspImageCreativePreviewRequestV1
}

/**
 * Request parameters for updateImageCreative operation in ImageCreativeApi.
 * @export
 * @interface ImageCreativeApiUpdateImageCreativeRequest
 */
export interface ImageCreativeApiUpdateImageCreativeRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ImageCreativeApiUpdateImageCreative
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof ImageCreativeApiUpdateImageCreative
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<DspUpdateImageCreativeRequestV1>}
     * @memberof ImageCreativeApiUpdateImageCreative
     */
    readonly dspUpdateImageCreativeRequestV1?: Array<DspUpdateImageCreativeRequestV1>
}

/**
 * ImageCreativeApi - object-oriented interface
 * @export
 * @class ImageCreativeApi
 * @extends {BaseAPI}
 */
export class ImageCreativeApi extends BaseAPI {
    /**
     * Create an image creative.  Callout - A future update will add support to create multiple Image creatives at a time. 
     * @summary Create image creative(s).
     * @param {ImageCreativeApiCreateImageCreativeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageCreativeApi
     */
    public createImageCreative(requestParameters: ImageCreativeApiCreateImageCreativeRequest, options?: any) {
        return ImageCreativeApiFp(this.configuration).createImageCreative(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.dspCreateImageCreativeRequestV1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an image creative matching criteria provided in request.  Callout - A future update will add support to get multiple Image creatives at a time. 
     * @summary Get image creative(s).
     * @param {ImageCreativeApiGetImageCreativesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageCreativeApi
     */
    public getImageCreatives(requestParameters: ImageCreativeApiGetImageCreativesRequest, options?: any) {
        return ImageCreativeApiFp(this.configuration).getImageCreatives(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.creativeIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Preview an image creative. 
     * @summary Preview an image creative.
     * @param {ImageCreativeApiPreviewImageCreativeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageCreativeApi
     */
    public previewImageCreative(requestParameters: ImageCreativeApiPreviewImageCreativeRequest, options?: any) {
        return ImageCreativeApiFp(this.configuration).previewImageCreative(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.dspImageCreativePreviewRequestV1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an image creative.  Callout - A future update will add support to update multiple Image creatives at a time. 
     * @summary Update image creative(s).
     * @param {ImageCreativeApiUpdateImageCreativeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageCreativeApi
     */
    public updateImageCreative(requestParameters: ImageCreativeApiUpdateImageCreativeRequest, options?: any) {
        return ImageCreativeApiFp(this.configuration).updateImageCreative(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.dspUpdateImageCreativeRequestV1, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LineItemApi - axios parameter creator
 * @export
 */
export const LineItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create line item.  Callout - A future update will add support for multiple at a time. 
         * @summary Create line item.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<LineItemV3>} [lineItemV3] An array of lineitem objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLineItems: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemV3?: Array<LineItemV3>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createLineItems', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createLineItems', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/lineItems/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dsplineitems.v3+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lineItemV3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets line item specified by identifier.
         * @summary Gets line item with complete information specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} lineItemId The line item identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItem: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getLineItem', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getLineItem', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'lineItemId' is not null or undefined
            assertParamExists('getLineItem', 'lineItemId', lineItemId)
            const localVarPath = `/dsp/lineItems/{lineItemId}`
                .replace(`{${"lineItemId"}}`, encodeURIComponent(String(lineItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets one or more line items with basic information.
         * @summary Gets one or more line items with basic information.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [startIndex] Optional. Sets a zero-based offset into the requested set of line items. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
         * @param {string} [count] Optional. Sets the number of line items in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten line items set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten line items, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
         * @param {string} [statusFilter] Optional. The returned array is filtered to include only line items with delivery status matching those specified in the comma-delimited string.
         * @param {string} [orderIdFilter] The returned array is filtered to include only line items with identifiers matching those specified in the comma-delimited string. Either one of (orderIdFilter or lineItemIdFilter) should be provided.
         * @param {string} [lineItemIdFilter] The returned array is filtered to include only line items with identifiers matching those specified in the comma-delimited string. Either one of (orderIdFilter or lineItemIdFilter) should be provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItems: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: string, count?: string, statusFilter?: string, orderIdFilter?: string, lineItemIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getLineItems', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getLineItems', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/lineItems/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (statusFilter !== undefined) {
                localVarQueryParameter['statusFilter'] = statusFilter;
            }

            if (orderIdFilter !== undefined) {
                localVarQueryParameter['orderIdFilter'] = orderIdFilter;
            }

            if (lineItemIdFilter !== undefined) {
                localVarQueryParameter['lineItemIdFilter'] = lineItemIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Setting delivery activation status for the given line item id. Version 2.x line items accept `application/vnd.dsplineitems.v2+json` for this API. Version 3.x line items accept `application/vnd.dsplineitemsdeliveryactivationstatus.v3+json` for this API.
         * @summary Set delivery activation status for the given line item id.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} lineItemId The line item identifier.
         * @param {DeliveryActivationStatus} status The delivery activation status. If the given delivery activation status value is not part of enumeration (DeliveryActivationStatus), Response code will be 404.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLineItemStatus: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemId: string, status: DeliveryActivationStatus, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('setLineItemStatus', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('setLineItemStatus', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'lineItemId' is not null or undefined
            assertParamExists('setLineItemStatus', 'lineItemId', lineItemId)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('setLineItemStatus', 'status', status)
            const localVarPath = `/dsp/lineItems/{lineItemId}/deliveryActivationStatus`
                .replace(`{${"lineItemId"}}`, encodeURIComponent(String(lineItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a full update, not partial patch. All the fields/data returned by GET LineItem by Id must be provided(including read-only fields). Any field that is changed/removed would be updated as provided in the request. To update `deliveryActivationStatus` use POST deliveryActivationStatus by LineItem Id instead.  Callout - A future update will add support for multiple at a time. 
         * @summary Update line item.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<LineItemV3>} [lineItemV3] An array of line item objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLineItems: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemV3?: Array<LineItemV3>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateLineItems', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateLineItems', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/lineItems/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dsplineitems.v3+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lineItemV3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LineItemApi - functional programming interface
 * @export
 */
export const LineItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LineItemApiAxiosParamCreator(configuration)
    return {
        /**
         * Create line item.  Callout - A future update will add support for multiple at a time. 
         * @summary Create line item.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<LineItemV3>} [lineItemV3] An array of lineitem objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLineItems(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemV3?: Array<LineItemV3>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LineItemResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLineItems(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemV3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets line item specified by identifier.
         * @summary Gets line item with complete information specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} lineItemId The line item identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLineItem(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LineItemV3>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLineItem(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets one or more line items with basic information.
         * @summary Gets one or more line items with basic information.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [startIndex] Optional. Sets a zero-based offset into the requested set of line items. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
         * @param {string} [count] Optional. Sets the number of line items in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten line items set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten line items, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
         * @param {string} [statusFilter] Optional. The returned array is filtered to include only line items with delivery status matching those specified in the comma-delimited string.
         * @param {string} [orderIdFilter] The returned array is filtered to include only line items with identifiers matching those specified in the comma-delimited string. Either one of (orderIdFilter or lineItemIdFilter) should be provided.
         * @param {string} [lineItemIdFilter] The returned array is filtered to include only line items with identifiers matching those specified in the comma-delimited string. Either one of (orderIdFilter or lineItemIdFilter) should be provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLineItems(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: string, count?: string, statusFilter?: string, orderIdFilter?: string, lineItemIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LineItemsV22>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLineItems(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, statusFilter, orderIdFilter, lineItemIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Setting delivery activation status for the given line item id. Version 2.x line items accept `application/vnd.dsplineitems.v2+json` for this API. Version 3.x line items accept `application/vnd.dsplineitemsdeliveryactivationstatus.v3+json` for this API.
         * @summary Set delivery activation status for the given line item id.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} lineItemId The line item identifier.
         * @param {DeliveryActivationStatus} status The delivery activation status. If the given delivery activation status value is not part of enumeration (DeliveryActivationStatus), Response code will be 404.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setLineItemStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemId: string, status: DeliveryActivationStatus, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setLineItemStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemId, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a full update, not partial patch. All the fields/data returned by GET LineItem by Id must be provided(including read-only fields). Any field that is changed/removed would be updated as provided in the request. To update `deliveryActivationStatus` use POST deliveryActivationStatus by LineItem Id instead.  Callout - A future update will add support for multiple at a time. 
         * @summary Update line item.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<LineItemV3>} [lineItemV3] An array of line item objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLineItems(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemV3?: Array<LineItemV3>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LineItemResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLineItems(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemV3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LineItemApi - factory interface
 * @export
 */
export const LineItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LineItemApiFp(configuration)
    return {
        /**
         * Create line item.  Callout - A future update will add support for multiple at a time. 
         * @summary Create line item.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<LineItemV3>} [lineItemV3] An array of lineitem objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLineItems(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemV3?: Array<LineItemV3>, options?: any): AxiosPromise<Array<LineItemResponse>> {
            return localVarFp.createLineItems(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemV3, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets line item specified by identifier.
         * @summary Gets line item with complete information specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} lineItemId The line item identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItem(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemId: string, options?: any): AxiosPromise<LineItemV3> {
            return localVarFp.getLineItem(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets one or more line items with basic information.
         * @summary Gets one or more line items with basic information.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [startIndex] Optional. Sets a zero-based offset into the requested set of line items. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
         * @param {string} [count] Optional. Sets the number of line items in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten line items set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten line items, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
         * @param {string} [statusFilter] Optional. The returned array is filtered to include only line items with delivery status matching those specified in the comma-delimited string.
         * @param {string} [orderIdFilter] The returned array is filtered to include only line items with identifiers matching those specified in the comma-delimited string. Either one of (orderIdFilter or lineItemIdFilter) should be provided.
         * @param {string} [lineItemIdFilter] The returned array is filtered to include only line items with identifiers matching those specified in the comma-delimited string. Either one of (orderIdFilter or lineItemIdFilter) should be provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLineItems(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: string, count?: string, statusFilter?: string, orderIdFilter?: string, lineItemIdFilter?: string, options?: any): AxiosPromise<LineItemsV22> {
            return localVarFp.getLineItems(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, statusFilter, orderIdFilter, lineItemIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Setting delivery activation status for the given line item id. Version 2.x line items accept `application/vnd.dsplineitems.v2+json` for this API. Version 3.x line items accept `application/vnd.dsplineitemsdeliveryactivationstatus.v3+json` for this API.
         * @summary Set delivery activation status for the given line item id.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} lineItemId The line item identifier.
         * @param {DeliveryActivationStatus} status The delivery activation status. If the given delivery activation status value is not part of enumeration (DeliveryActivationStatus), Response code will be 404.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLineItemStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemId: string, status: DeliveryActivationStatus, options?: any): AxiosPromise<void> {
            return localVarFp.setLineItemStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemId, status, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a full update, not partial patch. All the fields/data returned by GET LineItem by Id must be provided(including read-only fields). Any field that is changed/removed would be updated as provided in the request. To update `deliveryActivationStatus` use POST deliveryActivationStatus by LineItem Id instead.  Callout - A future update will add support for multiple at a time. 
         * @summary Update line item.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<LineItemV3>} [lineItemV3] An array of line item objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLineItems(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemV3?: Array<LineItemV3>, options?: any): AxiosPromise<Array<LineItemResponse>> {
            return localVarFp.updateLineItems(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemV3, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createLineItems operation in LineItemApi.
 * @export
 * @interface LineItemApiCreateLineItemsRequest
 */
export interface LineItemApiCreateLineItemsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof LineItemApiCreateLineItems
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof LineItemApiCreateLineItems
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of lineitem objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<LineItemV3>}
     * @memberof LineItemApiCreateLineItems
     */
    readonly lineItemV3?: Array<LineItemV3>
}

/**
 * Request parameters for getLineItem operation in LineItemApi.
 * @export
 * @interface LineItemApiGetLineItemRequest
 */
export interface LineItemApiGetLineItemRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof LineItemApiGetLineItem
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof LineItemApiGetLineItem
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The line item identifier.
     * @type {string}
     * @memberof LineItemApiGetLineItem
     */
    readonly lineItemId: string
}

/**
 * Request parameters for getLineItems operation in LineItemApi.
 * @export
 * @interface LineItemApiGetLineItemsRequest
 */
export interface LineItemApiGetLineItemsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof LineItemApiGetLineItems
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof LineItemApiGetLineItems
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a zero-based offset into the requested set of line items. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
     * @type {string}
     * @memberof LineItemApiGetLineItems
     */
    readonly startIndex?: string

    /**
     * Optional. Sets the number of line items in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten line items set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten line items, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
     * @type {string}
     * @memberof LineItemApiGetLineItems
     */
    readonly count?: string

    /**
     * Optional. The returned array is filtered to include only line items with delivery status matching those specified in the comma-delimited string.
     * @type {string}
     * @memberof LineItemApiGetLineItems
     */
    readonly statusFilter?: string

    /**
     * The returned array is filtered to include only line items with identifiers matching those specified in the comma-delimited string. Either one of (orderIdFilter or lineItemIdFilter) should be provided.
     * @type {string}
     * @memberof LineItemApiGetLineItems
     */
    readonly orderIdFilter?: string

    /**
     * The returned array is filtered to include only line items with identifiers matching those specified in the comma-delimited string. Either one of (orderIdFilter or lineItemIdFilter) should be provided.
     * @type {string}
     * @memberof LineItemApiGetLineItems
     */
    readonly lineItemIdFilter?: string
}

/**
 * Request parameters for setLineItemStatus operation in LineItemApi.
 * @export
 * @interface LineItemApiSetLineItemStatusRequest
 */
export interface LineItemApiSetLineItemStatusRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof LineItemApiSetLineItemStatus
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof LineItemApiSetLineItemStatus
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The line item identifier.
     * @type {string}
     * @memberof LineItemApiSetLineItemStatus
     */
    readonly lineItemId: string

    /**
     * The delivery activation status. If the given delivery activation status value is not part of enumeration (DeliveryActivationStatus), Response code will be 404.
     * @type {DeliveryActivationStatus}
     * @memberof LineItemApiSetLineItemStatus
     */
    readonly status: DeliveryActivationStatus
}

/**
 * Request parameters for updateLineItems operation in LineItemApi.
 * @export
 * @interface LineItemApiUpdateLineItemsRequest
 */
export interface LineItemApiUpdateLineItemsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof LineItemApiUpdateLineItems
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof LineItemApiUpdateLineItems
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of line item objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<LineItemV3>}
     * @memberof LineItemApiUpdateLineItems
     */
    readonly lineItemV3?: Array<LineItemV3>
}

/**
 * LineItemApi - object-oriented interface
 * @export
 * @class LineItemApi
 * @extends {BaseAPI}
 */
export class LineItemApi extends BaseAPI {
    /**
     * Create line item.  Callout - A future update will add support for multiple at a time. 
     * @summary Create line item.
     * @param {LineItemApiCreateLineItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemApi
     */
    public createLineItems(requestParameters: LineItemApiCreateLineItemsRequest, options?: any) {
        return LineItemApiFp(this.configuration).createLineItems(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.lineItemV3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets line item specified by identifier.
     * @summary Gets line item with complete information specified by identifier.
     * @param {LineItemApiGetLineItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemApi
     */
    public getLineItem(requestParameters: LineItemApiGetLineItemRequest, options?: any) {
        return LineItemApiFp(this.configuration).getLineItem(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.lineItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets one or more line items with basic information.
     * @summary Gets one or more line items with basic information.
     * @param {LineItemApiGetLineItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemApi
     */
    public getLineItems(requestParameters: LineItemApiGetLineItemsRequest, options?: any) {
        return LineItemApiFp(this.configuration).getLineItems(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.statusFilter, requestParameters.orderIdFilter, requestParameters.lineItemIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Setting delivery activation status for the given line item id. Version 2.x line items accept `application/vnd.dsplineitems.v2+json` for this API. Version 3.x line items accept `application/vnd.dsplineitemsdeliveryactivationstatus.v3+json` for this API.
     * @summary Set delivery activation status for the given line item id.
     * @param {LineItemApiSetLineItemStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemApi
     */
    public setLineItemStatus(requestParameters: LineItemApiSetLineItemStatusRequest, options?: any) {
        return LineItemApiFp(this.configuration).setLineItemStatus(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.lineItemId, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a full update, not partial patch. All the fields/data returned by GET LineItem by Id must be provided(including read-only fields). Any field that is changed/removed would be updated as provided in the request. To update `deliveryActivationStatus` use POST deliveryActivationStatus by LineItem Id instead.  Callout - A future update will add support for multiple at a time. 
     * @summary Update line item.
     * @param {LineItemApiUpdateLineItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemApi
     */
    public updateLineItems(requestParameters: LineItemApiUpdateLineItemsRequest, options?: any) {
        return LineItemApiFp(this.configuration).updateLineItems(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.lineItemV3, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LineItemCreativeAssociationApi - axios parameter creator
 * @export
 */
export const LineItemCreativeAssociationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create/delete association between line item and creative.  Callout -  Do not pass in startDate, endDate and weight. Use the PUT operation instead to populate these fields. We will add support in POST in a future update. A future update will also include support for multiple at a time. 
         * @summary Create/delete association between line item and creative.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {LineItemCreativeAssociationsRequest} [lineItemCreativeAssociationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associateLineItemsToCreatives: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemCreativeAssociationsRequest?: LineItemCreativeAssociationsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('associateLineItemsToCreatives', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('associateLineItemsToCreatives', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/lineItemCreativeAssociations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dsplineitemcreativeassociations.v2.1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lineItemCreativeAssociationsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of creative associations, filtered by specified criteria.
         * @summary Gets a list of line-item / creative associations.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} lineItemIdFilter The returned array includes only associations to line items matching those specified in the comma-delimited string.
         * @param {number} [count] Optional. Sets the number of results in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten results set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten results, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on.
         * @param {number} [startIndex] Optional. Sets a zero-based offset into the requested set of results. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLineItemCreativeAssociations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemIdFilter: string, count?: number, startIndex?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listLineItemCreativeAssociations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listLineItemCreativeAssociations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'lineItemIdFilter' is not null or undefined
            assertParamExists('listLineItemCreativeAssociations', 'lineItemIdFilter', lineItemIdFilter)
            const localVarPath = `/dsp/lineItemCreativeAssociations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lineItemIdFilter !== undefined) {
                localVarQueryParameter['lineItemIdFilter'] = lineItemIdFilter;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update association details. This API will be used to update startDate, endDate and weight parameters. Weight field can be updated only if creativeRotationType is `WEIGHTED`. CreativeRotationType field is under line item setting.  Callout - A future update will add support for multiple at a time. 
         * @summary Update association details.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<LineItemCreativeAssociation>} [lineItemCreativeAssociation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLineItemCreativeAssociations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemCreativeAssociation?: Array<LineItemCreativeAssociation>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateLineItemCreativeAssociations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateLineItemCreativeAssociations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/lineItemCreativeAssociations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dsplineitemcreativeassociations.v2.1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lineItemCreativeAssociation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LineItemCreativeAssociationApi - functional programming interface
 * @export
 */
export const LineItemCreativeAssociationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LineItemCreativeAssociationApiAxiosParamCreator(configuration)
    return {
        /**
         * Create/delete association between line item and creative.  Callout -  Do not pass in startDate, endDate and weight. Use the PUT operation instead to populate these fields. We will add support in POST in a future update. A future update will also include support for multiple at a time. 
         * @summary Create/delete association between line item and creative.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {LineItemCreativeAssociationsRequest} [lineItemCreativeAssociationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async associateLineItemsToCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemCreativeAssociationsRequest?: LineItemCreativeAssociationsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LineItemCreativeAssociationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.associateLineItemsToCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemCreativeAssociationsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of creative associations, filtered by specified criteria.
         * @summary Gets a list of line-item / creative associations.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} lineItemIdFilter The returned array includes only associations to line items matching those specified in the comma-delimited string.
         * @param {number} [count] Optional. Sets the number of results in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten results set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten results, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on.
         * @param {number} [startIndex] Optional. Sets a zero-based offset into the requested set of results. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLineItemCreativeAssociations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemIdFilter: string, count?: number, startIndex?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LineItemCreativeAssociations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLineItemCreativeAssociations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemIdFilter, count, startIndex, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update association details. This API will be used to update startDate, endDate and weight parameters. Weight field can be updated only if creativeRotationType is `WEIGHTED`. CreativeRotationType field is under line item setting.  Callout - A future update will add support for multiple at a time. 
         * @summary Update association details.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<LineItemCreativeAssociation>} [lineItemCreativeAssociation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLineItemCreativeAssociations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemCreativeAssociation?: Array<LineItemCreativeAssociation>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LineItemCreativeAssociationsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLineItemCreativeAssociations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemCreativeAssociation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LineItemCreativeAssociationApi - factory interface
 * @export
 */
export const LineItemCreativeAssociationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LineItemCreativeAssociationApiFp(configuration)
    return {
        /**
         * Create/delete association between line item and creative.  Callout -  Do not pass in startDate, endDate and weight. Use the PUT operation instead to populate these fields. We will add support in POST in a future update. A future update will also include support for multiple at a time. 
         * @summary Create/delete association between line item and creative.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {LineItemCreativeAssociationsRequest} [lineItemCreativeAssociationsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associateLineItemsToCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemCreativeAssociationsRequest?: LineItemCreativeAssociationsRequest, options?: any): AxiosPromise<LineItemCreativeAssociationsResponse> {
            return localVarFp.associateLineItemsToCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemCreativeAssociationsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of creative associations, filtered by specified criteria.
         * @summary Gets a list of line-item / creative associations.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} lineItemIdFilter The returned array includes only associations to line items matching those specified in the comma-delimited string.
         * @param {number} [count] Optional. Sets the number of results in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten results set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten results, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on.
         * @param {number} [startIndex] Optional. Sets a zero-based offset into the requested set of results. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLineItemCreativeAssociations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemIdFilter: string, count?: number, startIndex?: number, options?: any): AxiosPromise<LineItemCreativeAssociations> {
            return localVarFp.listLineItemCreativeAssociations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemIdFilter, count, startIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * Update association details. This API will be used to update startDate, endDate and weight parameters. Weight field can be updated only if creativeRotationType is `WEIGHTED`. CreativeRotationType field is under line item setting.  Callout - A future update will add support for multiple at a time. 
         * @summary Update association details.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<LineItemCreativeAssociation>} [lineItemCreativeAssociation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLineItemCreativeAssociations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, lineItemCreativeAssociation?: Array<LineItemCreativeAssociation>, options?: any): AxiosPromise<Array<LineItemCreativeAssociationsResponse>> {
            return localVarFp.updateLineItemCreativeAssociations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, lineItemCreativeAssociation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for associateLineItemsToCreatives operation in LineItemCreativeAssociationApi.
 * @export
 * @interface LineItemCreativeAssociationApiAssociateLineItemsToCreativesRequest
 */
export interface LineItemCreativeAssociationApiAssociateLineItemsToCreativesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof LineItemCreativeAssociationApiAssociateLineItemsToCreatives
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof LineItemCreativeAssociationApiAssociateLineItemsToCreatives
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {LineItemCreativeAssociationsRequest}
     * @memberof LineItemCreativeAssociationApiAssociateLineItemsToCreatives
     */
    readonly lineItemCreativeAssociationsRequest?: LineItemCreativeAssociationsRequest
}

/**
 * Request parameters for listLineItemCreativeAssociations operation in LineItemCreativeAssociationApi.
 * @export
 * @interface LineItemCreativeAssociationApiListLineItemCreativeAssociationsRequest
 */
export interface LineItemCreativeAssociationApiListLineItemCreativeAssociationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof LineItemCreativeAssociationApiListLineItemCreativeAssociations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof LineItemCreativeAssociationApiListLineItemCreativeAssociations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The returned array includes only associations to line items matching those specified in the comma-delimited string.
     * @type {string}
     * @memberof LineItemCreativeAssociationApiListLineItemCreativeAssociations
     */
    readonly lineItemIdFilter: string

    /**
     * Optional. Sets the number of results in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten results set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten results, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on.
     * @type {number}
     * @memberof LineItemCreativeAssociationApiListLineItemCreativeAssociations
     */
    readonly count?: number

    /**
     * Optional. Sets a zero-based offset into the requested set of results. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0.
     * @type {number}
     * @memberof LineItemCreativeAssociationApiListLineItemCreativeAssociations
     */
    readonly startIndex?: number
}

/**
 * Request parameters for updateLineItemCreativeAssociations operation in LineItemCreativeAssociationApi.
 * @export
 * @interface LineItemCreativeAssociationApiUpdateLineItemCreativeAssociationsRequest
 */
export interface LineItemCreativeAssociationApiUpdateLineItemCreativeAssociationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof LineItemCreativeAssociationApiUpdateLineItemCreativeAssociations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof LineItemCreativeAssociationApiUpdateLineItemCreativeAssociations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {Array<LineItemCreativeAssociation>}
     * @memberof LineItemCreativeAssociationApiUpdateLineItemCreativeAssociations
     */
    readonly lineItemCreativeAssociation?: Array<LineItemCreativeAssociation>
}

/**
 * LineItemCreativeAssociationApi - object-oriented interface
 * @export
 * @class LineItemCreativeAssociationApi
 * @extends {BaseAPI}
 */
export class LineItemCreativeAssociationApi extends BaseAPI {
    /**
     * Create/delete association between line item and creative.  Callout -  Do not pass in startDate, endDate and weight. Use the PUT operation instead to populate these fields. We will add support in POST in a future update. A future update will also include support for multiple at a time. 
     * @summary Create/delete association between line item and creative.
     * @param {LineItemCreativeAssociationApiAssociateLineItemsToCreativesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemCreativeAssociationApi
     */
    public associateLineItemsToCreatives(requestParameters: LineItemCreativeAssociationApiAssociateLineItemsToCreativesRequest, options?: any) {
        return LineItemCreativeAssociationApiFp(this.configuration).associateLineItemsToCreatives(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.lineItemCreativeAssociationsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of creative associations, filtered by specified criteria.
     * @summary Gets a list of line-item / creative associations.
     * @param {LineItemCreativeAssociationApiListLineItemCreativeAssociationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemCreativeAssociationApi
     */
    public listLineItemCreativeAssociations(requestParameters: LineItemCreativeAssociationApiListLineItemCreativeAssociationsRequest, options?: any) {
        return LineItemCreativeAssociationApiFp(this.configuration).listLineItemCreativeAssociations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.lineItemIdFilter, requestParameters.count, requestParameters.startIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update association details. This API will be used to update startDate, endDate and weight parameters. Weight field can be updated only if creativeRotationType is `WEIGHTED`. CreativeRotationType field is under line item setting.  Callout - A future update will add support for multiple at a time. 
     * @summary Update association details.
     * @param {LineItemCreativeAssociationApiUpdateLineItemCreativeAssociationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineItemCreativeAssociationApi
     */
    public updateLineItemCreativeAssociations(requestParameters: LineItemCreativeAssociationApiUpdateLineItemCreativeAssociationsRequest, options?: any) {
        return LineItemCreativeAssociationApiFp(this.configuration).updateLineItemCreativeAssociations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.lineItemCreativeAssociation, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ModerationApi - axios parameter creator
 * @export
 */
export const ModerationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get creative moderation summary by creativeId.
         * @summary Get creative moderation summary by creativeId.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} creativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreativeModeration: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeIdFilter: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getCreativeModeration', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getCreativeModeration', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'creativeIdFilter' is not null or undefined
            assertParamExists('getCreativeModeration', 'creativeIdFilter', creativeIdFilter)
            const localVarPath = `/dsp/moderation/creatives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (creativeIdFilter !== undefined) {
                localVarQueryParameter['creativeIdFilter'] = creativeIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModerationApi - functional programming interface
 * @export
 */
export const ModerationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModerationApiAxiosParamCreator(configuration)
    return {
        /**
         * Get creative moderation summary by creativeId.
         * @summary Get creative moderation summary by creativeId.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} creativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCreativeModeration(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeIdFilter: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DspCreativeModerationV1>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCreativeModeration(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativeIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModerationApi - factory interface
 * @export
 */
export const ModerationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModerationApiFp(configuration)
    return {
        /**
         * Get creative moderation summary by creativeId.
         * @summary Get creative moderation summary by creativeId.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} creativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreativeModeration(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeIdFilter: string, options?: any): AxiosPromise<Array<DspCreativeModerationV1>> {
            return localVarFp.getCreativeModeration(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativeIdFilter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCreativeModeration operation in ModerationApi.
 * @export
 * @interface ModerationApiGetCreativeModerationRequest
 */
export interface ModerationApiGetCreativeModerationRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ModerationApiGetCreativeModeration
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof ModerationApiGetCreativeModeration
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
     * @type {string}
     * @memberof ModerationApiGetCreativeModeration
     */
    readonly creativeIdFilter: string
}

/**
 * ModerationApi - object-oriented interface
 * @export
 * @class ModerationApi
 * @extends {BaseAPI}
 */
export class ModerationApi extends BaseAPI {
    /**
     * Get creative moderation summary by creativeId.
     * @summary Get creative moderation summary by creativeId.
     * @param {ModerationApiGetCreativeModerationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModerationApi
     */
    public getCreativeModeration(requestParameters: ModerationApiGetCreativeModerationRequest, options?: any) {
        return ModerationApiFp(this.configuration).getCreativeModeration(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.creativeIdFilter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an order.  Callout - A future update will add support for multiple at a time. 
         * @summary Create an order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<OrderV22>} [orderV22] An array of order objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrders: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderV22?: Array<OrderV22>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createOrders', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createOrders', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/orders/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dsporders.v2.2+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderV22, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add or remove conversion tracking products from the order. It can be updated by either providing values for productList or productFile field. For productList, up to 2,000 ProductTrackingItems can be added, including up to 20 ProductTrackingItems per domain if FEATURED_WITH_VARIATIONS is specified in productAssociation. For productFile, up to 50,000 Products can be used. Check out our tutorial for more details.
         * @summary Add or remove conversion tracking products from the order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {ProductTrackingV1} [productTrackingV1] Conversion tracking product tracking object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dspOrdersOrderIdConversionTrackingProductsPut: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, productTrackingV1?: ProductTrackingV1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('dspOrdersOrderIdConversionTrackingProductsPut', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('dspOrdersOrderIdConversionTrackingProductsPut', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('dspOrdersOrderIdConversionTrackingProductsPut', 'orderId', orderId)
            const localVarPath = `/dsp/orders/{orderId}/conversionTracking/products`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dspproducttracking.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productTrackingV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export conversion tracking products as a file by identifier. The file URL will expire in 15 minutes.
         * @summary Export conversion tracking products as a file by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportProductsByOrderId: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('exportProductsByOrderId', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('exportProductsByOrderId', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('exportProductsByOrderId', 'orderId', orderId)
            const localVarPath = `/dsp/orders/{orderId}/conversionTracking/products/export`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get conversion tracking information for given order.
         * @summary Get conversion tracking information for given order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversionTrackings: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getConversionTrackings', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getConversionTrackings', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getConversionTrackings', 'orderId', orderId)
            const localVarPath = `/dsp/orders/{orderId}/conversionTracking`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an order with complete information specified by an identifier.
         * @summary Gets an order with complete information specified by an identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getOrder', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getOrder', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getOrder', 'orderId', orderId)
            const localVarPath = `/dsp/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets one or more orders with basic information.
         * @summary Gets one or more orders with basic information.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [startIndex] Optional. Sets a zero-based offset into the requested set of orders. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
         * @param {string} [count] Optional. Sets the number of orders in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten orders set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten orders, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
         * @param {string} [statusFilter] Optional. The returned array is filtered to include only orders with delivery status matching those specified in the comma-delimited string.
         * @param {string} [orderIdFilter] The returned array is filtered to include only orders with identifiers matching those specified in the comma-delimited string. Either one of (OrderIdFilter or advertiserIdFilter) should be provided.
         * @param {string} [advertiserIdFilter] The returned array is filtered to include only orders with identifiers matching those specified in the comma-delimited string. Either one of (OrderIdFilter or advertiserIdFilter) should be provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: string, count?: string, statusFilter?: string, orderIdFilter?: string, advertiserIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getOrders', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getOrders', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/orders/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (statusFilter !== undefined) {
                localVarQueryParameter['statusFilter'] = statusFilter;
            }

            if (orderIdFilter !== undefined) {
                localVarQueryParameter['orderIdFilter'] = orderIdFilter;
            }

            if (advertiserIdFilter !== undefined) {
                localVarQueryParameter['advertiserIdFilter'] = advertiserIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get conversion tracking pixels by identifier.
         * @summary Get conversion tracking pixels by identifier
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPixelsByOrderId: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getPixelsByOrderId', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getPixelsByOrderId', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getPixelsByOrderId', 'orderId', orderId)
            const localVarPath = `/dsp/orders/{orderId}/conversionTracking/pixels`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get conversion tracking products by identifier. If the order was previsouly updated by list of products, response will be a list of products. The maximum size of list will be 2000. If the order was previously updated by product file, please use \'/dsp/orders/{orderId}/conversionTracking/products/export\' to export as a file.
         * @summary Get conversion tracking products by identifier
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByOrderId: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getProductsByOrderId', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getProductsByOrderId', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getProductsByOrderId', 'orderId', orderId)
            const localVarPath = `/dsp/orders/{orderId}/conversionTracking/products`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Setting delivery activation status for the given order id.
         * @summary Set delivery activation status for the given order id.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {DeliveryActivationStatus} status The delivery activation status. If the given status value is not part of enumeration (DeliveryActivationStatus), then response code will be 404.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrderStatus: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, status: DeliveryActivationStatus, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('setOrderStatus', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('setOrderStatus', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('setOrderStatus', 'orderId', orderId)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('setOrderStatus', 'status', status)
            const localVarPath = `/dsp/orders/{orderId}/deliveryActivationStatus`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add or remove conversion tracking information from the order.
         * @summary Add or remove conversion tracking information from the order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {ConversionTrackingV21} [conversionTrackingV21] Conversion tracking object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversionTracking: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, conversionTrackingV21?: ConversionTrackingV21, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateConversionTracking', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateConversionTracking', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('updateConversionTracking', 'orderId', orderId)
            const localVarPath = `/dsp/orders/{orderId}/conversionTracking`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dsporders.v2.1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(conversionTrackingV21, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a full update, not partial patch. All the fields/data returned by GET Order by Id must be provided(including read-only fields). Any field that is changed/removed would be updated as provided in the request. To update `deliveryActivationStatus` use POST deliveryActivationStatus by Order Id instead.  Callout - A future update will add support for multiple at a time. 
         * @summary Update an order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<OrderV22>} [orderV22] An array of order objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrders: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderV22?: Array<OrderV22>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateOrders', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateOrders', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/orders/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dsporders.v2.2+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderV22, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add or remove conversion tracking pixels from the order. The maximum size of pixel list is 100.
         * @summary Add or remove conversion tracking pixels from the order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {Array<string>} [requestBody] Conversion tracking pixel tracking object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePixelsByOrderId: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updatePixelsByOrderId', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updatePixelsByOrderId', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('updatePixelsByOrderId', 'orderId', orderId)
            const localVarPath = `/dsp/orders/{orderId}/conversionTracking/pixels`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dsppixeltracking.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an order.  Callout - A future update will add support for multiple at a time. 
         * @summary Create an order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<OrderV22>} [orderV22] An array of order objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrders(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderV22?: Array<OrderV22>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrders(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderV22, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add or remove conversion tracking products from the order. It can be updated by either providing values for productList or productFile field. For productList, up to 2,000 ProductTrackingItems can be added, including up to 20 ProductTrackingItems per domain if FEATURED_WITH_VARIATIONS is specified in productAssociation. For productFile, up to 50,000 Products can be used. Check out our tutorial for more details.
         * @summary Add or remove conversion tracking products from the order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {ProductTrackingV1} [productTrackingV1] Conversion tracking product tracking object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dspOrdersOrderIdConversionTrackingProductsPut(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, productTrackingV1?: ProductTrackingV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dspOrdersOrderIdConversionTrackingProductsPut(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, productTrackingV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Export conversion tracking products as a file by identifier. The file URL will expire in 15 minutes.
         * @summary Export conversion tracking products as a file by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportProductsByOrderId(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportProductsByOrderId(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get conversion tracking information for given order.
         * @summary Get conversion tracking information for given order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversionTrackings(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversionTrackingV21>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversionTrackings(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an order with complete information specified by an identifier.
         * @summary Gets an order with complete information specified by an identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrder(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderV22>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets one or more orders with basic information.
         * @summary Gets one or more orders with basic information.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [startIndex] Optional. Sets a zero-based offset into the requested set of orders. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
         * @param {string} [count] Optional. Sets the number of orders in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten orders set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten orders, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
         * @param {string} [statusFilter] Optional. The returned array is filtered to include only orders with delivery status matching those specified in the comma-delimited string.
         * @param {string} [orderIdFilter] The returned array is filtered to include only orders with identifiers matching those specified in the comma-delimited string. Either one of (OrderIdFilter or advertiserIdFilter) should be provided.
         * @param {string} [advertiserIdFilter] The returned array is filtered to include only orders with identifiers matching those specified in the comma-delimited string. Either one of (OrderIdFilter or advertiserIdFilter) should be provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrders(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: string, count?: string, statusFilter?: string, orderIdFilter?: string, advertiserIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdersV22>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrders(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, statusFilter, orderIdFilter, advertiserIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get conversion tracking pixels by identifier.
         * @summary Get conversion tracking pixels by identifier
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPixelsByOrderId(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPixelsByOrderId(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get conversion tracking products by identifier. If the order was previsouly updated by list of products, response will be a list of products. The maximum size of list will be 2000. If the order was previously updated by product file, please use \'/dsp/orders/{orderId}/conversionTracking/products/export\' to export as a file.
         * @summary Get conversion tracking products by identifier
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsByOrderId(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductTrackingItemV1>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductsByOrderId(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Setting delivery activation status for the given order id.
         * @summary Set delivery activation status for the given order id.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {DeliveryActivationStatus} status The delivery activation status. If the given status value is not part of enumeration (DeliveryActivationStatus), then response code will be 404.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setOrderStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, status: DeliveryActivationStatus, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setOrderStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add or remove conversion tracking information from the order.
         * @summary Add or remove conversion tracking information from the order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {ConversionTrackingV21} [conversionTrackingV21] Conversion tracking object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateConversionTracking(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, conversionTrackingV21?: ConversionTrackingV21, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConversionTracking(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, conversionTrackingV21, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This is a full update, not partial patch. All the fields/data returned by GET Order by Id must be provided(including read-only fields). Any field that is changed/removed would be updated as provided in the request. To update `deliveryActivationStatus` use POST deliveryActivationStatus by Order Id instead.  Callout - A future update will add support for multiple at a time. 
         * @summary Update an order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<OrderV22>} [orderV22] An array of order objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrders(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderV22?: Array<OrderV22>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrders(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderV22, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add or remove conversion tracking pixels from the order. The maximum size of pixel list is 100.
         * @summary Add or remove conversion tracking pixels from the order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {Array<string>} [requestBody] Conversion tracking pixel tracking object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePixelsByOrderId(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePixelsByOrderId(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * Create an order.  Callout - A future update will add support for multiple at a time. 
         * @summary Create an order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<OrderV22>} [orderV22] An array of order objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrders(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderV22?: Array<OrderV22>, options?: any): AxiosPromise<Array<OrderResponse>> {
            return localVarFp.createOrders(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderV22, options).then((request) => request(axios, basePath));
        },
        /**
         * Add or remove conversion tracking products from the order. It can be updated by either providing values for productList or productFile field. For productList, up to 2,000 ProductTrackingItems can be added, including up to 20 ProductTrackingItems per domain if FEATURED_WITH_VARIATIONS is specified in productAssociation. For productFile, up to 50,000 Products can be used. Check out our tutorial for more details.
         * @summary Add or remove conversion tracking products from the order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {ProductTrackingV1} [productTrackingV1] Conversion tracking product tracking object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dspOrdersOrderIdConversionTrackingProductsPut(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, productTrackingV1?: ProductTrackingV1, options?: any): AxiosPromise<void> {
            return localVarFp.dspOrdersOrderIdConversionTrackingProductsPut(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, productTrackingV1, options).then((request) => request(axios, basePath));
        },
        /**
         * Export conversion tracking products as a file by identifier. The file URL will expire in 15 minutes.
         * @summary Export conversion tracking products as a file by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportProductsByOrderId(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, options?: any): AxiosPromise<string> {
            return localVarFp.exportProductsByOrderId(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get conversion tracking information for given order.
         * @summary Get conversion tracking information for given order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversionTrackings(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, options?: any): AxiosPromise<ConversionTrackingV21> {
            return localVarFp.getConversionTrackings(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an order with complete information specified by an identifier.
         * @summary Gets an order with complete information specified by an identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, options?: any): AxiosPromise<OrderV22> {
            return localVarFp.getOrder(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets one or more orders with basic information.
         * @summary Gets one or more orders with basic information.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} [startIndex] Optional. Sets a zero-based offset into the requested set of orders. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
         * @param {string} [count] Optional. Sets the number of orders in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten orders set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten orders, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
         * @param {string} [statusFilter] Optional. The returned array is filtered to include only orders with delivery status matching those specified in the comma-delimited string.
         * @param {string} [orderIdFilter] The returned array is filtered to include only orders with identifiers matching those specified in the comma-delimited string. Either one of (OrderIdFilter or advertiserIdFilter) should be provided.
         * @param {string} [advertiserIdFilter] The returned array is filtered to include only orders with identifiers matching those specified in the comma-delimited string. Either one of (OrderIdFilter or advertiserIdFilter) should be provided.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: string, count?: string, statusFilter?: string, orderIdFilter?: string, advertiserIdFilter?: string, options?: any): AxiosPromise<OrdersV22> {
            return localVarFp.getOrders(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, statusFilter, orderIdFilter, advertiserIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Get conversion tracking pixels by identifier.
         * @summary Get conversion tracking pixels by identifier
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPixelsByOrderId(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getPixelsByOrderId(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get conversion tracking products by identifier. If the order was previsouly updated by list of products, response will be a list of products. The maximum size of list will be 2000. If the order was previously updated by product file, please use \'/dsp/orders/{orderId}/conversionTracking/products/export\' to export as a file.
         * @summary Get conversion tracking products by identifier
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsByOrderId(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, options?: any): AxiosPromise<Array<ProductTrackingItemV1>> {
            return localVarFp.getProductsByOrderId(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Setting delivery activation status for the given order id.
         * @summary Set delivery activation status for the given order id.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {DeliveryActivationStatus} status The delivery activation status. If the given status value is not part of enumeration (DeliveryActivationStatus), then response code will be 404.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrderStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, status: DeliveryActivationStatus, options?: any): AxiosPromise<void> {
            return localVarFp.setOrderStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, status, options).then((request) => request(axios, basePath));
        },
        /**
         * Add or remove conversion tracking information from the order.
         * @summary Add or remove conversion tracking information from the order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {ConversionTrackingV21} [conversionTrackingV21] Conversion tracking object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversionTracking(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, conversionTrackingV21?: ConversionTrackingV21, options?: any): AxiosPromise<void> {
            return localVarFp.updateConversionTracking(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, conversionTrackingV21, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a full update, not partial patch. All the fields/data returned by GET Order by Id must be provided(including read-only fields). Any field that is changed/removed would be updated as provided in the request. To update `deliveryActivationStatus` use POST deliveryActivationStatus by Order Id instead.  Callout - A future update will add support for multiple at a time. 
         * @summary Update an order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<OrderV22>} [orderV22] An array of order objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrders(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderV22?: Array<OrderV22>, options?: any): AxiosPromise<Array<OrderResponse>> {
            return localVarFp.updateOrders(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderV22, options).then((request) => request(axios, basePath));
        },
        /**
         * Add or remove conversion tracking pixels from the order. The maximum size of pixel list is 100.
         * @summary Add or remove conversion tracking pixels from the order.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} orderId The order identifier.
         * @param {Array<string>} [requestBody] Conversion tracking pixel tracking object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePixelsByOrderId(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, orderId: string, requestBody?: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.updatePixelsByOrderId(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, orderId, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOrders operation in OrderApi.
 * @export
 * @interface OrderApiCreateOrdersRequest
 */
export interface OrderApiCreateOrdersRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OrderApiCreateOrders
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof OrderApiCreateOrders
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of order objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<OrderV22>}
     * @memberof OrderApiCreateOrders
     */
    readonly orderV22?: Array<OrderV22>
}

/**
 * Request parameters for dspOrdersOrderIdConversionTrackingProductsPut operation in OrderApi.
 * @export
 * @interface OrderApiDspOrdersOrderIdConversionTrackingProductsPutRequest
 */
export interface OrderApiDspOrdersOrderIdConversionTrackingProductsPutRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OrderApiDspOrdersOrderIdConversionTrackingProductsPut
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof OrderApiDspOrdersOrderIdConversionTrackingProductsPut
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The order identifier.
     * @type {string}
     * @memberof OrderApiDspOrdersOrderIdConversionTrackingProductsPut
     */
    readonly orderId: string

    /**
     * Conversion tracking product tracking object
     * @type {ProductTrackingV1}
     * @memberof OrderApiDspOrdersOrderIdConversionTrackingProductsPut
     */
    readonly productTrackingV1?: ProductTrackingV1
}

/**
 * Request parameters for exportProductsByOrderId operation in OrderApi.
 * @export
 * @interface OrderApiExportProductsByOrderIdRequest
 */
export interface OrderApiExportProductsByOrderIdRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OrderApiExportProductsByOrderId
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof OrderApiExportProductsByOrderId
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The order identifier.
     * @type {string}
     * @memberof OrderApiExportProductsByOrderId
     */
    readonly orderId: string
}

/**
 * Request parameters for getConversionTrackings operation in OrderApi.
 * @export
 * @interface OrderApiGetConversionTrackingsRequest
 */
export interface OrderApiGetConversionTrackingsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OrderApiGetConversionTrackings
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof OrderApiGetConversionTrackings
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The order identifier.
     * @type {string}
     * @memberof OrderApiGetConversionTrackings
     */
    readonly orderId: string
}

/**
 * Request parameters for getOrder operation in OrderApi.
 * @export
 * @interface OrderApiGetOrderRequest
 */
export interface OrderApiGetOrderRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OrderApiGetOrder
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof OrderApiGetOrder
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The order identifier.
     * @type {string}
     * @memberof OrderApiGetOrder
     */
    readonly orderId: string
}

/**
 * Request parameters for getOrders operation in OrderApi.
 * @export
 * @interface OrderApiGetOrdersRequest
 */
export interface OrderApiGetOrdersRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OrderApiGetOrders
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof OrderApiGetOrders
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a zero-based offset into the requested set of orders. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
     * @type {string}
     * @memberof OrderApiGetOrders
     */
    readonly startIndex?: string

    /**
     * Optional. Sets the number of orders in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten orders set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten orders, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
     * @type {string}
     * @memberof OrderApiGetOrders
     */
    readonly count?: string

    /**
     * Optional. The returned array is filtered to include only orders with delivery status matching those specified in the comma-delimited string.
     * @type {string}
     * @memberof OrderApiGetOrders
     */
    readonly statusFilter?: string

    /**
     * The returned array is filtered to include only orders with identifiers matching those specified in the comma-delimited string. Either one of (OrderIdFilter or advertiserIdFilter) should be provided.
     * @type {string}
     * @memberof OrderApiGetOrders
     */
    readonly orderIdFilter?: string

    /**
     * The returned array is filtered to include only orders with identifiers matching those specified in the comma-delimited string. Either one of (OrderIdFilter or advertiserIdFilter) should be provided.
     * @type {string}
     * @memberof OrderApiGetOrders
     */
    readonly advertiserIdFilter?: string
}

/**
 * Request parameters for getPixelsByOrderId operation in OrderApi.
 * @export
 * @interface OrderApiGetPixelsByOrderIdRequest
 */
export interface OrderApiGetPixelsByOrderIdRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OrderApiGetPixelsByOrderId
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof OrderApiGetPixelsByOrderId
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The order identifier.
     * @type {string}
     * @memberof OrderApiGetPixelsByOrderId
     */
    readonly orderId: string
}

/**
 * Request parameters for getProductsByOrderId operation in OrderApi.
 * @export
 * @interface OrderApiGetProductsByOrderIdRequest
 */
export interface OrderApiGetProductsByOrderIdRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OrderApiGetProductsByOrderId
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof OrderApiGetProductsByOrderId
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The order identifier.
     * @type {string}
     * @memberof OrderApiGetProductsByOrderId
     */
    readonly orderId: string
}

/**
 * Request parameters for setOrderStatus operation in OrderApi.
 * @export
 * @interface OrderApiSetOrderStatusRequest
 */
export interface OrderApiSetOrderStatusRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OrderApiSetOrderStatus
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof OrderApiSetOrderStatus
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The order identifier.
     * @type {string}
     * @memberof OrderApiSetOrderStatus
     */
    readonly orderId: string

    /**
     * The delivery activation status. If the given status value is not part of enumeration (DeliveryActivationStatus), then response code will be 404.
     * @type {DeliveryActivationStatus}
     * @memberof OrderApiSetOrderStatus
     */
    readonly status: DeliveryActivationStatus
}

/**
 * Request parameters for updateConversionTracking operation in OrderApi.
 * @export
 * @interface OrderApiUpdateConversionTrackingRequest
 */
export interface OrderApiUpdateConversionTrackingRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OrderApiUpdateConversionTracking
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof OrderApiUpdateConversionTracking
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The order identifier.
     * @type {string}
     * @memberof OrderApiUpdateConversionTracking
     */
    readonly orderId: string

    /**
     * Conversion tracking object
     * @type {ConversionTrackingV21}
     * @memberof OrderApiUpdateConversionTracking
     */
    readonly conversionTrackingV21?: ConversionTrackingV21
}

/**
 * Request parameters for updateOrders operation in OrderApi.
 * @export
 * @interface OrderApiUpdateOrdersRequest
 */
export interface OrderApiUpdateOrdersRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OrderApiUpdateOrders
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof OrderApiUpdateOrders
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of order objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<OrderV22>}
     * @memberof OrderApiUpdateOrders
     */
    readonly orderV22?: Array<OrderV22>
}

/**
 * Request parameters for updatePixelsByOrderId operation in OrderApi.
 * @export
 * @interface OrderApiUpdatePixelsByOrderIdRequest
 */
export interface OrderApiUpdatePixelsByOrderIdRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OrderApiUpdatePixelsByOrderId
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof OrderApiUpdatePixelsByOrderId
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The order identifier.
     * @type {string}
     * @memberof OrderApiUpdatePixelsByOrderId
     */
    readonly orderId: string

    /**
     * Conversion tracking pixel tracking object
     * @type {Array<string>}
     * @memberof OrderApiUpdatePixelsByOrderId
     */
    readonly requestBody?: Array<string>
}

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * Create an order.  Callout - A future update will add support for multiple at a time. 
     * @summary Create an order.
     * @param {OrderApiCreateOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public createOrders(requestParameters: OrderApiCreateOrdersRequest, options?: any) {
        return OrderApiFp(this.configuration).createOrders(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.orderV22, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add or remove conversion tracking products from the order. It can be updated by either providing values for productList or productFile field. For productList, up to 2,000 ProductTrackingItems can be added, including up to 20 ProductTrackingItems per domain if FEATURED_WITH_VARIATIONS is specified in productAssociation. For productFile, up to 50,000 Products can be used. Check out our tutorial for more details.
     * @summary Add or remove conversion tracking products from the order.
     * @param {OrderApiDspOrdersOrderIdConversionTrackingProductsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public dspOrdersOrderIdConversionTrackingProductsPut(requestParameters: OrderApiDspOrdersOrderIdConversionTrackingProductsPutRequest, options?: any) {
        return OrderApiFp(this.configuration).dspOrdersOrderIdConversionTrackingProductsPut(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.orderId, requestParameters.productTrackingV1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export conversion tracking products as a file by identifier. The file URL will expire in 15 minutes.
     * @summary Export conversion tracking products as a file by identifier.
     * @param {OrderApiExportProductsByOrderIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public exportProductsByOrderId(requestParameters: OrderApiExportProductsByOrderIdRequest, options?: any) {
        return OrderApiFp(this.configuration).exportProductsByOrderId(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get conversion tracking information for given order.
     * @summary Get conversion tracking information for given order.
     * @param {OrderApiGetConversionTrackingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getConversionTrackings(requestParameters: OrderApiGetConversionTrackingsRequest, options?: any) {
        return OrderApiFp(this.configuration).getConversionTrackings(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an order with complete information specified by an identifier.
     * @summary Gets an order with complete information specified by an identifier.
     * @param {OrderApiGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrder(requestParameters: OrderApiGetOrderRequest, options?: any) {
        return OrderApiFp(this.configuration).getOrder(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets one or more orders with basic information.
     * @summary Gets one or more orders with basic information.
     * @param {OrderApiGetOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrders(requestParameters: OrderApiGetOrdersRequest, options?: any) {
        return OrderApiFp(this.configuration).getOrders(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.statusFilter, requestParameters.orderIdFilter, requestParameters.advertiserIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get conversion tracking pixels by identifier.
     * @summary Get conversion tracking pixels by identifier
     * @param {OrderApiGetPixelsByOrderIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getPixelsByOrderId(requestParameters: OrderApiGetPixelsByOrderIdRequest, options?: any) {
        return OrderApiFp(this.configuration).getPixelsByOrderId(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get conversion tracking products by identifier. If the order was previsouly updated by list of products, response will be a list of products. The maximum size of list will be 2000. If the order was previously updated by product file, please use \'/dsp/orders/{orderId}/conversionTracking/products/export\' to export as a file.
     * @summary Get conversion tracking products by identifier
     * @param {OrderApiGetProductsByOrderIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getProductsByOrderId(requestParameters: OrderApiGetProductsByOrderIdRequest, options?: any) {
        return OrderApiFp(this.configuration).getProductsByOrderId(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Setting delivery activation status for the given order id.
     * @summary Set delivery activation status for the given order id.
     * @param {OrderApiSetOrderStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public setOrderStatus(requestParameters: OrderApiSetOrderStatusRequest, options?: any) {
        return OrderApiFp(this.configuration).setOrderStatus(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.orderId, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add or remove conversion tracking information from the order.
     * @summary Add or remove conversion tracking information from the order.
     * @param {OrderApiUpdateConversionTrackingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public updateConversionTracking(requestParameters: OrderApiUpdateConversionTrackingRequest, options?: any) {
        return OrderApiFp(this.configuration).updateConversionTracking(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.orderId, requestParameters.conversionTrackingV21, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This is a full update, not partial patch. All the fields/data returned by GET Order by Id must be provided(including read-only fields). Any field that is changed/removed would be updated as provided in the request. To update `deliveryActivationStatus` use POST deliveryActivationStatus by Order Id instead.  Callout - A future update will add support for multiple at a time. 
     * @summary Update an order.
     * @param {OrderApiUpdateOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public updateOrders(requestParameters: OrderApiUpdateOrdersRequest, options?: any) {
        return OrderApiFp(this.configuration).updateOrders(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.orderV22, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add or remove conversion tracking pixels from the order. The maximum size of pixel list is 100.
     * @summary Add or remove conversion tracking pixels from the order.
     * @param {OrderApiUpdatePixelsByOrderIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public updatePixelsByOrderId(requestParameters: OrderApiUpdatePixelsByOrderIdRequest, options?: any) {
        return OrderApiFp(this.configuration).updatePixelsByOrderId(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.orderId, requestParameters.requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ResponsiveECommerceCreativeApi - axios parameter creator
 * @export
 */
export const ResponsiveECommerceCreativeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new Responsive eCommerce Creatives(REC).  Callout - A future update will add support to create multiple REC creatives at a time. 
         * @summary Create Responsive eCommerce Creatives(REC).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspCreateRecCreativeRequestV1>} [dspCreateRecCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecCreatives: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspCreateRecCreativeRequestV1?: Array<DspCreateRecCreativeRequestV1>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createRecCreatives', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createRecCreatives', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/creatives/rec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dspcreatereccreatives.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dspCreateRecCreativeRequestV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Responsive eCommerce Creative (REC) matching criteria provided in request.  Callout - A future update will add support to get multiple REC creatives at a time. 
         * @summary Get Responsive eCommerce Creative  (REC).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} creativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecCreatives: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeIdFilter: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getRecCreatives', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getRecCreatives', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'creativeIdFilter' is not null or undefined
            assertParamExists('getRecCreatives', 'creativeIdFilter', creativeIdFilter)
            const localVarPath = `/dsp/creatives/rec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (creativeIdFilter !== undefined) {
                localVarQueryParameter['creativeIdFilter'] = creativeIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Preview a Responsive eCommerce Creative(REC).
         * @summary Preview a Responsive eCommerce Creative(REC).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {DspRecCreativePreviewRequestV1} [dspRecCreativePreviewRequestV1] A preview request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewRecCreative: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspRecCreativePreviewRequestV1?: DspRecCreativePreviewRequestV1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('previewRecCreative', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('previewRecCreative', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/creatives/rec/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dsppreviewreccreatives.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dspRecCreativePreviewRequestV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update existing Responsive eCommerce Creatives(REC).  Callout - A future update will add support for multiple at a time. 
         * @summary Update Responsive eCommerce Creatives(REC).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspUpdateRecCreativeRequestV1>} [dspUpdateRecCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecCreatives: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspUpdateRecCreativeRequestV1?: Array<DspUpdateRecCreativeRequestV1>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateRecCreatives', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateRecCreatives', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/creatives/rec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dspupdatereccreatives.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dspUpdateRecCreativeRequestV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResponsiveECommerceCreativeApi - functional programming interface
 * @export
 */
export const ResponsiveECommerceCreativeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResponsiveECommerceCreativeApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new Responsive eCommerce Creatives(REC).  Callout - A future update will add support to create multiple REC creatives at a time. 
         * @summary Create Responsive eCommerce Creatives(REC).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspCreateRecCreativeRequestV1>} [dspCreateRecCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspCreateRecCreativeRequestV1?: Array<DspCreateRecCreativeRequestV1>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DspCreativeResponseV1>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRecCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspCreateRecCreativeRequestV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an Responsive eCommerce Creative (REC) matching criteria provided in request.  Callout - A future update will add support to get multiple REC creatives at a time. 
         * @summary Get Responsive eCommerce Creative  (REC).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} creativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeIdFilter: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DspReadRecCreativesResponseV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativeIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Preview a Responsive eCommerce Creative(REC).
         * @summary Preview a Responsive eCommerce Creative(REC).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {DspRecCreativePreviewRequestV1} [dspRecCreativePreviewRequestV1] A preview request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async previewRecCreative(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspRecCreativePreviewRequestV1?: DspRecCreativePreviewRequestV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DspCreativePreviewResponseV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.previewRecCreative(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspRecCreativePreviewRequestV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update existing Responsive eCommerce Creatives(REC).  Callout - A future update will add support for multiple at a time. 
         * @summary Update Responsive eCommerce Creatives(REC).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspUpdateRecCreativeRequestV1>} [dspUpdateRecCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspUpdateRecCreativeRequestV1?: Array<DspUpdateRecCreativeRequestV1>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DspCreativeResponseV1>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspUpdateRecCreativeRequestV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResponsiveECommerceCreativeApi - factory interface
 * @export
 */
export const ResponsiveECommerceCreativeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResponsiveECommerceCreativeApiFp(configuration)
    return {
        /**
         * Create a new Responsive eCommerce Creatives(REC).  Callout - A future update will add support to create multiple REC creatives at a time. 
         * @summary Create Responsive eCommerce Creatives(REC).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspCreateRecCreativeRequestV1>} [dspCreateRecCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspCreateRecCreativeRequestV1?: Array<DspCreateRecCreativeRequestV1>, options?: any): AxiosPromise<Array<DspCreativeResponseV1>> {
            return localVarFp.createRecCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspCreateRecCreativeRequestV1, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Responsive eCommerce Creative (REC) matching criteria provided in request.  Callout - A future update will add support to get multiple REC creatives at a time. 
         * @summary Get Responsive eCommerce Creative  (REC).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} creativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeIdFilter: string, options?: any): AxiosPromise<DspReadRecCreativesResponseV1> {
            return localVarFp.getRecCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativeIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Preview a Responsive eCommerce Creative(REC).
         * @summary Preview a Responsive eCommerce Creative(REC).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {DspRecCreativePreviewRequestV1} [dspRecCreativePreviewRequestV1] A preview request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewRecCreative(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspRecCreativePreviewRequestV1?: DspRecCreativePreviewRequestV1, options?: any): AxiosPromise<DspCreativePreviewResponseV1> {
            return localVarFp.previewRecCreative(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspRecCreativePreviewRequestV1, options).then((request) => request(axios, basePath));
        },
        /**
         * Update existing Responsive eCommerce Creatives(REC).  Callout - A future update will add support for multiple at a time. 
         * @summary Update Responsive eCommerce Creatives(REC).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspUpdateRecCreativeRequestV1>} [dspUpdateRecCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspUpdateRecCreativeRequestV1?: Array<DspUpdateRecCreativeRequestV1>, options?: any): AxiosPromise<Array<DspCreativeResponseV1>> {
            return localVarFp.updateRecCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspUpdateRecCreativeRequestV1, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRecCreatives operation in ResponsiveECommerceCreativeApi.
 * @export
 * @interface ResponsiveECommerceCreativeApiCreateRecCreativesRequest
 */
export interface ResponsiveECommerceCreativeApiCreateRecCreativesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ResponsiveECommerceCreativeApiCreateRecCreatives
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof ResponsiveECommerceCreativeApiCreateRecCreatives
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<DspCreateRecCreativeRequestV1>}
     * @memberof ResponsiveECommerceCreativeApiCreateRecCreatives
     */
    readonly dspCreateRecCreativeRequestV1?: Array<DspCreateRecCreativeRequestV1>
}

/**
 * Request parameters for getRecCreatives operation in ResponsiveECommerceCreativeApi.
 * @export
 * @interface ResponsiveECommerceCreativeApiGetRecCreativesRequest
 */
export interface ResponsiveECommerceCreativeApiGetRecCreativesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ResponsiveECommerceCreativeApiGetRecCreatives
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof ResponsiveECommerceCreativeApiGetRecCreatives
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
     * @type {string}
     * @memberof ResponsiveECommerceCreativeApiGetRecCreatives
     */
    readonly creativeIdFilter: string
}

/**
 * Request parameters for previewRecCreative operation in ResponsiveECommerceCreativeApi.
 * @export
 * @interface ResponsiveECommerceCreativeApiPreviewRecCreativeRequest
 */
export interface ResponsiveECommerceCreativeApiPreviewRecCreativeRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ResponsiveECommerceCreativeApiPreviewRecCreative
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof ResponsiveECommerceCreativeApiPreviewRecCreative
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A preview request.
     * @type {DspRecCreativePreviewRequestV1}
     * @memberof ResponsiveECommerceCreativeApiPreviewRecCreative
     */
    readonly dspRecCreativePreviewRequestV1?: DspRecCreativePreviewRequestV1
}

/**
 * Request parameters for updateRecCreatives operation in ResponsiveECommerceCreativeApi.
 * @export
 * @interface ResponsiveECommerceCreativeApiUpdateRecCreativesRequest
 */
export interface ResponsiveECommerceCreativeApiUpdateRecCreativesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ResponsiveECommerceCreativeApiUpdateRecCreatives
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof ResponsiveECommerceCreativeApiUpdateRecCreatives
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<DspUpdateRecCreativeRequestV1>}
     * @memberof ResponsiveECommerceCreativeApiUpdateRecCreatives
     */
    readonly dspUpdateRecCreativeRequestV1?: Array<DspUpdateRecCreativeRequestV1>
}

/**
 * ResponsiveECommerceCreativeApi - object-oriented interface
 * @export
 * @class ResponsiveECommerceCreativeApi
 * @extends {BaseAPI}
 */
export class ResponsiveECommerceCreativeApi extends BaseAPI {
    /**
     * Create a new Responsive eCommerce Creatives(REC).  Callout - A future update will add support to create multiple REC creatives at a time. 
     * @summary Create Responsive eCommerce Creatives(REC).
     * @param {ResponsiveECommerceCreativeApiCreateRecCreativesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResponsiveECommerceCreativeApi
     */
    public createRecCreatives(requestParameters: ResponsiveECommerceCreativeApiCreateRecCreativesRequest, options?: any) {
        return ResponsiveECommerceCreativeApiFp(this.configuration).createRecCreatives(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.dspCreateRecCreativeRequestV1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Responsive eCommerce Creative (REC) matching criteria provided in request.  Callout - A future update will add support to get multiple REC creatives at a time. 
     * @summary Get Responsive eCommerce Creative  (REC).
     * @param {ResponsiveECommerceCreativeApiGetRecCreativesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResponsiveECommerceCreativeApi
     */
    public getRecCreatives(requestParameters: ResponsiveECommerceCreativeApiGetRecCreativesRequest, options?: any) {
        return ResponsiveECommerceCreativeApiFp(this.configuration).getRecCreatives(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.creativeIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Preview a Responsive eCommerce Creative(REC).
     * @summary Preview a Responsive eCommerce Creative(REC).
     * @param {ResponsiveECommerceCreativeApiPreviewRecCreativeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResponsiveECommerceCreativeApi
     */
    public previewRecCreative(requestParameters: ResponsiveECommerceCreativeApiPreviewRecCreativeRequest, options?: any) {
        return ResponsiveECommerceCreativeApiFp(this.configuration).previewRecCreative(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.dspRecCreativePreviewRequestV1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update existing Responsive eCommerce Creatives(REC).  Callout - A future update will add support for multiple at a time. 
     * @summary Update Responsive eCommerce Creatives(REC).
     * @param {ResponsiveECommerceCreativeApiUpdateRecCreativesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResponsiveECommerceCreativeApi
     */
    public updateRecCreatives(requestParameters: ResponsiveECommerceCreativeApiUpdateRecCreativesRequest, options?: any) {
        return ResponsiveECommerceCreativeApiFp(this.configuration).updateRecCreatives(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.dspUpdateRecCreativeRequestV1, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VideoCreativeApi - axios parameter creator
 * @export
 */
export const VideoCreativeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a video creative  Callout - A future update will add support to create multiple Video creatives at a time. 
         * @summary Create video creative(s)
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspCreateVideoCreativeRequestV1>} [dspCreateVideoCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVideoCreatives: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspCreateVideoCreativeRequestV1?: Array<DspCreateVideoCreativeRequestV1>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createVideoCreatives', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createVideoCreatives', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/creatives/video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dspcreatevideocreatives.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dspCreateVideoCreativeRequestV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a video creative matching criteria provided in request.  Callout - A future update will add support to get multiple Video creatives at a time. 
         * @summary Get video creative(s)
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} creativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoCreatives: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeIdFilter: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getVideoCreatives', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getVideoCreatives', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'creativeIdFilter' is not null or undefined
            assertParamExists('getVideoCreatives', 'creativeIdFilter', creativeIdFilter)
            const localVarPath = `/dsp/creatives/video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (creativeIdFilter !== undefined) {
                localVarQueryParameter['creativeIdFilter'] = creativeIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Preview a video creative
         * @summary Preview a video creative
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {DspVideoCreativePreviewRequestV1} [dspVideoCreativePreviewRequestV1] A preview request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewVideoCreative: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspVideoCreativePreviewRequestV1?: DspVideoCreativePreviewRequestV1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('previewVideoCreative', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('previewVideoCreative', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/creatives/video/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dsppreviewvideocreatives.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dspVideoCreativePreviewRequestV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a video creative  Callout - A future update will add support to update multiple Video creatives at a time. 
         * @summary Update video creative(s)
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspUpdateVideoCreativeRequestV1>} [dspUpdateVideoCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVideoCreatives: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspUpdateVideoCreativeRequestV1?: Array<DspUpdateVideoCreativeRequestV1>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateVideoCreatives', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateVideoCreatives', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/creatives/video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.dspupdatevideocreatives.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dspUpdateVideoCreativeRequestV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideoCreativeApi - functional programming interface
 * @export
 */
export const VideoCreativeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideoCreativeApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a video creative  Callout - A future update will add support to create multiple Video creatives at a time. 
         * @summary Create video creative(s)
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspCreateVideoCreativeRequestV1>} [dspCreateVideoCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVideoCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspCreateVideoCreativeRequestV1?: Array<DspCreateVideoCreativeRequestV1>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DspCreativeResponseV1>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVideoCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspCreateVideoCreativeRequestV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a video creative matching criteria provided in request.  Callout - A future update will add support to get multiple Video creatives at a time. 
         * @summary Get video creative(s)
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} creativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeIdFilter: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DspReadVideoCreativesResponseV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativeIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Preview a video creative
         * @summary Preview a video creative
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {DspVideoCreativePreviewRequestV1} [dspVideoCreativePreviewRequestV1] A preview request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async previewVideoCreative(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspVideoCreativePreviewRequestV1?: DspVideoCreativePreviewRequestV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DspCreativePreviewResponseV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.previewVideoCreative(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspVideoCreativePreviewRequestV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a video creative  Callout - A future update will add support to update multiple Video creatives at a time. 
         * @summary Update video creative(s)
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspUpdateVideoCreativeRequestV1>} [dspUpdateVideoCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVideoCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspUpdateVideoCreativeRequestV1?: Array<DspUpdateVideoCreativeRequestV1>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DspCreativeResponseV1>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVideoCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspUpdateVideoCreativeRequestV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideoCreativeApi - factory interface
 * @export
 */
export const VideoCreativeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideoCreativeApiFp(configuration)
    return {
        /**
         * Create a video creative  Callout - A future update will add support to create multiple Video creatives at a time. 
         * @summary Create video creative(s)
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspCreateVideoCreativeRequestV1>} [dspCreateVideoCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVideoCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspCreateVideoCreativeRequestV1?: Array<DspCreateVideoCreativeRequestV1>, options?: any): AxiosPromise<Array<DspCreativeResponseV1>> {
            return localVarFp.createVideoCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspCreateVideoCreativeRequestV1, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a video creative matching criteria provided in request.  Callout - A future update will add support to get multiple Video creatives at a time. 
         * @summary Get video creative(s)
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {string} creativeIdFilter The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeIdFilter: string, options?: any): AxiosPromise<DspReadVideoCreativesResponseV1> {
            return localVarFp.getVideoCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativeIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Preview a video creative
         * @summary Preview a video creative
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {DspVideoCreativePreviewRequestV1} [dspVideoCreativePreviewRequestV1] A preview request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewVideoCreative(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspVideoCreativePreviewRequestV1?: DspVideoCreativePreviewRequestV1, options?: any): AxiosPromise<DspCreativePreviewResponseV1> {
            return localVarFp.previewVideoCreative(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspVideoCreativePreviewRequestV1, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a video creative  Callout - A future update will add support to update multiple Video creatives at a time. 
         * @summary Update video creative(s)
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
         * @param {Array<DspUpdateVideoCreativeRequestV1>} [dspUpdateVideoCreativeRequestV1] An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVideoCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dspUpdateVideoCreativeRequestV1?: Array<DspUpdateVideoCreativeRequestV1>, options?: any): AxiosPromise<Array<DspCreativeResponseV1>> {
            return localVarFp.updateVideoCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dspUpdateVideoCreativeRequestV1, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createVideoCreatives operation in VideoCreativeApi.
 * @export
 * @interface VideoCreativeApiCreateVideoCreativesRequest
 */
export interface VideoCreativeApiCreateVideoCreativesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof VideoCreativeApiCreateVideoCreatives
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof VideoCreativeApiCreateVideoCreatives
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<DspCreateVideoCreativeRequestV1>}
     * @memberof VideoCreativeApiCreateVideoCreatives
     */
    readonly dspCreateVideoCreativeRequestV1?: Array<DspCreateVideoCreativeRequestV1>
}

/**
 * Request parameters for getVideoCreatives operation in VideoCreativeApi.
 * @export
 * @interface VideoCreativeApiGetVideoCreativesRequest
 */
export interface VideoCreativeApiGetVideoCreativesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof VideoCreativeApiGetVideoCreatives
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof VideoCreativeApiGetVideoCreatives
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The returned array is filtered to include only creatives with Ids matching those specified in the comma-delimited string.
     * @type {string}
     * @memberof VideoCreativeApiGetVideoCreatives
     */
    readonly creativeIdFilter: string
}

/**
 * Request parameters for previewVideoCreative operation in VideoCreativeApi.
 * @export
 * @interface VideoCreativeApiPreviewVideoCreativeRequest
 */
export interface VideoCreativeApiPreviewVideoCreativeRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof VideoCreativeApiPreviewVideoCreative
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof VideoCreativeApiPreviewVideoCreative
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A preview request.
     * @type {DspVideoCreativePreviewRequestV1}
     * @memberof VideoCreativeApiPreviewVideoCreative
     */
    readonly dspVideoCreativePreviewRequestV1?: DspVideoCreativePreviewRequestV1
}

/**
 * Request parameters for updateVideoCreatives operation in VideoCreativeApi.
 * @export
 * @interface VideoCreativeApiUpdateVideoCreativesRequest
 */
export interface VideoCreativeApiUpdateVideoCreativesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof VideoCreativeApiUpdateVideoCreatives
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input. For DSP profiles, the &#x60;type&#x60; field of the &#x60;accountInfo&#x60; object must be set to &#x60;agency&#x60; and the &#x60;subType&#x60; field must not be &#x60;AMAZON_ATTRIBUTION&#x60;.
     * @type {string}
     * @memberof VideoCreativeApiUpdateVideoCreatives
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<DspUpdateVideoCreativeRequestV1>}
     * @memberof VideoCreativeApiUpdateVideoCreatives
     */
    readonly dspUpdateVideoCreativeRequestV1?: Array<DspUpdateVideoCreativeRequestV1>
}

/**
 * VideoCreativeApi - object-oriented interface
 * @export
 * @class VideoCreativeApi
 * @extends {BaseAPI}
 */
export class VideoCreativeApi extends BaseAPI {
    /**
     * Create a video creative  Callout - A future update will add support to create multiple Video creatives at a time. 
     * @summary Create video creative(s)
     * @param {VideoCreativeApiCreateVideoCreativesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoCreativeApi
     */
    public createVideoCreatives(requestParameters: VideoCreativeApiCreateVideoCreativesRequest, options?: any) {
        return VideoCreativeApiFp(this.configuration).createVideoCreatives(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.dspCreateVideoCreativeRequestV1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a video creative matching criteria provided in request.  Callout - A future update will add support to get multiple Video creatives at a time. 
     * @summary Get video creative(s)
     * @param {VideoCreativeApiGetVideoCreativesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoCreativeApi
     */
    public getVideoCreatives(requestParameters: VideoCreativeApiGetVideoCreativesRequest, options?: any) {
        return VideoCreativeApiFp(this.configuration).getVideoCreatives(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.creativeIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Preview a video creative
     * @summary Preview a video creative
     * @param {VideoCreativeApiPreviewVideoCreativeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoCreativeApi
     */
    public previewVideoCreative(requestParameters: VideoCreativeApiPreviewVideoCreativeRequest, options?: any) {
        return VideoCreativeApiFp(this.configuration).previewVideoCreative(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.dspVideoCreativePreviewRequestV1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a video creative  Callout - A future update will add support to update multiple Video creatives at a time. 
     * @summary Update video creative(s)
     * @param {VideoCreativeApiUpdateVideoCreativesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoCreativeApi
     */
    public updateVideoCreatives(requestParameters: VideoCreativeApiUpdateVideoCreativesRequest, options?: any) {
        return VideoCreativeApiFp(this.configuration).updateVideoCreatives(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.dspUpdateVideoCreativeRequestV1, options).then((request) => request(this.axios, this.basePath));
    }
}


