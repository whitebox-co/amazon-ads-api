/* tslint:disable */
/* eslint-disable */
/**
 * Measurement
 * Measurement management.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Supported values are DSP(Demand Side Platform).
 * @export
 * @enum {string}
 */

export enum AdTypeV1 {
    Dsp = 'DSP'
}

/**
 * The request object of measurement eligibility check.
 * @export
 * @interface BaseEligibilityRequestV1
 */
export interface BaseEligibilityRequestV1 {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<FundingTypeV1>}
     * @memberof BaseEligibilityRequestV1
     */
    fundingTypeFilters?: Array<FundingTypeV1>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof BaseEligibilityRequestV1
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<VendorTypeV1>}
     * @memberof BaseEligibilityRequestV1
     */
    vendorTypeFilters?: Array<VendorTypeV1>;
}
/**
 * The request object of measurement eligibility check.
 * @export
 * @interface BaseEligibilityRequestV1M1
 */
export interface BaseEligibilityRequestV1M1 {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<FundingTypeV1M1>}
     * @memberof BaseEligibilityRequestV1M1
     */
    fundingTypeFilters?: Array<FundingTypeV1M1>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof BaseEligibilityRequestV1M1
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<VendorTypeV1M1>}
     * @memberof BaseEligibilityRequestV1M1
     */
    vendorTypeFilters?: Array<VendorTypeV1M1>;
}
/**
 * The base study object.
 * @export
 * @interface BaseStudyV1
 */
export interface BaseStudyV1 {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof BaseStudyV1
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof BaseStudyV1
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof BaseStudyV1
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof BaseStudyV1
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof BaseStudyV1
     */
    vendorProductId?: string;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof BaseStudyV1
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof BaseStudyV1
     */
    studyResultStatus?: BaseStudyV1StudyResultStatusEnum;
    /**
     * List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
     * @type {Array<string>}
     * @memberof BaseStudyV1
     * @deprecated
     */
    rejectionReasons?: Array<string>;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof BaseStudyV1
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof BaseStudyV1
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof BaseStudyV1
     */
    comment?: string;
    /**
     * The study canonical identifier. Immutable field. This is required for update.
     * @type {string}
     * @memberof BaseStudyV1
     */
    id?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof BaseStudyV1
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof BaseStudyV1
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof BaseStudyV1
     */
    createDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseStudyV1StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * The base study object.
 * @export
 * @interface BaseStudyV1M1
 */
export interface BaseStudyV1M1 {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof BaseStudyV1M1
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    vendorProductId?: string;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    studyResultStatus?: BaseStudyV1M1StudyResultStatusEnum;
    /**
     * List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
     * @type {Array<string>}
     * @memberof BaseStudyV1M1
     * @deprecated
     */
    rejectionReasons?: Array<string>;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    comment?: string;
    /**
     * 
     * @type {Array<ResourceLinkV1M1>}
     * @memberof BaseStudyV1M1
     */
    links?: Array<ResourceLinkV1M1>;
    /**
     * The study canonical identifier. Immutable field. This is required for update.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    id?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof BaseStudyV1M1
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof BaseStudyV1M1
     */
    createDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseStudyV1M1StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * The study benchmark product category.
 * @export
 * @enum {string}
 */

export enum BenchmarkCategoryV1 {
    Appliances = 'APPLIANCES',
    AppsAndGames = 'APPS_AND_GAMES',
    ArtsCraftsAndSewing = 'ARTS_CRAFTS_AND_SEWING',
    Automotive = 'AUTOMOTIVE',
    Baby = 'BABY',
    BeautyAndPersonalCare = 'BEAUTY_AND_PERSONAL_CARE',
    Books = 'BOOKS',
    CellPhonesAndAccessories = 'CELL_PHONES_AND_ACCESSORIES',
    ClothingShoesAndJewelry = 'CLOTHING_SHOES_AND_JEWELRY',
    ComputersAndAccessories = 'COMPUTERS_AND_ACCESSORIES',
    DigitalMusic = 'DIGITAL_MUSIC',
    Electronics = 'ELECTRONICS',
    Education = 'EDUCATION',
    FinancialAndInsurance = 'FINANCIAL_AND_INSURANCE',
    Food = 'FOOD',
    Beverages = 'BEVERAGES',
    HealthAndHousehold = 'HEALTH_AND_HOUSEHOLD',
    HomeAndKitchen = 'HOME_AND_KITCHEN',
    KitchenAndDining = 'KITCHEN_AND_DINING',
    MoviesAndTv = 'MOVIES_AND_TV',
    OfficeProducts = 'OFFICE_PRODUCTS',
    PatioLawnAndGarden = 'PATIO_LAWN_AND_GARDEN',
    PetSupplies = 'PET_SUPPLIES',
    Restaurants = 'RESTAURANTS',
    Software = 'SOFTWARE',
    SportsAndOutdoors = 'SPORTS_AND_OUTDOORS',
    TelecommunicationsServices = 'TELECOMMUNICATIONS_SERVICES',
    ToolsAndHomeImprovement = 'TOOLS_AND_HOME_IMPROVEMENT',
    ToysAndGames = 'TOYS_AND_GAMES',
    VideoGames = 'VIDEO_GAMES',
    Hospitality = 'HOSPITALITY'
}

/**
 * The result of Brand Lift study.
 * @export
 * @interface BrandLiftStudyResultV1
 */
export interface BrandLiftStudyResultV1 {
    /**
     * Total number of responses received in the Survey.
     * @type {number}
     * @memberof BrandLiftStudyResultV1
     */
    totalResponses?: number;
    /**
     * Summary of Brand Lift achieved for each objective.
     * @type {Array<BrandLiftSummaryV1>}
     * @memberof BrandLiftStudyResultV1
     */
    brandLiftSummary?: Array<BrandLiftSummaryV1>;
    /**
     * The canonical Id of Study.
     * @type {string}
     * @memberof BrandLiftStudyResultV1
     */
    studyId?: string;
    /**
     * Detailed response rate for each response in Survey question aggregated by different segments.
     * @type {Array<SurveyResponseResultV1>}
     * @memberof BrandLiftStudyResultV1
     */
    surveyResponses?: Array<SurveyResponseResultV1>;
}
/**
 * The result of Brand Lift study.
 * @export
 * @interface BrandLiftStudyResultV1M1
 */
export interface BrandLiftStudyResultV1M1 {
    /**
     * Total number of responses received in the Survey.
     * @type {number}
     * @memberof BrandLiftStudyResultV1M1
     */
    totalResponses?: number;
    /**
     * Summary of Brand Lift achieved for each objective.
     * @type {Array<BrandLiftSummaryV1M1>}
     * @memberof BrandLiftStudyResultV1M1
     */
    brandLiftSummary?: Array<BrandLiftSummaryV1M1>;
    /**
     * The canonical Id of Study.
     * @type {string}
     * @memberof BrandLiftStudyResultV1M1
     */
    studyId?: string;
    /**
     * Detailed response rate for each response in Survey question aggregated by different segments.
     * @type {Array<SurveyResponseResultV1M1>}
     * @memberof BrandLiftStudyResultV1M1
     */
    surveyResponses?: Array<SurveyResponseResultV1M1>;
}
/**
 * Summary of Brand Lift achieved for an objective.
 * @export
 * @interface BrandLiftSummaryV1
 */
export interface BrandLiftSummaryV1 {
    /**
     * Qualifying responses aggregated to measure the Brand Lift.
     * @type {Array<string>}
     * @memberof BrandLiftSummaryV1
     */
    qualifyingResponses?: Array<string>;
    /**
     * The significance percentage of achieved Brand Lift.
     * @type {number}
     * @memberof BrandLiftSummaryV1
     */
    statisticalSignificance?: number;
    /**
     * Control group response rate.
     * @type {number}
     * @memberof BrandLiftSummaryV1
     */
    controlGroupRate?: number;
    /**
     * 
     * @type {SurveyQuestionObjectiveTypeV1}
     * @memberof BrandLiftSummaryV1
     */
    questionObjective?: SurveyQuestionObjectiveTypeV1;
    /**
     * Ad exposed group response rate.
     * @type {number}
     * @memberof BrandLiftSummaryV1
     */
    adExposedGroupRate?: number;
    /**
     * The benchmark lift rate for the selected product category in the Survey.
     * @type {number}
     * @memberof BrandLiftSummaryV1
     */
    benchmarkLiftRate?: number;
    /**
     * Text of the Survey question.
     * @type {string}
     * @memberof BrandLiftSummaryV1
     */
    questionText?: string;
}
/**
 * Summary of Brand Lift achieved for an objective.
 * @export
 * @interface BrandLiftSummaryV1M1
 */
export interface BrandLiftSummaryV1M1 {
    /**
     * Qualifying responses aggregated to measure the Brand Lift.
     * @type {Array<string>}
     * @memberof BrandLiftSummaryV1M1
     */
    qualifyingResponses?: Array<string>;
    /**
     * The significance percentage of achieved Brand Lift.
     * @type {number}
     * @memberof BrandLiftSummaryV1M1
     */
    statisticalSignificance?: number;
    /**
     * Control group response rate.
     * @type {number}
     * @memberof BrandLiftSummaryV1M1
     */
    controlGroupRate?: number;
    /**
     * 
     * @type {SurveyQuestionObjectiveTypeV1M1}
     * @memberof BrandLiftSummaryV1M1
     */
    questionObjective?: SurveyQuestionObjectiveTypeV1M1;
    /**
     * Ad exposed group response rate.
     * @type {number}
     * @memberof BrandLiftSummaryV1M1
     */
    adExposedGroupRate?: number;
    /**
     * The benchmark lift rate for the selected product category in the Survey.
     * @type {number}
     * @memberof BrandLiftSummaryV1M1
     */
    benchmarkLiftRate?: number;
    /**
     * Text of the Survey question.
     * @type {string}
     * @memberof BrandLiftSummaryV1M1
     */
    questionText?: string;
}
/**
 * The templated measurement survey question.
 * @export
 * @interface CustomSurveyQuestionV1
 */
export interface CustomSurveyQuestionV1 {
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomSurveyQuestionV1
     */
    responses?: Array<string>;
    /**
     * 
     * @type {SurveyQuestionTypeV1}
     * @memberof CustomSurveyQuestionV1
     */
    type?: SurveyQuestionTypeV1;
    /**
     * The survey question text.
     * @type {string}
     * @memberof CustomSurveyQuestionV1
     */
    questionText?: string;
}
/**
 * The campaign study eligibility data.
 * @export
 * @interface DSPBrandLiftEligibilityDataV1
 */
export interface DSPBrandLiftEligibilityDataV1 {
    /**
     * Optional current study identifier, if provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility check.
     * @type {string}
     * @memberof DSPBrandLiftEligibilityDataV1
     */
    currentStudyId?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the eligibility check.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityDataV1
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityDataV1
     */
    orderIds?: Array<string>;
}
/**
 * The request object of DSP brand lift eligibility check.
 * @export
 * @interface DSPBrandLiftEligibilityRequestV1
 */
export interface DSPBrandLiftEligibilityRequestV1 {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<FundingTypeV1>}
     * @memberof DSPBrandLiftEligibilityRequestV1
     */
    fundingTypeFilters?: Array<FundingTypeV1>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityRequestV1
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<VendorTypeV1>}
     * @memberof DSPBrandLiftEligibilityRequestV1
     */
    vendorTypeFilters?: Array<VendorTypeV1>;
    /**
     * Optional current study identifier, if provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility check.
     * @type {string}
     * @memberof DSPBrandLiftEligibilityRequestV1
     */
    currentStudyId?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the eligibility check.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityRequestV1
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityRequestV1
     */
    orderIds?: Array<string>;
}
/**
 * The request object of DSP brand lift eligibility check.
 * @export
 * @interface DSPBrandLiftEligibilityRequestV1M1
 */
export interface DSPBrandLiftEligibilityRequestV1M1 {
    /**
     * FundingType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<FundingTypeV1M1>}
     * @memberof DSPBrandLiftEligibilityRequestV1M1
     */
    fundingTypeFilters?: Array<FundingTypeV1M1>;
    /**
     * VendorProduct identifier filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityRequestV1M1
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * VendorType filters to be applied when checking eligibility status. If not supplied we will check against all available vendor products.
     * @type {Array<VendorTypeV1M1>}
     * @memberof DSPBrandLiftEligibilityRequestV1M1
     */
    vendorTypeFilters?: Array<VendorTypeV1M1>;
    /**
     * Optional current study identifier, if provided orders are expected to be added into this study and the orders already associated with this study will be excluded from certain eligibility check.
     * @type {string}
     * @memberof DSPBrandLiftEligibilityRequestV1M1
     */
    currentStudyId?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the eligibility check.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityRequestV1M1
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPBrandLiftEligibilityRequestV1M1
     */
    orderIds?: Array<string>;
}
/**
 * The basic model for all DSP BRAND_LIFT objective studies.
 * @export
 * @interface DSPBrandLiftMetadataV1
 */
export interface DSPBrandLiftMetadataV1 {
    /**
     * The study brand name.
     * @type {string}
     * @memberof DSPBrandLiftMetadataV1
     */
    brandName?: string;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof DSPBrandLiftMetadataV1
     */
    peerNames?: Array<string>;
    /**
     * 
     * @type {BenchmarkCategoryV1}
     * @memberof DSPBrandLiftMetadataV1
     */
    benchmarkCategory?: BenchmarkCategoryV1;
    /**
     * The study product category.
     * @type {string}
     * @memberof DSPBrandLiftMetadataV1
     */
    productCategory?: string;
}
/**
 * The basic model for all DSP BRAND_LIFT objective studies.
 * @export
 * @interface DSPBrandLiftMetadataV1M1
 */
export interface DSPBrandLiftMetadataV1M1 {
    /**
     * The study brand name.
     * @type {string}
     * @memberof DSPBrandLiftMetadataV1M1
     */
    brandName?: string;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof DSPBrandLiftMetadataV1M1
     */
    peerNames?: Array<string>;
    /**
     * The verb that will be used in the applicable survey questions to construct the question text.
     * @type {string}
     * @memberof DSPBrandLiftMetadataV1M1
     */
    verb?: string;
    /**
     * 
     * @type {BenchmarkCategoryV1}
     * @memberof DSPBrandLiftMetadataV1M1
     */
    benchmarkCategory?: BenchmarkCategoryV1;
    /**
     * The study product category.
     * @type {string}
     * @memberof DSPBrandLiftMetadataV1M1
     */
    productCategory?: string;
}
/**
 * DSP BRAND_LIFT study object.
 * @export
 * @interface DSPBrandLiftStudyV1
 */
export interface DSPBrandLiftStudyV1 {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    vendorProductId?: string;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    studyResultStatus?: DSPBrandLiftStudyV1StudyResultStatusEnum;
    /**
     * List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1
     * @deprecated
     */
    rejectionReasons?: Array<string>;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    comment?: string;
    /**
     * The study canonical identifier. Immutable field. This is required for update.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    id?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof DSPBrandLiftStudyV1
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    createDate?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1
     */
    orderIds?: Array<string>;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    advertiserId?: string;
    /**
     * The study brand name.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    brandName?: string;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1
     */
    peerNames?: Array<string>;
    /**
     * 
     * @type {BenchmarkCategoryV1}
     * @memberof DSPBrandLiftStudyV1
     */
    benchmarkCategory?: BenchmarkCategoryV1;
    /**
     * The study product category.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1
     */
    productCategory?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DSPBrandLiftStudyV1StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * DSP BRAND_LIFT study object.
 * @export
 * @interface DSPBrandLiftStudyV1M1
 */
export interface DSPBrandLiftStudyV1M1 {
    /**
     * List of reasons for study status. For example, when study is marked Rejected or Ineligible, this field would be available.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1M1
     */
    statusReasons?: Array<string>;
    /**
     * The study survey canonical identifier.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    surveyId?: string;
    /**
     * The study end date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the latest endDate of the associated orders.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    endDate?: string;
    /**
     * Optional field. For some vendors, advertisers are required to provide this vendor assigned reference identifier for EXTERNAL_BILLING studies.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    externalReferenceId?: string;
    /**
     * Associated vendor product canonical identifier.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    vendorProductId?: string;
    /**
     * The study last updated date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    lastUpdatedDate?: string;
    /**
     * The status of result of the study.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    studyResultStatus?: DSPBrandLiftStudyV1M1StudyResultStatusEnum;
    /**
     * List of reasons for rejection, this will only be available if the status is REJECTED. This field is deprecated, use statusReasons instead.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1M1
     * @deprecated
     */
    rejectionReasons?: Array<string>;
    /**
     * The study review date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    reviewDate?: string;
    /**
     * The study name.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    name?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    comment?: string;
    /**
     * 
     * @type {Array<ResourceLinkV1M1>}
     * @memberof DSPBrandLiftStudyV1M1
     */
    links?: Array<ResourceLinkV1M1>;
    /**
     * The study canonical identifier. Immutable field. This is required for update.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    id?: string;
    /**
     * The study start date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC. By default this will be the earliest startDate of the associated orders.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    startDate?: string;
    /**
     * 
     * @type {StudyStatusV1}
     * @memberof DSPBrandLiftStudyV1M1
     */
    status?: StudyStatusV1;
    /**
     * The study creation date in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    createDate?: string;
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1M1
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1M1
     */
    orderIds?: Array<string>;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    advertiserId?: string;
    /**
     * The study brand name.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    brandName?: string;
    /**
     * A list of peer names for the study brand.
     * @type {Array<string>}
     * @memberof DSPBrandLiftStudyV1M1
     */
    peerNames?: Array<string>;
    /**
     * The verb that will be used in the applicable survey questions to construct the question text.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    verb?: string;
    /**
     * 
     * @type {BenchmarkCategoryV1}
     * @memberof DSPBrandLiftStudyV1M1
     */
    benchmarkCategory?: BenchmarkCategoryV1;
    /**
     * The study product category.
     * @type {string}
     * @memberof DSPBrandLiftStudyV1M1
     */
    productCategory?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DSPBrandLiftStudyV1M1StudyResultStatusEnum {
    Available = 'AVAILABLE'
}

/**
 * The basic model for all DSP CAMPAIGN_MEASUREMENT objective studies.
 * @export
 * @interface DSPCampaignMeasurementMetadataV1
 */
export interface DSPCampaignMeasurementMetadataV1 {
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof DSPCampaignMeasurementMetadataV1
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPCampaignMeasurementMetadataV1
     */
    orderIds?: Array<string>;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof DSPCampaignMeasurementMetadataV1
     */
    advertiserId?: string;
}
/**
 * The basic model for all DSP CAMPAIGN_MEASUREMENT objective studies.
 * @export
 * @interface DSPCampaignMeasurementMetadataV1M1
 */
export interface DSPCampaignMeasurementMetadataV1M1 {
    /**
     * A list of canonical lineItem identifiers that are excluded from the study.
     * @type {Array<string>}
     * @memberof DSPCampaignMeasurementMetadataV1M1
     */
    excludedLineItemIds?: Array<string>;
    /**
     * A list of canonical order identifiers that are associated with the study. By default all lineItems in those orders will be included.
     * @type {Array<string>}
     * @memberof DSPCampaignMeasurementMetadataV1M1
     */
    orderIds?: Array<string>;
    /**
     * The associated advertiser identifier. Immutable field.
     * @type {string}
     * @memberof DSPCampaignMeasurementMetadataV1M1
     */
    advertiserId?: string;
}
/**
 * Fields that will be checked as part of eligibility API call.
 * @export
 * @enum {string}
 */

export enum EligibilityFieldV1 {
    Locale = 'LOCALE',
    Budget = 'BUDGET',
    Goal = 'GOAL',
    StartTime = 'START_TIME',
    EndTime = 'END_TIME',
    FlightLength = 'FLIGHT_LENGTH',
    LeadTime = 'LEAD_TIME',
    Impressions = 'IMPRESSIONS',
    Order = 'ORDER'
}

/**
 * Supported values are WARNING, ERROR. ERROR severity issues need to be resolved while WARNING severity issues can be ignored.
 * @export
 * @enum {string}
 */

export enum EligibilityIssueSeverityV1 {
    Warning = 'WARNING',
    Error = 'ERROR'
}

/**
 * The list of eligibility issues.
 * @export
 * @interface EligibilityIssueV1
 */
export interface EligibilityIssueV1 {
    /**
     * 
     * @type {EligibilityIssueSeverityV1}
     * @memberof EligibilityIssueV1
     */
    severity?: EligibilityIssueSeverityV1;
    /**
     * An enumerated issue code for machine use.
     * @type {string}
     * @memberof EligibilityIssueV1
     */
    code?: string;
    /**
     * 
     * @type {EligibilityFieldV1}
     * @memberof EligibilityIssueV1
     */
    field?: EligibilityFieldV1;
    /**
     * A human-readable description of the issue with suggestions on how to resolve the issue.
     * @type {string}
     * @memberof EligibilityIssueV1
     */
    message?: string;
}
/**
 * The eligibility metadata.
 * @export
 * @interface EligibilityMetadataV1
 */
export interface EligibilityMetadataV1 {
    /**
     * The latest end date of the associated orders in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof EligibilityMetadataV1
     */
    endDate?: string;
    /**
     * The total estimated impressions.
     * @type {number}
     * @memberof EligibilityMetadataV1
     */
    impressions?: number;
    /**
     * The flight length of the associated orders. Expressed in days.
     * @type {number}
     * @memberof EligibilityMetadataV1
     */
    flightLength?: number;
    /**
     * The earliest start date of associated orders in ISO format (YYYY-MM-DDThh:mm:ssTZD). Timezone is UTC.
     * @type {string}
     * @memberof EligibilityMetadataV1
     */
    startDate?: string;
    /**
     * The total budget. Expressed in dollars.
     * @type {number}
     * @memberof EligibilityMetadataV1
     */
    budget?: number;
}
/**
 * The eligibility check response object.
 * @export
 * @interface EligibilityResponseV1
 */
export interface EligibilityResponseV1 {
    /**
     * 
     * @type {EligibilityMetadataV1}
     * @memberof EligibilityResponseV1
     */
    metadata?: EligibilityMetadataV1;
    /**
     * 
     * @type {string}
     * @memberof EligibilityResponseV1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<VendorProductEligibilityV1>}
     * @memberof EligibilityResponseV1
     */
    vendorProductEligibilities?: Array<VendorProductEligibilityV1>;
}
/**
 * Supported values are ELIGIBLE, INELIGIBLE and ELIGIBLE_WITH_WARNING. INELIGIBLE status indicates the study can not be created.
 * @export
 * @enum {string}
 */

export enum EligibilityStatusV1 {
    Eligible = 'ELIGIBLE',
    Ineligible = 'INELIGIBLE',
    EligibleWithWarning = 'ELIGIBLE_WITH_WARNING'
}

/**
 * The error response object.
 * @export
 * @interface ErrorV1
 */
export interface ErrorV1 {
    /**
     * Request Id that uniquely identifies your request.
     * @type {string}
     * @memberof ErrorV1
     */
    requestId?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof ErrorV1
     */
    message?: string;
    /**
     * 
     * @type {Array<SubErrorV1>}
     * @memberof ErrorV1
     */
    errors?: Array<SubErrorV1>;
}
/**
 * The measurement funding type. For COMPLIMENTARY studies the cost will be covered by Amazon.
 * @export
 * @enum {string}
 */

export enum FundingTypeV1 {
    Complimentary = 'COMPLIMENTARY'
}

/**
 * The measurement funding type. For COMPLIMENTARY studies the cost will be covered by Amazon.
 * @export
 * @enum {string}
 */

export enum FundingTypeV1M1 {
    Complimentary = 'COMPLIMENTARY',
    ThirdPartyPayment = 'THIRD_PARTY_PAYMENT'
}

/**
 * The grid question response object. Only applicable for SINGLE_SELECT_GRID type question.
 * @export
 * @interface GridQuestionResponsesV1M1
 */
export interface GridQuestionResponsesV1M1 {
    /**
     * 
     * @type {Array<SurveyQuestionPlaceholderFieldValueV1>}
     * @memberof GridQuestionResponsesV1M1
     */
    columns?: Array<SurveyQuestionPlaceholderFieldValueV1>;
    /**
     * 
     * @type {Array<SurveyQuestionPlaceholderFieldValueV1>}
     * @memberof GridQuestionResponsesV1M1
     */
    rows?: Array<SurveyQuestionPlaceholderFieldValueV1>;
}
/**
 * The measurement country.
 * @export
 * @enum {string}
 */

export enum MeasurementCountryV1 {
    Us = 'US',
    Ca = 'CA',
    Uk = 'UK',
    De = 'DE',
    It = 'IT',
    Es = 'ES',
    Fr = 'FR',
    Jp = 'JP',
    Mx = 'MX',
    Ae = 'AE',
    Au = 'AU',
    Nl = 'NL',
    Br = 'BR'
}

/**
 * The measurement budget optimization goal type goal.
 * @export
 * @enum {string}
 */

export enum MeasurementGoalV1 {
    EngagementWithMyAd = 'ENGAGEMENT_WITH_MY_AD',
    ConsiderationsOnAmazon = 'CONSIDERATIONS_ON_AMAZON',
    ConversionsOffAmazon = 'CONVERSIONS_OFF_AMAZON',
    PurchasesOnAmazon = 'PURCHASES_ON_AMAZON',
    MobileAppInstalls = 'MOBILE_APP_INSTALLS',
    Awareness = 'AWARENESS'
}

/**
 * The measurement locale.
 * @export
 * @enum {string}
 */

export enum MeasurementLocaleV1 {
    EnUs = 'EN_US'
}

/**
 * The marketplace with corresponding rules.
 * @export
 * @interface MeasurementMarketplaceV1
 */
export interface MeasurementMarketplaceV1 {
    /**
     * 
     * @type {MeasurementCountryV1}
     * @memberof MeasurementMarketplaceV1
     */
    country?: MeasurementCountryV1;
    /**
     * 
     * @type {Array<MeasurementLocaleV1>}
     * @memberof MeasurementMarketplaceV1
     */
    supportedLocales?: Array<MeasurementLocaleV1>;
    /**
     * The minimum impressions.
     * @type {number}
     * @memberof MeasurementMarketplaceV1
     */
    minimumImpressions?: number;
    /**
     * The minimum budget. Expressed in dollars.
     * @type {number}
     * @memberof MeasurementMarketplaceV1
     */
    minimumBudget?: number;
}
/**
 * A list of studies.
 * @export
 * @interface PaginatedDSPBrandLiftStudiesV1
 */
export interface PaginatedDSPBrandLiftStudiesV1 {
    /**
     * 
     * @type {string}
     * @memberof PaginatedDSPBrandLiftStudiesV1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<DSPBrandLiftStudyV1>}
     * @memberof PaginatedDSPBrandLiftStudiesV1
     */
    measurements?: Array<DSPBrandLiftStudyV1>;
}
/**
 * A list of studies.
 * @export
 * @interface PaginatedDSPBrandLiftStudiesV1M1
 */
export interface PaginatedDSPBrandLiftStudiesV1M1 {
    /**
     * 
     * @type {string}
     * @memberof PaginatedDSPBrandLiftStudiesV1M1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<DSPBrandLiftStudyV1M1>}
     * @memberof PaginatedDSPBrandLiftStudiesV1M1
     */
    measurements?: Array<DSPBrandLiftStudyV1M1>;
}
/**
 * 
 * @export
 * @interface PaginatedSurveyQuestionTemplatesV1
 */
export interface PaginatedSurveyQuestionTemplatesV1 {
    /**
     * 
     * @type {Array<SurveyQuestionTemplateV1>}
     * @memberof PaginatedSurveyQuestionTemplatesV1
     */
    surveyQuestionTemplates?: Array<SurveyQuestionTemplateV1>;
    /**
     * The total number of templates.
     * @type {number}
     * @memberof PaginatedSurveyQuestionTemplatesV1
     */
    totalResults?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSurveyQuestionTemplatesV1
     */
    nextToken?: string;
}
/**
 * 
 * @export
 * @interface PaginatedSurveyQuestionTemplatesV1M1
 */
export interface PaginatedSurveyQuestionTemplatesV1M1 {
    /**
     * 
     * @type {Array<SurveyQuestionTemplateV1M1>}
     * @memberof PaginatedSurveyQuestionTemplatesV1M1
     */
    surveyQuestionTemplates?: Array<SurveyQuestionTemplateV1M1>;
    /**
     * The total number of templates.
     * @type {number}
     * @memberof PaginatedSurveyQuestionTemplatesV1M1
     */
    totalResults?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSurveyQuestionTemplatesV1M1
     */
    nextToken?: string;
}
/**
 * A list of study surveys.
 * @export
 * @interface PaginatedSurveysV1
 */
export interface PaginatedSurveysV1 {
    /**
     * 
     * @type {string}
     * @memberof PaginatedSurveysV1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<SurveyV1>}
     * @memberof PaginatedSurveysV1
     */
    surveys?: Array<SurveyV1>;
}
/**
 * A list of study surveys.
 * @export
 * @interface PaginatedSurveysV1M1
 */
export interface PaginatedSurveysV1M1 {
    /**
     * 
     * @type {string}
     * @memberof PaginatedSurveysV1M1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<SurveyV1M1>}
     * @memberof PaginatedSurveysV1M1
     */
    surveys?: Array<SurveyV1M1>;
}
/**
 * A list of measurement vendor products policies.
 * @export
 * @interface PaginatedVendorProductPoliciesV1
 */
export interface PaginatedVendorProductPoliciesV1 {
    /**
     * The total number of vendor products.
     * @type {number}
     * @memberof PaginatedVendorProductPoliciesV1
     */
    totalResults?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedVendorProductPoliciesV1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<VendorProductPolicyV1>}
     * @memberof PaginatedVendorProductPoliciesV1
     */
    policies?: Array<VendorProductPolicyV1>;
}
/**
 * A list of measurement vendor products policies.
 * @export
 * @interface PaginatedVendorProductPoliciesV1M1
 */
export interface PaginatedVendorProductPoliciesV1M1 {
    /**
     * The total number of vendor products.
     * @type {number}
     * @memberof PaginatedVendorProductPoliciesV1M1
     */
    totalResults?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedVendorProductPoliciesV1M1
     */
    nextToken?: string;
    /**
     * 
     * @type {Array<VendorProductPolicyV1M1>}
     * @memberof PaginatedVendorProductPoliciesV1M1
     */
    policies?: Array<VendorProductPolicyV1M1>;
}
/**
 * A list of measurement vendor products.
 * @export
 * @interface PaginatedVendorProductsV1
 */
export interface PaginatedVendorProductsV1 {
    /**
     * The total number of vendor products.
     * @type {number}
     * @memberof PaginatedVendorProductsV1
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<VendorProductV1>}
     * @memberof PaginatedVendorProductsV1
     */
    vendorProducts?: Array<VendorProductV1>;
    /**
     * 
     * @type {string}
     * @memberof PaginatedVendorProductsV1
     */
    nextToken?: string;
}
/**
 * A list of measurement vendor products.
 * @export
 * @interface PaginatedVendorProductsV1M1
 */
export interface PaginatedVendorProductsV1M1 {
    /**
     * The total number of vendor products.
     * @type {number}
     * @memberof PaginatedVendorProductsV1M1
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<VendorProductV1M1>}
     * @memberof PaginatedVendorProductsV1M1
     */
    vendorProducts?: Array<VendorProductV1M1>;
    /**
     * 
     * @type {string}
     * @memberof PaginatedVendorProductsV1M1
     */
    nextToken?: string;
}
/**
 * The placeholder value type.
 * @export
 * @enum {string}
 */

export enum PlaceholderValueTypeV1 {
    String = 'STRING',
    Integer = 'INTEGER'
}

/**
 * The link that can be used to access corresponding resources in advertising portal.
 * @export
 * @interface ResourceLinkV1M1
 */
export interface ResourceLinkV1M1 {
    /**
     * The resource name.
     * @type {string}
     * @memberof ResourceLinkV1M1
     */
    name?: string;
    /**
     * The resource url.
     * @type {string}
     * @memberof ResourceLinkV1M1
     */
    url?: string;
}
/**
 * Measurement category based on the purpose of the measurement.
 * @export
 * @enum {string}
 */

export enum StudyObjectiveV1 {
    CampaignMeasurement = 'CAMPAIGN_MEASUREMENT'
}

/**
 * Study response.
 * @export
 * @interface StudyResponseV1
 */
export interface StudyResponseV1 {
    /**
     * An enumerated success or error code for machine use.
     * @type {string}
     * @memberof StudyResponseV1
     */
    code?: string;
    /**
     * The index of the object in the request, starting from 1.
     * @type {number}
     * @memberof StudyResponseV1
     */
    index?: number;
    /**
     * The study canonical identifier.
     * @type {string}
     * @memberof StudyResponseV1
     */
    studyId?: string;
    /**
     * A human-readable message of the code.
     * @type {string}
     * @memberof StudyResponseV1
     */
    message?: string;
    /**
     * 
     * @type {Array<SubErrorV1>}
     * @memberof StudyResponseV1
     */
    errors?: Array<SubErrorV1>;
}
/**
 * Studies response.
 * @export
 * @interface StudyResponsesV1
 */
export interface StudyResponsesV1 {
    /**
     * Request Id that uniquely identifies your request.
     * @type {string}
     * @memberof StudyResponsesV1
     */
    requestId?: string;
    /**
     * 
     * @type {Array<StudyResponseV1>}
     * @memberof StudyResponsesV1
     */
    responses?: Array<StudyResponseV1>;
}
/**
 * Review an study.
 * @export
 * @interface StudyReviewRequestV1
 */
export interface StudyReviewRequestV1 {
    /**
     * List of reasons for study status. For example, when study is marked REJECTED or INELIGIBLE, this field would be available.
     * @type {Array<string>}
     * @memberof StudyReviewRequestV1
     */
    statusReasons?: Array<string>;
    /**
     * List of reasons for rejection, this will only be required if the status is REJECTED. This field is deprecated, use statusReasons instead.
     * @type {Array<string>}
     * @memberof StudyReviewRequestV1
     * @deprecated
     */
    rejectionReasons?: Array<string>;
    /**
     * The study canonical identifier.
     * @type {string}
     * @memberof StudyReviewRequestV1
     */
    studyId?: string;
    /**
     * The approver\'s comment on why the study is approved/rejected.
     * @type {string}
     * @memberof StudyReviewRequestV1
     */
    comment?: string;
    /**
     * 
     * @type {StudyReviewStatusV1}
     * @memberof StudyReviewRequestV1
     */
    status?: StudyReviewStatusV1;
}
/**
 * The study review status. APPROVED studies will start delivering once reach the startDate.
 * @export
 * @enum {string}
 */

export enum StudyReviewStatusV1 {
    Approved = 'APPROVED',
    Rejected = 'REJECTED',
    Infeasible = 'INFEASIBLE'
}

/**
 * The study status. Only required if study is in DRAFT as part of study creation/update.
 * @export
 * @enum {string}
 */

export enum StudyStatusV1 {
    Running = 'RUNNING',
    Pending = 'PENDING',
    Approved = 'APPROVED',
    Rejected = 'REJECTED',
    Ended = 'ENDED',
    Cancelled = 'CANCELLED',
    Draft = 'DRAFT',
    Infeasible = 'INFEASIBLE'
}

/**
 * The study type.
 * @export
 * @enum {string}
 */

export enum StudyTypeV1 {
    BrandLift = 'BRAND_LIFT'
}

/**
 * The sub error object.
 * @export
 * @interface SubErrorV1
 */
export interface SubErrorV1 {
    /**
     * 
     * @type {string}
     * @memberof SubErrorV1
     */
    fieldName?: string;
    /**
     * 
     * @type {string}
     * @memberof SubErrorV1
     */
    errorType: string;
    /**
     * 
     * @type {string}
     * @memberof SubErrorV1
     */
    message: string;
}
/**
 * The survey error object.
 * @export
 * @interface SurveyErrorV1
 */
export interface SurveyErrorV1 {
    /**
     * 
     * @type {string}
     * @memberof SurveyErrorV1
     */
    fieldName?: string;
    /**
     * 
     * @type {string}
     * @memberof SurveyErrorV1
     */
    questionTemplateId?: string;
    /**
     * 
     * @type {string}
     * @memberof SurveyErrorV1
     */
    errorType: string;
    /**
     * 
     * @type {string}
     * @memberof SurveyErrorV1
     */
    message: string;
}
/**
 * The requirement for specific survey question category.
 * @export
 * @interface SurveyQuestionCategoryRequirementV1M1
 */
export interface SurveyQuestionCategoryRequirementV1M1 {
    /**
     * The minimum number of questions required for the question category.
     * @type {number}
     * @memberof SurveyQuestionCategoryRequirementV1M1
     */
    minimumQuestions?: number;
    /**
     * The maximum number of questions required for the question category.
     * @type {number}
     * @memberof SurveyQuestionCategoryRequirementV1M1
     */
    maximumQuestions?: number;
    /**
     * 
     * @type {SurveyQuestionCategoryV1M1}
     * @memberof SurveyQuestionCategoryRequirementV1M1
     */
    category?: SurveyQuestionCategoryV1M1;
}
/**
 * The survey question category.
 * @export
 * @enum {string}
 */

export enum SurveyQuestionCategoryV1M1 {
    BrandKpi = 'BRAND_KPI',
    Weighting = 'WEIGHTING',
    Custom = 'CUSTOM'
}

/**
 * The grid question response object. Only applicable for SINGLE_SELECT_GRID type question.
 * @export
 * @interface SurveyQuestionGridQuestionResponseV1M1
 */
export interface SurveyQuestionGridQuestionResponseV1M1 {
    /**
     * 
     * @type {SurveyQuestionPlaceholderCandidateV1}
     * @memberof SurveyQuestionGridQuestionResponseV1M1
     */
    columns?: SurveyQuestionPlaceholderCandidateV1;
    /**
     * 
     * @type {SurveyQuestionPlaceholderCandidateV1}
     * @memberof SurveyQuestionGridQuestionResponseV1M1
     */
    rows?: SurveyQuestionPlaceholderCandidateV1;
}
/**
 * The survey objective.
 * @export
 * @enum {string}
 */

export enum SurveyQuestionObjectiveTypeV1 {
    Awareness = 'AWARENESS',
    Preference = 'PREFERENCE',
    Favorability = 'FAVORABILITY',
    AdRecall = 'AD_RECALL',
    Intent = 'INTENT',
    Attitudes = 'ATTITUDES'
}

/**
 * The survey objective.
 * @export
 * @enum {string}
 */

export enum SurveyQuestionObjectiveTypeV1M1 {
    Awareness = 'AWARENESS',
    Preference = 'PREFERENCE',
    Favorability = 'FAVORABILITY',
    AdRecall = 'AD_RECALL',
    Intent = 'INTENT',
    Attitudes = 'ATTITUDES',
    UnaidedAwareness = 'UNAIDED_AWARENESS',
    Consideration = 'CONSIDERATION',
    Age = 'AGE',
    Gender = 'GENDER',
    HouseholdIncome = 'HOUSEHOLD_INCOME',
    HouseholdSize = 'HOUSEHOLD_SIZE',
    ChildrenInHousehold = 'CHILDREN_IN_HOUSEHOLD',
    Education = 'EDUCATION',
    Ethnicity = 'ETHNICITY',
    TimeOnline = 'TIME_ONLINE',
    TvMediaConsumption = 'TV_MEDIA_CONSUMPTION',
    InMarketStatus = 'IN_MARKET_STATUS',
    PurchaseFrequency = 'PURCHASE_FREQUENCY',
    PurchaseHistory = 'PURCHASE_HISTORY',
    PurchaseLocation = 'PURCHASE_LOCATION'
}

/**
 * Allowed value range for placeholder.
 * @export
 * @interface SurveyQuestionPlaceholderAllowedRangeV1
 */
export interface SurveyQuestionPlaceholderAllowedRangeV1 {
    /**
     * The minimum allowed value.
     * @type {number}
     * @memberof SurveyQuestionPlaceholderAllowedRangeV1
     */
    minimumValue?: number;
    /**
     * The field value that this range depends on. Will be empty if this range is the default range.
     * @type {string}
     * @memberof SurveyQuestionPlaceholderAllowedRangeV1
     */
    parentValue?: string;
    /**
     * The maximum allowed value.
     * @type {number}
     * @memberof SurveyQuestionPlaceholderAllowedRangeV1
     */
    maximumValue?: number;
    /**
     * The field name that this range depends on. Will be empty if this range is the default range.
     * @type {string}
     * @memberof SurveyQuestionPlaceholderAllowedRangeV1
     */
    parentField?: string;
}
/**
 * Allowed values for placeholder.
 * @export
 * @interface SurveyQuestionPlaceholderAllowedValueV1
 */
export interface SurveyQuestionPlaceholderAllowedValueV1 {
    /**
     * Allowed values for placeholder.
     * @type {Array<string>}
     * @memberof SurveyQuestionPlaceholderAllowedValueV1
     */
    values?: Array<string>;
    /**
     * The field value that this value list depend on. Will be empty if this is the default list.
     * @type {string}
     * @memberof SurveyQuestionPlaceholderAllowedValueV1
     */
    parentValue?: string;
    /**
     * The field name that this value list depends on. Will be empty if this is the default list.
     * @type {string}
     * @memberof SurveyQuestionPlaceholderAllowedValueV1
     */
    parentField?: string;
}
/**
 * The placeholder candidate in Survey question.
 * @export
 * @interface SurveyQuestionPlaceholderCandidateV1
 */
export interface SurveyQuestionPlaceholderCandidateV1 {
    /**
     * Allowed values for placeholder. Will be empty if placeholder is free text field.
     * @type {Array<SurveyQuestionPlaceholderAllowedValueV1>}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    allowedValues?: Array<SurveyQuestionPlaceholderAllowedValueV1>;
    /**
     * The maximum allowed character length for each individual placeholder value.
     * @type {number}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    maximumValueLength?: number;
    /**
     * The survey question placeholder field name.
     * @type {string}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    fieldName?: string;
    /**
     * Allowed value ranges for placeholder. Only applicable if the valueType is INTEGER.
     * @type {Array<SurveyQuestionPlaceholderAllowedRangeV1>}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    allowedValueRanges?: Array<SurveyQuestionPlaceholderAllowedRangeV1>;
    /**
     * 
     * @type {PlaceholderValueTypeV1}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    valueType?: PlaceholderValueTypeV1;
    /**
     * Where the placeholder values will be inferred from.
     * @type {Array<string>}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    inferredFields?: Array<string>;
    /**
     * Default values that will be appended to the values list regardless.
     * @type {Array<string>}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    defaultValues?: Array<string>;
    /**
     * The minimum allowed character length for each individual placeholder value.
     * @type {number}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    minimumValueLength?: number;
    /**
     * Whether custom value is allowed for the placeholder.
     * @type {boolean}
     * @memberof SurveyQuestionPlaceholderCandidateV1
     */
    allowCustomValue?: boolean;
}
/**
 * 
 * @export
 * @interface SurveyQuestionPlaceholderFieldValueV1
 */
export interface SurveyQuestionPlaceholderFieldValueV1 {
    /**
     * The survey question placeholder field value.
     * @type {string}
     * @memberof SurveyQuestionPlaceholderFieldValueV1
     */
    value?: string;
    /**
     * This is only required if the corresponding field is \'response\', this will help to define if the response value will be counted as a positive one in the study report.
     * @type {boolean}
     * @memberof SurveyQuestionPlaceholderFieldValueV1
     */
    isQualifying?: boolean;
}
/**
 * The object specifying a placeholder in Survey question.
 * @export
 * @interface SurveyQuestionPlaceholderV1
 */
export interface SurveyQuestionPlaceholderV1 {
    /**
     * The survey question placeholder field name.
     * @type {string}
     * @memberof SurveyQuestionPlaceholderV1
     */
    fieldName?: string;
    /**
     * The survey question placeholder field values.
     * @type {Array<SurveyQuestionPlaceholderFieldValueV1>}
     * @memberof SurveyQuestionPlaceholderV1
     */
    fieldValues?: Array<SurveyQuestionPlaceholderFieldValueV1>;
}
/**
 * The survey question sub-category. Only applicable to certain categories
 * @export
 * @enum {string}
 */

export enum SurveyQuestionSubCategoryV1M1 {
    Demographic = 'DEMOGRAPHIC',
    Behavior = 'BEHAVIOR',
    PurchaseHistory = 'PURCHASE_HISTORY'
}

/**
 * Survey question template for vendor product.
 * @export
 * @interface SurveyQuestionTemplateV1
 */
export interface SurveyQuestionTemplateV1 {
    /**
     * The minimum number of qualifying responses required for the question. This will be available if the qualifying responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1
     */
    minimumQualifyingResponses?: number;
    /**
     * The maximum number of qualifying responses allowed for the question. This will be available if the qualifying responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1
     */
    maximumQualifyingResponses?: number;
    /**
     * The pre-defined qualifying survey question responses with placeholders, this will help to define which responses will be counted as positive ones in the study report.
     * @type {Array<string>}
     * @memberof SurveyQuestionTemplateV1
     */
    qualifyingResponses?: Array<string>;
    /**
     * The pre-defined survey question responses with placeholders.
     * @type {Array<string>}
     * @memberof SurveyQuestionTemplateV1
     */
    questionResponses?: Array<string>;
    /**
     * 
     * @type {MeasurementLocaleV1}
     * @memberof SurveyQuestionTemplateV1
     */
    locale?: MeasurementLocaleV1;
    /**
     * 
     * @type {SurveyQuestionTypeV1}
     * @memberof SurveyQuestionTemplateV1
     */
    type?: SurveyQuestionTypeV1;
    /**
     * 
     * @type {SurveyQuestionObjectiveTypeV1}
     * @memberof SurveyQuestionTemplateV1
     */
    objectiveType?: SurveyQuestionObjectiveTypeV1;
    /**
     * The survey question text with placeholders.
     * @type {string}
     * @memberof SurveyQuestionTemplateV1
     */
    questionText?: string;
    /**
     * The associated vendor product id.
     * @type {string}
     * @memberof SurveyQuestionTemplateV1
     */
    vendorProductId?: string;
    /**
     * 
     * @type {Array<SurveyQuestionPlaceholderCandidateV1>}
     * @memberof SurveyQuestionTemplateV1
     */
    placeholderCandidates?: Array<SurveyQuestionPlaceholderCandidateV1>;
    /**
     * The minimum number of responses required for the question. This will be available if the question responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1
     */
    minimumQuestionResponses?: number;
    /**
     * The survey question template canonical Id.
     * @type {string}
     * @memberof SurveyQuestionTemplateV1
     */
    id?: string;
    /**
     * The maximum number of responses allowed for the question. This will be available if the question responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1
     */
    maximumQuestionResponses?: number;
}
/**
 * Survey question template for vendor product.
 * @export
 * @interface SurveyQuestionTemplateV1M1
 */
export interface SurveyQuestionTemplateV1M1 {
    /**
     * The minimum number of qualifying responses required for the question. This will be available if the qualifying responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1M1
     */
    minimumQualifyingResponses?: number;
    /**
     * The maximum number of qualifying responses allowed for the question. This will be available if the qualifying responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1M1
     */
    maximumQualifyingResponses?: number;
    /**
     * 
     * @type {SurveyQuestionSubCategoryV1M1}
     * @memberof SurveyQuestionTemplateV1M1
     */
    subCategory?: SurveyQuestionSubCategoryV1M1;
    /**
     * The pre-defined qualifying survey question responses with placeholders, this will help to define which responses will be counted as positive ones in the study report.
     * @type {Array<string>}
     * @memberof SurveyQuestionTemplateV1M1
     */
    qualifyingResponses?: Array<string>;
    /**
     * The pre-defined survey question responses with placeholders.
     * @type {Array<string>}
     * @memberof SurveyQuestionTemplateV1M1
     */
    questionResponses?: Array<string>;
    /**
     * 
     * @type {MeasurementLocaleV1}
     * @memberof SurveyQuestionTemplateV1M1
     */
    locale?: MeasurementLocaleV1;
    /**
     * 
     * @type {SurveyQuestionTypeV1M1}
     * @memberof SurveyQuestionTemplateV1M1
     */
    type?: SurveyQuestionTypeV1M1;
    /**
     * The priority of the question. If present this will determine the ordering of questions in a survey. The check will be enforced when a survey is created/updated. Lower number indicates higher priority.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1M1
     */
    priority?: number;
    /**
     * 
     * @type {SurveyQuestionObjectiveTypeV1M1}
     * @memberof SurveyQuestionTemplateV1M1
     */
    objectiveType?: SurveyQuestionObjectiveTypeV1M1;
    /**
     * The survey question text with placeholders.
     * @type {string}
     * @memberof SurveyQuestionTemplateV1M1
     */
    questionText?: string;
    /**
     * The associated vendor product id.
     * @type {string}
     * @memberof SurveyQuestionTemplateV1M1
     */
    vendorProductId?: string;
    /**
     * 
     * @type {Array<SurveyQuestionPlaceholderCandidateV1>}
     * @memberof SurveyQuestionTemplateV1M1
     */
    placeholderCandidates?: Array<SurveyQuestionPlaceholderCandidateV1>;
    /**
     * 
     * @type {SurveyQuestionGridQuestionResponseV1M1}
     * @memberof SurveyQuestionTemplateV1M1
     */
    gridQuestionResponse?: SurveyQuestionGridQuestionResponseV1M1;
    /**
     * The minimum number of responses required for the question. This will be available if the question responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1M1
     */
    minimumQuestionResponses?: number;
    /**
     * The survey question template canonical Id.
     * @type {string}
     * @memberof SurveyQuestionTemplateV1M1
     */
    id?: string;
    /**
     * 
     * @type {SurveyQuestionCategoryV1M1}
     * @memberof SurveyQuestionTemplateV1M1
     */
    category?: SurveyQuestionCategoryV1M1;
    /**
     * The maximum number of responses allowed for the question. This will be available if the question responses are not pre-defined/inferred.
     * @type {number}
     * @memberof SurveyQuestionTemplateV1M1
     */
    maximumQuestionResponses?: number;
}
/**
 * The survey question type. SINGLE_SELECT question will allow customers to choose only one response, MULTI_SELECT question will allow customers to choose multiple responses, RATING will allow customers to choose a rating on a scale (e.g. 1 to 5), FREE_TEXT will allow customers to provide a free formed question text.
 * @export
 * @enum {string}
 */

export enum SurveyQuestionTypeV1 {
    SingleSelect = 'SINGLE_SELECT',
    MultiSelect = 'MULTI_SELECT',
    Rating = 'RATING',
    FreeText = 'FREE_TEXT'
}

/**
 * The survey question type. SINGLE_SELECT question will allow customers to choose only one response, MULTI_SELECT question will allow customers to choose multiple responses, RATING will allow customers to choose a rating on a scale (e.g. 1 to 5), FREE_TEXT will allow customers to provide a free formed question text.
 * @export
 * @enum {string}
 */

export enum SurveyQuestionTypeV1M1 {
    SingleSelect = 'SINGLE_SELECT',
    SingleSelectGrid = 'SINGLE_SELECT_GRID',
    MultiSelect = 'MULTI_SELECT',
    Rating = 'RATING',
    FreeText = 'FREE_TEXT'
}

/**
 * The rate of response for each response in Survey question.
 * @export
 * @interface SurveyResponseResultV1
 */
export interface SurveyResponseResultV1 {
    /**
     * The response choosen by Survey audience.
     * @type {string}
     * @memberof SurveyResponseResultV1
     */
    questionResponse?: string;
    /**
     * The significance percentage for the response data in this segment.
     * @type {number}
     * @memberof SurveyResponseResultV1
     */
    statisticalSignificance?: number;
    /**
     * Is the response a qualifying response. Used in calculating Brand Lift.
     * @type {boolean}
     * @memberof SurveyResponseResultV1
     */
    isQualifyingResponse?: boolean;
    /**
     * The percentage of people choosing this response.
     * @type {number}
     * @memberof SurveyResponseResultV1
     */
    responseRate?: number;
    /**
     * The percent of people in ad exposed group choosing this response.
     * @type {number}
     * @memberof SurveyResponseResultV1
     */
    adExposedGroupResponseRate?: number;
    /**
     * The percent of people in control group choosing this response.
     * @type {number}
     * @memberof SurveyResponseResultV1
     */
    controlGroupResponseRate?: number;
    /**
     * 
     * @type {SurveyQuestionObjectiveTypeV1}
     * @memberof SurveyResponseResultV1
     */
    questionObjective?: SurveyQuestionObjectiveTypeV1;
    /**
     * The segment value to which this response data belongs to. Would be corresponding to the above segmentType field.
     * @type {string}
     * @memberof SurveyResponseResultV1
     */
    segmentValue?: string;
    /**
     * Sequence number of the question in the Survey.
     * @type {number}
     * @memberof SurveyResponseResultV1
     */
    questionSequence?: number;
    /**
     * Text of the Survey question.
     * @type {string}
     * @memberof SurveyResponseResultV1
     */
    questionText?: string;
    /**
     * The segment type to which this response data belongs to.
     * @type {string}
     * @memberof SurveyResponseResultV1
     */
    segmentType?: SurveyResponseResultV1SegmentTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SurveyResponseResultV1SegmentTypeEnum {
    Overall = 'OVERALL',
    Age = 'AGE',
    HouseholdIncome = 'HOUSEHOLD_INCOME',
    Gender = 'GENDER',
    Audiences = 'AUDIENCES',
    Frequency = 'FREQUENCY',
    Channel = 'CHANNEL'
}

/**
 * The rate of response for each response in Survey question.
 * @export
 * @interface SurveyResponseResultV1M1
 */
export interface SurveyResponseResultV1M1 {
    /**
     * The response choosen by Survey audience.
     * @type {string}
     * @memberof SurveyResponseResultV1M1
     */
    questionResponse?: string;
    /**
     * The significance percentage for the response data in this segment.
     * @type {number}
     * @memberof SurveyResponseResultV1M1
     */
    statisticalSignificance?: number;
    /**
     * Is the response a qualifying response. Used in calculating Brand Lift.
     * @type {boolean}
     * @memberof SurveyResponseResultV1M1
     */
    isQualifyingResponse?: boolean;
    /**
     * The percentage of people choosing this response.
     * @type {number}
     * @memberof SurveyResponseResultV1M1
     */
    responseRate?: number;
    /**
     * The percent of people in ad exposed group choosing this response.
     * @type {number}
     * @memberof SurveyResponseResultV1M1
     */
    adExposedGroupResponseRate?: number;
    /**
     * The percent of people in control group choosing this response.
     * @type {number}
     * @memberof SurveyResponseResultV1M1
     */
    controlGroupResponseRate?: number;
    /**
     * 
     * @type {SurveyQuestionObjectiveTypeV1M1}
     * @memberof SurveyResponseResultV1M1
     */
    questionObjective?: SurveyQuestionObjectiveTypeV1M1;
    /**
     * The segment value to which this response data belongs to. Would be corresponding to the above segmentType field.
     * @type {string}
     * @memberof SurveyResponseResultV1M1
     */
    segmentValue?: string;
    /**
     * Sequence number of the question in the Survey.
     * @type {number}
     * @memberof SurveyResponseResultV1M1
     */
    questionSequence?: number;
    /**
     * Text of the Survey question.
     * @type {string}
     * @memberof SurveyResponseResultV1M1
     */
    questionText?: string;
    /**
     * The segment type to which this response data belongs to.
     * @type {string}
     * @memberof SurveyResponseResultV1M1
     */
    segmentType?: SurveyResponseResultV1M1SegmentTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SurveyResponseResultV1M1SegmentTypeEnum {
    Overall = 'OVERALL',
    Age = 'AGE',
    HouseholdIncome = 'HOUSEHOLD_INCOME',
    Gender = 'GENDER',
    Audiences = 'AUDIENCES',
    Frequency = 'FREQUENCY',
    Channel = 'CHANNEL'
}

/**
 * Survey response.
 * @export
 * @interface SurveyResponseV1
 */
export interface SurveyResponseV1 {
    /**
     * The survey canonical identifier.
     * @type {string}
     * @memberof SurveyResponseV1
     */
    surveyId?: string;
    /**
     * An enumerated success or error code for machine use.
     * @type {string}
     * @memberof SurveyResponseV1
     */
    code?: string;
    /**
     * The index of the object in the request, starting from 1.
     * @type {number}
     * @memberof SurveyResponseV1
     */
    index?: number;
    /**
     * A human-readable message of the code.
     * @type {string}
     * @memberof SurveyResponseV1
     */
    message?: string;
    /**
     * 
     * @type {Array<SurveyErrorV1>}
     * @memberof SurveyResponseV1
     */
    errors?: Array<SurveyErrorV1>;
}
/**
 * Surveys response.
 * @export
 * @interface SurveyResponsesV1
 */
export interface SurveyResponsesV1 {
    /**
     * Request Id that uniquely identifies your request.
     * @type {string}
     * @memberof SurveyResponsesV1
     */
    requestId?: string;
    /**
     * 
     * @type {Array<SurveyResponseV1>}
     * @memberof SurveyResponsesV1
     */
    responses?: Array<SurveyResponseV1>;
}
/**
 * The survey status. Only required if the survey is in DRAFT. Created survey will be in AVAILABLE status by default and will only be in IN_USE status if it\'s associated with a study.
 * @export
 * @enum {string}
 */

export enum SurveyStatusV1 {
    InUse = 'IN_USE',
    Available = 'AVAILABLE',
    Draft = 'DRAFT'
}

/**
 * The measurement survey.
 * @export
 * @interface SurveyV1
 */
export interface SurveyV1 {
    /**
     * The vendor product canonical identifier.
     * @type {string}
     * @memberof SurveyV1
     */
    vendorProductId?: string;
    /**
     * A list of templated survey questions.
     * @type {Array<TemplatedSurveyQuestionV1>}
     * @memberof SurveyV1
     */
    templatedQuestions?: Array<TemplatedSurveyQuestionV1>;
    /**
     * A list of custom survey questions.
     * @type {Array<CustomSurveyQuestionV1>}
     * @memberof SurveyV1
     * @deprecated
     */
    customQuestions?: Array<CustomSurveyQuestionV1>;
    /**
     * The associated study identifier. Survey needs to be created prior to the study creation.
     * @type {string}
     * @memberof SurveyV1
     */
    studyId?: string;
    /**
     * The survey canonical identifier. Immutable field. This is required for update.
     * @type {string}
     * @memberof SurveyV1
     */
    id?: string;
    /**
     * 
     * @type {SurveyStatusV1}
     * @memberof SurveyV1
     */
    status?: SurveyStatusV1;
}
/**
 * The measurement survey.
 * @export
 * @interface SurveyV1M1
 */
export interface SurveyV1M1 {
    /**
     * The vendor product canonical identifier.
     * @type {string}
     * @memberof SurveyV1M1
     */
    vendorProductId?: string;
    /**
     * A list of templated survey questions.
     * @type {Array<TemplatedSurveyQuestionV1M1>}
     * @memberof SurveyV1M1
     */
    templatedQuestions?: Array<TemplatedSurveyQuestionV1M1>;
    /**
     * A list of custom survey questions.
     * @type {Array<CustomSurveyQuestionV1>}
     * @memberof SurveyV1M1
     * @deprecated
     */
    customQuestions?: Array<CustomSurveyQuestionV1>;
    /**
     * The associated study identifier. Survey needs to be created prior to the study creation.
     * @type {string}
     * @memberof SurveyV1M1
     */
    studyId?: string;
    /**
     * The survey canonical identifier. Immutable field. This is required for update.
     * @type {string}
     * @memberof SurveyV1M1
     */
    id?: string;
    /**
     * 
     * @type {SurveyStatusV1}
     * @memberof SurveyV1M1
     */
    status?: SurveyStatusV1;
}
/**
 * The templated measurement survey question.
 * @export
 * @interface TemplatedSurveyQuestionV1
 */
export interface TemplatedSurveyQuestionV1 {
    /**
     * List of question placeholders
     * @type {Array<SurveyQuestionPlaceholderV1>}
     * @memberof TemplatedSurveyQuestionV1
     */
    placeholders?: Array<SurveyQuestionPlaceholderV1>;
    /**
     * The survey question template canonical identifier.
     * @type {string}
     * @memberof TemplatedSurveyQuestionV1
     */
    id?: string;
}
/**
 * The templated measurement survey question.
 * @export
 * @interface TemplatedSurveyQuestionV1M1
 */
export interface TemplatedSurveyQuestionV1M1 {
    /**
     * 
     * @type {GridQuestionResponsesV1M1}
     * @memberof TemplatedSurveyQuestionV1M1
     */
    gridQuestionResponse?: GridQuestionResponsesV1M1;
    /**
     * List of question placeholders
     * @type {Array<SurveyQuestionPlaceholderV1>}
     * @memberof TemplatedSurveyQuestionV1M1
     */
    placeholders?: Array<SurveyQuestionPlaceholderV1>;
    /**
     * The survey question template canonical identifier.
     * @type {string}
     * @memberof TemplatedSurveyQuestionV1M1
     */
    id?: string;
}
/**
 * The measurement eligibility details for a certain vendor product.
 * @export
 * @interface VendorProductEligibilityV1
 */
export interface VendorProductEligibilityV1 {
    /**
     * vendor product canonical identifier.
     * @type {string}
     * @memberof VendorProductEligibilityV1
     */
    vendorProductId?: string;
    /**
     * A list of issues will be provided if the status is INELIGIBLE or ELIGIBLE_WITH_WARNING.
     * @type {Array<EligibilityIssueV1>}
     * @memberof VendorProductEligibilityV1
     */
    issues?: Array<EligibilityIssueV1>;
    /**
     * 
     * @type {EligibilityStatusV1}
     * @memberof VendorProductEligibilityV1
     */
    status?: EligibilityStatusV1;
}
/**
 * The policy rules will be enforced at vendor product level.
 * @export
 * @interface VendorProductPolicyV1
 */
export interface VendorProductPolicyV1 {
    /**
     * The maximum number of order allowed for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    maximumOrders?: number;
    /**
     * 
     * @type {Array<MeasurementGoalV1>}
     * @memberof VendorProductPolicyV1
     */
    supportedGoals?: Array<MeasurementGoalV1>;
    /**
     * Days required for measurement configuration. It is recommended that the startDate of the campaign has sufficient padding to accommodate this lead time, but measurement can begin after the campaign start date in some cases.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    leadTime?: number;
    /**
     * The required question objectives that need to be included as part of the survey.
     * @type {Array<SurveyQuestionObjectiveTypeV1>}
     * @memberof VendorProductPolicyV1
     */
    requiredQuestionObjectives?: Array<SurveyQuestionObjectiveTypeV1>;
    /**
     * Whether or not the benchMark category is required for measurement setup.
     * @type {boolean}
     * @memberof VendorProductPolicyV1
     */
    benchMarkCategoryRequired?: boolean;
    /**
     * The maximum number of survey questions required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    maximumSurveyQuestions?: number;
    /**
     * The maximum number of orders required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    minimumOrders?: number;
    /**
     * vendor product canonical identifier.
     * @type {string}
     * @memberof VendorProductPolicyV1
     */
    vendorProductId?: string;
    /**
     * Whether custom survey questions are allowed.
     * @type {boolean}
     * @memberof VendorProductPolicyV1
     */
    customQuestionAllowed?: boolean;
    /**
     * The maximum required length/duration of the study in days.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    maximumStudyLength?: number;
    /**
     * The maximum number of peer names required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    maximumPeerNames?: number;
    /**
     * 
     * @type {Array<MeasurementMarketplaceV1>}
     * @memberof VendorProductPolicyV1
     */
    supportedMarketplaces?: Array<MeasurementMarketplaceV1>;
    /**
     * The minimum required length/duration of the study in days.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    minimumStudyLength?: number;
    /**
     * Whether or not the vendor requires an additional sign off process to fully qualify for study.
     * @type {boolean}
     * @memberof VendorProductPolicyV1
     */
    vendorApprovalRequired?: boolean;
    /**
     * The minimum number of peer names required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    minimumPeerNames?: number;
    /**
     * Whether or not the vendor assigned external reference identifier is required for measurement setup.
     * @type {boolean}
     * @memberof VendorProductPolicyV1
     */
    externalReferenceIdRequired?: boolean;
    /**
     * The minimum number of survey questions required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1
     */
    minimumSurveyQuestions?: number;
}
/**
 * The policy rules will be enforced at vendor product level.
 * @export
 * @interface VendorProductPolicyV1M1
 */
export interface VendorProductPolicyV1M1 {
    /**
     * The maximum number of order allowed for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    maximumOrders?: number;
    /**
     * 
     * @type {Array<MeasurementGoalV1>}
     * @memberof VendorProductPolicyV1M1
     */
    supportedGoals?: Array<MeasurementGoalV1>;
    /**
     * Days required for measurement configuration. It is recommended that the startDate of the campaign has sufficient padding to accommodate this lead time, but measurement can begin after the campaign start date in some cases.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    leadTime?: number;
    /**
     * The required question objectives that need to be included as part of the survey.
     * @type {Array<SurveyQuestionObjectiveTypeV1M1>}
     * @memberof VendorProductPolicyV1M1
     */
    requiredQuestionObjectives?: Array<SurveyQuestionObjectiveTypeV1M1>;
    /**
     * Whether or not the benchMark category is required for measurement setup.
     * @type {boolean}
     * @memberof VendorProductPolicyV1M1
     */
    benchMarkCategoryRequired?: boolean;
    /**
     * List of supported verbs that can be used in survey questions.
     * @type {Array<string>}
     * @memberof VendorProductPolicyV1M1
     */
    supportedVerbs?: Array<string>;
    /**
     * The maximum number of survey questions required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    maximumSurveyQuestions?: number;
    /**
     * The maximum number of orders required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    minimumOrders?: number;
    /**
     * vendor product canonical identifier.
     * @type {string}
     * @memberof VendorProductPolicyV1M1
     */
    vendorProductId?: string;
    /**
     * Whether or not a verb is required for measurement setup. It will be used in applicable survey questions to construct the question text.
     * @type {boolean}
     * @memberof VendorProductPolicyV1M1
     */
    verbRequired?: boolean;
    /**
     * Whether custom survey questions are allowed.
     * @type {boolean}
     * @memberof VendorProductPolicyV1M1
     */
    customQuestionAllowed?: boolean;
    /**
     * The maximum required length/duration of the study in days.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    maximumStudyLength?: number;
    /**
     * The maximum number of peer names required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    maximumPeerNames?: number;
    /**
     * The requirements for survey question categories.
     * @type {Array<SurveyQuestionCategoryRequirementV1M1>}
     * @memberof VendorProductPolicyV1M1
     */
    requiredQuestionCategories?: Array<SurveyQuestionCategoryRequirementV1M1>;
    /**
     * 
     * @type {Array<MeasurementMarketplaceV1>}
     * @memberof VendorProductPolicyV1M1
     */
    supportedMarketplaces?: Array<MeasurementMarketplaceV1>;
    /**
     * The minimum required length/duration of the study in days.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    minimumStudyLength?: number;
    /**
     * Whether or not the vendor requires an additional sign off process to fully qualify for study.
     * @type {boolean}
     * @memberof VendorProductPolicyV1M1
     */
    vendorApprovalRequired?: boolean;
    /**
     * The minimum number of peer names required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    minimumPeerNames?: number;
    /**
     * Whether or not the vendor assigned external reference identifier is required for measurement setup.
     * @type {boolean}
     * @memberof VendorProductPolicyV1M1
     */
    externalReferenceIdRequired?: boolean;
    /**
     * The minimum number of survey questions required for the product.
     * @type {number}
     * @memberof VendorProductPolicyV1M1
     */
    minimumSurveyQuestions?: number;
}
/**
 * The request object to fetch measurement vendor products.
 * @export
 * @interface VendorProductRequestV1
 */
export interface VendorProductRequestV1 {
    /**
     * FundingType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<FundingTypeV1>}
     * @memberof VendorProductRequestV1
     */
    fundingTypeFilters?: Array<FundingTypeV1>;
    /**
     * StudyObjective filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<StudyObjectiveV1>}
     * @memberof VendorProductRequestV1
     */
    objectiveTypeFilters?: Array<StudyObjectiveV1>;
    /**
     * VendorProduct identifier filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<string>}
     * @memberof VendorProductRequestV1
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * AdType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<AdTypeV1>}
     * @memberof VendorProductRequestV1
     */
    adTypeFilters?: Array<AdTypeV1>;
    /**
     * VendorType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<VendorTypeV1>}
     * @memberof VendorProductRequestV1
     */
    vendorTypeFilters?: Array<VendorTypeV1>;
    /**
     * StudyType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<StudyTypeV1>}
     * @memberof VendorProductRequestV1
     */
    studyTypeFilters?: Array<StudyTypeV1>;
}
/**
 * The request object to fetch measurement vendor products.
 * @export
 * @interface VendorProductRequestV1M1
 */
export interface VendorProductRequestV1M1 {
    /**
     * FundingType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<FundingTypeV1M1>}
     * @memberof VendorProductRequestV1M1
     */
    fundingTypeFilters?: Array<FundingTypeV1M1>;
    /**
     * StudyObjective filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<StudyObjectiveV1>}
     * @memberof VendorProductRequestV1M1
     */
    objectiveTypeFilters?: Array<StudyObjectiveV1>;
    /**
     * VendorProduct identifier filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<string>}
     * @memberof VendorProductRequestV1M1
     */
    vendorProductIdFilters?: Array<string>;
    /**
     * AdType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<AdTypeV1>}
     * @memberof VendorProductRequestV1M1
     */
    adTypeFilters?: Array<AdTypeV1>;
    /**
     * VendorType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<VendorTypeV1M1>}
     * @memberof VendorProductRequestV1M1
     */
    vendorTypeFilters?: Array<VendorTypeV1M1>;
    /**
     * StudyType filters to be applied when fetching measurement vendor products. If not supplied we will include all available vendor products.
     * @type {Array<StudyTypeV1>}
     * @memberof VendorProductRequestV1M1
     */
    studyTypeFilters?: Array<StudyTypeV1>;
}
/**
 * The measurement vendor product type.
 * @export
 * @enum {string}
 */

export enum VendorProductTypeV1 {
    ShopperPanel = 'SHOPPER_PANEL'
}

/**
 * The measurement vendor product type.
 * @export
 * @enum {string}
 */

export enum VendorProductTypeV1M1 {
    ShopperPanel = 'SHOPPER_PANEL',
    BrandLiftInsights = 'BRAND_LIFT_INSIGHTS',
    Dash = 'DASH',
    Upwave = 'UPWAVE',
    DigitalBrandEffect = 'DIGITAL_BRAND_EFFECT',
    ExpandedViewLite = 'EXPANDED_VIEW_LITE',
    Macromill = 'MACROMILL',
    Dynata = 'DYNATA',
    Lucid = 'LUCID'
}

/**
 * The measurement vendor product.
 * @export
 * @interface VendorProductV1
 */
export interface VendorProductV1 {
    /**
     * 
     * @type {VendorTypeV1}
     * @memberof VendorProductV1
     */
    vendorType?: VendorTypeV1;
    /**
     * 
     * @type {VendorProductTypeV1}
     * @memberof VendorProductV1
     */
    vendorProductType?: VendorProductTypeV1;
    /**
     * 
     * @type {AdTypeV1}
     * @memberof VendorProductV1
     */
    adType?: AdTypeV1;
    /**
     * 
     * @type {FundingTypeV1}
     * @memberof VendorProductV1
     */
    fundingType?: FundingTypeV1;
    /**
     * 
     * @type {StudyTypeV1}
     * @memberof VendorProductV1
     */
    studyType?: StudyTypeV1;
    /**
     * The vendor product identifier.
     * @type {string}
     * @memberof VendorProductV1
     */
    id?: string;
    /**
     * 
     * @type {StudyObjectiveV1}
     * @memberof VendorProductV1
     */
    objective?: StudyObjectiveV1;
}
/**
 * The measurement vendor product.
 * @export
 * @interface VendorProductV1M1
 */
export interface VendorProductV1M1 {
    /**
     * 
     * @type {VendorTypeV1M1}
     * @memberof VendorProductV1M1
     */
    vendorType?: VendorTypeV1M1;
    /**
     * 
     * @type {VendorProductTypeV1M1}
     * @memberof VendorProductV1M1
     */
    vendorProductType?: VendorProductTypeV1M1;
    /**
     * 
     * @type {AdTypeV1}
     * @memberof VendorProductV1M1
     */
    adType?: AdTypeV1;
    /**
     * 
     * @type {FundingTypeV1M1}
     * @memberof VendorProductV1M1
     */
    fundingType?: FundingTypeV1M1;
    /**
     * The vendor product display name.
     * @type {string}
     * @memberof VendorProductV1M1
     */
    displayName?: string;
    /**
     * 
     * @type {StudyTypeV1}
     * @memberof VendorProductV1M1
     */
    studyType?: StudyTypeV1;
    /**
     * The vendor product identifier.
     * @type {string}
     * @memberof VendorProductV1M1
     */
    id?: string;
    /**
     * 
     * @type {StudyObjectiveV1}
     * @memberof VendorProductV1M1
     */
    objective?: StudyObjectiveV1;
}
/**
 * The measurement vendor type, each study type will have different supported vendors.
 * @export
 * @enum {string}
 */

export enum VendorTypeV1 {
    Amazon = 'AMAZON'
}

/**
 * The measurement vendor type, each study type will have different supported vendors.
 * @export
 * @enum {string}
 */

export enum VendorTypeV1M1 {
    Amazon = 'AMAZON',
    Kantar = 'KANTAR',
    Upwave = 'UPWAVE',
    Nielsen = 'NIELSEN',
    Macromill = 'MACROMILL',
    Dynata = 'DYNATA',
    Lucid = 'LUCID'
}


/**
 * MeasurementApi - axios parameter creator
 * @export
 */
export const MeasurementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel existing studies.  **Requires one of these permissions**: []
         * @summary Cancel existing studies. Once a study is cancelled it can not be resumed again.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIdFilters] Study canonical identifiers to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelMeasurementStudies: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIdFilters?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('cancelMeasurementStudies', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('cancelMeasurementStudies', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/studies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (studyIdFilters) {
                localVarQueryParameter['studyIdFilters'] = studyIdFilters.join(COLLECTION_FORMATS.csv);
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Checks the DSP BRAND_LIFT study type eligibility status against vendor products.  **Requires one of these permissions**: []
         * @summary Checks the DSP BRAND_LIFT study type eligibility against vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {DSPBrandLiftEligibilityRequestV1} [dSPBrandLiftEligibilityRequestV1] The DSP brand lift eligibility request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDSPBrandLiftEligibility: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, dSPBrandLiftEligibilityRequestV1?: DSPBrandLiftEligibilityRequestV1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('checkDSPBrandLiftEligibility', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('checkDSPBrandLiftEligibility', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/eligibility/brandLift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.measurementeligibility.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dSPBrandLiftEligibilityRequestV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new DSP BRAND_LIFT studies.  **Requires one of these permissions**: []
         * @summary Create new DSP BRAND_LIFT studies.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPBrandLiftStudyV1M1>} [dSPBrandLiftStudyV1M1] An array of study objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDSPBrandLiftStudies: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createDSPBrandLiftStudies', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createDSPBrandLiftStudies', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/studies/brandLift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.studymanagement.v1.1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dSPBrandLiftStudyV1M1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new study surveys.  **Requires one of these permissions**: []
         * @summary Create new study surveys.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<SurveyV1M1>} [surveyV1M1] An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSurveys: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyV1M1?: Array<SurveyV1M1>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createSurveys', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createSurveys', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/studies/surveys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.studymanagement.v1.1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(surveyV1M1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIdFilters] Study canonical identifier to filter with. Either one of studyIdFilters or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIdFilters or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPBrandLiftStudies: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIdFilters?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getDSPBrandLiftStudies', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getDSPBrandLiftStudies', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/studies/brandLift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (studyIdFilters) {
                localVarQueryParameter['studyIdFilters'] = studyIdFilters.join(COLLECTION_FORMATS.csv);
            }

            if (advertiserId !== undefined) {
                localVarQueryParameter['advertiserId'] = advertiserId;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get result of a DSP BRAND_LIFT study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
         * @summary Get result of a DSP BRAND_LIFT study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1+json&#x60;, &#x60;application/vnd.measurementresult.v1.1+json&#x60;, &#x60;text/vnd.measurementresult.v1+csv&#x60;
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPBrandLiftStudyResult: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getDSPBrandLiftStudyResult', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getDSPBrandLiftStudyResult', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('getDSPBrandLiftStudyResult', 'accept', accept)
            // verify required parameter 'studyId' is not null or undefined
            assertParamExists('getDSPBrandLiftStudyResult', 'studyId', studyId)
            const localVarPath = `/measurement/studies/brandLift/{studyId}/result`
                .replace(`{${"studyId"}}`, encodeURIComponent(String(studyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets one or more study surveys with requested survey identifiers or a study identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more study surveys with requested survey identifiers or a study identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [surveyIds] Survey canonical identifier to filter with. Either one of surveyIds or studyId should be provided.
         * @param {string} [studyId] A study canonical identifier. Either one of surveyIds or studyId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSurveys: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyIds?: Array<string>, studyId?: string, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getSurveys', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getSurveys', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/studies/surveys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (surveyIds) {
                localVarQueryParameter['surveyIds'] = surveyIds.join(COLLECTION_FORMATS.csv);
            }

            if (studyId !== undefined) {
                localVarQueryParameter['studyId'] = studyId;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update DSP BRAND_LIFT studies. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update DSP BRAND_LIFT studies. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPBrandLiftStudyV1M1>} [dSPBrandLiftStudyV1M1] An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDSPBrandLiftStudies: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateDSPBrandLiftStudies', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateDSPBrandLiftStudies', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/dsp/measurement/studies/brandLift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.studymanagement.v1.1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dSPBrandLiftStudyV1M1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update measurement surveys. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update measurement surveys. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<SurveyV1M1>} [surveyV1M1] An array of survey objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSurveys: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyV1M1?: Array<SurveyV1M1>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateSurveys', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateSurveys', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/studies/surveys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.studymanagement.v1.1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(surveyV1M1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the supported measurement vendors products.  **Requires one of these permissions**: []
         * @summary Lists the supported measurement vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {VendorProductRequestV1M1} [vendorProductRequestV1M1] Fetch measurement vendor products request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorProduct: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, vendorProductRequestV1M1?: VendorProductRequestV1M1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('vendorProduct', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('vendorProduct', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/vendorProducts/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.measurementvendor.v1.1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vendorProductRequestV1M1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the policies for the specific vendor product(s).  **Requires one of these permissions**: []
         * @summary Gets the policies for the specific vendor product(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [vendorProductIds] Vendor product canonical identifier to filter with.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorProductPolicy: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, vendorProductIds?: Array<string>, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('vendorProductPolicy', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('vendorProductPolicy', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/vendorProducts/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (vendorProductIds) {
                localVarQueryParameter['vendorProductIds'] = vendorProductIds.join(COLLECTION_FORMATS.csv);
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the survey question templates for the specific vendor product(s).  **Requires one of these permissions**: []
         * @summary Gets the survey question templates for the specific vendor product(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [vendorProductIds] Vendor product canonical identifier to filter with.
         * @param {Array<string>} [surveyQuestionTemplateIds] Vendor product survey question template identifier to filter with.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorProductSurveyQuestionTemplates: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, vendorProductIds?: Array<string>, surveyQuestionTemplateIds?: Array<string>, nextToken?: string, maxResults?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('vendorProductSurveyQuestionTemplates', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('vendorProductSurveyQuestionTemplates', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/measurement/vendorProducts/surveyQuestionTemplates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (vendorProductIds) {
                localVarQueryParameter['vendorProductIds'] = vendorProductIds.join(COLLECTION_FORMATS.csv);
            }

            if (surveyQuestionTemplateIds) {
                localVarQueryParameter['surveyQuestionTemplateIds'] = surveyQuestionTemplateIds.join(COLLECTION_FORMATS.csv);
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeasurementApi - functional programming interface
 * @export
 */
export const MeasurementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeasurementApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel existing studies.  **Requires one of these permissions**: []
         * @summary Cancel existing studies. Once a study is cancelled it can not be resumed again.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIdFilters] Study canonical identifiers to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelMeasurementStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIdFilters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyResponsesV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelMeasurementStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIdFilters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Checks the DSP BRAND_LIFT study type eligibility status against vendor products.  **Requires one of these permissions**: []
         * @summary Checks the DSP BRAND_LIFT study type eligibility against vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {DSPBrandLiftEligibilityRequestV1} [dSPBrandLiftEligibilityRequestV1] The DSP brand lift eligibility request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkDSPBrandLiftEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, dSPBrandLiftEligibilityRequestV1?: DSPBrandLiftEligibilityRequestV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EligibilityResponseV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkDSPBrandLiftEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, dSPBrandLiftEligibilityRequestV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create new DSP BRAND_LIFT studies.  **Requires one of these permissions**: []
         * @summary Create new DSP BRAND_LIFT studies.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPBrandLiftStudyV1M1>} [dSPBrandLiftStudyV1M1] An array of study objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDSPBrandLiftStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyResponsesV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDSPBrandLiftStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dSPBrandLiftStudyV1M1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create new study surveys.  **Requires one of these permissions**: []
         * @summary Create new study surveys.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<SurveyV1M1>} [surveyV1M1] An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSurveys(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyV1M1?: Array<SurveyV1M1>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SurveyResponsesV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSurveys(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, surveyV1M1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIdFilters] Study canonical identifier to filter with. Either one of studyIdFilters or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIdFilters or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDSPBrandLiftStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIdFilters?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedDSPBrandLiftStudiesV1M1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDSPBrandLiftStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIdFilters, advertiserId, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get result of a DSP BRAND_LIFT study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
         * @summary Get result of a DSP BRAND_LIFT study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1+json&#x60;, &#x60;application/vnd.measurementresult.v1.1+json&#x60;, &#x60;text/vnd.measurementresult.v1+csv&#x60;
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDSPBrandLiftStudyResult(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandLiftStudyResultV1M1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDSPBrandLiftStudyResult(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, accept, studyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets one or more study surveys with requested survey identifiers or a study identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more study surveys with requested survey identifiers or a study identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [surveyIds] Survey canonical identifier to filter with. Either one of surveyIds or studyId should be provided.
         * @param {string} [studyId] A study canonical identifier. Either one of surveyIds or studyId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSurveys(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyIds?: Array<string>, studyId?: string, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSurveysV1M1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSurveys(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, surveyIds, studyId, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update DSP BRAND_LIFT studies. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update DSP BRAND_LIFT studies. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPBrandLiftStudyV1M1>} [dSPBrandLiftStudyV1M1] An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDSPBrandLiftStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudyResponsesV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDSPBrandLiftStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dSPBrandLiftStudyV1M1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update measurement surveys. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update measurement surveys. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<SurveyV1M1>} [surveyV1M1] An array of survey objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSurveys(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyV1M1?: Array<SurveyV1M1>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SurveyResponsesV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSurveys(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, surveyV1M1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the supported measurement vendors products.  **Requires one of these permissions**: []
         * @summary Lists the supported measurement vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {VendorProductRequestV1M1} [vendorProductRequestV1M1] Fetch measurement vendor products request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorProduct(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, vendorProductRequestV1M1?: VendorProductRequestV1M1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedVendorProductsV1M1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorProduct(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, vendorProductRequestV1M1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the policies for the specific vendor product(s).  **Requires one of these permissions**: []
         * @summary Gets the policies for the specific vendor product(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [vendorProductIds] Vendor product canonical identifier to filter with.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorProductPolicy(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, vendorProductIds?: Array<string>, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedVendorProductPoliciesV1M1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorProductPolicy(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, vendorProductIds, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the survey question templates for the specific vendor product(s).  **Requires one of these permissions**: []
         * @summary Gets the survey question templates for the specific vendor product(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [vendorProductIds] Vendor product canonical identifier to filter with.
         * @param {Array<string>} [surveyQuestionTemplateIds] Vendor product survey question template identifier to filter with.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorProductSurveyQuestionTemplates(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, vendorProductIds?: Array<string>, surveyQuestionTemplateIds?: Array<string>, nextToken?: string, maxResults?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSurveyQuestionTemplatesV1M1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorProductSurveyQuestionTemplates(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, vendorProductIds, surveyQuestionTemplateIds, nextToken, maxResults, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeasurementApi - factory interface
 * @export
 */
export const MeasurementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeasurementApiFp(configuration)
    return {
        /**
         * Cancel existing studies.  **Requires one of these permissions**: []
         * @summary Cancel existing studies. Once a study is cancelled it can not be resumed again.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIdFilters] Study canonical identifiers to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelMeasurementStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIdFilters?: Array<string>, options?: any): AxiosPromise<StudyResponsesV1> {
            return localVarFp.cancelMeasurementStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIdFilters, options).then((request) => request(axios, basePath));
        },
        /**
         * Checks the DSP BRAND_LIFT study type eligibility status against vendor products.  **Requires one of these permissions**: []
         * @summary Checks the DSP BRAND_LIFT study type eligibility against vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {DSPBrandLiftEligibilityRequestV1} [dSPBrandLiftEligibilityRequestV1] The DSP brand lift eligibility request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDSPBrandLiftEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, dSPBrandLiftEligibilityRequestV1?: DSPBrandLiftEligibilityRequestV1, options?: any): AxiosPromise<EligibilityResponseV1> {
            return localVarFp.checkDSPBrandLiftEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, dSPBrandLiftEligibilityRequestV1, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new DSP BRAND_LIFT studies.  **Requires one of these permissions**: []
         * @summary Create new DSP BRAND_LIFT studies.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPBrandLiftStudyV1M1>} [dSPBrandLiftStudyV1M1] An array of study objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDSPBrandLiftStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>, options?: any): AxiosPromise<StudyResponsesV1> {
            return localVarFp.createDSPBrandLiftStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dSPBrandLiftStudyV1M1, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new study surveys.  **Requires one of these permissions**: []
         * @summary Create new study surveys.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<SurveyV1M1>} [surveyV1M1] An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSurveys(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyV1M1?: Array<SurveyV1M1>, options?: any): AxiosPromise<SurveyResponsesV1> {
            return localVarFp.createSurveys(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, surveyV1M1, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [studyIdFilters] Study canonical identifier to filter with. Either one of studyIdFilters or advertiserId should be provided.
         * @param {string} [advertiserId] The advertiser canonical identifier. Either one of studyIdFilters or advertiserId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPBrandLiftStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, studyIdFilters?: Array<string>, advertiserId?: string, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<PaginatedDSPBrandLiftStudiesV1M1> {
            return localVarFp.getDSPBrandLiftStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, studyIdFilters, advertiserId, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Get result of a DSP BRAND_LIFT study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
         * @summary Get result of a DSP BRAND_LIFT study.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} accept The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1+json&#x60;, &#x60;application/vnd.measurementresult.v1.1+json&#x60;, &#x60;text/vnd.measurementresult.v1+csv&#x60;
         * @param {string} studyId The canonical identifier that represents a unique study.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDSPBrandLiftStudyResult(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, accept: string, studyId: string, options?: any): AxiosPromise<BrandLiftStudyResultV1M1> {
            return localVarFp.getDSPBrandLiftStudyResult(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, accept, studyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets one or more study surveys with requested survey identifiers or a study identifier.  **Requires one of these permissions**: []
         * @summary Gets one or more study surveys with requested survey identifiers or a study identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [surveyIds] Survey canonical identifier to filter with. Either one of surveyIds or studyId should be provided.
         * @param {string} [studyId] A study canonical identifier. Either one of surveyIds or studyId should be provided.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSurveys(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyIds?: Array<string>, studyId?: string, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<PaginatedSurveysV1M1> {
            return localVarFp.getSurveys(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, surveyIds, studyId, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Update DSP BRAND_LIFT studies. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update DSP BRAND_LIFT studies. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<DSPBrandLiftStudyV1M1>} [dSPBrandLiftStudyV1M1] An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDSPBrandLiftStudies(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>, options?: any): AxiosPromise<StudyResponsesV1> {
            return localVarFp.updateDSPBrandLiftStudies(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, dSPBrandLiftStudyV1M1, options).then((request) => request(axios, basePath));
        },
        /**
         * Update measurement surveys. This will be a full update.  **Requires one of these permissions**: []
         * @summary Update measurement surveys. This will be a full update.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<SurveyV1M1>} [surveyV1M1] An array of survey objects. For each object, specify required fields and their values. Maximum length of the array is 1.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSurveys(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, surveyV1M1?: Array<SurveyV1M1>, options?: any): AxiosPromise<SurveyResponsesV1> {
            return localVarFp.updateSurveys(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, surveyV1M1, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the supported measurement vendors products.  **Requires one of these permissions**: []
         * @summary Lists the supported measurement vendor products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {VendorProductRequestV1M1} [vendorProductRequestV1M1] Fetch measurement vendor products request object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorProduct(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextToken?: string, maxResults?: number, vendorProductRequestV1M1?: VendorProductRequestV1M1, options?: any): AxiosPromise<PaginatedVendorProductsV1M1> {
            return localVarFp.vendorProduct(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextToken, maxResults, vendorProductRequestV1M1, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the policies for the specific vendor product(s).  **Requires one of these permissions**: []
         * @summary Gets the policies for the specific vendor product(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [vendorProductIds] Vendor product canonical identifier to filter with.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorProductPolicy(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, vendorProductIds?: Array<string>, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<PaginatedVendorProductPoliciesV1M1> {
            return localVarFp.vendorProductPolicy(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, vendorProductIds, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the survey question templates for the specific vendor product(s).  **Requires one of these permissions**: []
         * @summary Gets the survey question templates for the specific vendor product(s).
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {Array<string>} [vendorProductIds] Vendor product canonical identifier to filter with.
         * @param {Array<string>} [surveyQuestionTemplateIds] Vendor product survey question template identifier to filter with.
         * @param {string} [nextToken] Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
         * @param {number} [maxResults] Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorProductSurveyQuestionTemplates(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, vendorProductIds?: Array<string>, surveyQuestionTemplateIds?: Array<string>, nextToken?: string, maxResults?: number, options?: any): AxiosPromise<PaginatedSurveyQuestionTemplatesV1M1> {
            return localVarFp.vendorProductSurveyQuestionTemplates(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, vendorProductIds, surveyQuestionTemplateIds, nextToken, maxResults, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelMeasurementStudies operation in MeasurementApi.
 * @export
 * @interface MeasurementApiCancelMeasurementStudiesRequest
 */
export interface MeasurementApiCancelMeasurementStudiesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiCancelMeasurementStudies
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiCancelMeasurementStudies
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Study canonical identifiers to cancel.
     * @type {Array<string>}
     * @memberof MeasurementApiCancelMeasurementStudies
     */
    readonly studyIdFilters?: Array<string>
}

/**
 * Request parameters for checkDSPBrandLiftEligibility operation in MeasurementApi.
 * @export
 * @interface MeasurementApiCheckDSPBrandLiftEligibilityRequest
 */
export interface MeasurementApiCheckDSPBrandLiftEligibilityRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiCheckDSPBrandLiftEligibility
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiCheckDSPBrandLiftEligibility
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiCheckDSPBrandLiftEligibility
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiCheckDSPBrandLiftEligibility
     */
    readonly maxResults?: number

    /**
     * The DSP brand lift eligibility request object.
     * @type {DSPBrandLiftEligibilityRequestV1}
     * @memberof MeasurementApiCheckDSPBrandLiftEligibility
     */
    readonly dSPBrandLiftEligibilityRequestV1?: DSPBrandLiftEligibilityRequestV1
}

/**
 * Request parameters for createDSPBrandLiftStudies operation in MeasurementApi.
 * @export
 * @interface MeasurementApiCreateDSPBrandLiftStudiesRequest
 */
export interface MeasurementApiCreateDSPBrandLiftStudiesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiCreateDSPBrandLiftStudies
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiCreateDSPBrandLiftStudies
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of study objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<DSPBrandLiftStudyV1M1>}
     * @memberof MeasurementApiCreateDSPBrandLiftStudies
     */
    readonly dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>
}

/**
 * Request parameters for createSurveys operation in MeasurementApi.
 * @export
 * @interface MeasurementApiCreateSurveysRequest
 */
export interface MeasurementApiCreateSurveysRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiCreateSurveys
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiCreateSurveys
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<SurveyV1M1>}
     * @memberof MeasurementApiCreateSurveys
     */
    readonly surveyV1M1?: Array<SurveyV1M1>
}

/**
 * Request parameters for getDSPBrandLiftStudies operation in MeasurementApi.
 * @export
 * @interface MeasurementApiGetDSPBrandLiftStudiesRequest
 */
export interface MeasurementApiGetDSPBrandLiftStudiesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudies
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudies
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Study canonical identifier to filter with. Either one of studyIdFilters or advertiserId should be provided.
     * @type {Array<string>}
     * @memberof MeasurementApiGetDSPBrandLiftStudies
     */
    readonly studyIdFilters?: Array<string>

    /**
     * The advertiser canonical identifier. Either one of studyIdFilters or advertiserId should be provided.
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudies
     */
    readonly advertiserId?: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudies
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiGetDSPBrandLiftStudies
     */
    readonly maxResults?: number
}

/**
 * Request parameters for getDSPBrandLiftStudyResult operation in MeasurementApi.
 * @export
 * @interface MeasurementApiGetDSPBrandLiftStudyResultRequest
 */
export interface MeasurementApiGetDSPBrandLiftStudyResultRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudyResult
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudyResult
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The version(s) of the requested resource. Available version(s) - &#x60;application/vnd.measurementresult.v1+json&#x60;, &#x60;application/vnd.measurementresult.v1.1+json&#x60;, &#x60;text/vnd.measurementresult.v1+csv&#x60;
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudyResult
     */
    readonly accept: string

    /**
     * The canonical identifier that represents a unique study.
     * @type {string}
     * @memberof MeasurementApiGetDSPBrandLiftStudyResult
     */
    readonly studyId: string
}

/**
 * Request parameters for getSurveys operation in MeasurementApi.
 * @export
 * @interface MeasurementApiGetSurveysRequest
 */
export interface MeasurementApiGetSurveysRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiGetSurveys
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiGetSurveys
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Survey canonical identifier to filter with. Either one of surveyIds or studyId should be provided.
     * @type {Array<string>}
     * @memberof MeasurementApiGetSurveys
     */
    readonly surveyIds?: Array<string>

    /**
     * A study canonical identifier. Either one of surveyIds or studyId should be provided.
     * @type {string}
     * @memberof MeasurementApiGetSurveys
     */
    readonly studyId?: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiGetSurveys
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiGetSurveys
     */
    readonly maxResults?: number
}

/**
 * Request parameters for updateDSPBrandLiftStudies operation in MeasurementApi.
 * @export
 * @interface MeasurementApiUpdateDSPBrandLiftStudiesRequest
 */
export interface MeasurementApiUpdateDSPBrandLiftStudiesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiUpdateDSPBrandLiftStudies
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiUpdateDSPBrandLiftStudies
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of measurement objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<DSPBrandLiftStudyV1M1>}
     * @memberof MeasurementApiUpdateDSPBrandLiftStudies
     */
    readonly dSPBrandLiftStudyV1M1?: Array<DSPBrandLiftStudyV1M1>
}

/**
 * Request parameters for updateSurveys operation in MeasurementApi.
 * @export
 * @interface MeasurementApiUpdateSurveysRequest
 */
export interface MeasurementApiUpdateSurveysRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiUpdateSurveys
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiUpdateSurveys
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of survey objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @type {Array<SurveyV1M1>}
     * @memberof MeasurementApiUpdateSurveys
     */
    readonly surveyV1M1?: Array<SurveyV1M1>
}

/**
 * Request parameters for vendorProduct operation in MeasurementApi.
 * @export
 * @interface MeasurementApiVendorProductRequest
 */
export interface MeasurementApiVendorProductRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiVendorProduct
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiVendorProduct
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiVendorProduct
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiVendorProduct
     */
    readonly maxResults?: number

    /**
     * Fetch measurement vendor products request object.
     * @type {VendorProductRequestV1M1}
     * @memberof MeasurementApiVendorProduct
     */
    readonly vendorProductRequestV1M1?: VendorProductRequestV1M1
}

/**
 * Request parameters for vendorProductPolicy operation in MeasurementApi.
 * @export
 * @interface MeasurementApiVendorProductPolicyRequest
 */
export interface MeasurementApiVendorProductPolicyRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiVendorProductPolicy
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiVendorProductPolicy
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Vendor product canonical identifier to filter with.
     * @type {Array<string>}
     * @memberof MeasurementApiVendorProductPolicy
     */
    readonly vendorProductIds?: Array<string>

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiVendorProductPolicy
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiVendorProductPolicy
     */
    readonly maxResults?: number
}

/**
 * Request parameters for vendorProductSurveyQuestionTemplates operation in MeasurementApi.
 * @export
 * @interface MeasurementApiVendorProductSurveyQuestionTemplatesRequest
 */
export interface MeasurementApiVendorProductSurveyQuestionTemplatesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof MeasurementApiVendorProductSurveyQuestionTemplates
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof MeasurementApiVendorProductSurveyQuestionTemplates
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Vendor product canonical identifier to filter with.
     * @type {Array<string>}
     * @memberof MeasurementApiVendorProductSurveyQuestionTemplates
     */
    readonly vendorProductIds?: Array<string>

    /**
     * Vendor product survey question template identifier to filter with.
     * @type {Array<string>}
     * @memberof MeasurementApiVendorProductSurveyQuestionTemplates
     */
    readonly surveyQuestionTemplateIds?: Array<string>

    /**
     * Token from a previous request. Use in conjunction with the &#x60;maxResults&#x60; parameter to control pagination of the returned array.
     * @type {string}
     * @memberof MeasurementApiVendorProductSurveyQuestionTemplates
     */
    readonly nextToken?: string

    /**
     * Sets the maximum number of studies in the returned array. Use in conjunction with the &#x60;nextToken&#x60; parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults&#x3D;20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @type {number}
     * @memberof MeasurementApiVendorProductSurveyQuestionTemplates
     */
    readonly maxResults?: number
}

/**
 * MeasurementApi - object-oriented interface
 * @export
 * @class MeasurementApi
 * @extends {BaseAPI}
 */
export class MeasurementApi extends BaseAPI {
    /**
     * Cancel existing studies.  **Requires one of these permissions**: []
     * @summary Cancel existing studies. Once a study is cancelled it can not be resumed again.
     * @param {MeasurementApiCancelMeasurementStudiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public cancelMeasurementStudies(requestParameters: MeasurementApiCancelMeasurementStudiesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).cancelMeasurementStudies(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.studyIdFilters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Checks the DSP BRAND_LIFT study type eligibility status against vendor products.  **Requires one of these permissions**: []
     * @summary Checks the DSP BRAND_LIFT study type eligibility against vendor products.
     * @param {MeasurementApiCheckDSPBrandLiftEligibilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public checkDSPBrandLiftEligibility(requestParameters: MeasurementApiCheckDSPBrandLiftEligibilityRequest, options?: any) {
        return MeasurementApiFp(this.configuration).checkDSPBrandLiftEligibility(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.nextToken, requestParameters.maxResults, requestParameters.dSPBrandLiftEligibilityRequestV1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create new DSP BRAND_LIFT studies.  **Requires one of these permissions**: []
     * @summary Create new DSP BRAND_LIFT studies.
     * @param {MeasurementApiCreateDSPBrandLiftStudiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public createDSPBrandLiftStudies(requestParameters: MeasurementApiCreateDSPBrandLiftStudiesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).createDSPBrandLiftStudies(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.dSPBrandLiftStudyV1M1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create new study surveys.  **Requires one of these permissions**: []
     * @summary Create new study surveys.
     * @param {MeasurementApiCreateSurveysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public createSurveys(requestParameters: MeasurementApiCreateSurveysRequest, options?: any) {
        return MeasurementApiFp(this.configuration).createSurveys(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.surveyV1M1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.  **Requires one of these permissions**: []
     * @summary Gets one or more DSP BRAND_LIFT studies with requested study identifiers or an advertiser identifier.
     * @param {MeasurementApiGetDSPBrandLiftStudiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public getDSPBrandLiftStudies(requestParameters: MeasurementApiGetDSPBrandLiftStudiesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).getDSPBrandLiftStudies(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.studyIdFilters, requestParameters.advertiserId, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get result of a DSP BRAND_LIFT study. Returns 200 successful response if json resource is requested in Accept header. Returns a 307 Temporary Redirect response if any of the file types is requested and response includes a location header with the value set to an AWS S3 path where the result is located. The path expires after 60 seconds.  **Requires one of these permissions**: []
     * @summary Get result of a DSP BRAND_LIFT study.
     * @param {MeasurementApiGetDSPBrandLiftStudyResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public getDSPBrandLiftStudyResult(requestParameters: MeasurementApiGetDSPBrandLiftStudyResultRequest, options?: any) {
        return MeasurementApiFp(this.configuration).getDSPBrandLiftStudyResult(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.accept, requestParameters.studyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets one or more study surveys with requested survey identifiers or a study identifier.  **Requires one of these permissions**: []
     * @summary Gets one or more study surveys with requested survey identifiers or a study identifier.
     * @param {MeasurementApiGetSurveysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public getSurveys(requestParameters: MeasurementApiGetSurveysRequest, options?: any) {
        return MeasurementApiFp(this.configuration).getSurveys(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.surveyIds, requestParameters.studyId, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update DSP BRAND_LIFT studies. This will be a full update.  **Requires one of these permissions**: []
     * @summary Update DSP BRAND_LIFT studies. This will be a full update.
     * @param {MeasurementApiUpdateDSPBrandLiftStudiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public updateDSPBrandLiftStudies(requestParameters: MeasurementApiUpdateDSPBrandLiftStudiesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).updateDSPBrandLiftStudies(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.dSPBrandLiftStudyV1M1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update measurement surveys. This will be a full update.  **Requires one of these permissions**: []
     * @summary Update measurement surveys. This will be a full update.
     * @param {MeasurementApiUpdateSurveysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public updateSurveys(requestParameters: MeasurementApiUpdateSurveysRequest, options?: any) {
        return MeasurementApiFp(this.configuration).updateSurveys(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.surveyV1M1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the supported measurement vendors products.  **Requires one of these permissions**: []
     * @summary Lists the supported measurement vendor products.
     * @param {MeasurementApiVendorProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public vendorProduct(requestParameters: MeasurementApiVendorProductRequest, options?: any) {
        return MeasurementApiFp(this.configuration).vendorProduct(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.nextToken, requestParameters.maxResults, requestParameters.vendorProductRequestV1M1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the policies for the specific vendor product(s).  **Requires one of these permissions**: []
     * @summary Gets the policies for the specific vendor product(s).
     * @param {MeasurementApiVendorProductPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public vendorProductPolicy(requestParameters: MeasurementApiVendorProductPolicyRequest, options?: any) {
        return MeasurementApiFp(this.configuration).vendorProductPolicy(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.vendorProductIds, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the survey question templates for the specific vendor product(s).  **Requires one of these permissions**: []
     * @summary Gets the survey question templates for the specific vendor product(s).
     * @param {MeasurementApiVendorProductSurveyQuestionTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeasurementApi
     */
    public vendorProductSurveyQuestionTemplates(requestParameters: MeasurementApiVendorProductSurveyQuestionTemplatesRequest, options?: any) {
        return MeasurementApiFp(this.configuration).vendorProductSurveyQuestionTemplates(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.vendorProductIds, requestParameters.surveyQuestionTemplateIds, requestParameters.nextToken, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }
}


