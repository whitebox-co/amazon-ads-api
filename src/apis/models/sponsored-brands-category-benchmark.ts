/* tslint:disable */
/* eslint-disable */
/**
 * Sponsored Brands Category Benchmark
 * Provides advertising metrics for brands to benchmark themselves against their peers with Sponsored Brands campaigns.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Advertising cost of sales (ACOS) is the percentage of sales spent on advertising (total spend / total sales). A lower ACOS infers higher efficiency of your advertising investment relative to your advertising spend. This structure contains the value, median (50th percentile), bottom 25% and top 25% performance quartile values of peers. Peers are aggregated at the category level, and include brands in the same category, with products containing similar features. Note: null is a valid value in these objects and signifies insufficient peers exist to allow the calculation and/or display of the metric or the benchmark.
 * @export
 * @interface AcosMetric
 */
export interface AcosMetric {
    /**
     * The middle value of the data set. Half of the values lie below the median and half lie above the median. It is also known as the 50th percentile.
     * @type {number}
     * @memberof AcosMetric
     */
    median?: number;
    /**
     * The value at which 25% of the top performing values lie above. For ACOS, since lower ACOS indicates higher performance, 25% of values will be below the top 25% value. It is similar to the third/upper quartile.
     * @type {number}
     * @memberof AcosMetric
     */
    top_25pct?: number;
    /**
     * ACOS of your ad
     * @type {number}
     * @memberof AcosMetric
     */
    value?: number;
    /**
     * The value at which 25% of the lower-performing values lie below. For ACOS, since lower ACOS indicates higher performance, 25% of peer values will be above the bottom 25% value. It is similar to the first/lower quartile.
     * @type {number}
     * @memberof AcosMetric
     */
    bottom_25pct?: number;
}
/**
 * A list of brands advertiser has access to
 * @export
 * @interface BrandListResponse
 */
export interface BrandListResponse {
    /**
     * 
     * @type {Array<BrandListResponseBrands>}
     * @memberof BrandListResponse
     */
    brands?: Array<BrandListResponseBrands>;
    /**
     * 
     * @type {string}
     * @memberof BrandListResponse
     */
    nextPageToken?: string;
}
/**
 * 
 * @export
 * @interface BrandListResponseBrands
 */
export interface BrandListResponseBrands {
    /**
     * 
     * @type {string}
     * @memberof BrandListResponseBrands
     */
    name?: string;
}
/**
 * Each item contains the metrics for a single brand-category combination
 * @export
 * @interface BrandsAndCategoriesItem
 */
export interface BrandsAndCategoriesItem {
    /**
     * 
     * @type {CtrMetric}
     * @memberof BrandsAndCategoriesItem
     */
    ctr?: CtrMetric;
    /**
     * 
     * @type {string}
     * @memberof BrandsAndCategoriesItem
     */
    brandName?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandsAndCategoriesItem
     */
    endDate?: string;
    /**
     * 
     * @type {RoasMetric}
     * @memberof BrandsAndCategoriesItem
     */
    roas?: RoasMetric;
    /**
     * 
     * @type {ImpressionMetric}
     * @memberof BrandsAndCategoriesItem
     */
    impressions?: ImpressionMetric;
    /**
     * 
     * @type {AcosMetric}
     * @memberof BrandsAndCategoriesItem
     */
    acos?: AcosMetric;
    /**
     * 
     * @type {string}
     * @memberof BrandsAndCategoriesItem
     */
    categoryName?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandsAndCategoriesItem
     */
    startDate?: string;
    /**
     * This is the same as browse node ID
     * @type {string}
     * @memberof BrandsAndCategoriesItem
     */
    categoryId?: string;
}
/**
 * Click Through Rate (CTR): The percentage of shoppers who see your ad and also click it, calculated as clicks divided by impressions (clicks / impressions). A higher CTR infers more users are interested in your ad and are engaging with them. This structure contains the value, median (50th percentile), bottom 25% and top 25% performance quartile values of peers. Peers are aggregated at the category level, and include brands in the same category, with products containing similar features. Note: null is a valid value in these objects and signifies insufficient peers exist to allow the calculation and/or display of the metric or the benchmark.
 * @export
 * @interface CtrMetric
 */
export interface CtrMetric {
    /**
     * The middle value of the data set. Half of the values lie below the median and half lie above the median. It is also known as the 50th percentile.
     * @type {number}
     * @memberof CtrMetric
     */
    median?: number;
    /**
     * The value at which 25% of the top performing values lie above. For CTR, 25% of values will be above the top 25% value. It is similar to the third/upper quartile.
     * @type {number}
     * @memberof CtrMetric
     */
    top_25pct?: number;
    /**
     * CTR of your ad
     * @type {number}
     * @memberof CtrMetric
     */
    value?: number;
    /**
     * The value at which 25% of the lower-performing values lie below. For CTR, 25% of peer values will be below the bottom 25% value. It is similar to the first/lower quartile.
     * @type {number}
     * @memberof CtrMetric
     */
    bottom_25pct?: number;
}
/**
 * Response of an error which contains a message
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof ErrorResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof ErrorResponse
     */
    details?: string;
}
/**
 * Granularity of time series.
 * @export
 * @enum {string}
 */

export enum GranularityParam {
    Day = 'DAY',
    Week = 'WEEK',
    Month = 'MONTH'
}

/**
 * An impression occurs whenever an ad is displayed. The impressions metric is a count of how many times your ad has been served to a user. A higher impression value infers more users are seeing your ads. This structure contains the value, median (50th percentile), bottom 25% and top 25% performance quartile values of peers. Peers are aggregated at the category level, and include brands in the same category, with products containing similar features. Note: null is a valid value in these objects and signifies insufficient peers exist to allow the calculation and/or display of the metric or the benchmark.
 * @export
 * @interface ImpressionMetric
 */
export interface ImpressionMetric {
    /**
     * The middle value of the data set. Half of the values lie below the median and half lie above the median. It is also known as the 50th percentile.
     * @type {number}
     * @memberof ImpressionMetric
     */
    median?: number;
    /**
     * The value at which 25% of the top performing values lie above. For impressions, 25% of values will be above the top 25% value. It is similar to the third/upper quartile.
     * @type {number}
     * @memberof ImpressionMetric
     */
    top_25pct?: number;
    /**
     * Number of impressions of your ad
     * @type {number}
     * @memberof ImpressionMetric
     */
    value?: number;
    /**
     * The value at which 25% of the lower-performing values lie below. For impressions, 25% of peer values will be below the bottom 25% value. It is similar to the first/lower quartile.
     * @type {number}
     * @memberof ImpressionMetric
     */
    bottom_25pct?: number;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {ProgramTypeParam}
     * @memberof InlineObject
     */
    programType?: ProgramTypeParam;
    /**
     * End of the data range (inclusive) in YYYY-MM-DD format (all <a href=\"https://en.wikipedia.org/wiki/ISO_8601#Dates\">ISO_8601</a> date formats are also supported). The date will be in the Coordinated Universal Time (UTC) timezone.
     * @type {string}
     * @memberof InlineObject
     */
    endDate?: string;
    /**
     * 
     * @type {GranularityParam}
     * @memberof InlineObject
     */
    granularity?: GranularityParam;
    /**
     * Pagination token.
     * @type {string}
     * @memberof InlineObject
     */
    nextPageToken?: string;
    /**
     * 
     * @type {WindowParam}
     * @memberof InlineObject
     */
    window?: WindowParam;
    /**
     * Metrics to be included in the response.
     * @type {Array<string>}
     * @memberof InlineObject
     */
    metrics: Array<InlineObjectMetricsEnum>;
    /**
     * Beginning of the data range (inclusive) in YYYY-MM-DD format (all <a href=\"https://en.wikipedia.org/wiki/ISO_8601#Dates\">ISO_8601</a> date formats are also supported). The startDate cannot be earlier than 90 days in the past from the current date. The date will be in the Coordinated Universal Time (UTC) timezone.
     * @type {string}
     * @memberof InlineObject
     */
    startDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineObjectMetricsEnum {
    Impressions = 'IMPRESSIONS',
    Ctr = 'CTR',
    Acos = 'ACOS',
    Roas = 'ROAS'
}

/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {ProgramTypeParam}
     * @memberof InlineObject1
     */
    programType?: ProgramTypeParam;
    /**
     * End of the data range (inclusive) in YYYY-MM-DD format (all <a href=\"https://en.wikipedia.org/wiki/ISO_8601#Dates\">ISO_8601</a> date formats are also supported). The date will be in the Coordinated Universal Time (UTC) timezone.
     * @type {string}
     * @memberof InlineObject1
     */
    endDate?: string;
    /**
     * Pagination token.
     * @type {string}
     * @memberof InlineObject1
     */
    nextPageToken?: string;
    /**
     * Metrics to be included in the response.
     * @type {Array<string>}
     * @memberof InlineObject1
     */
    metrics?: Array<InlineObject1MetricsEnum>;
    /**
     * Beginning of the data range (inclusive) in YYYY-MM-DD format (all <a href=\"https://en.wikipedia.org/wiki/ISO_8601#Dates\">ISO_8601</a> date formats are also supported). The startDate cannot be earlier than 90 days in the past from the current date. The date will be in the Coordinated Universal Time (UTC) timezone.
     * @type {string}
     * @memberof InlineObject1
     */
    startDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineObject1MetricsEnum {
    Impressions = 'IMPRESSIONS',
    Ctr = 'CTR',
    Acos = 'ACOS',
    Roas = 'ROAS'
}

/**
 * Ad program Type. We currently only support Sponsored Brands (SB).
 * @export
 * @enum {string}
 */

export enum ProgramTypeParam {
    Sb = 'SB'
}

/**
 * Response model of an entire benchmark report
 * @export
 * @interface ReportResponse
 */
export interface ReportResponse {
    /**
     * 
     * @type {string}
     * @memberof ReportResponse
     */
    nextPageToken?: string;
    /**
     * 
     * @type {Array<BrandsAndCategoriesItem>}
     * @memberof ReportResponse
     */
    brandsAndCategories?: Array<BrandsAndCategoriesItem>;
}
/**
 * Return on advertising spend (ROAS) divides the total sales by the total ad spend (total ad sales / total ad spend). A higher ROAS infers higher efficiency of your advertising investment relative to your advertising spend. This structure contains the value, median (50th percentile), bottom 25% and top 25% performance quartile values of peers. Peers are aggregated at the category level, and include brands in the same category, with products containing similar features. Note: null is a valid value in these objects and signifies insufficient peers exist to allow the calculation and/or display of the metric or the benchmark.
 * @export
 * @interface RoasMetric
 */
export interface RoasMetric {
    /**
     * The middle value of the data set. Half of the values lie below the median and half lie above the median. It is also known as the 50th percentile.
     * @type {number}
     * @memberof RoasMetric
     */
    median?: number;
    /**
     * The value at which 25% of the top performing values lie above. For ROAS, 25% of values will be above the top 25% value. It is similar to the third/upper quartile.
     * @type {number}
     * @memberof RoasMetric
     */
    top_25pct?: number;
    /**
     * ROAS of your ad
     * @type {number}
     * @memberof RoasMetric
     */
    value?: number;
    /**
     * The value at which 25% of the lower-performing values lie below. For ROAS, 25% of peer values will be below the bottom 25% value. It is similar to the first/lower quartile.
     * @type {number}
     * @memberof RoasMetric
     */
    bottom_25pct?: number;
}
/**
 * An item in the time series array which represents the data for a single point
 * @export
 * @interface TimeSeriesItem
 */
export interface TimeSeriesItem {
    /**
     * 
     * @type {CtrMetric}
     * @memberof TimeSeriesItem
     */
    ctr?: CtrMetric;
    /**
     * 
     * @type {string}
     * @memberof TimeSeriesItem
     */
    endDate?: string;
    /**
     * 
     * @type {RoasMetric}
     * @memberof TimeSeriesItem
     */
    roas?: RoasMetric;
    /**
     * 
     * @type {ImpressionMetric}
     * @memberof TimeSeriesItem
     */
    impressions?: ImpressionMetric;
    /**
     * 
     * @type {AcosMetric}
     * @memberof TimeSeriesItem
     */
    acos?: AcosMetric;
    /**
     * 
     * @type {string}
     * @memberof TimeSeriesItem
     */
    startDate?: string;
}
/**
 * Response model of time series data
 * @export
 * @interface TimeSeriesResponse
 */
export interface TimeSeriesResponse {
    /**
     * 
     * @type {Array<TimeSeriesItem>}
     * @memberof TimeSeriesResponse
     */
    timeSeries?: Array<TimeSeriesItem>;
    /**
     * 
     * @type {string}
     * @memberof TimeSeriesResponse
     */
    nextPageToken?: string;
    /**
     * 
     * @type {string}
     * @memberof TimeSeriesResponse
     */
    category?: string;
}
/**
 * Period of aggregation.
 * @export
 * @enum {string}
 */

export enum WindowParam {
    Day = 'DAY',
    Week = 'WEEK',
    Month = 'MONTH'
}


/**
 * CategoryBenchmarkApi - axios parameter creator
 * @export
 */
export const CategoryBenchmarkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a list of brands that the advertising account has promoted in their SB campaigns  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Gets a list of brands
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account
         * @param {string} [nextPageToken] pagination token
         * @param {ProgramTypeParam} [programType] Program Type. We currently only support SB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrands: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextPageToken?: string, programType?: ProgramTypeParam, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getBrands', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getBrands', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/benchmarks/brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextPageToken !== undefined) {
                localVarQueryParameter['nextPageToken'] = nextPageToken;
            }

            if (programType !== undefined) {
                localVarQueryParameter['programType'] = programType;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides overview of metrics for all brands and categories that the entity has access to.  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Provides entire report data of peer benchmarks
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportData: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject1?: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getReportData', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getReportData', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/benchmarks/brandsAndCategories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.reportdata.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides time series data for the specified brand and category filtered by optional parameters  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Provides time series data
         * @param {string} brandName A brand name associated with entity
         * @param {string} categoryId Category identifier for brand. This is the same as category ID
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeSeries: async (brandName: string, categoryId: string, amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject?: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandName' is not null or undefined
            assertParamExists('getTimeSeries', 'brandName', brandName)
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getTimeSeries', 'categoryId', categoryId)
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getTimeSeries', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getTimeSeries', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/benchmarks/brands/{brandName}/categories/{categoryId}`
                .replace(`{${"brandName"}}`, encodeURIComponent(String(brandName)))
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.timeseriesdata.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryBenchmarkApi - functional programming interface
 * @export
 */
export const CategoryBenchmarkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryBenchmarkApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets a list of brands that the advertising account has promoted in their SB campaigns  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Gets a list of brands
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account
         * @param {string} [nextPageToken] pagination token
         * @param {ProgramTypeParam} [programType] Program Type. We currently only support SB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrands(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextPageToken?: string, programType?: ProgramTypeParam, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrands(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextPageToken, programType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides overview of metrics for all brands and categories that the entity has access to.  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Provides entire report data of peer benchmarks
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportData(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject1?: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportData(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides time series data for the specified brand and category filtered by optional parameters  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Provides time series data
         * @param {string} brandName A brand name associated with entity
         * @param {string} categoryId Category identifier for brand. This is the same as category ID
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeSeries(brandName: string, categoryId: string, amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject?: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeSeriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeSeries(brandName, categoryId, amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryBenchmarkApi - factory interface
 * @export
 */
export const CategoryBenchmarkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryBenchmarkApiFp(configuration)
    return {
        /**
         * Gets a list of brands that the advertising account has promoted in their SB campaigns  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Gets a list of brands
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account
         * @param {string} [nextPageToken] pagination token
         * @param {ProgramTypeParam} [programType] Program Type. We currently only support SB
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrands(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, nextPageToken?: string, programType?: ProgramTypeParam, options?: any): AxiosPromise<BrandListResponse> {
            return localVarFp.getBrands(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, nextPageToken, programType, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides overview of metrics for all brands and categories that the entity has access to.  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Provides entire report data of peer benchmarks
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportData(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject1?: InlineObject1, options?: any): AxiosPromise<ReportResponse> {
            return localVarFp.getReportData(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides time series data for the specified brand and category filtered by optional parameters  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Provides time series data
         * @param {string} brandName A brand name associated with entity
         * @param {string} categoryId Category identifier for brand. This is the same as category ID
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeSeries(brandName: string, categoryId: string, amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, inlineObject?: InlineObject, options?: any): AxiosPromise<TimeSeriesResponse> {
            return localVarFp.getTimeSeries(brandName, categoryId, amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, inlineObject, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBrands operation in CategoryBenchmarkApi.
 * @export
 * @interface CategoryBenchmarkApiGetBrandsRequest
 */
export interface CategoryBenchmarkApiGetBrandsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CategoryBenchmarkApiGetBrands
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account
     * @type {string}
     * @memberof CategoryBenchmarkApiGetBrands
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * pagination token
     * @type {string}
     * @memberof CategoryBenchmarkApiGetBrands
     */
    readonly nextPageToken?: string

    /**
     * Program Type. We currently only support SB
     * @type {ProgramTypeParam}
     * @memberof CategoryBenchmarkApiGetBrands
     */
    readonly programType?: ProgramTypeParam
}

/**
 * Request parameters for getReportData operation in CategoryBenchmarkApi.
 * @export
 * @interface CategoryBenchmarkApiGetReportDataRequest
 */
export interface CategoryBenchmarkApiGetReportDataRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CategoryBenchmarkApiGetReportData
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account
     * @type {string}
     * @memberof CategoryBenchmarkApiGetReportData
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {InlineObject1}
     * @memberof CategoryBenchmarkApiGetReportData
     */
    readonly inlineObject1?: InlineObject1
}

/**
 * Request parameters for getTimeSeries operation in CategoryBenchmarkApi.
 * @export
 * @interface CategoryBenchmarkApiGetTimeSeriesRequest
 */
export interface CategoryBenchmarkApiGetTimeSeriesRequest {
    /**
     * A brand name associated with entity
     * @type {string}
     * @memberof CategoryBenchmarkApiGetTimeSeries
     */
    readonly brandName: string

    /**
     * Category identifier for brand. This is the same as category ID
     * @type {string}
     * @memberof CategoryBenchmarkApiGetTimeSeries
     */
    readonly categoryId: string

    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CategoryBenchmarkApiGetTimeSeries
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account
     * @type {string}
     * @memberof CategoryBenchmarkApiGetTimeSeries
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {InlineObject}
     * @memberof CategoryBenchmarkApiGetTimeSeries
     */
    readonly inlineObject?: InlineObject
}

/**
 * CategoryBenchmarkApi - object-oriented interface
 * @export
 * @class CategoryBenchmarkApi
 * @extends {BaseAPI}
 */
export class CategoryBenchmarkApi extends BaseAPI {
    /**
     * Gets a list of brands that the advertising account has promoted in their SB campaigns  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @summary Gets a list of brands
     * @param {CategoryBenchmarkApiGetBrandsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryBenchmarkApi
     */
    public getBrands(requestParameters: CategoryBenchmarkApiGetBrandsRequest, options?: any) {
        return CategoryBenchmarkApiFp(this.configuration).getBrands(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.nextPageToken, requestParameters.programType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides overview of metrics for all brands and categories that the entity has access to.  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @summary Provides entire report data of peer benchmarks
     * @param {CategoryBenchmarkApiGetReportDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryBenchmarkApi
     */
    public getReportData(requestParameters: CategoryBenchmarkApiGetReportDataRequest, options?: any) {
        return CategoryBenchmarkApiFp(this.configuration).getReportData(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides time series data for the specified brand and category filtered by optional parameters  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @summary Provides time series data
     * @param {CategoryBenchmarkApiGetTimeSeriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryBenchmarkApi
     */
    public getTimeSeries(requestParameters: CategoryBenchmarkApiGetTimeSeriesRequest, options?: any) {
        return CategoryBenchmarkApiFp(this.configuration).getTimeSeries(requestParameters.brandName, requestParameters.categoryId, requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.inlineObject, options).then((request) => request(this.axios, this.basePath));
    }
}


