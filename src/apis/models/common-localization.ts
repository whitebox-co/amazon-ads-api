/* tslint:disable */
/* eslint-disable */
/**
 * Localization
 * This API provides operations to localize data used when creating advertising campaigns. Depending on the type of data, localization may entail translating text, converting monetary amounts, or mapping an entity in a source marketplace to an analogous entity in one or more target marketplaces.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { createRequestFunction } from "../../helpers";

/**
 * A CurrencyLocalizationError Object.
 * @export
 * @interface CurrencyLocalizationError
 */
export interface CurrencyLocalizationError {
    /**
     * Programmatic status code.
     * @type {number}
     * @memberof CurrencyLocalizationError
     */
    code: number;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof CurrencyLocalizationError
     */
    details?: string;
}
/**
 * Currency Localization Request Object.
 * @export
 * @interface CurrencyLocalizationRequest
 */
export interface CurrencyLocalizationRequest {
    /**
     * An array of LocalizationCurrencyRequest objects. The order will be maintained in the response.
     * @type {Array<LocalizationCurrencyRequest>}
     * @memberof CurrencyLocalizationRequest
     */
    localizeCurrencyRequests: Array<LocalizationCurrencyRequest>;
    /**
     * The source marketplace ID. Please see the table in the description of `targetMarketplaces` for supported values.
     * @type {string}
     * @memberof CurrencyLocalizationRequest
     */
    sourceMarketplaceId: string;
    /**
     * A list of target marketplace IDs. Each element must be unique. The order is irrelevant. The following marketplaces are supported: |Region|Country Code|Name|Marketplace ID| |-|-|-|-| |EU|AE|United Arab Emirates|A2VIGQ35RCS4UG| |EU|DE|Germany|A1PA6795UKMFR9| |EU|EG|Egypt|ARBP9OOSHTCHU| |EU|ES|Spain|A1RKKUPIHCS9HS| |EU|FR|France|A13V1IB3VIYZZH| |EU|GB|United Kingdom|A1F83G8C2ARO7P| |EU|IT|Italy|APJ6JRA9NG5V4| |EU|NL|Netherlands|A1805IZSGTT6HS| |EU|PL|Poland|A1C3SOZRARQ6R3| |EU|SA|Saudi Arabia|A17E79C6D8DWNP| |EU|SE|Sweden|A2NODRKZP88ZB9| |EU|TR|Turkey|A33AVAJ2PDY3EV| |FE|AU|Australia|A39IBJ37TRP1C6| |FE|IN|India|A21TJRUUN4KGV| |FE|JP|Japan|A1VC38T7YXB528| |FE|SG|Singapore|A19VAU5U5O7RUS| |NA|BR|Brazil|A2Q3Y263D00KWC| |NA|CA|Canada|A2EUQ1WTGCTBG2| |NA|MX|Mexico|A1AM78C64UM0Y8| |NA|US|United States|ATVPDKIKX0DER|
     * @type {Array<string>}
     * @memberof CurrencyLocalizationRequest
     */
    targetMarketplaces: Array<string>;
}
/**
 * CurrencyLocalizationResponse Object
 * @export
 * @interface CurrencyLocalizationResponse
 */
export interface CurrencyLocalizationResponse {
    /**
     * An array of LocalizationCurrencyResponse objects. The order matches that of the input LocalizationCurrencyRequest object array.
     * @type {Array<LocalizationCurrencyResponse>}
     * @memberof CurrencyLocalizationResponse
     */
    localizedCurrencyResponses: Array<LocalizationCurrencyResponse>;
}
/**
 * 
 * @export
 * @interface KeywordsLocalizationError
 */
export interface KeywordsLocalizationError {
    /**
     * Programmatic status code.
     * @type {number}
     * @memberof KeywordsLocalizationError
     */
    code?: number;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof KeywordsLocalizationError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface KeywordsLocalizationRequest
 */
export interface KeywordsLocalizationRequest {
    /**
     * List of LocalizationKeywordRequests. The order will be maintained in the response.
     * @type {Array<LocalizationKeywordRequest>}
     * @memberof KeywordsLocalizationRequest
     */
    localizeKeywordRequests: Array<LocalizationKeywordRequest>;
    /**
     * 
     * @type {LocalizationKeywordSourceDetails}
     * @memberof KeywordsLocalizationRequest
     */
    sourceDetails?: LocalizationKeywordSourceDetails;
    /**
     * 
     * @type {LocalizationKeywordTargetDetails}
     * @memberof KeywordsLocalizationRequest
     */
    targetDetails: LocalizationKeywordTargetDetails;
}
/**
 * 
 * @export
 * @interface KeywordsLocalizationResponse
 */
export interface KeywordsLocalizationResponse {
    /**
     * List of LocalizationKeywordResponses. The order matches that of the LocalizationKeywordRequests list in the request.
     * @type {Array<LocalizationKeywordResponse>}
     * @memberof KeywordsLocalizationResponse
     */
    localizedKeywordResponses: Array<LocalizationKeywordResponse>;
}
/**
 * A currency to be localized.
 * @export
 * @interface LocalizationCurrency
 */
export interface LocalizationCurrency {
    /**
     * 
     * @type {number}
     * @memberof LocalizationCurrency
     */
    amount: number;
}
/**
 * LocalizationCurrencyRequest Object.
 * @export
 * @interface LocalizationCurrencyRequest
 */
export interface LocalizationCurrencyRequest {
    /**
     * 
     * @type {LocalizationCurrency}
     * @memberof LocalizationCurrencyRequest
     */
    currency: LocalizationCurrency;
}
/**
 * LocalizationCurrencyResponse Object.
 * @export
 * @interface LocalizationCurrencyResponse
 */
export interface LocalizationCurrencyResponse {
    /**
     * A map from target marketplace ID (string) to localized monetary amount.
     * @type {{ [key: string]: LocalizationCurrency; }}
     * @memberof LocalizationCurrencyResponse
     */
    localizedCurrencies: { [key: string]: LocalizationCurrency; };
    /**
     * If status is ERROR, the error code.
     * @type {string}
     * @memberof LocalizationCurrencyResponse
     */
    errorCode?: string;
    /**
     * If SUCCESS, do not retry. If ERROR, may retry.
     * @type {string}
     * @memberof LocalizationCurrencyResponse
     */
    status: LocalizationCurrencyResponseStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum LocalizationCurrencyResponseStatusEnum {
    Success = 'SUCCESS',
    Error = 'ERROR'
}

/**
 * An object containing information about a keyword.
 * @export
 * @interface LocalizationKeyword
 */
export interface LocalizationKeyword {
    /**
     * The keyword string.
     * @type {string}
     * @memberof LocalizationKeyword
     */
    keyword: string;
}
/**
 * A LocalizationKeywordRequest object. Contains information needed about the keyword to be localized.
 * @export
 * @interface LocalizationKeywordRequest
 */
export interface LocalizationKeywordRequest {
    /**
     * 
     * @type {LocalizationKeyword}
     * @memberof LocalizationKeywordRequest
     */
    localizationKeyword: LocalizationKeyword;
}
/**
 * A LocalizationKeywordResponse object. Contains localized keywords in the various target marketplaces/locales.
 * @export
 * @interface LocalizationKeywordResponse
 */
export interface LocalizationKeywordResponse {
    /**
     * If status is ERROR, the error code. Not present if status is SUCCESS.
     * @type {string}
     * @memberof LocalizationKeywordResponse
     */
    errorCode?: string;
    /**
     * Key (string): target marketplace ID. Value (LocalizationKeyword): localized keyword. If the source keyword cannot be translated into the language associated with a given target marketplace, it will be unchanged for that marketplace.
     * @type {{ [key: string]: LocalizationKeyword; }}
     * @memberof LocalizationKeywordResponse
     */
    localizedKeywords?: { [key: string]: LocalizationKeyword; };
    /**
     * If SUCCESS, do not retry. If ERROR, may retry.
     * @type {string}
     * @memberof LocalizationKeywordResponse
     */
    status: LocalizationKeywordResponseStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum LocalizationKeywordResponseStatusEnum {
    Success = 'SUCCESS',
    Error = 'ERROR'
}

/**
 * The source details for the LocalizationKeywordRequests. One of locale or marketplaceId has to be present. If both are present, marketplaceId is ignored.
 * @export
 * @interface LocalizationKeywordSourceDetails
 */
export interface LocalizationKeywordSourceDetails {
    /**
     * The ID of the source marketplace. For example, if the caller is an advertiser based in the UK (marketplace ID A1F83G8C2ARO7P) and wishes to localize keywords to Germany (marketplace ID A1PA6795UKMFR9), the source marketplace ID is that of the UK, i.e., A1F83G8C2ARO7P. This marketplace ID is converted into a default locale for that marketplace. The supported locale arcs are outlined in the targetDetails documentation. The following marketplaces are supported for conversion to default locales: |Region|Country Code|Default Locale|Name|Marketplace ID| |-|-|-|-|-| |EU|AE|en_AE|United Arab Emirates|A2VIGQ35RCS4UG| |EU|DE|de_DE|Germany|A1PA6795UKMFR9| |EU|EG|ar_EG|Egypt|ARBP9OOSHTCHU| |EU|ES|es_ES|Spain|A1RKKUPIHCS9HS| |EU|FR|fr_FR|France|A13V1IB3VIYZZH| |EU|GB|en_GB|United Kingdom|A1F83G8C2ARO7P| |EU|IT|it_IT|Italy|APJ6JRA9NG5V4| |EU|NL|nl_NL|Netherlands|A1805IZSGTT6HS| |EU|PL|pl_PL|Poland|A1C3SOZRARQ6R3| |EU|SA|en_SA|Saudi Arabia|A17E79C6D8DWNP| |EU|SE|sv_SE|Sweden|A2NODRKZP88ZB9| |EU|TR|tr_TR|Turkey|A33AVAJ2PDY3EV| |FE|AU|en_AU|Australia|A39IBJ37TRP1C6| |FE|IN|en_IN|India|A21TJRUUN4KGV| |FE|JP|ja_JP|Japan|A1VC38T7YXB528| |FE|SG|en_SG|Singapore|A19VAU5U5O7RUS| |NA|BR|pt_BR|Brazil|A2Q3Y263D00KWC| |NA|CA|en_CA|Canada|A2EUQ1WTGCTBG2| |NA|MX|es_MX|Mexico|A1AM78C64UM0Y8| |NA|US|en_US|United States|ATVPDKIKX0DER|
     * @type {string}
     * @memberof LocalizationKeywordSourceDetails
     */
    marketplaceId?: string;
    /**
     * The source locale. For example, if the caller is localizing keywords from British English (en_GB) to Simplified Chinese (zh_CN), the source locale is en_GB. Please see the table within the description of the targetDetails object for supported source to target Locale values.
     * @type {string}
     * @memberof LocalizationKeywordSourceDetails
     */
    locale?: string;
}
/**
 * The target details for the LocalizationKeywordRequests. One of locales or marketplaceIds must be present. If both are present, the content of marketplaceIds is ignored. Each marketplace ID or locale across the array must be unique. The following locale pairs are supported. ?? signifies wildcard. For example if en_?? is specified, locales that are supported would include but not be limited to en_US or en_GB: * ar_?? to en_?? * de_?? to en_?? * de_?? to es_?? * de_?? to fr_?? * de_?? to it_?? * de_?? to nl_?? * de_?? to zh_?? * en_?? to ar_?? * en_?? to de_?? * en_?? to es_?? * en_?? to es_MX * en_?? to fr_?? * en_?? to it_?? * en_?? to ja_?? * en_?? to nl_?? * en_?? to pt_?? * es_?? to de_?? * es_?? to en_?? * es_?? to fr_?? * es_?? to it_?? * es_?? to nl_?? * es_?? to zh_?? * es_MX to en_?? * fr_?? to de_?? * fr_?? to en_?? * fr_?? to es_?? * fr_?? to it_?? * fr_?? to nl_?? * fr_?? to zh_?? * it_?? to de_?? * it_?? to en_?? * it_?? to es_?? * it_?? to fr_?? * it_?? to nl_?? * it_?? to zh_?? * ja_?? to en_?? * ja_?? to zh_?? * nl_?? to de_?? * nl_?? to en_?? * nl_?? to es_?? * nl_?? to fr_?? * nl_?? to it_?? * nl_?? to zh_?? * pt_?? to en_?? * zh_?? to de_?? * zh_?? to es_?? * zh_?? to es_MX * zh_?? to fr_?? * zh_?? to it_?? * zh_?? to ja_?? * zh_?? to nl_?? * zh_?? to pt_??
 * @export
 * @interface LocalizationKeywordTargetDetails
 */
export interface LocalizationKeywordTargetDetails {
    /**
     * The IDs of target marketplaces (marketplaces in which the caller wishes to localize the specified keywords). For example, if the caller is an advertiser based in the UK (marketplace ID A1F83G8C2ARO7P) and wishes to localize keywords to Germany (marketplace ID A1PA6795UKMFR9), the target marketplace ID is that of Germany, i.e., A1PA6795UKMFR9. **Please note:** if locales are provided, any provided marketplace IDs will be ignored. The marketplace IDs are converted into default locales. The supported locale arcs are outlined in the targetDetails locales section. The following marketplaces are supported for conversion to default locales: |Region|Country Code|Default Locale|Name|Marketplace ID| |-|-|-|-|-| |EU|AE|en_AE|United Arab Emirates|A2VIGQ35RCS4UG| |EU|DE|de_DE|Germany|A1PA6795UKMFR9| |EU|EG|ar_EG|Egypt|ARBP9OOSHTCHU| |EU|ES|es_ES|Spain|A1RKKUPIHCS9HS| |EU|FR|fr_FR|France|A13V1IB3VIYZZH| |EU|GB|en_GB|United Kingdom|A1F83G8C2ARO7P| |EU|IT|it_IT|Italy|APJ6JRA9NG5V4| |EU|NL|nl_NL|Netherlands|A1805IZSGTT6HS| |EU|PL|pl_PL|Poland|A1C3SOZRARQ6R3| |EU|SA|en_SA|Saudi Arabia|A17E79C6D8DWNP| |EU|SE|sv_SE|Sweden|A2NODRKZP88ZB9| |EU|TR|tr_TR|Turkey|A33AVAJ2PDY3EV| |FE|AU|en_AU|Australia|A39IBJ37TRP1C6| |FE|IN|en_IN|India|A21TJRUUN4KGV| |FE|JP|ja_JP|Japan|A1VC38T7YXB528| |FE|SG|en_SG|Singapore|A19VAU5U5O7RUS| |NA|BR|pt_BR|Brazil|A2Q3Y263D00KWC| |NA|CA|en_CA|Canada|A2EUQ1WTGCTBG2| |NA|MX|es_MX|Mexico|A1AM78C64UM0Y8| |NA|US|en_US|United States|ATVPDKIKX0DER|
     * @type {Array<string>}
     * @memberof LocalizationKeywordTargetDetails
     */
    marketplaceIds?: Array<string>;
    /**
     * The target locales (locales to which the caller wishes to localize the specified keywords). For example, if the caller is localizing keywords from British English (en_GB) to Simplified Chinese (zh_CN), the target locale is zh_CN.
     * @type {Array<string>}
     * @memberof LocalizationKeywordTargetDetails
     */
    locales?: Array<string>;
}
/**
 * A product to be localized.
 * @export
 * @interface LocalizationProduct
 */
export interface LocalizationProduct {
    /**
     * The product\'s Amazon Standard Identification Number.
     * @type {string}
     * @memberof LocalizationProduct
     */
    asin: string;
    /**
     * The product\'s Stock Keeping Unit. Conditional: if the caller is a seller, include the SKU for all products. Otherwise, this field should be omitted.
     * @type {string}
     * @memberof LocalizationProduct
     */
    sku?: string;
}
/**
 * 
 * @export
 * @interface LocalizationProductRequest
 */
export interface LocalizationProductRequest {
    /**
     * 
     * @type {LocalizationProduct}
     * @memberof LocalizationProductRequest
     */
    product: LocalizationProduct;
}
/**
 * 
 * @export
 * @interface LocalizationProductResponse
 */
export interface LocalizationProductResponse {
    /**
     * Key (string): target marketplace ID. Value (LocalizationProduct): localized product. If no localized product is available in a given target marketplace, the map will not contain an entry for that marketplace. An empty map indicates that the source product could not be localized in any of the target marketplaces.
     * @type {{ [key: string]: LocalizationProduct; }}
     * @memberof LocalizationProductResponse
     */
    localizedProducts: { [key: string]: LocalizationProduct; };
    /**
     * If the status is ERROR, the error code. Not present if the status is SUCCESS.
     * @type {string}
     * @memberof LocalizationProductResponse
     */
    errorCode?: string;
    /**
     * If SUCCESS, do not retry. If ERROR, may retry.
     * @type {string}
     * @memberof LocalizationProductResponse
     */
    status: LocalizationProductResponseStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum LocalizationProductResponseStatusEnum {
    Success = 'SUCCESS',
    Error = 'ERROR'
}

/**
 * The target details for the LocalizationProductRequests. There must be only one target details object per marketplace ID. The advertiser ID may be repeated across target details objects. The order of target details objects is irrelevant. The following marketplaces are supported for product localization: |Region|Country Code|Name|Marketplace ID| |-|-|-|-| |EU|AE|United Arab Emirates|A2VIGQ35RCS4UG| |EU|DE|Germany|A1PA6795UKMFR9| |EU|EG|Egypt|ARBP9OOSHTCHU| |EU|ES|Spain|A1RKKUPIHCS9HS| |EU|FR|France|A13V1IB3VIYZZH| |EU|GB|United Kingdom|A1F83G8C2ARO7P| |EU|IT|Italy|APJ6JRA9NG5V4| |EU|NL|Netherlands|A1805IZSGTT6HS| |EU|PL|Poland|A1C3SOZRARQ6R3| |EU|SA|Saudi Arabia|A17E79C6D8DWNP| |EU|SE|Sweden|A2NODRKZP88ZB9| |EU|TR|Turkey|A33AVAJ2PDY3EV| |FE|AU|Australia|A39IBJ37TRP1C6| |FE|IN|India|A21TJRUUN4KGV| |FE|JP|Japan|A1VC38T7YXB528| |FE|SG|Singapore|A19VAU5U5O7RUS| |NA|BR|Brazil|A2Q3Y263D00KWC| |NA|CA|Canada|A2EUQ1WTGCTBG2| |NA|MX|Mexico|A1AM78C64UM0Y8| |NA|US|United States|ATVPDKIKX0DER|
 * @export
 * @interface LocalizationProductTargetDetails
 */
export interface LocalizationProductTargetDetails {
    /**
     * The ID of a target marketplace (a marketplace in which the caller wishes to localize the specified products). For example, if the caller is an advertiser based in the UK (marketplace ID A1F83G8C2ARO7P) and wishes to localize a product to Germany (marketplace ID A1PA6795UKMFR9), the target marketplace ID is that of Germany, i.e., A1PA6795UKMFR9. The following marketplaces are supported for product localization: |Region|Country Code|Name|Marketplace ID| |-|-|-|-| |EU|AE|United Arab Emirates|A2VIGQ35RCS4UG| |EU|DE|Germany|A1PA6795UKMFR9| |EU|EG|Egypt|ARBP9OOSHTCHU| |EU|ES|Spain|A1RKKUPIHCS9HS| |EU|FR|France|A13V1IB3VIYZZH| |EU|GB|United Kingdom|A1F83G8C2ARO7P| |EU|IT|Italy|APJ6JRA9NG5V4| |EU|NL|Netherlands|A1805IZSGTT6HS| |EU|PL|Poland|A1C3SOZRARQ6R3| |EU|SA|Saudi Arabia|A17E79C6D8DWNP| |EU|SE|Sweden|A2NODRKZP88ZB9| |EU|TR|Turkey|A33AVAJ2PDY3EV| |FE|AU|Australia|A39IBJ37TRP1C6| |FE|IN|India|A21TJRUUN4KGV| |FE|JP|Japan|A1VC38T7YXB528| |FE|SG|Singapore|A19VAU5U5O7RUS| |NA|BR|Brazil|A2Q3Y263D00KWC| |NA|CA|Canada|A2EUQ1WTGCTBG2| |NA|MX|Mexico|A1AM78C64UM0Y8| |NA|US|United States|ATVPDKIKX0DER|
     * @type {string}
     * @memberof LocalizationProductTargetDetails
     */
    marketplaceId: string;
    /**
     * The advertiser ID of the caller in the associated target marketplace. This may be either a marketplace-specific ID or a global account ID. For example, if an advertiser is localizing a product from the UK (where their ID is A123) to Germany (where their ID is A456), this advertiser ID should be set to A456. This is the advertiser ID returned by the Profiles API. An entity ID (one starting with \"ENTITY\") may be provided instead.
     * @type {string}
     * @memberof LocalizationProductTargetDetails
     */
    advertiserId: string;
}
/**
 * A targeting expression composed of one or more predicates.
 * @export
 * @interface LocalizationTargetingExpression
 */
export interface LocalizationTargetingExpression {
    /**
     * Specifies whether the expression is for positive targeting (false) or negative targeting (true).
     * @type {boolean}
     * @memberof LocalizationTargetingExpression
     */
    isForNegativeTargeting: boolean;
    /**
     * The predicates forming the targeting expression.
     * @type {Array<LocalizationTargetingExpressionPredicate>}
     * @memberof LocalizationTargetingExpression
     */
    expression: Array<LocalizationTargetingExpressionPredicate>;
}
/**
 * A targeting expression predicate.
 * @export
 * @interface LocalizationTargetingExpressionPredicate
 */
export interface LocalizationTargetingExpressionPredicate {
    /**
     * 
     * @type {LocalizationTargetingExpressionPredicateType}
     * @memberof LocalizationTargetingExpressionPredicate
     */
    type: LocalizationTargetingExpressionPredicateType;
    /**
     * The value of the predicate. Targeting expression syntax, including examples of predicates and the values they support, is documented [here](https://advertising.amazon.com/API/docs/en-us/bulksheets/sp/sp-general-info/sp-product-attribute-targeting). Only predicates using the following types of data will be localized: * Age range ID * ASIN * Brand ID * Category ID * Genre ID * Price (the currency will be assumed to be the default currency of the source marketplace)  Predicates using other data will be returned unchanged.
     * @type {string}
     * @memberof LocalizationTargetingExpressionPredicate
     */
    value: string;
}
/**
 * Targeting predicate type. The following predicate types are supported: | Type | Description | Data in `value` String | | --- | --- | --- | | `asinCategorySameAs` | Target the specified category. | Integer ID | | `asinBrandSameAs` | Target the specified brand. | Integer ID | | `asinPriceLessThan` | Target a price less than the specified price. | Real number | | `asinPriceBetween` | Target a price between the prices specified. | Two real numbers separated by a hyphen (e.g., `9.99-19.99`) | | `asinPriceGreaterThan` | Target a price greater than the specified price. | Real number | | `asinReviewRatingLessThan` | Target a review rating less than the specified review rating. | Real number | | `asinReviewRatingBetween` | Target a review rating between the specified review ratings. | Two real numbers separated by a hyphen (e.g., `4.5-5`) | | `asinReviewRatingGreaterThan` | Target a review rating greater than the specified review rating. | Real number | | `asinSameAs` | Target the specified ASIN. | Alphanumeric ASIN | | `asinIsPrimeShippingEligible` | Target products that are Prime Shipping Eligible. This refinement can be applied at a category or brand level only. | \"true\" or \"false\" | | `asinAgeRangeSameAs` | Target the specified age range. This refinement can be applied to Toys and Games categories only. | Integer ID | | `asinGenreSameAs` | Target products related to the specified genre. This refinement can be applied to Books and eBooks categories only. | Integer ID |
 * @export
 * @enum {string}
 */

export enum LocalizationTargetingExpressionPredicateType {
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinSameAs = 'asinSameAs',
    AsinIsPrimeShippingEligible = 'asinIsPrimeShippingEligible',
    AsinAgeRangeSameAs = 'asinAgeRangeSameAs',
    AsinGenreSameAs = 'asinGenreSameAs'
}

/**
 * A request to localize a targeting expression from a source marketplace to one or more target marketplaces.
 * @export
 * @interface LocalizationTargetingExpressionRequest
 */
export interface LocalizationTargetingExpressionRequest {
    /**
     * 
     * @type {LocalizationTargetingExpression}
     * @memberof LocalizationTargetingExpressionRequest
     */
    targetingExpression: LocalizationTargetingExpression;
}
/**
 * A response to a request to localize a targeting expression from a source marketplace to one or more target marketplaces.
 * @export
 * @interface LocalizationTargetingExpressionResponse
 */
export interface LocalizationTargetingExpressionResponse {
    /**
     * A map from target marketplace ID (string) to localized targeting expression (`LocalizationTargetingExpression`). If no entry exists for a given target marketplace, the source targeting expression could not be localized there.
     * @type {{ [key: string]: LocalizationTargetingExpression; }}
     * @memberof LocalizationTargetingExpressionResponse
     */
    localizedTargetingExpressions?: { [key: string]: LocalizationTargetingExpression; };
    /**
     * A map from target marketplace ID (string) to the localization result (`LocalizationTargetingExpressionResult`). All target marketplaces present in the request will have an entry in this map.
     * @type {{ [key: string]: LocalizationTargetingExpressionResult; }}
     * @memberof LocalizationTargetingExpressionResponse
     */
    localizedTargetingExpressionResults?: { [key: string]: LocalizationTargetingExpressionResult; };
}
/**
 * Information regarding how and to what extent a targeting expression was localized.
 * @export
 * @interface LocalizationTargetingExpressionResult
 */
export interface LocalizationTargetingExpressionResult {
    /**
     * If present, contains one or more strings describing why predicates could not be localized. For manual diagnostic use.
     * @type {Array<string>}
     * @memberof LocalizationTargetingExpressionResult
     */
    messages?: Array<string>;
    /**
     * The status of the localization operation. Note that if the source targeting expression contains an age range predicate that cannot be localized, localization of the entire expression will fail. SUCCESS: All predicates within the expression were localized. PARTIAL_SUCCESS: Only some of the predicates within the expression were localized. FAILURE: The expression could not be localized. ERROR: The expression could not be localized because one or more errors occurred.
     * @type {string}
     * @memberof LocalizationTargetingExpressionResult
     */
    status: LocalizationTargetingExpressionResultStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum LocalizationTargetingExpressionResultStatusEnum {
    Success = 'SUCCESS',
    PartialSuccess = 'PARTIAL_SUCCESS',
    Failure = 'FAILURE',
    Error = 'ERROR'
}

/**
 * A source marketplace. One of the marketplace ID or the two-letter country code must be present. The latter is ignored if the former is present.
 * @export
 * @interface LocalizationTargetingSourceDetails
 */
export interface LocalizationTargetingSourceDetails {
    /**
     * The ID of the source marketplace. For example, when mapping data from the UK (marketplace ID A1F83G8C2ARO7P) to Germany (marketplace ID A1PA6795UKMFR9), the source marketplace ID is that of the UK, i.e., A1F83G8C2ARO7P. Supported marketplaces are: |Region|Country Code|Name|Marketplace ID| |-|-|-|-| |EU|AE|United Arab Emirates|A2VIGQ35RCS4UG| |EU|DE|Germany|A1PA6795UKMFR9| |EU|EG|Egypt|ARBP9OOSHTCHU| |EU|ES|Spain|A1RKKUPIHCS9HS| |EU|FR|France|A13V1IB3VIYZZH| |EU|GB|United Kingdom|A1F83G8C2ARO7P| |EU|IT|Italy|APJ6JRA9NG5V4| |EU|NL|Netherlands|A1805IZSGTT6HS| |EU|PL|Poland|A1C3SOZRARQ6R3| |EU|SA|Saudi Arabia|A17E79C6D8DWNP| |EU|SE|Sweden|A2NODRKZP88ZB9| |EU|TR|Turkey|A33AVAJ2PDY3EV| |FE|AU|Australia|A39IBJ37TRP1C6| |FE|IN|India|A21TJRUUN4KGV| |FE|JP|Japan|A1VC38T7YXB528| |FE|SG|Singapore|A19VAU5U5O7RUS| |NA|BR|Brazil|A2Q3Y263D00KWC| |NA|CA|Canada|A2EUQ1WTGCTBG2| |NA|MX|Mexico|A1AM78C64UM0Y8| |NA|US|United States|ATVPDKIKX0DER|
     * @type {string}
     * @memberof LocalizationTargetingSourceDetails
     */
    marketplaceId?: string;
    /**
     * A two-letter country code. Please refer to the table above for a list of supported country codes.
     * @type {string}
     * @memberof LocalizationTargetingSourceDetails
     */
    countryCode?: string;
}
/**
 * A target marketplace. One of the marketplace ID or the two-letter country code must be present. The latter is ignored if the former is present.
 * @export
 * @interface LocalizationTargetingTargetDetails
 */
export interface LocalizationTargetingTargetDetails {
    /**
     * The ID of the target marketplace. For example, when mapping data from the UK (marketplace ID A1F83G8C2ARO7P) to Germany (marketplace ID A1PA6795UKMFR9), the target marketplace ID is that of the UK, i.e., A1F83G8C2ARO7P. Supported marketplaces are: |Region|Country Code|Name|Marketplace ID| |-|-|-|-| |EU|AE|United Arab Emirates|A2VIGQ35RCS4UG| |EU|DE|Germany|A1PA6795UKMFR9| |EU|EG|Egypt|ARBP9OOSHTCHU| |EU|ES|Spain|A1RKKUPIHCS9HS| |EU|FR|France|A13V1IB3VIYZZH| |EU|GB|United Kingdom|A1F83G8C2ARO7P| |EU|IT|Italy|APJ6JRA9NG5V4| |EU|NL|Netherlands|A1805IZSGTT6HS| |EU|PL|Poland|A1C3SOZRARQ6R3| |EU|SA|Saudi Arabia|A17E79C6D8DWNP| |EU|SE|Sweden|A2NODRKZP88ZB9| |EU|TR|Turkey|A33AVAJ2PDY3EV| |FE|AU|Australia|A39IBJ37TRP1C6| |FE|IN|India|A21TJRUUN4KGV| |FE|JP|Japan|A1VC38T7YXB528| |FE|SG|Singapore|A19VAU5U5O7RUS| |NA|BR|Brazil|A2Q3Y263D00KWC| |NA|CA|Canada|A2EUQ1WTGCTBG2| |NA|MX|Mexico|A1AM78C64UM0Y8| |NA|US|United States|ATVPDKIKX0DER|
     * @type {string}
     * @memberof LocalizationTargetingTargetDetails
     */
    marketplaceId?: string;
    /**
     * A two-letter country code. Please refer to the table above for a list of supported country codes.
     * @type {string}
     * @memberof LocalizationTargetingTargetDetails
     */
    countryCode?: string;
}
/**
 * 
 * @export
 * @interface ProductLocalizationError
 */
export interface ProductLocalizationError {
    /**
     * Programmatic status code.
     * @type {number}
     * @memberof ProductLocalizationError
     */
    code?: number;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof ProductLocalizationError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface ProductLocalizationRequest
 */
export interface ProductLocalizationRequest {
    /**
     * The products to be localized. Their order will be maintained in the response.
     * @type {Array<LocalizationProductRequest>}
     * @memberof ProductLocalizationRequest
     */
    localizeProductRequests: Array<LocalizationProductRequest>;
    /**
     * Used to confirm that the caller is eligible to advertise localized products. Currently, only Sponsored Products advertising is supported.
     * @type {string}
     * @memberof ProductLocalizationRequest
     */
    adType: ProductLocalizationRequestAdTypeEnum;
    /**
     * The type of the advertiser accounts for which IDs are specified elsewhere in the request.
     * @type {string}
     * @memberof ProductLocalizationRequest
     */
    entityType: ProductLocalizationRequestEntityTypeEnum;
    /**
     * The ID of the source marketplace. Please see the table within the description of the target details object for supported values.
     * @type {string}
     * @memberof ProductLocalizationRequest
     */
    sourceMarketplaceId: string;
    /**
     * The ID of the source advertiser account. This may be either a marketplace-specific ID or a global account ID.
     * @type {string}
     * @memberof ProductLocalizationRequest
     */
    sourceAdvertiserId: string;
    /**
     * The target details for the LocalizationProductRequests. There must be only one target details object per marketplace ID. The advertiser ID may be repeated across target details objects. The order of target details objects is irrelevant. The following marketplaces are supported for product localization: |Region|Country Code|Name|Marketplace ID| |-|-|-|-| |EU|AE|United Arab Emirates|A2VIGQ35RCS4UG| |EU|DE|Germany|A1PA6795UKMFR9| |EU|EG|Egypt|ARBP9OOSHTCHU| |EU|ES|Spain|A1RKKUPIHCS9HS| |EU|FR|France|A13V1IB3VIYZZH| |EU|GB|United Kingdom|A1F83G8C2ARO7P| |EU|IT|Italy|APJ6JRA9NG5V4| |EU|NL|Netherlands|A1805IZSGTT6HS| |EU|PL|Poland|A1C3SOZRARQ6R3| |EU|SA|Saudi Arabia|A17E79C6D8DWNP| |EU|SE|Sweden|A2NODRKZP88ZB9| |EU|TR|Turkey|A33AVAJ2PDY3EV| |FE|AU|Australia|A39IBJ37TRP1C6| |FE|IN|India|A21TJRUUN4KGV| |FE|JP|Japan|A1VC38T7YXB528| |FE|SG|Singapore|A19VAU5U5O7RUS| |NA|BR|Brazil|A2Q3Y263D00KWC| |NA|CA|Canada|A2EUQ1WTGCTBG2| |NA|MX|Mexico|A1AM78C64UM0Y8| |NA|US|United States|ATVPDKIKX0DER|
     * @type {Array<LocalizationProductTargetDetails>}
     * @memberof ProductLocalizationRequest
     */
    targetDetails: Array<LocalizationProductTargetDetails>;
}

/**
    * @export
    * @enum {string}
    */
export enum ProductLocalizationRequestAdTypeEnum {
    SponsoredProducts = 'SPONSORED_PRODUCTS'
}
/**
    * @export
    * @enum {string}
    */
export enum ProductLocalizationRequestEntityTypeEnum {
    Seller = 'SELLER',
    Vendor = 'VENDOR'
}

/**
 * 
 * @export
 * @interface ProductLocalizationResponse
 */
export interface ProductLocalizationResponse {
    /**
     * List of product localization map objects. The order matches that of the localizeProductRequests field in the request.
     * @type {Array<LocalizationProductResponse>}
     * @memberof ProductLocalizationResponse
     */
    localizedProductResponses: Array<LocalizationProductResponse>;
}
/**
 * 
 * @export
 * @interface TargetingExpressionLocalizationError
 */
export interface TargetingExpressionLocalizationError {
    /**
     * Programmatic status code.
     * @type {number}
     * @memberof TargetingExpressionLocalizationError
     */
    code?: number;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof TargetingExpressionLocalizationError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface TargetingExpressionLocalizationRequest
 */
export interface TargetingExpressionLocalizationRequest {
    /**
     * The targets to which the source targeting expression should be localized.
     * @type {Array<LocalizationTargetingTargetDetails>}
     * @memberof TargetingExpressionLocalizationRequest
     */
    targetDetailsList: Array<LocalizationTargetingTargetDetails>;
    /**
     * A list of requests, each containing a targeting expression to localize. Its order will be maintained in `responses` in the corresponding `targetingExpressionLocalizationResponse` object.
     * @type {Array<LocalizationTargetingExpressionRequest>}
     * @memberof TargetingExpressionLocalizationRequest
     */
    requests: Array<LocalizationTargetingExpressionRequest>;
    /**
     * 
     * @type {LocalizationTargetingSourceDetails}
     * @memberof TargetingExpressionLocalizationRequest
     */
    sourceDetails: LocalizationTargetingSourceDetails;
}
/**
 * 
 * @export
 * @interface TargetingExpressionLocalizationResponse
 */
export interface TargetingExpressionLocalizationResponse {
    /**
     * A list of responses containing localized targeting expressions. Its order matches that of `requests` in the corresponding `targetingExpressionLocalizationRequest` object.
     * @type {Array<LocalizationTargetingExpressionResponse>}
     * @memberof TargetingExpressionLocalizationResponse
     */
    responses: Array<LocalizationTargetingExpressionResponse>;
}

/**
 * CurrencyLocalizationApi - axios parameter creator
 * @export
 */
export const CurrencyLocalizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns localized currencies within specified marketplaces.
         * @summary Gets an array of localized currencies in their target marketplaces, with the advertiser ID and source marketplace ID passed in through the header and body 
         * @param {CurrencyLocalizationRequest} currencyLocalizationRequest Contains a list of amounts and a list of target marketplace IDs, to convert the passed values into the respective marketplace currency.
         * @param {string} [amazonAdvertisingAPIClientId] The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizedCurrencies: async (currencyLocalizationRequest: CurrencyLocalizationRequest, amazonAdvertisingAPIClientId?: string, amazonAdvertisingAPIScope?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'currencyLocalizationRequest' is not null or undefined
            assertParamExists('getLocalizedCurrencies', 'currencyLocalizationRequest', currencyLocalizationRequest)
            const localVarPath = `/currencies/localize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.currencylocalization.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(currencyLocalizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CurrencyLocalizationApi - functional programming interface
 * @export
 */
export const CurrencyLocalizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CurrencyLocalizationApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns localized currencies within specified marketplaces.
         * @summary Gets an array of localized currencies in their target marketplaces, with the advertiser ID and source marketplace ID passed in through the header and body 
         * @param {CurrencyLocalizationRequest} currencyLocalizationRequest Contains a list of amounts and a list of target marketplace IDs, to convert the passed values into the respective marketplace currency.
         * @param {string} [amazonAdvertisingAPIClientId] The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocalizedCurrencies(currencyLocalizationRequest: CurrencyLocalizationRequest, amazonAdvertisingAPIClientId?: string, amazonAdvertisingAPIScope?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrencyLocalizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocalizedCurrencies(currencyLocalizationRequest, amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CurrencyLocalizationApi - factory interface
 * @export
 */
export const CurrencyLocalizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CurrencyLocalizationApiFp(configuration)
    return {
        /**
         * Returns localized currencies within specified marketplaces.
         * @summary Gets an array of localized currencies in their target marketplaces, with the advertiser ID and source marketplace ID passed in through the header and body 
         * @param {CurrencyLocalizationRequest} currencyLocalizationRequest Contains a list of amounts and a list of target marketplace IDs, to convert the passed values into the respective marketplace currency.
         * @param {string} [amazonAdvertisingAPIClientId] The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizedCurrencies(currencyLocalizationRequest: CurrencyLocalizationRequest, amazonAdvertisingAPIClientId?: string, amazonAdvertisingAPIScope?: string, options?: any): AxiosPromise<CurrencyLocalizationResponse> {
            return localVarFp.getLocalizedCurrencies(currencyLocalizationRequest, amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getLocalizedCurrencies operation in CurrencyLocalizationApi.
 * @export
 * @interface CurrencyLocalizationApiGetLocalizedCurrenciesRequest
 */
export interface CurrencyLocalizationApiGetLocalizedCurrenciesRequest {
    /**
     * Contains a list of amounts and a list of target marketplace IDs, to convert the passed values into the respective marketplace currency.
     * @type {CurrencyLocalizationRequest}
     * @memberof CurrencyLocalizationApiGetLocalizedCurrencies
     */
    readonly currencyLocalizationRequest: CurrencyLocalizationRequest

    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof CurrencyLocalizationApiGetLocalizedCurrencies
     */
    readonly amazonAdvertisingAPIClientId?: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof CurrencyLocalizationApiGetLocalizedCurrencies
     */
    readonly amazonAdvertisingAPIScope?: string
}

/**
 * CurrencyLocalizationApi - object-oriented interface
 * @export
 * @class CurrencyLocalizationApi
 * @extends {BaseAPI}
 */
export class CurrencyLocalizationApi extends BaseAPI {
    /**
     * Returns localized currencies within specified marketplaces.
     * @summary Gets an array of localized currencies in their target marketplaces, with the advertiser ID and source marketplace ID passed in through the header and body 
     * @param {CurrencyLocalizationApiGetLocalizedCurrenciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyLocalizationApi
     */
    public getLocalizedCurrencies(requestParameters: CurrencyLocalizationApiGetLocalizedCurrenciesRequest, options?: any) {
        return CurrencyLocalizationApiFp(this.configuration).getLocalizedCurrencies(requestParameters.currencyLocalizationRequest, requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * KeywordLocalizationApi - axios parameter creator
 * @export
 */
export const KeywordLocalizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns localized keywords within specified marketplaces or locales.
         * @summary Returns localized keywords.
         * @param {KeywordsLocalizationRequest} keywordsLocalizationRequest Contains list of target details and keywords to localize.
         * @param {string} [amazonAdvertisingAPIClientId] The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizedKeywords: async (keywordsLocalizationRequest: KeywordsLocalizationRequest, amazonAdvertisingAPIClientId?: string, amazonAdvertisingAPIScope?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keywordsLocalizationRequest' is not null or undefined
            assertParamExists('getLocalizedKeywords', 'keywordsLocalizationRequest', keywordsLocalizationRequest)
            const localVarPath = `/keywords/localize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.keywordlocalization.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(keywordsLocalizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeywordLocalizationApi - functional programming interface
 * @export
 */
export const KeywordLocalizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KeywordLocalizationApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns localized keywords within specified marketplaces or locales.
         * @summary Returns localized keywords.
         * @param {KeywordsLocalizationRequest} keywordsLocalizationRequest Contains list of target details and keywords to localize.
         * @param {string} [amazonAdvertisingAPIClientId] The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocalizedKeywords(keywordsLocalizationRequest: KeywordsLocalizationRequest, amazonAdvertisingAPIClientId?: string, amazonAdvertisingAPIScope?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeywordsLocalizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocalizedKeywords(keywordsLocalizationRequest, amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KeywordLocalizationApi - factory interface
 * @export
 */
export const KeywordLocalizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KeywordLocalizationApiFp(configuration)
    return {
        /**
         * Returns localized keywords within specified marketplaces or locales.
         * @summary Returns localized keywords.
         * @param {KeywordsLocalizationRequest} keywordsLocalizationRequest Contains list of target details and keywords to localize.
         * @param {string} [amazonAdvertisingAPIClientId] The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizedKeywords(keywordsLocalizationRequest: KeywordsLocalizationRequest, amazonAdvertisingAPIClientId?: string, amazonAdvertisingAPIScope?: string, options?: any): AxiosPromise<KeywordsLocalizationResponse> {
            return localVarFp.getLocalizedKeywords(keywordsLocalizationRequest, amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getLocalizedKeywords operation in KeywordLocalizationApi.
 * @export
 * @interface KeywordLocalizationApiGetLocalizedKeywordsRequest
 */
export interface KeywordLocalizationApiGetLocalizedKeywordsRequest {
    /**
     * Contains list of target details and keywords to localize.
     * @type {KeywordsLocalizationRequest}
     * @memberof KeywordLocalizationApiGetLocalizedKeywords
     */
    readonly keywordsLocalizationRequest: KeywordsLocalizationRequest

    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof KeywordLocalizationApiGetLocalizedKeywords
     */
    readonly amazonAdvertisingAPIClientId?: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof KeywordLocalizationApiGetLocalizedKeywords
     */
    readonly amazonAdvertisingAPIScope?: string
}

/**
 * KeywordLocalizationApi - object-oriented interface
 * @export
 * @class KeywordLocalizationApi
 * @extends {BaseAPI}
 */
export class KeywordLocalizationApi extends BaseAPI {
    /**
     * Returns localized keywords within specified marketplaces or locales.
     * @summary Returns localized keywords.
     * @param {KeywordLocalizationApiGetLocalizedKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeywordLocalizationApi
     */
    public getLocalizedKeywords(requestParameters: KeywordLocalizationApiGetLocalizedKeywordsRequest, options?: any) {
        return KeywordLocalizationApiFp(this.configuration).getLocalizedKeywords(requestParameters.keywordsLocalizationRequest, requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductLocalizationApi - axios parameter creator
 * @export
 */
export const ProductLocalizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Localizes (maps) products from a source marketplace to one or more target marketplaces. The localization process succeeds for a given target marketplace if a product matching the source product can be found there and the advertiser is eligible to advertise it. Seller requests have an additional condition: the SKU of a localized product must match the SKU of the source product.
         * @summary Returns localized products.
         * @param {ProductLocalizationRequest} productLocalizationRequest Contains list of target details and products to localize.
         * @param {string} [amazonAdvertisingAPIClientId] The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use the &#x60;GET&#x60; method on the Profiles resource to list profiles associated with the access token provided in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizedProducts: async (productLocalizationRequest: ProductLocalizationRequest, amazonAdvertisingAPIClientId?: string, amazonAdvertisingAPIScope?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productLocalizationRequest' is not null or undefined
            assertParamExists('getLocalizedProducts', 'productLocalizationRequest', productLocalizationRequest)
            const localVarPath = `/products/localize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.productlocalization.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productLocalizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductLocalizationApi - functional programming interface
 * @export
 */
export const ProductLocalizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductLocalizationApiAxiosParamCreator(configuration)
    return {
        /**
         * Localizes (maps) products from a source marketplace to one or more target marketplaces. The localization process succeeds for a given target marketplace if a product matching the source product can be found there and the advertiser is eligible to advertise it. Seller requests have an additional condition: the SKU of a localized product must match the SKU of the source product.
         * @summary Returns localized products.
         * @param {ProductLocalizationRequest} productLocalizationRequest Contains list of target details and products to localize.
         * @param {string} [amazonAdvertisingAPIClientId] The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use the &#x60;GET&#x60; method on the Profiles resource to list profiles associated with the access token provided in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocalizedProducts(productLocalizationRequest: ProductLocalizationRequest, amazonAdvertisingAPIClientId?: string, amazonAdvertisingAPIScope?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductLocalizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocalizedProducts(productLocalizationRequest, amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductLocalizationApi - factory interface
 * @export
 */
export const ProductLocalizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductLocalizationApiFp(configuration)
    return {
        /**
         * Localizes (maps) products from a source marketplace to one or more target marketplaces. The localization process succeeds for a given target marketplace if a product matching the source product can be found there and the advertiser is eligible to advertise it. Seller requests have an additional condition: the SKU of a localized product must match the SKU of the source product.
         * @summary Returns localized products.
         * @param {ProductLocalizationRequest} productLocalizationRequest Contains list of target details and products to localize.
         * @param {string} [amazonAdvertisingAPIClientId] The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} [amazonAdvertisingAPIScope] The identifier of a profile associated with the advertiser account. Use the &#x60;GET&#x60; method on the Profiles resource to list profiles associated with the access token provided in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizedProducts(productLocalizationRequest: ProductLocalizationRequest, amazonAdvertisingAPIClientId?: string, amazonAdvertisingAPIScope?: string, options?: any): AxiosPromise<ProductLocalizationResponse> {
            return localVarFp.getLocalizedProducts(productLocalizationRequest, amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getLocalizedProducts operation in ProductLocalizationApi.
 * @export
 * @interface ProductLocalizationApiGetLocalizedProductsRequest
 */
export interface ProductLocalizationApiGetLocalizedProductsRequest {
    /**
     * Contains list of target details and products to localize.
     * @type {ProductLocalizationRequest}
     * @memberof ProductLocalizationApiGetLocalizedProducts
     */
    readonly productLocalizationRequest: ProductLocalizationRequest

    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof ProductLocalizationApiGetLocalizedProducts
     */
    readonly amazonAdvertisingAPIClientId?: string

    /**
     * The identifier of a profile associated with the advertiser account. Use the &#x60;GET&#x60; method on the Profiles resource to list profiles associated with the access token provided in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof ProductLocalizationApiGetLocalizedProducts
     */
    readonly amazonAdvertisingAPIScope?: string
}

/**
 * ProductLocalizationApi - object-oriented interface
 * @export
 * @class ProductLocalizationApi
 * @extends {BaseAPI}
 */
export class ProductLocalizationApi extends BaseAPI {
    /**
     * Localizes (maps) products from a source marketplace to one or more target marketplaces. The localization process succeeds for a given target marketplace if a product matching the source product can be found there and the advertiser is eligible to advertise it. Seller requests have an additional condition: the SKU of a localized product must match the SKU of the source product.
     * @summary Returns localized products.
     * @param {ProductLocalizationApiGetLocalizedProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductLocalizationApi
     */
    public getLocalizedProducts(requestParameters: ProductLocalizationApiGetLocalizedProductsRequest, options?: any) {
        return ProductLocalizationApiFp(this.configuration).getLocalizedProducts(requestParameters.productLocalizationRequest, requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TargetingExpressionLocalizationApi - axios parameter creator
 * @export
 */
export const TargetingExpressionLocalizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Localizes (maps) targeting expressions from a source marketplace to one or more target marketplaces.
         * @summary Localizes targeting expressions used for advertising targeting.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&#39;Login with Amazon\&#39; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use the &#x60;GET&#x60; method on the Profiles resource to list profiles associated with the access token provided in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {TargetingExpressionLocalizationRequest} targetingExpressionLocalizationRequest Contains a list of targeting expressions to localize.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizedTargetingExpression: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetingExpressionLocalizationRequest: TargetingExpressionLocalizationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getLocalizedTargetingExpression', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getLocalizedTargetingExpression', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'targetingExpressionLocalizationRequest' is not null or undefined
            assertParamExists('getLocalizedTargetingExpression', 'targetingExpressionLocalizationRequest', targetingExpressionLocalizationRequest)
            const localVarPath = `/targetingExpression/localize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.targetingexpressionlocalization.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(targetingExpressionLocalizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TargetingExpressionLocalizationApi - functional programming interface
 * @export
 */
export const TargetingExpressionLocalizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TargetingExpressionLocalizationApiAxiosParamCreator(configuration)
    return {
        /**
         * Localizes (maps) targeting expressions from a source marketplace to one or more target marketplaces.
         * @summary Localizes targeting expressions used for advertising targeting.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&#39;Login with Amazon\&#39; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use the &#x60;GET&#x60; method on the Profiles resource to list profiles associated with the access token provided in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {TargetingExpressionLocalizationRequest} targetingExpressionLocalizationRequest Contains a list of targeting expressions to localize.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocalizedTargetingExpression(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetingExpressionLocalizationRequest: TargetingExpressionLocalizationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetingExpressionLocalizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocalizedTargetingExpression(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetingExpressionLocalizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TargetingExpressionLocalizationApi - factory interface
 * @export
 */
export const TargetingExpressionLocalizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TargetingExpressionLocalizationApiFp(configuration)
    return {
        /**
         * Localizes (maps) targeting expressions from a source marketplace to one or more target marketplaces.
         * @summary Localizes targeting expressions used for advertising targeting.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&#39;Login with Amazon\&#39; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use the &#x60;GET&#x60; method on the Profiles resource to list profiles associated with the access token provided in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {TargetingExpressionLocalizationRequest} targetingExpressionLocalizationRequest Contains a list of targeting expressions to localize.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocalizedTargetingExpression(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetingExpressionLocalizationRequest: TargetingExpressionLocalizationRequest, options?: any): AxiosPromise<TargetingExpressionLocalizationResponse> {
            return localVarFp.getLocalizedTargetingExpression(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetingExpressionLocalizationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getLocalizedTargetingExpression operation in TargetingExpressionLocalizationApi.
 * @export
 * @interface TargetingExpressionLocalizationApiGetLocalizedTargetingExpressionRequest
 */
export interface TargetingExpressionLocalizationApiGetLocalizedTargetingExpressionRequest {
    /**
     * The identifier of a client associated with a \&#39;Login with Amazon\&#39; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof TargetingExpressionLocalizationApiGetLocalizedTargetingExpression
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use the &#x60;GET&#x60; method on the Profiles resource to list profiles associated with the access token provided in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof TargetingExpressionLocalizationApiGetLocalizedTargetingExpression
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Contains a list of targeting expressions to localize.
     * @type {TargetingExpressionLocalizationRequest}
     * @memberof TargetingExpressionLocalizationApiGetLocalizedTargetingExpression
     */
    readonly targetingExpressionLocalizationRequest: TargetingExpressionLocalizationRequest
}

/**
 * TargetingExpressionLocalizationApi - object-oriented interface
 * @export
 * @class TargetingExpressionLocalizationApi
 * @extends {BaseAPI}
 */
export class TargetingExpressionLocalizationApi extends BaseAPI {
    /**
     * Localizes (maps) targeting expressions from a source marketplace to one or more target marketplaces.
     * @summary Localizes targeting expressions used for advertising targeting.
     * @param {TargetingExpressionLocalizationApiGetLocalizedTargetingExpressionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingExpressionLocalizationApi
     */
    public getLocalizedTargetingExpression(requestParameters: TargetingExpressionLocalizationApiGetLocalizedTargetingExpressionRequest, options?: any) {
        return TargetingExpressionLocalizationApiFp(this.configuration).getLocalizedTargetingExpression(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.targetingExpressionLocalizationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


