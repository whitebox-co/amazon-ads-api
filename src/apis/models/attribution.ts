/* tslint:disable */
/* eslint-disable */
/**
 * Amazon Attribution
 * **Amazon Attribution**<br/>    Amazon Attribution is an advertising measurement product that enables advertisers to understand the impact that their non-Amazon ads (i.e. Google Ads, Facebook, Microsoft Ads) have in driving shopping activity on Amazon. Measuring ads using Amazon Attribution is done through implementing Attribution tags on non-Amazon ads. Amazon Attribution is currently available in beta for US, CA, UK, DE, FR, IT, and ES vendors and professional sellers enrolled in Brand Registry.<br/><br/>    **Amazon Attribution API**<br/>    The Amazon Attribution API enables agencies and integrators to easily retrieve their advertiser client\'s non-Amazon publisher attribution tags to automate tag implementation on their non-Amazon ads that link to an Amazon product or Stores page. The API also enables agencies and integrators to create and retrieve reporting on behalf of their advertiser clients to better understand Amazon conversion performance on their campaigns.<br/><br/>    Note that you must pass a header named **Amazon-Advertising-Api-Scope** with each call to an  Amazon Attribution API URI, including GET /advertisers. The value for this header is the **profileId** available from the **Profiles resource (/v2/profiles)**.<br/><br/>    For more information on the functionality, see the [Amazon Attribution API help topic](amazon-attribution/overview). For API onboarding information, see the [account setup](setting-up/account-setup) topic.<br/><br/>**</br></br>[Amazon Advertising API Support JIRA Service Desk - Website](https://amzn-clicks.atlassian.net/servicedesk/customer/user/login?destination=portals)</br>[Amazon Advertising API License Agreement](https://advertising.amazon.com/API/docs/license-agreement)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { createRequestFunction } from "../../helpers";

/**
 * 
 * @export
 * @interface Advertiser
 */
export interface Advertiser {
    /**
     * 
     * @type {string}
     * @memberof Advertiser
     */
    advertiserName?: string;
    /**
     * 
     * @type {string}
     * @memberof Advertiser
     */
    advertiserId?: string;
}
/**
 * 
 * @export
 * @interface AdvertiserResponse
 */
export interface AdvertiserResponse {
    /**
     * 
     * @type {Array<Advertiser>}
     * @memberof AdvertiserResponse
     */
    advertisers?: Array<Advertiser>;
}
/**
 * 
 * @export
 * @interface AttributionTagResponse
 */
export interface AttributionTagResponse {
    /**
     * A list of advertisers and associated attribution tags.
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof AttributionTagResponse
     */
    advertiserAttributionTagMap?: { [key: string]: { [key: string]: string; }; };
}
/**
 * The error response object.
 * @export
 * @interface MaaSError
 */
export interface MaaSError {
    /**
     * The HTTP status code of the response. Possible value of code is \"200\", \"207\", \"400\", \"401\", \"429\", \"403\", or \"500\".
     * @type {string}
     * @memberof MaaSError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof MaaSError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface Publisher
 */
export interface Publisher {
    /**
     * Set to \'true\' if Amazon Attribution provides macro tags for the given publisher.
     * @type {boolean}
     * @memberof Publisher
     */
    macroEnabled?: boolean;
    /**
     * The name of the publisher.
     * @type {string}
     * @memberof Publisher
     */
    name?: string;
    /**
     * The identifier of a publisher.
     * @type {string}
     * @memberof Publisher
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface PublishersResponse
 */
export interface PublishersResponse {
    /**
     * A list of publishers.
     * @type {Array<Publisher>}
     * @memberof PublishersResponse
     */
    publisher?: Array<Publisher>;
}
/**
 * Report entry object in GetReport reports list.
 * @export
 * @interface ReportEntry
 */
export interface ReportEntry {
    /**
     * Date on which the events took place. Applies to `PERFORMANCE` and `PRODUCTS` reportType.
     * @type {string}
     * @memberof ReportEntry
     */
    date?: string;
    /**
     * Name of the advertiser\'s brand. Applies only to `PRODUCTS` reportType.
     * @type {string}
     * @memberof ReportEntry
     */
    brandName?: string;
    /**
     * The Amazon-owned site the product is sold on. Applies only to `PRODUCTS` reportType.
     * @type {string}
     * @memberof ReportEntry
     */
    marketplace?: string;
    /**
     * A campaign external identifier. Applies to `PERFORMANCE` and `PRODUCTS` reportType.
     * @type {string}
     * @memberof ReportEntry
     */
    campaignId?: string;
    /**
     * A unique block of letters and/or numbers that identify all products sold on Amazon. Applies only to `PRODUCTS` reportType.
     * @type {string}
     * @memberof ReportEntry
     */
    productAsin?: string;
    /**
     * The conversion type describes whether the conversion happened on a promoted or a brand halo ASIN. Applies only to `PRODUCTS` reportType.
     * @type {string}
     * @memberof ReportEntry
     */
    productConversionType?: string;
    /**
     * Name of advertiser. Applies to `PERFORMANCE` and `PRODUCTS` reportType.
     * @type {string}
     * @memberof ReportEntry
     */
    advertiserName?: string;
    /**
     * An ad group external identifier. Applies to `PERFORMANCE` and `PRODUCTS` reportType.
     * @type {string}
     * @memberof ReportEntry
     */
    adGroupId?: string;
    /**
     * A creative external identifier. Applies only to `PERFORMANCE` reportType
     * @type {string}
     * @memberof ReportEntry
     */
    creativeId?: string;
    /**
     * The name of the product. Applies only to `PRODUCTS` reportType.
     * @type {string}
     * @memberof ReportEntry
     */
    productName?: string;
    /**
     * A classification for the type of product being sold which determines its place in the Amazon retail catalog. Contains categories of products. Applies only to `PRODUCTS` reportType.
     * @type {string}
     * @memberof ReportEntry
     */
    productCategory?: string;
    /**
     * A classification for the type of product being sold which determines its place in the Amazon retail catalog. Contains subcategories of products. Applies only to `PRODUCTS` reportType
     * @type {string}
     * @memberof ReportEntry
     */
    productSubcategory?: string;
    /**
     * A distinct product grouping distinguishing products like watches from video games from toys. Contains groups of products. Applies only to `PRODUCTS` reportType.
     * @type {string}
     * @memberof ReportEntry
     */
    productGroup?: string;
    /**
     * The publisher name. Applies to `PERFORMANCE` and `PRODUCTS` reportType
     * @type {string}
     * @memberof ReportEntry
     */
    publisher?: string;
}
/**
 * Report request body.  Two types of reports are available: Performance or Products - choose by including the `reportType` property. Performance report may be aggregated at any of three levels: campaign, ad group, or creative - choose by including the `groupBy` property. Products report is always aggregated at ad group level - when requesting a Products report, do not include the `groupBy` property or an error will occur.  Pagination is recommended - include the `count` and `cursorId` properties.  Pass a list of metrics to control which metrics appear in the response, or omit this list to receive all available metrics (except brb_bonus_amount).  Dimensions available within each report type and aggregation level: | reportType  | groupBy  | Dimensions| |-------------|-------------------|-----------| |PERFORMANCE|CREATIVE|campaignId, adgroupId, creativeid, publisher| |PERFORMANCE|ADGROUP|campaignId, adgroupId, publisher| |PERFORMANCE|CAMPAIGN|campaignId| |PRODUCTS|N/A|campaignId, adgroupId, publisher, productName, productGroup, productCategory, productSubcategory, brandName, productAsin, productConversionType| Example requests: ```  # PerformanceReportGroupedAtCampaignLevel {   \"reportType\": \"PERFORMANCE\",   \"endDate\": \"20220601\",   \"count\": 1000,   \"startDate\": \"20220525\",   \"groupBy\":\"CAMPAIGN\" }  # ProductsReport  {   \"reportType\": \"PRODUCTS\",   \"endDate\": \"20220601\",   \"count\": 1000,   \"startDate\": \"20220525\" } ```
 * @export
 * @interface ReportRequestBody
 */
export interface ReportRequestBody {
    /**
     * The type of report. Either `PERFORMANCE` or `PRODUCTS`. It is an optional parameter. If not used in request body, default reportType is `PERFORMANCE`.
     * @type {string}
     * @memberof ReportRequestBody
     */
    reportType?: string;
    /**
     * One or more advertiser Ids to filter reporting by. If requesting reporting for multiple advertiser Ids, input via a comma-delimited list.
     * @type {string}
     * @memberof ReportRequestBody
     */
    advertiserIds?: string;
    /**
     * The end date for the report, form as \"YYYYMMDD\"
     * @type {string}
     * @memberof ReportRequestBody
     */
    endDate?: string;
    /**
     * The number of entries to include in the report.
     * @type {number}
     * @memberof ReportRequestBody
     */
    count?: number;
    /**
     * A comma-delimited list of metrics to include in the report. In the report, each metric’s value reflects the events which took place on the row’s date; in other words, events are reported on the date they occurred, not on the date of the attributed click. Attribution is calculated using a 14-day last-click model. For more detail on attribution methodology, see the [Measurement](https://advertising.amazon.com/API/docs/en-us/amazon-attribution/how-to#measurement) section of the API guide. View the list of available metrics for each report type below.\"Promoted products\" refers to products associated with the campaign. |Metrics for reportType`PERFORMANCE`| |-------------------|  |Metric  |Description| |--------|-----------| |Click-throughs|Ad clicks.| |attributedDetailPageViewsClicks14d|Ad click-attributed detail page views for promoted product.| |attributedAddToCartClicks14d|Ad click-attributed add to carts for promoted products.| |attributedPurchases14d|Ad click-attributed purchases for promoted products.| |unitsSold14d|Ad click-attributed units sold for promoted products.| |attributedSales14d|Ad click-attributed sales for promoted products in local currency.| |attributedTotalDetailPageViewsClicks14d|Ad click-attributed detail page views  for promoted products plus brand halo products.| |attributedTotalAddToCartClicks14d|Ad click-attributed add to carts for promoted products plus brand halo products.| |attributedTotalPurchases14d|Ad click-attributed purchases for promoted products plus brand halo products.| |totalUnitsSold14d|Ad click-attributed units sold for promoted products plus brand halo products.| |totalAttributedSales14d|Ad click-attributed attributed sales for promoted products plus brand halo products.| |brb_bonus_amount|Estimated ad-attributed Brand Referral Bonus credit amount in local currency. Will be omitted from response if advertiser is not a BRB-enrolled seller or request does not include a ‘metrics’ list. Requests for this metric must groupBy ADGROUP or CAMPAIGN, or will result in an error 400. Please refer to <https://sellercentral.amazon.com/gp/help/external/L9HPJ34VBFP76HX> to learn more about BRB program.|  |Metrics for reportType`PRODUCTS`| |-------------------|  |Metric  |Description| |--------|-----------| |attributedDetailPageViewsClicks14d|Ad click-attributed detail page views for promoted products.| |attributedAddToCartClicks14d|Ad click-attributed add to carts for promoted products.| |attributedPurchases14d|Ad click-attributed purchases for promoted products.| |unitsSold14d|Ad click-attributed units sold for promoted products.| |attributedSales14d|Ad click-attributed sales for promoted products in local currency.| |brandHaloDetailPageViewsClicks14d|Ad click-attributed detail page views for brand halo products.| |brandHaloAttributedAddToCartClicks14d|Ad click-attributed add to carts for brand halo products.| |brandHaloAttributedPurchases14d|Ad click-attributed purchases for brand halo products.| |brandHaloUnitsSold14d|Ad click-attributed units sold for brand halo products.| |brandHaloAttributedSales14d|Ad click-attributed attributed sales for brand halo products.| |attributedNewToBrandPurchases14d|Ad click-attributed new-to-brand purchases for promoted products. A purchase is new-to-brand when a shopper purchases a product from the brand for the first time in the past year.| |attributedNewToBrandUnitsSold14d|Ad click-attributed units sold in new-to-brand purchases for promoted products. A purchase is new-to-brand when a shopper purchases a product from the brand for the first time in the past year.| |attributedNewToBrandSales14d|Ad click-attributed sales of new-to-brand purchases for promoted products in local currency. A purchase is new-to-brand when a shopper purchases a product from the brand for the first time in the past year.| |brandHaloNewToBrandPurchases14d|Ad click-attributed new-to-brand purchases for brand halo products. A purchase is new-to-brand when a shopper purchases a product from the brand for the first time in the past year.| |brandHaloNewToBrandUnitsSold14d|Ad click-attributed units sold in new-to-brand purchases for brand halo products. A purchase is new-to-brand when a shopper purchases a product from the brand for the first time in the past year.| |brandHaloNewToBrandSales14d|Ad click-attributed sales of new-to-brand purchases for brand halo products in local currency. A purchase is new-to-brand when a shopper purchases a product from the brand for the first time in the past year.|
     * @type {string}
     * @memberof ReportRequestBody
     */
    metrics?: string;
    /**
     * For Performance report only - controls level of aggregation. Value can be `CAMPAIGN`, `ADGROUP`, or `CREATIVE`. Default is `CREATIVE`.
     * @type {string}
     * @memberof ReportRequestBody
     */
    groupBy?: ReportRequestBodyGroupByEnum;
    /**
     * The start date for the report, in \"YYYYMMDD\" format. For reportType `PRODUCTS`, startDate can only be within last 90 days from current date.
     * @type {string}
     * @memberof ReportRequestBody
     */
    startDate?: string;
    /**
     * The value of `cursorId` must be set to `null` without `\"\"`, or set to `\"\"` for the first request. For each following request, the value of `cursorId` from the previous response must be included in the current request. Note that for the cursorId values the `\"` character must be escaped with `\\`.
     * @type {string}
     * @memberof ReportRequestBody
     */
    cursorId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ReportRequestBodyGroupByEnum {
    Campaign = 'CAMPAIGN',
    Adgroup = 'ADGROUP',
    Creative = 'CREATIVE'
}

/**
 * 
 * @export
 * @interface ReportResponse
 */
export interface ReportResponse {
    /**
     * 
     * @type {Array<ReportEntry>}
     * @memberof ReportResponse
     */
    reports?: Array<ReportEntry>;
    /**
     * The size of the report.
     * @type {number}
     * @memberof ReportResponse
     */
    size?: number;
    /**
     * The identifier of the pagination cursor.
     * @type {string}
     * @memberof ReportResponse
     */
    cursorId?: string;
}

/**
 * AdvertisersApi - axios parameter creator
 * @export
 */
export const AdvertisersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * For sellers, an attribution profile has one associated advertiser. For vendors, an attribution profile may have more than one associated advertiser.
         * @summary Gets a list of advertisers associated with an Amazon Attribution account.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdvertisersByProfile: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAdvertisersByProfile', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAdvertisersByProfile', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/attribution/advertisers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdvertisersApi - functional programming interface
 * @export
 */
export const AdvertisersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdvertisersApiAxiosParamCreator(configuration)
    return {
        /**
         * For sellers, an attribution profile has one associated advertiser. For vendors, an attribution profile may have more than one associated advertiser.
         * @summary Gets a list of advertisers associated with an Amazon Attribution account.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdvertisersByProfile(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdvertiserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdvertisersByProfile(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdvertisersApi - factory interface
 * @export
 */
export const AdvertisersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdvertisersApiFp(configuration)
    return {
        /**
         * For sellers, an attribution profile has one associated advertiser. For vendors, an attribution profile may have more than one associated advertiser.
         * @summary Gets a list of advertisers associated with an Amazon Attribution account.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdvertisersByProfile(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): AxiosPromise<AdvertiserResponse> {
            return localVarFp.getAdvertisersByProfile(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAdvertisersByProfile operation in AdvertisersApi.
 * @export
 * @interface AdvertisersApiGetAdvertisersByProfileRequest
 */
export interface AdvertisersApiGetAdvertisersByProfileRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AdvertisersApiGetAdvertisersByProfile
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdvertisersApiGetAdvertisersByProfile
     */
    readonly amazonAdvertisingAPIScope: string
}

/**
 * AdvertisersApi - object-oriented interface
 * @export
 * @class AdvertisersApi
 * @extends {BaseAPI}
 */
export class AdvertisersApi extends BaseAPI {
    /**
     * For sellers, an attribution profile has one associated advertiser. For vendors, an attribution profile may have more than one associated advertiser.
     * @summary Gets a list of advertisers associated with an Amazon Attribution account.
     * @param {AdvertisersApiGetAdvertisersByProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisersApi
     */
    public getAdvertisersByProfile(requestParameters: AdvertisersApiGetAdvertisersByProfileRequest, options?: any) {
        return AdvertisersApiFp(this.configuration).getAdvertisersByProfile(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AttributionTagsApi - axios parameter creator
 * @export
 */
export const AttributionTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Third-party publishers, such as Google Ads, Facebook, Microsoft Ads, and Pinterest support tags that include macro parameters. Using macro parameters, campaign tracking information is dynamically inserted into the click-through URL when an ad is clicked. This resource is a tag pre-populated with campaign, ad group, and ad level publisher macros with the values associated with your campaign. <br/><br/> For example, a Google Ads macro tag is \"?maas=maas_adg_api_123456789_1_99&ref_=aa_maas&tag=maas&aa_campaignid={campaignid}&aa_adgroupid={adgroupid}&aa_creativeid=ad-{creative}_{targetid}_dev-{device}_ext-{feeditemid}\"
         * @summary Gets a list of attribution tags for third-party publisher campaigns that support macros.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<string>} publisherIds A list of publisher identifiers for which to request tags.
         * @param {Array<number>} [advertiserIds] List of advertiser identifiers for which to request tags. If no values are passed, all advertisers are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublisherAttributionTagTemplate: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, publisherIds: Array<string>, advertiserIds?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getPublisherAttributionTagTemplate', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getPublisherAttributionTagTemplate', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'publisherIds' is not null or undefined
            assertParamExists('getPublisherAttributionTagTemplate', 'publisherIds', publisherIds)
            const localVarPath = `/attribution/tags/macroTag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (publisherIds) {
                localVarQueryParameter['publisherIds'] = publisherIds;
            }

            if (advertiserIds) {
                localVarQueryParameter['advertiserIds'] = advertiserIds;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Some third-party publishers do not support tags that include macro parameters. In this case, the attribution tag includes a set of \'**insertValue**\' placeholder values. Replace these placeholder values with your campaign, ad group, and ad identifiers to create unique ad-level tags.<br/><br/> For example: \"?maas=maas_adg_api_123456789_static_9_99&ref_=aa_maas&tag=maas&aa_campaignid={**insertCampaignId**}&aa_adgroupid={**insertAdGroupId**}&aa_creativeid={**insertAdiD**}\"<br/><br/> An example of an integrator nonMacro tag with filled campaign, ad group, and ad ID values is \"?maas=maas_adg_api_123456789_static_9_99&ref_=aa_maas&tag=maas&aa_campaignid=**12345**&aa_adgroupid=**5678**&aa_creativeid=**1357**\"
         * @summary Gets a list of attribution tags for third-party publisher campaigns that do not support macros.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<string>} publisherIds A list of publisher identifiers for which to request tags.
         * @param {Array<string>} [advertiserIds] List of advertiser identifiers for which to request tags. If no values are passed, all advertisers are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublisherMacroAttributionTag: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, publisherIds: Array<string>, advertiserIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getPublisherMacroAttributionTag', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getPublisherMacroAttributionTag', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'publisherIds' is not null or undefined
            assertParamExists('getPublisherMacroAttributionTag', 'publisherIds', publisherIds)
            const localVarPath = `/attribution/tags/nonMacroTemplateTag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (publisherIds) {
                localVarQueryParameter['publisherIds'] = publisherIds;
            }

            if (advertiserIds) {
                localVarQueryParameter['advertiserIds'] = advertiserIds;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttributionTagsApi - functional programming interface
 * @export
 */
export const AttributionTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttributionTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Third-party publishers, such as Google Ads, Facebook, Microsoft Ads, and Pinterest support tags that include macro parameters. Using macro parameters, campaign tracking information is dynamically inserted into the click-through URL when an ad is clicked. This resource is a tag pre-populated with campaign, ad group, and ad level publisher macros with the values associated with your campaign. <br/><br/> For example, a Google Ads macro tag is \"?maas=maas_adg_api_123456789_1_99&ref_=aa_maas&tag=maas&aa_campaignid={campaignid}&aa_adgroupid={adgroupid}&aa_creativeid=ad-{creative}_{targetid}_dev-{device}_ext-{feeditemid}\"
         * @summary Gets a list of attribution tags for third-party publisher campaigns that support macros.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<string>} publisherIds A list of publisher identifiers for which to request tags.
         * @param {Array<number>} [advertiserIds] List of advertiser identifiers for which to request tags. If no values are passed, all advertisers are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublisherAttributionTagTemplate(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, publisherIds: Array<string>, advertiserIds?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributionTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublisherAttributionTagTemplate(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, publisherIds, advertiserIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Some third-party publishers do not support tags that include macro parameters. In this case, the attribution tag includes a set of \'**insertValue**\' placeholder values. Replace these placeholder values with your campaign, ad group, and ad identifiers to create unique ad-level tags.<br/><br/> For example: \"?maas=maas_adg_api_123456789_static_9_99&ref_=aa_maas&tag=maas&aa_campaignid={**insertCampaignId**}&aa_adgroupid={**insertAdGroupId**}&aa_creativeid={**insertAdiD**}\"<br/><br/> An example of an integrator nonMacro tag with filled campaign, ad group, and ad ID values is \"?maas=maas_adg_api_123456789_static_9_99&ref_=aa_maas&tag=maas&aa_campaignid=**12345**&aa_adgroupid=**5678**&aa_creativeid=**1357**\"
         * @summary Gets a list of attribution tags for third-party publisher campaigns that do not support macros.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<string>} publisherIds A list of publisher identifiers for which to request tags.
         * @param {Array<string>} [advertiserIds] List of advertiser identifiers for which to request tags. If no values are passed, all advertisers are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublisherMacroAttributionTag(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, publisherIds: Array<string>, advertiserIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributionTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublisherMacroAttributionTag(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, publisherIds, advertiserIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttributionTagsApi - factory interface
 * @export
 */
export const AttributionTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttributionTagsApiFp(configuration)
    return {
        /**
         * Third-party publishers, such as Google Ads, Facebook, Microsoft Ads, and Pinterest support tags that include macro parameters. Using macro parameters, campaign tracking information is dynamically inserted into the click-through URL when an ad is clicked. This resource is a tag pre-populated with campaign, ad group, and ad level publisher macros with the values associated with your campaign. <br/><br/> For example, a Google Ads macro tag is \"?maas=maas_adg_api_123456789_1_99&ref_=aa_maas&tag=maas&aa_campaignid={campaignid}&aa_adgroupid={adgroupid}&aa_creativeid=ad-{creative}_{targetid}_dev-{device}_ext-{feeditemid}\"
         * @summary Gets a list of attribution tags for third-party publisher campaigns that support macros.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<string>} publisherIds A list of publisher identifiers for which to request tags.
         * @param {Array<number>} [advertiserIds] List of advertiser identifiers for which to request tags. If no values are passed, all advertisers are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublisherAttributionTagTemplate(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, publisherIds: Array<string>, advertiserIds?: Array<number>, options?: any): AxiosPromise<AttributionTagResponse> {
            return localVarFp.getPublisherAttributionTagTemplate(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, publisherIds, advertiserIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Some third-party publishers do not support tags that include macro parameters. In this case, the attribution tag includes a set of \'**insertValue**\' placeholder values. Replace these placeholder values with your campaign, ad group, and ad identifiers to create unique ad-level tags.<br/><br/> For example: \"?maas=maas_adg_api_123456789_static_9_99&ref_=aa_maas&tag=maas&aa_campaignid={**insertCampaignId**}&aa_adgroupid={**insertAdGroupId**}&aa_creativeid={**insertAdiD**}\"<br/><br/> An example of an integrator nonMacro tag with filled campaign, ad group, and ad ID values is \"?maas=maas_adg_api_123456789_static_9_99&ref_=aa_maas&tag=maas&aa_campaignid=**12345**&aa_adgroupid=**5678**&aa_creativeid=**1357**\"
         * @summary Gets a list of attribution tags for third-party publisher campaigns that do not support macros.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<string>} publisherIds A list of publisher identifiers for which to request tags.
         * @param {Array<string>} [advertiserIds] List of advertiser identifiers for which to request tags. If no values are passed, all advertisers are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublisherMacroAttributionTag(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, publisherIds: Array<string>, advertiserIds?: Array<string>, options?: any): AxiosPromise<AttributionTagResponse> {
            return localVarFp.getPublisherMacroAttributionTag(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, publisherIds, advertiserIds, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPublisherAttributionTagTemplate operation in AttributionTagsApi.
 * @export
 * @interface AttributionTagsApiGetPublisherAttributionTagTemplateRequest
 */
export interface AttributionTagsApiGetPublisherAttributionTagTemplateRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AttributionTagsApiGetPublisherAttributionTagTemplate
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AttributionTagsApiGetPublisherAttributionTagTemplate
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of publisher identifiers for which to request tags.
     * @type {Array<string>}
     * @memberof AttributionTagsApiGetPublisherAttributionTagTemplate
     */
    readonly publisherIds: Array<string>

    /**
     * List of advertiser identifiers for which to request tags. If no values are passed, all advertisers are returned.
     * @type {Array<number>}
     * @memberof AttributionTagsApiGetPublisherAttributionTagTemplate
     */
    readonly advertiserIds?: Array<number>
}

/**
 * Request parameters for getPublisherMacroAttributionTag operation in AttributionTagsApi.
 * @export
 * @interface AttributionTagsApiGetPublisherMacroAttributionTagRequest
 */
export interface AttributionTagsApiGetPublisherMacroAttributionTagRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AttributionTagsApiGetPublisherMacroAttributionTag
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AttributionTagsApiGetPublisherMacroAttributionTag
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of publisher identifiers for which to request tags.
     * @type {Array<string>}
     * @memberof AttributionTagsApiGetPublisherMacroAttributionTag
     */
    readonly publisherIds: Array<string>

    /**
     * List of advertiser identifiers for which to request tags. If no values are passed, all advertisers are returned.
     * @type {Array<string>}
     * @memberof AttributionTagsApiGetPublisherMacroAttributionTag
     */
    readonly advertiserIds?: Array<string>
}

/**
 * AttributionTagsApi - object-oriented interface
 * @export
 * @class AttributionTagsApi
 * @extends {BaseAPI}
 */
export class AttributionTagsApi extends BaseAPI {
    /**
     * Third-party publishers, such as Google Ads, Facebook, Microsoft Ads, and Pinterest support tags that include macro parameters. Using macro parameters, campaign tracking information is dynamically inserted into the click-through URL when an ad is clicked. This resource is a tag pre-populated with campaign, ad group, and ad level publisher macros with the values associated with your campaign. <br/><br/> For example, a Google Ads macro tag is \"?maas=maas_adg_api_123456789_1_99&ref_=aa_maas&tag=maas&aa_campaignid={campaignid}&aa_adgroupid={adgroupid}&aa_creativeid=ad-{creative}_{targetid}_dev-{device}_ext-{feeditemid}\"
     * @summary Gets a list of attribution tags for third-party publisher campaigns that support macros.
     * @param {AttributionTagsApiGetPublisherAttributionTagTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributionTagsApi
     */
    public getPublisherAttributionTagTemplate(requestParameters: AttributionTagsApiGetPublisherAttributionTagTemplateRequest, options?: any) {
        return AttributionTagsApiFp(this.configuration).getPublisherAttributionTagTemplate(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.publisherIds, requestParameters.advertiserIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Some third-party publishers do not support tags that include macro parameters. In this case, the attribution tag includes a set of \'**insertValue**\' placeholder values. Replace these placeholder values with your campaign, ad group, and ad identifiers to create unique ad-level tags.<br/><br/> For example: \"?maas=maas_adg_api_123456789_static_9_99&ref_=aa_maas&tag=maas&aa_campaignid={**insertCampaignId**}&aa_adgroupid={**insertAdGroupId**}&aa_creativeid={**insertAdiD**}\"<br/><br/> An example of an integrator nonMacro tag with filled campaign, ad group, and ad ID values is \"?maas=maas_adg_api_123456789_static_9_99&ref_=aa_maas&tag=maas&aa_campaignid=**12345**&aa_adgroupid=**5678**&aa_creativeid=**1357**\"
     * @summary Gets a list of attribution tags for third-party publisher campaigns that do not support macros.
     * @param {AttributionTagsApiGetPublisherMacroAttributionTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributionTagsApi
     */
    public getPublisherMacroAttributionTag(requestParameters: AttributionTagsApiGetPublisherMacroAttributionTagRequest, options?: any) {
        return AttributionTagsApiFp(this.configuration).getPublisherMacroAttributionTag(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.publisherIds, requestParameters.advertiserIds, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PublishersApi - axios parameter creator
 * @export
 */
export const PublishersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use the response to determine whether to use either the macroTags or nonMacroTemplateTags resource to get tags for a certain publisher.
         * @summary Gets a list of all available publishers.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishers: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getPublishers', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getPublishers', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/attribution/publishers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublishersApi - functional programming interface
 * @export
 */
export const PublishersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublishersApiAxiosParamCreator(configuration)
    return {
        /**
         * Use the response to determine whether to use either the macroTags or nonMacroTemplateTags resource to get tags for a certain publisher.
         * @summary Gets a list of all available publishers.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublishers(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublishersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublishers(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublishersApi - factory interface
 * @export
 */
export const PublishersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublishersApiFp(configuration)
    return {
        /**
         * Use the response to determine whether to use either the macroTags or nonMacroTemplateTags resource to get tags for a certain publisher.
         * @summary Gets a list of all available publishers.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishers(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): AxiosPromise<PublishersResponse> {
            return localVarFp.getPublishers(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPublishers operation in PublishersApi.
 * @export
 * @interface PublishersApiGetPublishersRequest
 */
export interface PublishersApiGetPublishersRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof PublishersApiGetPublishers
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof PublishersApiGetPublishers
     */
    readonly amazonAdvertisingAPIScope: string
}

/**
 * PublishersApi - object-oriented interface
 * @export
 * @class PublishersApi
 * @extends {BaseAPI}
 */
export class PublishersApi extends BaseAPI {
    /**
     * Use the response to determine whether to use either the macroTags or nonMacroTemplateTags resource to get tags for a certain publisher.
     * @summary Gets a list of all available publishers.
     * @param {PublishersApiGetPublishersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublishersApi
     */
    public getPublishers(requestParameters: PublishersApiGetPublishersRequest, options?: any) {
        return PublishersApiFp(this.configuration).getPublishers(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets an attribution report for a specified list of advertisers.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {ReportRequestBody} reportRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributionTagsByCampaign: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportRequestBody: ReportRequestBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAttributionTagsByCampaign', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAttributionTagsByCampaign', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'reportRequestBody' is not null or undefined
            assertParamExists('getAttributionTagsByCampaign', 'reportRequestBody', reportRequestBody)
            const localVarPath = `/attribution/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets an attribution report for a specified list of advertisers.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {ReportRequestBody} reportRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributionTagsByCampaign(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportRequestBody: ReportRequestBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributionTagsByCampaign(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, reportRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets an attribution report for a specified list of advertisers.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {ReportRequestBody} reportRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributionTagsByCampaign(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportRequestBody: ReportRequestBody, options?: any): AxiosPromise<ReportResponse> {
            return localVarFp.getAttributionTagsByCampaign(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, reportRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAttributionTagsByCampaign operation in ReportsApi.
 * @export
 * @interface ReportsApiGetAttributionTagsByCampaignRequest
 */
export interface ReportsApiGetAttributionTagsByCampaignRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ReportsApiGetAttributionTagsByCampaign
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ReportsApiGetAttributionTagsByCampaign
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {ReportRequestBody}
     * @memberof ReportsApiGetAttributionTagsByCampaign
     */
    readonly reportRequestBody: ReportRequestBody
}

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
    /**
     * 
     * @summary Gets an attribution report for a specified list of advertisers.
     * @param {ReportsApiGetAttributionTagsByCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public getAttributionTagsByCampaign(requestParameters: ReportsApiGetAttributionTagsByCampaignRequest, options?: any) {
        return ReportsApiFp(this.configuration).getAttributionTagsByCampaign(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.reportRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


