/* tslint:disable */
/* eslint-disable */
/**
 * Amazon Ads API - Profiles
 * Profiles represent an advertiser and their account\'s marketplace, and are used in all subsequent API calls via a management scope, `Amazon-Advertising-API-Scope`. Reports and all entity management operations are associated with a single profile. Advertisers cannot have more than one profile for each marketplace.  Advertisers who operate in more than one marketplace (for example, Amazon.com, Amazon.co.uk, Amazon.co.jp) will have only one profile associated with each marketplace. [**See this link**](https://advertising.amazon.com/API/docs/en-us/info/api-overview#api-endpoints) for a list of marketplaces associated with each endpoint.  To retrieve your profile IDs, call the listProfiles operation, and include a valid authorization access token in the header. Use a `profileId` from the returned list as the value for the management scope (`Amazon-Advertising-API-Scope`) in the headers for subsequent API calls.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccountInfo
 */
export interface AccountInfo {
    /**
     * The identifier of the marketplace to which the account is associated.
     * @type {string}
     * @memberof AccountInfo
     */
    marketplaceStringId?: string;
    /**
     * Identifier for sellers and vendors. Note that this value is not unique and may be the same across marketplace.
     * @type {string}
     * @memberof AccountInfo
     */
    id?: string;
    /**
     * 
     * @type {AccountType}
     * @memberof AccountInfo
     */
    type?: AccountType;
    /**
     * Account Name. Not currently populated for sellers.
     * @type {string}
     * @memberof AccountInfo
     */
    name?: string;
    /**
     * The account subtype.
     * @type {string}
     * @memberof AccountInfo
     */
    subType?: AccountInfoSubTypeEnum;
    /**
     * Only present for Vendors, this returns whether the Advertiser has set up a valid payment method or not.
     * @type {boolean}
     * @memberof AccountInfo
     */
    validPaymentMethod?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum AccountInfoSubTypeEnum {
    KdpAuthor = 'KDP_AUTHOR',
    AmazonAttribution = 'AMAZON_ATTRIBUTION'
}

/**
 * The `seller` and `vendor` account types are associated with Sponsored Ads APIs. The `agency` account type is associated with DSP and Data Provider APIs.
 * @export
 * @enum {string}
 */

export enum AccountType {
    Vendor = 'vendor',
    Seller = 'seller',
    Agency = 'agency'
}

/**
 * The countryCode for a given country |Region|`countryCode`|Country Name| |------|-----|-------| |NA|US|United States| |NA|CA|Canada| |NA|MX|Mexico| |NA|BR|Brazil| |EU|UK|United Kingdom| |EU|DE|Germany| |EU|FR|France| |EU|ES|Spain| |EU|IT|Italy| |EU|NL|The Netherlands| |EU|AE|United Arab Emirates| |EU|SE|Sweden| |FE|JP|Japan| |FE|AU|Australia| |FE|SG|Singapore| |EU|SE|Sweden|
 * @export
 * @enum {string}
 */

export enum CountryCode {
    Us = 'US',
    Ca = 'CA',
    Mx = 'MX',
    Br = 'BR',
    Uk = 'UK',
    De = 'DE',
    Fr = 'FR',
    Es = 'ES',
    It = 'IT',
    Nl = 'NL',
    Jp = 'JP',
    Au = 'AU',
    Ae = 'AE',
    Sg = 'SG',
    Se = 'SE'
}

/**
 * 
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * 
     * @type {number}
     * @memberof Profile
     */
    profileId?: number;
    /**
     * 
     * @type {CountryCode}
     * @memberof Profile
     */
    countryCode?: CountryCode;
    /**
     * The currency used for all monetary values for entities under this profile. |Region|`countryCode`|Country Name|`currencyCode`| |-----|------|------|------| |NA|US|United States|USD| |NA|CA|Canada|CAD| |NA|MX|Mexico|MXN| |NA|BR|Brazil|BRL| |EU|UK|United Kingdom|GBP| |EU|DE|Germany|EUR| |EU|FR|France|EUR| |EU|ES|Spain|EUR| |EU|IT|Italy|EUR| |EU|NL|The Netherlands|EUR| |EU|SE|Sweden|SEK| |FE|JP|Japan|JPY| |FE|AU|Australia|AUD| |EU|AE|United Arab Emirates|AED| |FE|SG|Singapore|SGD|
     * @type {string}
     * @memberof Profile
     */
    currencyCode?: ProfileCurrencyCodeEnum;
    /**
     * Note that this field applies to Sponsored Product campaigns for seller type accounts only. Not supported for vendor type accounts.
     * @type {number}
     * @memberof Profile
     */
    dailyBudget?: number;
    /**
     * The time zone used for all date-based campaign management and reporting. |Region|`countryCode`|Country Name|`timezone`| |------|-----|-----|------| |NA|US|United States|America/Los_Angeles| |NA|CA|Canada|America/Los_Angeles| |NA|MX|Mexico|America/Los_Angeles| |NA|BR|Brazil|America/Sao_Paulo| |EU|UK|United Kingdom|Europe/London| |EU|DE|Germany|Europe/Paris| |EU|FR|France|Europe/Paris| |EU|ES|Spain|Europe/Paris| |EU|IT|Italy|Europe/Paris| |EU|NL|The Netherlands|Europe/Paris| |EU|SE|Sweden|Europe/Stockholm| |FE|JP|Japan|Asia/Tokyo| |FE|AU|Australia|Australia/Sydney| |EU|AE|United Arab Emirates|Asia/Dubai| |FE|SG|Singapore|Asia/Singapore|
     * @type {string}
     * @memberof Profile
     */
    timezone?: ProfileTimezoneEnum;
    /**
     * 
     * @type {AccountInfo}
     * @memberof Profile
     */
    accountInfo?: AccountInfo;
}

/**
    * @export
    * @enum {string}
    */
export enum ProfileCurrencyCodeEnum {
    Usd = 'USD',
    Cad = 'CAD',
    Mxn = 'MXN',
    Brl = 'BRL',
    Gbp = 'GBP',
    Jpy = 'JPY',
    Eur = 'EUR',
    Aud = 'AUD',
    Aed = 'AED',
    Sek = 'SEK'
}
/**
    * @export
    * @enum {string}
    */
export enum ProfileTimezoneEnum {
    AmericaLosAngeles = 'America/Los_Angeles',
    AmericaSaoPaulo = 'America/Sao_Paulo',
    EuropeLondon = 'Europe/London',
    EuropeStockholm = 'Europe/Stockholm',
    EuropeParis = 'Europe/Paris',
    AsiaTokyo = 'Asia/Tokyo',
    AustraliaSydney = 'Australia/Sydney',
    AsiaDubai = 'Asia/Dubai',
    AsiaSingapore = 'Asia/Singapore'
}

/**
 * 
 * @export
 * @interface ProfileResponse
 */
export interface ProfileResponse {
    /**
     * 
     * @type {number}
     * @memberof ProfileResponse
     */
    profileId?: number;
    /**
     * 
     * @type {string}
     * @memberof ProfileResponse
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileResponse
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface RegisterSellerProfileRequest
 */
export interface RegisterSellerProfileRequest {
    /**
     * 
     * @type {SandboxCountryCode}
     * @memberof RegisterSellerProfileRequest
     */
    countryCode?: SandboxCountryCode;
}
/**
 * 
 * @export
 * @interface RegisterSellerProfileResponse
 */
export interface RegisterSellerProfileResponse {
    /**
     * 
     * @type {string}
     * @memberof RegisterSellerProfileResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterSellerProfileResponse
     */
    statusDetails?: string;
    /**
     * 
     * @type {number}
     * @memberof RegisterSellerProfileResponse
     */
    profileId?: number;
}
/**
 * 
 * @export
 * @interface RegisterVendorProfileRequest
 */
export interface RegisterVendorProfileRequest {
    /**
     * 
     * @type {SandboxCountryCode}
     * @memberof RegisterVendorProfileRequest
     */
    countryCode?: SandboxCountryCode;
    /**
     * The vendor account name.
     * @type {string}
     * @memberof RegisterVendorProfileRequest
     */
    brand?: string;
}
/**
 * 
 * @export
 * @interface RegisterVendorProfileResponse
 */
export interface RegisterVendorProfileResponse {
    /**
     * 
     * @type {string}
     * @memberof RegisterVendorProfileResponse
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterVendorProfileResponse
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof RegisterVendorProfileResponse
     */
    profileId?: number;
}
/**
 * The countryCode for a given country |Region|`countryCode`|Country Name| |------|-----|-------| |NA|US|United States| |NA|CA|Canada| |NA|MX|Mexico| |EU|UK|United Kingdom| |EU|DE|Germany| |EU|FR|France| |EU|ES|Spain| |EU|IT|Italy| |EU|NL|The Netherlands| |FE|JP|Japan| |FE|AU|Australia| |EU|AE|United Arab Emirates| |EU|SE|Sweden
 * @export
 * @enum {string}
 */

export enum SandboxCountryCode {
    Us = 'US',
    Ca = 'CA',
    Mx = 'MX',
    Uk = 'UK',
    De = 'DE',
    Fr = 'FR',
    Es = 'ES',
    It = 'IT',
    Nl = 'NL',
    Jp = 'JP',
    Au = 'AU',
    Ae = 'AE',
    Se = 'SE'
}


/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export const ProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This operation does not return a response unless the current account has created at least one campaign using the advertising console.
         * @summary Gets a profile specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {number} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileById: async (amazonAdvertisingAPIClientId: string, profileId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getProfileById', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('getProfileById', 'profileId', profileId)
            const localVarPath = `/v2/profiles/{profileId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note that this operation does not return a response unless the current account has created at least one campaign using the advertising console.
         * @summary Gets a list of profiles.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {'billing' | 'campaign' | 'paymentMethod' | 'store' | 'report' | 'account' | 'posts'} [apiProgram] Filters response to include profiles that have permissions for the specified Advertising API program only. Setting &#x60;apiProgram&#x3D;billing&#x60; filters the response to include only profiles to which the user and application associated with the access token have permission to view or edit billing information.
         * @param {'edit' | 'view'} [accessLevel] Filters response to include profiles that have specified permissions for the specified Advertising API program only. Currently, the only supported access level is &#x60;view&#x60; and &#x60;edit&#x60;. Setting &#x60;accessLevel&#x3D;view&#x60; filters the response to include only profiles to which the user and application associated with the access token have view permission to the provided api program.
         * @param {'seller' | 'vendor' | 'agency'} [profileTypeFilter] Filters response to include profiles that are of the specified types in the comma-delimited list. Default is all types. Note that this filter performs an inclusive AND operation on the types.
         * @param {'true' | 'false'} [validPaymentMethodFilter] Filter response to include profiles that have valid payment methods. Default is to include all profiles. Setting this filter to &#x60;true&#x60; returns only profiles with either no &#x60;validPaymentMethod&#x60; field, or the &#x60;validPaymentMethod&#x60; field set to &#x60;true&#x60;.  Setting this to &#x60;false&#x60; returns profiles with the &#x60;validPaymentMethod&#x60; field set to &#x60;false&#x60; only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProfiles: async (amazonAdvertisingAPIClientId: string, apiProgram?: 'billing' | 'campaign' | 'paymentMethod' | 'store' | 'report' | 'account' | 'posts', accessLevel?: 'edit' | 'view', profileTypeFilter?: 'seller' | 'vendor' | 'agency', validPaymentMethodFilter?: 'true' | 'false', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listProfiles', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            const localVarPath = `/v2/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (apiProgram !== undefined) {
                localVarQueryParameter['apiProgram'] = apiProgram;
            }

            if (accessLevel !== undefined) {
                localVarQueryParameter['accessLevel'] = accessLevel;
            }

            if (profileTypeFilter !== undefined) {
                localVarQueryParameter['profileTypeFilter'] = profileTypeFilter;
            }

            if (validPaymentMethodFilter !== undefined) {
                localVarQueryParameter['validPaymentMethodFilter'] = validPaymentMethodFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note that this operation is only used for SANDBOX test environment.
         * @summary SANDBOX ONLY - Create a seller profile for sandbox.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {RegisterSellerProfileRequest} [registerSellerProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSandboxSeller: async (amazonAdvertisingAPIClientId: string, registerSellerProfileRequest?: RegisterSellerProfileRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('registerSandboxSeller', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            const localVarPath = `/v2/profiles/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerSellerProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note that this operation is only used for SANDBOX test environment.
         * @summary SANDBOX ONLY - Create a vendor profile for sandbox.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {RegisterVendorProfileRequest} [registerVendorProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSandboxVendor: async (amazonAdvertisingAPIClientId: string, registerVendorProfileRequest?: RegisterVendorProfileRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('registerSandboxVendor', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            const localVarPath = `/v2/profiles/registerBrand`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerVendorProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note that this operation is only used for Sellers using Sponsored Products. This operation is not enabled for vendor type accounts.
         * @summary Update the daily budget for one or more profiles.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {Array<Profile>} [profile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfiles: async (amazonAdvertisingAPIClientId: string, profile?: Array<Profile>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateProfiles', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            const localVarPath = `/v2/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profile, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfilesApi - functional programming interface
 * @export
 */
export const ProfilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfilesApiAxiosParamCreator(configuration)
    return {
        /**
         * This operation does not return a response unless the current account has created at least one campaign using the advertising console.
         * @summary Gets a profile specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {number} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileById(amazonAdvertisingAPIClientId: string, profileId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfileById(amazonAdvertisingAPIClientId, profileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note that this operation does not return a response unless the current account has created at least one campaign using the advertising console.
         * @summary Gets a list of profiles.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {'billing' | 'campaign' | 'paymentMethod' | 'store' | 'report' | 'account' | 'posts'} [apiProgram] Filters response to include profiles that have permissions for the specified Advertising API program only. Setting &#x60;apiProgram&#x3D;billing&#x60; filters the response to include only profiles to which the user and application associated with the access token have permission to view or edit billing information.
         * @param {'edit' | 'view'} [accessLevel] Filters response to include profiles that have specified permissions for the specified Advertising API program only. Currently, the only supported access level is &#x60;view&#x60; and &#x60;edit&#x60;. Setting &#x60;accessLevel&#x3D;view&#x60; filters the response to include only profiles to which the user and application associated with the access token have view permission to the provided api program.
         * @param {'seller' | 'vendor' | 'agency'} [profileTypeFilter] Filters response to include profiles that are of the specified types in the comma-delimited list. Default is all types. Note that this filter performs an inclusive AND operation on the types.
         * @param {'true' | 'false'} [validPaymentMethodFilter] Filter response to include profiles that have valid payment methods. Default is to include all profiles. Setting this filter to &#x60;true&#x60; returns only profiles with either no &#x60;validPaymentMethod&#x60; field, or the &#x60;validPaymentMethod&#x60; field set to &#x60;true&#x60;.  Setting this to &#x60;false&#x60; returns profiles with the &#x60;validPaymentMethod&#x60; field set to &#x60;false&#x60; only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProfiles(amazonAdvertisingAPIClientId: string, apiProgram?: 'billing' | 'campaign' | 'paymentMethod' | 'store' | 'report' | 'account' | 'posts', accessLevel?: 'edit' | 'view', profileTypeFilter?: 'seller' | 'vendor' | 'agency', validPaymentMethodFilter?: 'true' | 'false', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Profile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProfiles(amazonAdvertisingAPIClientId, apiProgram, accessLevel, profileTypeFilter, validPaymentMethodFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note that this operation is only used for SANDBOX test environment.
         * @summary SANDBOX ONLY - Create a seller profile for sandbox.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {RegisterSellerProfileRequest} [registerSellerProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerSandboxSeller(amazonAdvertisingAPIClientId: string, registerSellerProfileRequest?: RegisterSellerProfileRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RegisterSellerProfileResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerSandboxSeller(amazonAdvertisingAPIClientId, registerSellerProfileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note that this operation is only used for SANDBOX test environment.
         * @summary SANDBOX ONLY - Create a vendor profile for sandbox.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {RegisterVendorProfileRequest} [registerVendorProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerSandboxVendor(amazonAdvertisingAPIClientId: string, registerVendorProfileRequest?: RegisterVendorProfileRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RegisterVendorProfileResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerSandboxVendor(amazonAdvertisingAPIClientId, registerVendorProfileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note that this operation is only used for Sellers using Sponsored Products. This operation is not enabled for vendor type accounts.
         * @summary Update the daily budget for one or more profiles.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {Array<Profile>} [profile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfiles(amazonAdvertisingAPIClientId: string, profile?: Array<Profile>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProfileResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProfiles(amazonAdvertisingAPIClientId, profile, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfilesApi - factory interface
 * @export
 */
export const ProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfilesApiFp(configuration)
    return {
        /**
         * This operation does not return a response unless the current account has created at least one campaign using the advertising console.
         * @summary Gets a profile specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {number} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileById(amazonAdvertisingAPIClientId: string, profileId: number, options?: any): AxiosPromise<Profile> {
            return localVarFp.getProfileById(amazonAdvertisingAPIClientId, profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Note that this operation does not return a response unless the current account has created at least one campaign using the advertising console.
         * @summary Gets a list of profiles.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {'billing' | 'campaign' | 'paymentMethod' | 'store' | 'report' | 'account' | 'posts'} [apiProgram] Filters response to include profiles that have permissions for the specified Advertising API program only. Setting &#x60;apiProgram&#x3D;billing&#x60; filters the response to include only profiles to which the user and application associated with the access token have permission to view or edit billing information.
         * @param {'edit' | 'view'} [accessLevel] Filters response to include profiles that have specified permissions for the specified Advertising API program only. Currently, the only supported access level is &#x60;view&#x60; and &#x60;edit&#x60;. Setting &#x60;accessLevel&#x3D;view&#x60; filters the response to include only profiles to which the user and application associated with the access token have view permission to the provided api program.
         * @param {'seller' | 'vendor' | 'agency'} [profileTypeFilter] Filters response to include profiles that are of the specified types in the comma-delimited list. Default is all types. Note that this filter performs an inclusive AND operation on the types.
         * @param {'true' | 'false'} [validPaymentMethodFilter] Filter response to include profiles that have valid payment methods. Default is to include all profiles. Setting this filter to &#x60;true&#x60; returns only profiles with either no &#x60;validPaymentMethod&#x60; field, or the &#x60;validPaymentMethod&#x60; field set to &#x60;true&#x60;.  Setting this to &#x60;false&#x60; returns profiles with the &#x60;validPaymentMethod&#x60; field set to &#x60;false&#x60; only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProfiles(amazonAdvertisingAPIClientId: string, apiProgram?: 'billing' | 'campaign' | 'paymentMethod' | 'store' | 'report' | 'account' | 'posts', accessLevel?: 'edit' | 'view', profileTypeFilter?: 'seller' | 'vendor' | 'agency', validPaymentMethodFilter?: 'true' | 'false', options?: any): AxiosPromise<Array<Profile>> {
            return localVarFp.listProfiles(amazonAdvertisingAPIClientId, apiProgram, accessLevel, profileTypeFilter, validPaymentMethodFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Note that this operation is only used for SANDBOX test environment.
         * @summary SANDBOX ONLY - Create a seller profile for sandbox.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {RegisterSellerProfileRequest} [registerSellerProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSandboxSeller(amazonAdvertisingAPIClientId: string, registerSellerProfileRequest?: RegisterSellerProfileRequest, options?: any): AxiosPromise<Array<RegisterSellerProfileResponse>> {
            return localVarFp.registerSandboxSeller(amazonAdvertisingAPIClientId, registerSellerProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Note that this operation is only used for SANDBOX test environment.
         * @summary SANDBOX ONLY - Create a vendor profile for sandbox.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {RegisterVendorProfileRequest} [registerVendorProfileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerSandboxVendor(amazonAdvertisingAPIClientId: string, registerVendorProfileRequest?: RegisterVendorProfileRequest, options?: any): AxiosPromise<Array<RegisterVendorProfileResponse>> {
            return localVarFp.registerSandboxVendor(amazonAdvertisingAPIClientId, registerVendorProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Note that this operation is only used for Sellers using Sponsored Products. This operation is not enabled for vendor type accounts.
         * @summary Update the daily budget for one or more profiles.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {Array<Profile>} [profile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfiles(amazonAdvertisingAPIClientId: string, profile?: Array<Profile>, options?: any): AxiosPromise<Array<ProfileResponse>> {
            return localVarFp.updateProfiles(amazonAdvertisingAPIClientId, profile, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getProfileById operation in ProfilesApi.
 * @export
 * @interface ProfilesApiGetProfileByIdRequest
 */
export interface ProfilesApiGetProfileByIdRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProfilesApiGetProfileById
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * 
     * @type {number}
     * @memberof ProfilesApiGetProfileById
     */
    readonly profileId: number
}

/**
 * Request parameters for listProfiles operation in ProfilesApi.
 * @export
 * @interface ProfilesApiListProfilesRequest
 */
export interface ProfilesApiListProfilesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProfilesApiListProfiles
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * Filters response to include profiles that have permissions for the specified Advertising API program only. Setting &#x60;apiProgram&#x3D;billing&#x60; filters the response to include only profiles to which the user and application associated with the access token have permission to view or edit billing information.
     * @type {'billing' | 'campaign' | 'paymentMethod' | 'store' | 'report' | 'account' | 'posts'}
     * @memberof ProfilesApiListProfiles
     */
    readonly apiProgram?: 'billing' | 'campaign' | 'paymentMethod' | 'store' | 'report' | 'account' | 'posts'

    /**
     * Filters response to include profiles that have specified permissions for the specified Advertising API program only. Currently, the only supported access level is &#x60;view&#x60; and &#x60;edit&#x60;. Setting &#x60;accessLevel&#x3D;view&#x60; filters the response to include only profiles to which the user and application associated with the access token have view permission to the provided api program.
     * @type {'edit' | 'view'}
     * @memberof ProfilesApiListProfiles
     */
    readonly accessLevel?: 'edit' | 'view'

    /**
     * Filters response to include profiles that are of the specified types in the comma-delimited list. Default is all types. Note that this filter performs an inclusive AND operation on the types.
     * @type {'seller' | 'vendor' | 'agency'}
     * @memberof ProfilesApiListProfiles
     */
    readonly profileTypeFilter?: 'seller' | 'vendor' | 'agency'

    /**
     * Filter response to include profiles that have valid payment methods. Default is to include all profiles. Setting this filter to &#x60;true&#x60; returns only profiles with either no &#x60;validPaymentMethod&#x60; field, or the &#x60;validPaymentMethod&#x60; field set to &#x60;true&#x60;.  Setting this to &#x60;false&#x60; returns profiles with the &#x60;validPaymentMethod&#x60; field set to &#x60;false&#x60; only.
     * @type {'true' | 'false'}
     * @memberof ProfilesApiListProfiles
     */
    readonly validPaymentMethodFilter?: 'true' | 'false'
}

/**
 * Request parameters for registerSandboxSeller operation in ProfilesApi.
 * @export
 * @interface ProfilesApiRegisterSandboxSellerRequest
 */
export interface ProfilesApiRegisterSandboxSellerRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProfilesApiRegisterSandboxSeller
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * 
     * @type {RegisterSellerProfileRequest}
     * @memberof ProfilesApiRegisterSandboxSeller
     */
    readonly registerSellerProfileRequest?: RegisterSellerProfileRequest
}

/**
 * Request parameters for registerSandboxVendor operation in ProfilesApi.
 * @export
 * @interface ProfilesApiRegisterSandboxVendorRequest
 */
export interface ProfilesApiRegisterSandboxVendorRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProfilesApiRegisterSandboxVendor
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * 
     * @type {RegisterVendorProfileRequest}
     * @memberof ProfilesApiRegisterSandboxVendor
     */
    readonly registerVendorProfileRequest?: RegisterVendorProfileRequest
}

/**
 * Request parameters for updateProfiles operation in ProfilesApi.
 * @export
 * @interface ProfilesApiUpdateProfilesRequest
 */
export interface ProfilesApiUpdateProfilesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProfilesApiUpdateProfiles
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * 
     * @type {Array<Profile>}
     * @memberof ProfilesApiUpdateProfiles
     */
    readonly profile?: Array<Profile>
}

/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export class ProfilesApi extends BaseAPI {
    /**
     * This operation does not return a response unless the current account has created at least one campaign using the advertising console.
     * @summary Gets a profile specified by identifier.
     * @param {ProfilesApiGetProfileByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public getProfileById(requestParameters: ProfilesApiGetProfileByIdRequest, options?: any) {
        return ProfilesApiFp(this.configuration).getProfileById(requestParameters.amazonAdvertisingAPIClientId, requestParameters.profileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note that this operation does not return a response unless the current account has created at least one campaign using the advertising console.
     * @summary Gets a list of profiles.
     * @param {ProfilesApiListProfilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public listProfiles(requestParameters: ProfilesApiListProfilesRequest, options?: any) {
        return ProfilesApiFp(this.configuration).listProfiles(requestParameters.amazonAdvertisingAPIClientId, requestParameters.apiProgram, requestParameters.accessLevel, requestParameters.profileTypeFilter, requestParameters.validPaymentMethodFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note that this operation is only used for SANDBOX test environment.
     * @summary SANDBOX ONLY - Create a seller profile for sandbox.
     * @param {ProfilesApiRegisterSandboxSellerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public registerSandboxSeller(requestParameters: ProfilesApiRegisterSandboxSellerRequest, options?: any) {
        return ProfilesApiFp(this.configuration).registerSandboxSeller(requestParameters.amazonAdvertisingAPIClientId, requestParameters.registerSellerProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note that this operation is only used for SANDBOX test environment.
     * @summary SANDBOX ONLY - Create a vendor profile for sandbox.
     * @param {ProfilesApiRegisterSandboxVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public registerSandboxVendor(requestParameters: ProfilesApiRegisterSandboxVendorRequest, options?: any) {
        return ProfilesApiFp(this.configuration).registerSandboxVendor(requestParameters.amazonAdvertisingAPIClientId, requestParameters.registerVendorProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note that this operation is only used for Sellers using Sponsored Products. This operation is not enabled for vendor type accounts.
     * @summary Update the daily budget for one or more profiles.
     * @param {ProfilesApiUpdateProfilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public updateProfiles(requestParameters: ProfilesApiUpdateProfilesRequest, options?: any) {
        return ProfilesApiFp(this.configuration).updateProfiles(requestParameters.amazonAdvertisingAPIClientId, requestParameters.profile, options).then((request) => request(this.axios, this.basePath));
    }
}


