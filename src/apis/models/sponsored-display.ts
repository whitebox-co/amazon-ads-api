/* tslint:disable */
/* eslint-disable */
/**
 * Amazon Ads API for Sponsored Display
 * This API enables programmatic access for campaign creation, management, and reporting for Sponsored Display campaigns. For more information on the functionality, see the [Sponsored Display Support Center](https://advertising.amazon.com/help#GTPPHE6RAWC2C4LZ). For API onboarding information, see the [account setup](https://advertising.amazon.com/API/docs/en-us/guides/onboarding/overview) topic.<br/><br/> > This specification is available for download from the **[Advertising API developer portal](https://d3a0d0y2hgofx6.cloudfront.net/openapi/en-us/sponsored-display/3-0/openapi.yaml).**
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { createRequestFunction } from "../../helpers";

/**
 * 
 * @export
 * @interface AdGroup
 */
export interface AdGroup {
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof AdGroup
     */
    name?: string;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof AdGroup
     */
    campaignId?: number;
    /**
     * The amount of the default bid associated with the ad group. Used if no bid is specified.
     * @type {number}
     * @memberof AdGroup
     */
    defaultBid?: number;
    /**
     * Bid Optimization for the Adgroup. Default behavior is to optimize for clicks. |Name|CostType|Description| |----|--------|-----------| |reach |vcpm|Optimize for viewable impressions. $1 is the minimum bid for vCPM.| |clicks |cpc|[Default] Optimize for page visits.| |conversions |cpc|Optimize for conversion.|
     * @type {string}
     * @memberof AdGroup
     */
    bidOptimization?: AdGroupBidOptimizationEnum;
    /**
     * The state of the ad group.
     * @type {string}
     * @memberof AdGroup
     */
    state?: AdGroupStateEnum;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroup
     */
    adGroupId?: number;
    /**
     * 
     * @type {Tactic}
     * @memberof AdGroup
     */
    tactic?: Tactic;
    /**
     * 
     * @type {CreativeType}
     * @memberof AdGroup
     */
    creativeType?: CreativeType | null;
}

/**
    * @export
    * @enum {string}
    */
export enum AdGroupBidOptimizationEnum {
    Clicks = 'clicks',
    Conversions = 'conversions',
    Reach = 'reach'
}
/**
    * @export
    * @enum {string}
    */
export enum AdGroupStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface AdGroupAllOf
 */
export interface AdGroupAllOf {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroupAllOf
     */
    adGroupId?: number;
    /**
     * 
     * @type {Tactic}
     * @memberof AdGroupAllOf
     */
    tactic?: Tactic;
    /**
     * 
     * @type {CreativeType}
     * @memberof AdGroupAllOf
     */
    creativeType?: CreativeType | null;
}
/**
 * 
 * @export
 * @interface AdGroupResponse
 */
export interface AdGroupResponse {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof AdGroupResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof AdGroupResponse
     */
    description?: string;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroupResponse
     */
    adGroupId?: number;
}
/**
 * Object containing an extended set of data fields for an Ad Group.
 * @export
 * @interface AdGroupResponseEx
 */
export interface AdGroupResponseEx {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof AdGroupResponseEx
     */
    adGroupId?: number;
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof AdGroupResponseEx
     */
    name?: string;
    /**
     * The identifier of the campaign that this ad group is associated with.
     * @type {number}
     * @memberof AdGroupResponseEx
     */
    campaignId?: number;
    /**
     * The amount of the default bid associated with the ad group. Used if no bid is specified.
     * @type {number}
     * @memberof AdGroupResponseEx
     */
    defaultBid?: number;
    /**
     * The delivery state of the ad group.
     * @type {string}
     * @memberof AdGroupResponseEx
     */
    state?: AdGroupResponseExStateEnum;
    /**
     * 
     * @type {Tactic}
     * @memberof AdGroupResponseEx
     */
    tactic?: Tactic;
    /**
     * 
     * @type {CreativeTypeInCreativeResponse}
     * @memberof AdGroupResponseEx
     */
    creativeType?: CreativeTypeInCreativeResponse;
    /**
     * The status of the ad group.
     * @type {string}
     * @memberof AdGroupResponseEx
     */
    servingStatus?: AdGroupResponseExServingStatusEnum;
    /**
     * Bid optimization type for the Adgroup. Default behavior is to optimize for clicks. Note, reach and clicks are only accepted with productAds that include landingPageURL OFF_AMAZON_LINK. |Name|CostType|Description| |----|--------|-----------| |reach|vcpm|Optimize for viewable impressions. $1 is the minimum bid for vCPM.| |clicks [Default]|cpc|Optimize for page visits.| |conversions|cpc|Optimize for conversion.| |leads |cpc| [PREVIEW ONLY] Optimize for lead generation.|
     * @type {string}
     * @memberof AdGroupResponseEx
     */
    bidOptimization?: AdGroupResponseExBidOptimizationEnum;
    /**
     * Epoch time the ad group was created.
     * @type {number}
     * @memberof AdGroupResponseEx
     */
    creationDate?: number;
    /**
     * Epoch time any property in the ad group was last updated.
     * @type {number}
     * @memberof AdGroupResponseEx
     */
    lastUpdatedDate?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum AdGroupResponseExStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum AdGroupResponseExServingStatusEnum {
    AdvertiserStatusEnabled = 'ADVERTISER_STATUS_ENABLED',
    StatusUnavailable = 'STATUS_UNAVAILABLE',
    AdvertiserPaused = 'ADVERTISER_PAUSED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    AdvertiserPaymentFailure = 'ADVERTISER_PAYMENT_FAILURE',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    PendingStartDate = 'PENDING_START_DATE',
    Ended = 'ENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupStatusEnabled = 'AD_GROUP_STATUS_ENABLED',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    AdGroupIncomplete = 'AD_GROUP_INCOMPLETE',
    AdGroupLowBid = 'AD_GROUP_LOW_BID',
    AdgroupPolicingPendingReview = 'ADGROUP_POLICING_PENDING_REVIEW',
    AdgroupPolicingCreativeRejected = 'ADGROUP_POLICING_CREATIVE_REJECTED'
}
/**
    * @export
    * @enum {string}
    */
export enum AdGroupResponseExBidOptimizationEnum {
    Clicks = 'clicks',
    Conversions = 'conversions',
    Reach = 'reach'
}

/**
 * 
 * @export
 * @interface BaseAdGroup
 */
export interface BaseAdGroup {
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof BaseAdGroup
     */
    name?: string;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof BaseAdGroup
     */
    campaignId?: number;
    /**
     * The amount of the default bid associated with the ad group. Used if no bid is specified.
     * @type {number}
     * @memberof BaseAdGroup
     */
    defaultBid?: number;
    /**
     * Bid Optimization for the Adgroup. Default behavior is to optimize for clicks. |Name|CostType|Description| |----|--------|-----------| |reach |vcpm|Optimize for viewable impressions. $1 is the minimum bid for vCPM.| |clicks |cpc|[Default] Optimize for page visits.| |conversions |cpc|Optimize for conversion.|
     * @type {string}
     * @memberof BaseAdGroup
     */
    bidOptimization?: BaseAdGroupBidOptimizationEnum;
    /**
     * The state of the ad group.
     * @type {string}
     * @memberof BaseAdGroup
     */
    state?: BaseAdGroupStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseAdGroupBidOptimizationEnum {
    Clicks = 'clicks',
    Conversions = 'conversions',
    Reach = 'reach'
}
/**
    * @export
    * @enum {string}
    */
export enum BaseAdGroupStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface BaseCampaign
 */
export interface BaseCampaign {
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof BaseCampaign
     */
    name?: string;
    /**
     * The time period over which the amount specified in the `budget` property is allocated.
     * @type {string}
     * @memberof BaseCampaign
     */
    budgetType?: BaseCampaignBudgetTypeEnum;
    /**
     * The amount of the budget.
     * @type {number}
     * @memberof BaseCampaign
     */
    budget?: number;
    /**
     * The YYYYMMDD start date of the campaign. The date must be today or in the future.
     * @type {string}
     * @memberof BaseCampaign
     */
    startDate?: string;
    /**
     * The YYYYMMDD end date of the campaign.
     * @type {string}
     * @memberof BaseCampaign
     */
    endDate?: string | null;
    /**
     * Determines how the campaign will bid and charge. |Name|Description| |----|----------| |cpc |[Default] The performance of this campaign is measured by the clicks triggered by the ad.| |vcpm |The performance of this campaign is measured by the viewed impressions triggered by the ad. |  To view minimum and maximum bids based on the costType, see [Limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).
     * @type {string}
     * @memberof BaseCampaign
     */
    costType?: BaseCampaignCostTypeEnum;
    /**
     * The state of the campaign.
     * @type {string}
     * @memberof BaseCampaign
     */
    state?: BaseCampaignStateEnum;
    /**
     * Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.
     * @type {number}
     * @memberof BaseCampaign
     */
    portfolioId?: number | null;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseCampaignBudgetTypeEnum {
    Daily = 'daily'
}
/**
    * @export
    * @enum {string}
    */
export enum BaseCampaignCostTypeEnum {
    Cpc = 'cpc',
    Vcpm = 'vcpm'
}
/**
    * @export
    * @enum {string}
    */
export enum BaseCampaignStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface BaseLocation
 */
export interface BaseLocation {
    /**
     * 
     * @type {string}
     * @memberof BaseLocation
     */
    state?: BaseLocationStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseLocationStateEnum {
    Enabled = 'enabled'
}

/**
 * 
 * @export
 * @interface BaseNegativeTargetingClause
 */
export interface BaseNegativeTargetingClause {
    /**
     * 
     * @type {string}
     * @memberof BaseNegativeTargetingClause
     */
    state?: BaseNegativeTargetingClauseStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseNegativeTargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface BaseOptimizationRule
 */
export interface BaseOptimizationRule {
    /**
     * The state of the optimization rule.
     * @type {string}
     * @memberof BaseOptimizationRule
     */
    state?: BaseOptimizationRuleStateEnum;
    /**
     * The name of the optimization rule.
     * @type {string}
     * @memberof BaseOptimizationRule
     */
    ruleName?: string;
    /**
     * A list of rule conditions that define the advertiser\'s intent for the outcome of the rule. The rule uses \'AND\' logic to combine every condition in this list, and will validate the combination when the rule is created or updated.
     * @type {Array<RuleCondition>}
     * @memberof BaseOptimizationRule
     */
    ruleConditions?: Array<RuleCondition>;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseOptimizationRuleStateEnum {
    Enabled = 'enabled',
    PausedComingLater = 'paused [COMING LATER]'
}

/**
 * 
 * @export
 * @interface BaseProductAd
 */
export interface BaseProductAd {
    /**
     * The state of the campaign associated with the product ad.
     * @type {string}
     * @memberof BaseProductAd
     */
    state?: BaseProductAdStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseProductAdStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface BaseTargetingClause
 */
export interface BaseTargetingClause {
    /**
     * 
     * @type {string}
     * @memberof BaseTargetingClause
     */
    state?: BaseTargetingClauseStateEnum;
    /**
     * The bid will override the adGroup bid if specified. This field is not used for negative targeting clauses. The bid must be less than the maximum allowable bid for the campaign\'s marketplace; for a list of maximum allowable bids, find the [\"Bid constraints by marketplace\" table in our documentation overview](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace). You cannot manually set a bid when the targeting clause\'s adGroup has an enabled optimization rule.
     * @type {number}
     * @memberof BaseTargetingClause
     */
    bid?: number | null;
}

/**
    * @export
    * @enum {string}
    */
export enum BaseTargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface BrandSafetyDenyListDomain
 */
export interface BrandSafetyDenyListDomain {
    /**
     * The website or app identifier. This can be in the form of full domain (eg. \'example.com\' or \'example.net\'), or mobile app identifier (eg. \'com.example.app\' for Android apps or \'1234567890\' for iOS apps) 
     * @type {string}
     * @memberof BrandSafetyDenyListDomain
     */
    name: string;
    /**
     * 
     * @type {BrandSafetyDenyListDomainType}
     * @memberof BrandSafetyDenyListDomain
     */
    type: BrandSafetyDenyListDomainType;
}
/**
 * The state of the domain.
 * @export
 * @enum {string}
 */

export enum BrandSafetyDenyListDomainState {
    Enabled = 'ENABLED',
    Archived = 'ARCHIVED'
}

/**
 * The domain type.
 * @export
 * @enum {string}
 */

export enum BrandSafetyDenyListDomainType {
    Website = 'WEBSITE',
    App = 'APP'
}

/**
 * The state of the domain.
 * @export
 * @enum {string}
 */

export enum BrandSafetyDenyListDomainUpdateResultStatus {
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * 
 * @export
 * @interface BrandSafetyDenyListProcessedDomain
 */
export interface BrandSafetyDenyListProcessedDomain {
    /**
     * The identifier of the Brand Safety List domain.
     * @type {number}
     * @memberof BrandSafetyDenyListProcessedDomain
     */
    domainId?: number;
    /**
     * The website or app identifier. This can be in the form of full domain (eg. \'example.com\' or \'example.net\'), or mobile app identifier (eg. \'com.example.app\' for Android apps or \'1234567890\' for iOS apps) 
     * @type {string}
     * @memberof BrandSafetyDenyListProcessedDomain
     */
    name?: string;
    /**
     * 
     * @type {BrandSafetyDenyListDomainType}
     * @memberof BrandSafetyDenyListProcessedDomain
     */
    type?: BrandSafetyDenyListDomainType;
    /**
     * 
     * @type {BrandSafetyDenyListDomainState}
     * @memberof BrandSafetyDenyListProcessedDomain
     */
    state?: BrandSafetyDenyListDomainState;
    /**
     * The date time the domain was created at. Format YYYY-MM-ddT:HH:mm:ssZ
     * @type {string}
     * @memberof BrandSafetyDenyListProcessedDomain
     */
    createdAt?: string;
    /**
     * The date time the domain was last modified. Format YYYY-MM-ddT:HH:mm:ssZ
     * @type {string}
     * @memberof BrandSafetyDenyListProcessedDomain
     */
    lastModified?: string;
}
/**
 * Response for Brand Safety Deny List GET requests
 * @export
 * @interface BrandSafetyGetResponse
 */
export interface BrandSafetyGetResponse {
    /**
     * 
     * @type {BrandSafetyGetResponsePagination}
     * @memberof BrandSafetyGetResponse
     */
    pagination?: BrandSafetyGetResponsePagination;
    /**
     * List of Brand Safety Deny List Domains
     * @type {Array<BrandSafetyDenyListProcessedDomain>}
     * @memberof BrandSafetyGetResponse
     */
    domains?: Array<BrandSafetyDenyListProcessedDomain>;
}
/**
 * Response pagination info for Brand Safety Deny List GET requests
 * @export
 * @interface BrandSafetyGetResponsePagination
 */
export interface BrandSafetyGetResponsePagination {
    /**
     * The total number of deny list domains created by the advertiser
     * @type {number}
     * @memberof BrandSafetyGetResponsePagination
     */
    total?: number;
    /**
     * The maximum number of deny list domains returned from GET request
     * @type {number}
     * @memberof BrandSafetyGetResponsePagination
     */
    limit?: number;
    /**
     * The number of deny list domains skipped
     * @type {number}
     * @memberof BrandSafetyGetResponsePagination
     */
    offset?: number;
}
/**
 * List of all requests\' status.
 * @export
 * @interface BrandSafetyListRequestStatusResponse
 */
export interface BrandSafetyListRequestStatusResponse {
    /**
     * List of all requests\' status.
     * @type {Array<BrandSafetyRequestStatus>}
     * @memberof BrandSafetyListRequestStatusResponse
     */
    requestStatusList?: Array<BrandSafetyRequestStatus>;
}
/**
 * POST Request for Brand Safety
 * @export
 * @interface BrandSafetyPostRequest
 */
export interface BrandSafetyPostRequest {
    /**
     * 
     * @type {Array<BrandSafetyDenyListDomain>}
     * @memberof BrandSafetyPostRequest
     */
    domains: Array<BrandSafetyDenyListDomain>;
}
/**
 * 
 * @export
 * @interface BrandSafetyRequestResult
 */
export interface BrandSafetyRequestResult {
    /**
     * 
     * @type {BrandSafetyDenyListDomainUpdateResultStatus}
     * @memberof BrandSafetyRequestResult
     */
    status?: BrandSafetyDenyListDomainUpdateResultStatus;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof BrandSafetyRequestResult
     */
    details?: string;
    /**
     * The identifier of the Brand Safety Deny List Domain.
     * @type {number}
     * @memberof BrandSafetyRequestResult
     */
    domainId?: number;
    /**
     * The website or app identifier.
     * @type {string}
     * @memberof BrandSafetyRequestResult
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface BrandSafetyRequestResultsResponse
 */
export interface BrandSafetyRequestResultsResponse {
    /**
     * A list of results for the given requestId
     * @type {Array<BrandSafetyRequestResult>}
     * @memberof BrandSafetyRequestResultsResponse
     */
    results?: Array<BrandSafetyRequestResult>;
}
/**
 * 
 * @export
 * @interface BrandSafetyRequestStatus
 */
export interface BrandSafetyRequestStatus {
    /**
     * Request ID
     * @type {string}
     * @memberof BrandSafetyRequestStatus
     */
    requestId?: string;
    /**
     * Request timestamp
     * @type {string}
     * @memberof BrandSafetyRequestStatus
     */
    timestamp?: string;
    /**
     * The status of the request
     * @type {string}
     * @memberof BrandSafetyRequestStatus
     */
    status?: BrandSafetyRequestStatusStatusEnum;
    /**
     * Details related to the request status
     * @type {string}
     * @memberof BrandSafetyRequestStatus
     */
    statusDetails?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BrandSafetyRequestStatusStatusEnum {
    InProgress = 'IN_PROGRESS',
    Completed = 'COMPLETED',
    Failure = 'FAILURE'
}

/**
 * The status of the request.
 * @export
 * @interface BrandSafetyRequestStatusResponse
 */
export interface BrandSafetyRequestStatusResponse {
    /**
     * 
     * @type {BrandSafetyRequestStatus}
     * @memberof BrandSafetyRequestStatusResponse
     */
    requestStatus?: BrandSafetyRequestStatus;
}
/**
 * Response for Brand Safety POST and DELETE requests
 * @export
 * @interface BrandSafetyUpdateResponse
 */
export interface BrandSafetyUpdateResponse {
    /**
     * The identifier of the request
     * @type {string}
     * @memberof BrandSafetyUpdateResponse
     */
    requestId?: string;
}
/**
 * The value by which to update the budget of the budget rule.
 * @export
 * @enum {string}
 */

export enum BudgetChangeType {
    Percent = 'PERCENT'
}

/**
 * 
 * @export
 * @interface BudgetIncreaseBy
 */
export interface BudgetIncreaseBy {
    /**
     * 
     * @type {BudgetChangeType}
     * @memberof BudgetIncreaseBy
     */
    type: BudgetChangeType;
    /**
     * The budget value.
     * @type {number}
     * @memberof BudgetIncreaseBy
     */
    value: number;
}
/**
 * The Error Response Object.
 * @export
 * @interface BudgetRuleError
 */
export interface BudgetRuleError {
    /**
     * An enumerated error code for machine use.
     * @type {string}
     * @memberof BudgetRuleError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof BudgetRuleError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface BudgetRuleResponse
 */
export interface BudgetRuleResponse {
    /**
     * An enumerated success or error code for machine use.
     * @type {string}
     * @memberof BudgetRuleResponse
     */
    code?: string;
    /**
     * A human-readable description of the error, if unsuccessful
     * @type {string}
     * @memberof BudgetRuleResponse
     */
    details?: string;
    /**
     * The rule identifier.
     * @type {string}
     * @memberof BudgetRuleResponse
     */
    ruleId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BudgetRuleResponse
     */
    associatedCampaignIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface BudgetUsageCampaign
 */
export interface BudgetUsageCampaign {
    /**
     * Budget usage percentage (spend / available budget) for the given budget policy.
     * @type {number}
     * @memberof BudgetUsageCampaign
     */
    budgetUsagePercent?: number;
    /**
     * ID of requested resource
     * @type {string}
     * @memberof BudgetUsageCampaign
     */
    campaignId?: string;
    /**
     * Last evaluation time for budget usage
     * @type {string}
     * @memberof BudgetUsageCampaign
     */
    usageUpdatedTimestamp?: string;
    /**
     * An index to maintain order of the campaignIds
     * @type {number}
     * @memberof BudgetUsageCampaign
     */
    index?: number;
    /**
     * Budget amount of resource requested
     * @type {number}
     * @memberof BudgetUsageCampaign
     */
    budget?: number;
}
/**
 * 
 * @export
 * @interface BudgetUsageCampaignBatchError
 */
export interface BudgetUsageCampaignBatchError {
    /**
     * An enumerated error code for machine use.
     * @type {string}
     * @memberof BudgetUsageCampaignBatchError
     */
    code?: string;
    /**
     * ID of requested resource
     * @type {string}
     * @memberof BudgetUsageCampaignBatchError
     */
    campaignId?: string;
    /**
     * An index to maintain order of the campaignIds
     * @type {number}
     * @memberof BudgetUsageCampaignBatchError
     */
    index?: number;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof BudgetUsageCampaignBatchError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface BudgetUsageCampaignRequest
 */
export interface BudgetUsageCampaignRequest {
    /**
     * A list of campaign IDs
     * @type {Array<string>}
     * @memberof BudgetUsageCampaignRequest
     */
    campaignIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface BudgetUsageCampaignResponse
 */
export interface BudgetUsageCampaignResponse {
    /**
     * List of budget usage percentages that were successfully pulled
     * @type {Array<BudgetUsageCampaign>}
     * @memberof BudgetUsageCampaignResponse
     */
    success?: Array<BudgetUsageCampaign>;
    /**
     * List of budget usage percentages that failed to pull
     * @type {Array<BudgetUsageCampaignBatchError>}
     * @memberof BudgetUsageCampaignResponse
     */
    error?: Array<BudgetUsageCampaignBatchError>;
}
/**
 * The Error Response Object.
 * @export
 * @interface BudgetUsageError
 */
export interface BudgetUsageError {
    /**
     * An enumerated error code for machine use.
     * @type {string}
     * @memberof BudgetUsageError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof BudgetUsageError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface Campaign
 */
export interface Campaign {
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof Campaign
     */
    name?: string;
    /**
     * The time period over which the amount specified in the `budget` property is allocated.
     * @type {string}
     * @memberof Campaign
     */
    budgetType?: CampaignBudgetTypeEnum;
    /**
     * The amount of the budget.
     * @type {number}
     * @memberof Campaign
     */
    budget?: number;
    /**
     * The YYYYMMDD start date of the campaign. The date must be today or in the future.
     * @type {string}
     * @memberof Campaign
     */
    startDate?: string;
    /**
     * The YYYYMMDD end date of the campaign.
     * @type {string}
     * @memberof Campaign
     */
    endDate?: string | null;
    /**
     * Determines how the campaign will bid and charge. |Name|Description| |----|----------| |cpc |[Default] The performance of this campaign is measured by the clicks triggered by the ad.| |vcpm |The performance of this campaign is measured by the viewed impressions triggered by the ad. |  To view minimum and maximum bids based on the costType, see [Limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).
     * @type {string}
     * @memberof Campaign
     */
    costType?: CampaignCostTypeEnum;
    /**
     * The state of the campaign.
     * @type {string}
     * @memberof Campaign
     */
    state?: CampaignStateEnum;
    /**
     * Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.
     * @type {number}
     * @memberof Campaign
     */
    portfolioId?: number | null;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof Campaign
     */
    campaignId?: number;
    /**
     * 
     * @type {Tactic}
     * @memberof Campaign
     */
    tactic?: Tactic;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    deliveryProfile?: CampaignDeliveryProfileEnum;
    /**
     * 
     * @type {RuleBasedBudget}
     * @memberof Campaign
     */
    ruleBasedBudget?: RuleBasedBudget;
}

/**
    * @export
    * @enum {string}
    */
export enum CampaignBudgetTypeEnum {
    Daily = 'daily'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignCostTypeEnum {
    Cpc = 'cpc',
    Vcpm = 'vcpm'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignDeliveryProfileEnum {
    AsSoonAsPossible = 'as_soon_as_possible'
}

/**
 * 
 * @export
 * @interface CampaignAllOf
 */
export interface CampaignAllOf {
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CampaignAllOf
     */
    campaignId?: number;
    /**
     * 
     * @type {Tactic}
     * @memberof CampaignAllOf
     */
    tactic?: Tactic;
    /**
     * 
     * @type {string}
     * @memberof CampaignAllOf
     */
    deliveryProfile?: CampaignAllOfDeliveryProfileEnum;
    /**
     * 
     * @type {RuleBasedBudget}
     * @memberof CampaignAllOf
     */
    ruleBasedBudget?: RuleBasedBudget;
}

/**
    * @export
    * @enum {string}
    */
export enum CampaignAllOfDeliveryProfileEnum {
    AsSoonAsPossible = 'as_soon_as_possible'
}

/**
 * 
 * @export
 * @interface CampaignResponse
 */
export interface CampaignResponse {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof CampaignResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof CampaignResponse
     */
    description?: string;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CampaignResponse
     */
    campaignId?: number;
}
/**
 * 
 * @export
 * @interface CampaignResponseEx
 */
export interface CampaignResponseEx {
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CampaignResponseEx
     */
    campaignId?: number;
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof CampaignResponseEx
     */
    name?: string;
    /**
     * 
     * @type {Tactic}
     * @memberof CampaignResponseEx
     */
    tactic?: Tactic;
    /**
     * The time period over which the amount specified in the `budget` property is allocated.
     * @type {string}
     * @memberof CampaignResponseEx
     */
    budgetType?: CampaignResponseExBudgetTypeEnum;
    /**
     * The amount of the budget.
     * @type {number}
     * @memberof CampaignResponseEx
     */
    budget?: number;
    /**
     * The YYYYMMDD start date of the campaign. The date must be today or in the future.
     * @type {string}
     * @memberof CampaignResponseEx
     */
    startDate?: string;
    /**
     * The YYYYMMDD end date of the campaign.
     * @type {string}
     * @memberof CampaignResponseEx
     */
    endDate?: string;
    /**
     * The state of the campaign.
     * @type {string}
     * @memberof CampaignResponseEx
     */
    state?: CampaignResponseExStateEnum;
    /**
     * Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.
     * @type {number}
     * @memberof CampaignResponseEx
     */
    portfolioId?: number;
    /**
     * The status of the campaign.
     * @type {string}
     * @memberof CampaignResponseEx
     */
    servingStatus?: CampaignResponseExServingStatusEnum;
    /**
     * Determines how the campaign will bid and charge. |Name|Description| |----|----------|-----------| |cpc |[Default] The performance of this campaign is measured by the clicks triggered by the ad.| |vcpm|The performance of this campaign is measured by the viewed impressions triggered by the ad. $1 is the minimum bid for vCPM.|
     * @type {string}
     * @memberof CampaignResponseEx
     */
    costType?: CampaignResponseExCostTypeEnum;
    /**
     * Epoch date the campaign was created.
     * @type {number}
     * @memberof CampaignResponseEx
     */
    creationDate?: number;
    /**
     * Epoch date of the last update to any property associated with the campaign.
     * @type {number}
     * @memberof CampaignResponseEx
     */
    lastUpdatedDate?: number;
    /**
     * 
     * @type {RuleBasedBudget}
     * @memberof CampaignResponseEx
     */
    ruleBasedBudget?: RuleBasedBudget;
}

/**
    * @export
    * @enum {string}
    */
export enum CampaignResponseExBudgetTypeEnum {
    Daily = 'daily'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignResponseExStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignResponseExServingStatusEnum {
    AdvertiserStatusEnabled = 'ADVERTISER_STATUS_ENABLED',
    StatusUnavailable = 'STATUS_UNAVAILABLE',
    AdvertiserPaused = 'ADVERTISER_PAUSED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    AdvertiserPaymentFailure = 'ADVERTISER_PAYMENT_FAILURE',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    PendingStartDate = 'PENDING_START_DATE',
    Ended = 'ENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET'
}
/**
    * @export
    * @enum {string}
    */
export enum CampaignResponseExCostTypeEnum {
    Cpc = 'cpc',
    Vcpm = 'vcpm'
}

/**
 * The comparison operator.
 * @export
 * @enum {string}
 */

export enum ComparisonOperator {
    GreaterThan = 'GREATER_THAN',
    LessThan = 'LESS_THAN',
    LessThanOrEqualTo = 'LESS_THAN_OR_EQUAL_TO',
    GreaterThanOrEqualTo = 'GREATER_THAN_OR_EQUAL_TO'
}

/**
 * 
 * @export
 * @interface CreateAdGroup
 */
export interface CreateAdGroup {
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof CreateAdGroup
     */
    name: string;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CreateAdGroup
     */
    campaignId: number;
    /**
     * The amount of the default bid associated with the ad group. Used if no bid is specified.
     * @type {number}
     * @memberof CreateAdGroup
     */
    defaultBid?: number;
    /**
     * Bid Optimization for the Adgroup. Default behavior is to optimize for clicks. |Name|CostType|Description| |----|--------|-----------| |reach |vcpm|Optimize for viewable impressions. $1 is the minimum bid for vCPM.| |clicks |cpc|[Default] Optimize for page visits.| |conversions |cpc|Optimize for conversion.|
     * @type {string}
     * @memberof CreateAdGroup
     */
    bidOptimization?: CreateAdGroupBidOptimizationEnum;
    /**
     * The state of the ad group.
     * @type {string}
     * @memberof CreateAdGroup
     */
    state: CreateAdGroupStateEnum;
    /**
     * 
     * @type {CreativeType}
     * @memberof CreateAdGroup
     */
    creativeType?: CreativeType | null;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateAdGroupBidOptimizationEnum {
    Clicks = 'clicks',
    Conversions = 'conversions',
    Reach = 'reach'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateAdGroupStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface CreateAdGroupAllOf
 */
export interface CreateAdGroupAllOf {
    /**
     * 
     * @type {CreativeType}
     * @memberof CreateAdGroupAllOf
     */
    creativeType?: CreativeType | null;
}
/**
 * 
 * @export
 * @interface CreateAssociatedOptimizationRulesRequest
 */
export interface CreateAssociatedOptimizationRulesRequest {
    /**
     * A list of optimization rule identifiers.
     * @type {Array<string>}
     * @memberof CreateAssociatedOptimizationRulesRequest
     */
    optimizationRuleIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateBudgetRulesResponse
 */
export interface CreateBudgetRulesResponse {
    /**
     * 
     * @type {Array<BudgetRuleResponse>}
     * @memberof CreateBudgetRulesResponse
     */
    responses?: Array<BudgetRuleResponse>;
}
/**
 * 
 * @export
 * @interface CreateCampaign
 */
export interface CreateCampaign {
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof CreateCampaign
     */
    name?: string;
    /**
     * The time period over which the amount specified in the `budget` property is allocated.
     * @type {string}
     * @memberof CreateCampaign
     */
    budgetType?: CreateCampaignBudgetTypeEnum;
    /**
     * The amount of the budget.
     * @type {number}
     * @memberof CreateCampaign
     */
    budget?: number;
    /**
     * The YYYYMMDD start date of the campaign. The date must be today or in the future.
     * @type {string}
     * @memberof CreateCampaign
     */
    startDate?: string;
    /**
     * The YYYYMMDD end date of the campaign.
     * @type {string}
     * @memberof CreateCampaign
     */
    endDate?: string | null;
    /**
     * Determines how the campaign will bid and charge. |Name|Description| |----|----------| |cpc |[Default] The performance of this campaign is measured by the clicks triggered by the ad.| |vcpm |The performance of this campaign is measured by the viewed impressions triggered by the ad. |  To view minimum and maximum bids based on the costType, see [Limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).
     * @type {string}
     * @memberof CreateCampaign
     */
    costType?: CreateCampaignCostTypeEnum;
    /**
     * The state of the campaign.
     * @type {string}
     * @memberof CreateCampaign
     */
    state?: CreateCampaignStateEnum;
    /**
     * Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.
     * @type {number}
     * @memberof CreateCampaign
     */
    portfolioId?: number | null;
    /**
     * 
     * @type {Tactic}
     * @memberof CreateCampaign
     */
    tactic?: Tactic;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateCampaignBudgetTypeEnum {
    Daily = 'daily'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateCampaignCostTypeEnum {
    Cpc = 'cpc',
    Vcpm = 'vcpm'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateCampaignStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface CreateCampaignAllOf
 */
export interface CreateCampaignAllOf {
    /**
     * 
     * @type {Tactic}
     * @memberof CreateCampaignAllOf
     */
    tactic?: Tactic;
}
/**
 * Creative create model.
 * @export
 * @interface CreateCreative
 */
export interface CreateCreative {
    /**
     * Unqiue identifier for the ad group associated with the creative.
     * @type {number}
     * @memberof CreateCreative
     */
    adGroupId: number;
    /**
     * 
     * @type {CreativeTypeInCreativeRequest}
     * @memberof CreateCreative
     */
    creativeType?: CreativeTypeInCreativeRequest | null;
    /**
     * 
     * @type {CreativeProperties}
     * @memberof CreateCreative
     */
    properties: CreativeProperties;
}
/**
 * 
 * @export
 * @interface CreateLocation
 */
export interface CreateLocation {
    /**
     * 
     * @type {string}
     * @memberof CreateLocation
     */
    state: CreateLocationStateEnum;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof CreateLocation
     */
    adGroupId: number;
    /**
     * The location definition.
     * @type {Array<LocationExpression>}
     * @memberof CreateLocation
     */
    expression: Array<LocationExpression>;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateLocationStateEnum {
    Enabled = 'enabled'
}

/**
 * 
 * @export
 * @interface CreateLocationAllOf
 */
export interface CreateLocationAllOf {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof CreateLocationAllOf
     */
    adGroupId?: number;
    /**
     * The location definition.
     * @type {Array<LocationExpression>}
     * @memberof CreateLocationAllOf
     */
    expression?: Array<LocationExpression>;
}
/**
 * 
 * @export
 * @interface CreateNegativeTargetingClause
 */
export interface CreateNegativeTargetingClause {
    /**
     * 
     * @type {string}
     * @memberof CreateNegativeTargetingClause
     */
    state: CreateNegativeTargetingClauseStateEnum;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof CreateNegativeTargetingClause
     */
    adGroupId: number;
    /**
     * The expression to negatively match against. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.
     * @type {Array<NegativeTargetingExpression>}
     * @memberof CreateNegativeTargetingClause
     */
    expression: Array<NegativeTargetingExpression>;
    /**
     * 
     * @type {string}
     * @memberof CreateNegativeTargetingClause
     */
    expressionType: CreateNegativeTargetingClauseExpressionTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateNegativeTargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateNegativeTargetingClauseExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface CreateNegativeTargetingClauseAllOf
 */
export interface CreateNegativeTargetingClauseAllOf {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof CreateNegativeTargetingClauseAllOf
     */
    adGroupId?: number;
    /**
     * The expression to negatively match against. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.
     * @type {Array<NegativeTargetingExpression>}
     * @memberof CreateNegativeTargetingClauseAllOf
     */
    expression?: Array<NegativeTargetingExpression>;
    /**
     * 
     * @type {string}
     * @memberof CreateNegativeTargetingClauseAllOf
     */
    expressionType?: CreateNegativeTargetingClauseAllOfExpressionTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateNegativeTargetingClauseAllOfExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface CreateOptimizationRule
 */
export interface CreateOptimizationRule {
    /**
     * The state of the optimization rule.
     * @type {string}
     * @memberof CreateOptimizationRule
     */
    state: CreateOptimizationRuleStateEnum;
    /**
     * The name of the optimization rule.
     * @type {string}
     * @memberof CreateOptimizationRule
     */
    ruleName?: string;
    /**
     * A list of rule conditions that define the advertiser\'s intent for the outcome of the rule. The rule uses \'AND\' logic to combine every condition in this list, and will validate the combination when the rule is created or updated.
     * @type {Array<RuleCondition>}
     * @memberof CreateOptimizationRule
     */
    ruleConditions: Array<RuleCondition>;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateOptimizationRuleStateEnum {
    Enabled = 'enabled',
    PausedComingLater = 'paused [COMING LATER]'
}

/**
 * 
 * @export
 * @interface CreateProductAd
 */
export interface CreateProductAd {
    /**
     * The state of the campaign associated with the product ad.
     * @type {string}
     * @memberof CreateProductAd
     */
    state: CreateProductAdStateEnum;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof CreateProductAd
     */
    adGroupId: number;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CreateProductAd
     */
    campaignId: number;
    /**
     * The URL where customers will land after clicking on its link. Must be provided if a LandingPageType is set. Please note that if a single product ad sets the landing page url, only one product ad can be added to the ad group. This field is not supported when using ASIN or SKU fields. ||Specifications| |------------------|------------------| |LandingPageType| Description| |STORE| Not yet supported. The url should be in the format of https://www.amazon.com/stores/_* (using a correct Amazon url based on the marketplace)| |MOMENT| Not yet supported. The url should be in the format of https://www.amazon.com/moments/promotion/{campaignId} (using a correct Amazon url based on the marketplace)| |OFF_AMAZON_LINK| The url should be in the format of https://www.****.com. Note that this LandingPageType is not supported when using ASIN or SKU fields. A custom creative of headline, logo, image are require for this LandingPageType. |
     * @type {string}
     * @memberof CreateProductAd
     */
    landingPageURL?: string;
    /**
     * 
     * @type {LandingPageType}
     * @memberof CreateProductAd
     */
    landingPageType?: LandingPageType;
    /**
     * The name of the ad. Note that this field is not supported when using ASIN or SKU fields.
     * @type {string}
     * @memberof CreateProductAd
     */
    adName?: string;
    /**
     * The ASIN of the product advertised by the product ad.
     * @type {string}
     * @memberof CreateProductAd
     */
    asin: string;
    /**
     * The SKU of the product advertised by the product ad.
     * @type {string}
     * @memberof CreateProductAd
     */
    sku: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateProductAdStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface CreateProductAdAllOf
 */
export interface CreateProductAdAllOf {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof CreateProductAdAllOf
     */
    adGroupId?: number;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CreateProductAdAllOf
     */
    campaignId?: number;
    /**
     * The URL where customers will land after clicking on its link. Must be provided if a LandingPageType is set. Please note that if a single product ad sets the landing page url, only one product ad can be added to the ad group. This field is not supported when using ASIN or SKU fields. ||Specifications| |------------------|------------------| |LandingPageType| Description| |STORE| Not yet supported. The url should be in the format of https://www.amazon.com/stores/_* (using a correct Amazon url based on the marketplace)| |MOMENT| Not yet supported. The url should be in the format of https://www.amazon.com/moments/promotion/{campaignId} (using a correct Amazon url based on the marketplace)| |OFF_AMAZON_LINK| The url should be in the format of https://www.****.com. Note that this LandingPageType is not supported when using ASIN or SKU fields. A custom creative of headline, logo, image are require for this LandingPageType. |
     * @type {string}
     * @memberof CreateProductAdAllOf
     */
    landingPageURL?: string;
    /**
     * 
     * @type {LandingPageType}
     * @memberof CreateProductAdAllOf
     */
    landingPageType?: LandingPageType;
    /**
     * The name of the ad. Note that this field is not supported when using ASIN or SKU fields.
     * @type {string}
     * @memberof CreateProductAdAllOf
     */
    adName?: string;
    /**
     * The ASIN of the product advertised by the product ad.
     * @type {string}
     * @memberof CreateProductAdAllOf
     */
    asin?: string;
    /**
     * The SKU of the product advertised by the product ad.
     * @type {string}
     * @memberof CreateProductAdAllOf
     */
    sku?: string;
}
/**
 * 
 * @export
 * @interface CreateSDBudgetRulesRequest
 */
export interface CreateSDBudgetRulesRequest {
    /**
     * A list of budget rule details.
     * @type {Array<SDBudgetRuleDetails>}
     * @memberof CreateSDBudgetRulesRequest
     */
    budgetRulesDetails?: Array<SDBudgetRuleDetails>;
}
/**
 * 
 * @export
 * @interface CreateTargetingClause
 */
export interface CreateTargetingClause {
    /**
     * 
     * @type {string}
     * @memberof CreateTargetingClause
     */
    state?: CreateTargetingClauseStateEnum;
    /**
     * The bid will override the adGroup bid if specified. This field is not used for negative targeting clauses. The bid must be less than the maximum allowable bid for the campaign\'s marketplace; for a list of maximum allowable bids, find the [\"Bid constraints by marketplace\" table in our documentation overview](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace). You cannot manually set a bid when the targeting clause\'s adGroup has an enabled optimization rule.
     * @type {number}
     * @memberof CreateTargetingClause
     */
    bid?: number | null;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof CreateTargetingClause
     */
    adGroupId: number;
    /**
     * Tactic T00020 ad groups only allow manual targeting.
     * @type {string}
     * @memberof CreateTargetingClause
     */
    expressionType: CreateTargetingClauseExpressionTypeEnum;
    /**
     * The targeting expression to match against.  ------- Applicable to contextual targeting (T00020) ------- * A \'TargetingExpression\' in a contextual targeting campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to audience targeting (T00030) ------- * A \'TargetingExpression\' in an audience campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify either auto ASIN-grain (exact products), manual ASIN-grain (similar products), or manual category-grain targeting.
     * @type {Array<TargetingPredicate | TargetingPredicateNested>}
     * @memberof CreateTargetingClause
     */
    expression: Array<TargetingPredicate | TargetingPredicateNested>;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateTargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateTargetingClauseExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface CreateTargetingClauseAllOf
 */
export interface CreateTargetingClauseAllOf {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof CreateTargetingClauseAllOf
     */
    adGroupId?: number;
    /**
     * Tactic T00020 ad groups only allow manual targeting.
     * @type {string}
     * @memberof CreateTargetingClauseAllOf
     */
    expressionType?: CreateTargetingClauseAllOfExpressionTypeEnum;
    /**
     * The targeting expression to match against.  ------- Applicable to contextual targeting (T00020) ------- * A \'TargetingExpression\' in a contextual targeting campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to audience targeting (T00030) ------- * A \'TargetingExpression\' in an audience campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify either auto ASIN-grain (exact products), manual ASIN-grain (similar products), or manual category-grain targeting.
     * @type {Array<TargetingPredicate | TargetingPredicateNested>}
     * @memberof CreateTargetingClauseAllOf
     */
    expression?: Array<TargetingPredicate | TargetingPredicateNested>;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateTargetingClauseAllOfExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * Creative model.
 * @export
 * @interface Creative
 */
export interface Creative {
    /**
     * Unique identifier of the creative.
     * @type {number}
     * @memberof Creative
     */
    creativeId: number;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof Creative
     */
    adGroupId: number;
    /**
     * 
     * @type {CreativeTypeInCreativeResponse}
     * @memberof Creative
     */
    creativeType: CreativeTypeInCreativeResponse;
    /**
     * 
     * @type {CreativeProperties}
     * @memberof Creative
     */
    properties: CreativeProperties;
    /**
     * The moderation status of the creative
     * @type {string}
     * @memberof Creative
     */
    moderationStatus: CreativeModerationStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CreativeModerationStatusEnum {
    Approved = 'APPROVED',
    PendingReview = 'PENDING_REVIEW',
    Rejected = 'REJECTED'
}

/**
 * System generated Creative moderation.
 * @export
 * @interface CreativeModeration
 */
export interface CreativeModeration {
    /**
     * Unique identifier of the creative.
     * @type {number}
     * @memberof CreativeModeration
     */
    creativeId: number;
    /**
     * 
     * @type {CreativeTypeInCreativeResponse}
     * @memberof CreativeModeration
     */
    creativeType: CreativeTypeInCreativeResponse;
    /**
     * The moderation status of the creative. |Status|Description| |------|-----------| |APPROVED|Moderation for the creative is complete.| |IN_PROGRESS|Moderation for the creative is in progress. The expected date and time for completion are specfied in the `etaForModeration` field.| |REJECTED|The creative has failed moderation. Specific information about the content that violated policy is available in `policyViolations`.|
     * @type {string}
     * @memberof CreativeModeration
     */
    moderationStatus: CreativeModerationModerationStatusEnum;
    /**
     * Expected date and time by which moderation will be complete.
     * @type {string}
     * @memberof CreativeModeration
     */
    etaForModeration: string;
    /**
     * A list of policy violations for a creative that has failed moderation.
     * @type {Array<CreativeModerationPolicyViolations>}
     * @memberof CreativeModeration
     */
    policyViolations: Array<CreativeModerationPolicyViolations>;
}

/**
    * @export
    * @enum {string}
    */
export enum CreativeModerationModerationStatusEnum {
    Approved = 'APPROVED',
    PendingReview = 'PENDING_REVIEW',
    Rejected = 'REJECTED'
}

/**
 * 
 * @export
 * @interface CreativeModerationImageEvidences
 */
export interface CreativeModerationImageEvidences {
    /**
     * 
     * @type {CreativeModerationViolatingImageCrop}
     * @memberof CreativeModerationImageEvidences
     */
    violatingImageCrop?: CreativeModerationViolatingImageCrop;
}
/**
 * 
 * @export
 * @interface CreativeModerationPolicyViolations
 */
export interface CreativeModerationPolicyViolations {
    /**
     * A human-readable description of the policy.
     * @type {string}
     * @memberof CreativeModerationPolicyViolations
     */
    policyDescription?: string;
    /**
     * Address of the policy documentation. Follow the link to learn more about the specified policy.
     * @type {string}
     * @memberof CreativeModerationPolicyViolations
     */
    policyLinkUrl?: string;
    /**
     * Information about the headline text that violates the specified policy.
     * @type {Array<CreativeModerationViolatingHeadlineContents>}
     * @memberof CreativeModerationPolicyViolations
     */
    violatingHeadlineContents?: Array<CreativeModerationViolatingHeadlineContents>;
    /**
     * Information about the brand logo that violates the specified policy.
     * @type {Array<CreativeModerationViolatingBrandLogoContents>}
     * @memberof CreativeModerationPolicyViolations
     */
    violatingBrandLogoContents?: Array<CreativeModerationViolatingBrandLogoContents>;
    /**
     * Information about the custom image that violates the specified policy.
     * @type {Array<CreativeModerationViolatingBrandLogoContents>}
     * @memberof CreativeModerationPolicyViolations
     */
    violatingCustomImageContents?: Array<CreativeModerationViolatingBrandLogoContents>;
    /**
     * Information about the video that violates the specified policy.
     * @type {Array<CreativeModerationViolatingVideoContents>}
     * @memberof CreativeModerationPolicyViolations
     */
    violatingVideoContents?: Array<CreativeModerationViolatingVideoContents>;
}
/**
 * 
 * @export
 * @interface CreativeModerationTextEvidence
 */
export interface CreativeModerationTextEvidence {
    /**
     * The specific text determined to violate the specified policy in reviewedText
     * @type {string}
     * @memberof CreativeModerationTextEvidence
     */
    violatingText?: string;
    /**
     * 
     * @type {CreativeModerationViolatingTextPosition}
     * @memberof CreativeModerationTextEvidence
     */
    violatingTextPosition?: CreativeModerationViolatingTextPosition;
}
/**
 * 
 * @export
 * @interface CreativeModerationVideoEvidences
 */
export interface CreativeModerationVideoEvidences {
    /**
     * 
     * @type {CreativeModerationViolatingVideoPosition}
     * @memberof CreativeModerationVideoEvidences
     */
    violatingVideoPosition?: CreativeModerationViolatingVideoPosition;
}
/**
 * 
 * @export
 * @interface CreativeModerationViolatingBrandLogoContents
 */
export interface CreativeModerationViolatingBrandLogoContents {
    /**
     * Address of the image reviewed during moderation.
     * @type {string}
     * @memberof CreativeModerationViolatingBrandLogoContents
     */
    reviewedImageUrl?: string;
    /**
     * 
     * @type {Array<CreativeModerationImageEvidences>}
     * @memberof CreativeModerationViolatingBrandLogoContents
     */
    imageEvidences?: Array<CreativeModerationImageEvidences>;
}
/**
 * 
 * @export
 * @interface CreativeModerationViolatingHeadlineContents
 */
export interface CreativeModerationViolatingHeadlineContents {
    /**
     * The specific text reviewed during moderation.
     * @type {string}
     * @memberof CreativeModerationViolatingHeadlineContents
     */
    reviewedText?: string;
    /**
     * 
     * @type {Array<CreativeModerationTextEvidence>}
     * @memberof CreativeModerationViolatingHeadlineContents
     */
    textEvidence?: Array<CreativeModerationTextEvidence>;
}
/**
 * 
 * @export
 * @interface CreativeModerationViolatingImageCrop
 */
export interface CreativeModerationViolatingImageCrop {
    /**
     * The top left X-coordinate of the content that violates the specfied policy within the image.
     * @type {number}
     * @memberof CreativeModerationViolatingImageCrop
     */
    topLeftX?: number;
    /**
     * The top left Y-coordinate of the content that violates the specfied policy within the image.
     * @type {number}
     * @memberof CreativeModerationViolatingImageCrop
     */
    topLeftY?: number;
    /**
     * The height of the content that violates the specfied policy within the image.
     * @type {number}
     * @memberof CreativeModerationViolatingImageCrop
     */
    height?: number;
    /**
     * The width of the content that violates the specfied policy within the image.
     * @type {number}
     * @memberof CreativeModerationViolatingImageCrop
     */
    width?: number;
}
/**
 * 
 * @export
 * @interface CreativeModerationViolatingTextPosition
 */
export interface CreativeModerationViolatingTextPosition {
    /**
     * Zero-based index into the text in reviewedText where the text specified in violatingText starts
     * @type {number}
     * @memberof CreativeModerationViolatingTextPosition
     */
    start?: number;
    /**
     * Zero-based index into the text in reviewedText where the text specified in violatingText ends
     * @type {number}
     * @memberof CreativeModerationViolatingTextPosition
     */
    end?: number;
}
/**
 * 
 * @export
 * @interface CreativeModerationViolatingVideoContents
 */
export interface CreativeModerationViolatingVideoContents {
    /**
     * Address of the video reviewed during moderation.
     * @type {string}
     * @memberof CreativeModerationViolatingVideoContents
     */
    reviewedVideoUrl?: string;
    /**
     * 
     * @type {Array<CreativeModerationVideoEvidences>}
     * @memberof CreativeModerationViolatingVideoContents
     */
    videoEvidences?: Array<CreativeModerationVideoEvidences>;
}
/**
 * 
 * @export
 * @interface CreativeModerationViolatingVideoPosition
 */
export interface CreativeModerationViolatingVideoPosition {
    /**
     * Time at which policy violation within video asset starts.
     * @type {number}
     * @memberof CreativeModerationViolatingVideoPosition
     */
    start?: number;
    /**
     * Time at which policy violation within the video asset ends.
     * @type {number}
     * @memberof CreativeModerationViolatingVideoPosition
     */
    end?: number;
}
/**
 * Optional configuration for creative preview.
 * @export
 * @interface CreativePreviewConfiguration
 */
export interface CreativePreviewConfiguration {
    /**
     * 
     * @type {CreativePreviewConfigurationSize}
     * @memberof CreativePreviewConfiguration
     */
    size?: CreativePreviewConfigurationSize;
    /**
     * The products to preview. Currently only the first product is previewable.
     * @type {Array<CreativePreviewConfigurationProducts>}
     * @memberof CreativePreviewConfiguration
     */
    products?: Array<CreativePreviewConfigurationProducts>;
    /**
     * The URL where customers will land after clicking on its link. Must be provided if a LandingPageType is set. Please note that if a single product ad sets the landing page url, only one product ad can be added to the ad group. This field is not supported when using ASIN or SKU fields. ||Specifications| |------------------|------------------| |LandingPageType| Description| |STORE| Not yet supported. The url should be in the format of https://www.amazon.com/stores/_* (using a correct Amazon url based on the marketplace)| |MOMENT| Not yet supported. The url should be in the format of https://www.amazon.com/moments/promotion/{campaignId} (using a correct Amazon url based on the marketplace)| |OFF_AMAZON_LINK| The url should be in the format of https://www.****.com. Note that this LandingPageType is not supported when using ASIN or SKU fields. A custom creative of headline, logo, image are require for this LandingPageType. |
     * @type {string}
     * @memberof CreativePreviewConfiguration
     */
    landingPageURL?: string;
    /**
     * 
     * @type {LandingPageType}
     * @memberof CreativePreviewConfiguration
     */
    landingPageType?: LandingPageType;
    /**
     * The name of the ad. Note that this field is not supported when using ASIN or SKU fields.
     * @type {string}
     * @memberof CreativePreviewConfiguration
     */
    adName?: string;
    /**
     * Preview the creative as if it is on a mobile environment.
     * @type {boolean}
     * @memberof CreativePreviewConfiguration
     */
    isMobile?: boolean;
    /**
     * Preview the creative as if it is on an amazon site or third party site. The main difference is whether the preview will contain an AdChoices icon.
     * @type {boolean}
     * @memberof CreativePreviewConfiguration
     */
    isOnAmazon?: boolean;
}
/**
 * 
 * @export
 * @interface CreativePreviewConfigurationProducts
 */
export interface CreativePreviewConfigurationProducts {
    /**
     * The ASIN of the product.
     * @type {string}
     * @memberof CreativePreviewConfigurationProducts
     */
    asin?: string;
}
/**
 * The slot dimension to render the creative. Sponsored Display creatives are responsive to a limited list of width and height pairs, including 300x250, 650x130, 245x250, 414x125, 600x160, 600x300, 728x90, 980x55, 320x50, 970x250 and 270x150.
 * @export
 * @interface CreativePreviewConfigurationSize
 */
export interface CreativePreviewConfigurationSize {
    /**
     * 
     * @type {number}
     * @memberof CreativePreviewConfigurationSize
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof CreativePreviewConfigurationSize
     */
    height?: number;
}
/**
 * 
 * @export
 * @interface CreativePreviewRequest
 */
export interface CreativePreviewRequest {
    /**
     * 
     * @type {PreviewCreativeModel}
     * @memberof CreativePreviewRequest
     */
    creative: PreviewCreativeModel;
    /**
     * 
     * @type {CreativePreviewConfiguration}
     * @memberof CreativePreviewRequest
     */
    previewConfiguration: CreativePreviewConfiguration;
    /**
     * 
     * @type {Array<CreativePreviewConfiguration>}
     * @memberof CreativePreviewRequest
     */
    previewConfigurations?: Array<CreativePreviewConfiguration>;
}
/**
 * 
 * @export
 * @interface CreativePreviewResponse
 */
export interface CreativePreviewResponse {
    /**
     * 
     * @type {string}
     * @memberof CreativePreviewResponse
     */
    previewHtml: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreativePreviewResponse
     */
    previewHtmls?: Array<string>;
}
/**
 * Select customizations on your creative from any combination of headline, logo, and custom image.
 * @export
 * @interface CreativeProperties
 */
export interface CreativeProperties {
    /**
     * A marketing phrase to display on the ad. This field is optional and mutable. Maximum number of characters allowed is 50.
     * @type {string}
     * @memberof CreativeProperties
     */
    headline?: string;
    /**
     * 
     * @type {Image}
     * @memberof CreativeProperties
     */
    brandLogo?: Image;
    /**
     * 
     * @type {Image}
     * @memberof CreativeProperties
     */
    rectCustomImage?: Image;
    /**
     * 
     * @type {Image}
     * @memberof CreativeProperties
     */
    squareCustomImage?: Image;
    /**
     * An optional collection of 1:1 square images which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
     * @type {Array<Image>}
     * @memberof CreativeProperties
     */
    squareImages?: Array<Image>;
    /**
     * An optional collection of 16:9 landscape images which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
     * @type {Array<Image>}
     * @memberof CreativeProperties
     */
    landscapeImages?: Array<Image>;
    /**
     * An optional collection of 9:16 portrait images which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
     * @type {Array<Image>}
     * @memberof CreativeProperties
     */
    portraitImages?: Array<Image>;
    /**
     * 
     * @type {Video}
     * @memberof CreativeProperties
     */
    video?: Video;
    /**
     * An optional collection of 1:1 square videos which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
     * @type {Array<Video>}
     * @memberof CreativeProperties
     */
    squareVideos?: Array<Video>;
    /**
     * An optional collection of 16:9 landscape videos which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
     * @type {Array<Video>}
     * @memberof CreativeProperties
     */
    landscapeVideos?: Array<Video>;
    /**
     * An optional collection of 9:16 portrait videos which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
     * @type {Array<Video>}
     * @memberof CreativeProperties
     */
    portraitVideos?: Array<Video>;
}
/**
 * 
 * @export
 * @interface CreativeResponse
 */
export interface CreativeResponse {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof CreativeResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof CreativeResponse
     */
    description?: string;
    /**
     * The identifier of the creative.
     * @type {number}
     * @memberof CreativeResponse
     */
    creativeId?: number;
}
/**
 * The type of the associated creative. If the field is empty or null, a default value of IMAGE will be used. One ad group only supports one type (VIDEO or IMAGE) of creativeType at a time. |Name|Description| |----|-----------| |IMAGE |The creative will display static assets (e.g. headline, brandLogo or custom image).| |VIDEO |The creative will display video assets. This type of creative must have a video asset provided. Only supported when using productAds with ASIN or SKU.|
 * @export
 * @enum {string}
 */

export enum CreativeType {
    Image = 'IMAGE',
    Video = 'VIDEO'
}

/**
 * The type of the creative. |Name|Description| |----|-----------| |IMAGE |The creative will display static assets (e.g. headline, brandLogo or custom image).| |VIDEO |The creative will display video assets. This type of creative must have video assets provided. Only supported when using productAds with ASIN or SKU.|
 * @export
 * @enum {string}
 */

export enum CreativeTypeInCreativeRequest {
    Image = 'IMAGE',
    Video = 'VIDEO'
}

/**
 *  The type of the creative. |Name|Description| |----|-----------| |IMAGE |The creative will display static assets (e.g. headline, brandLogo or custom image).| |VIDEO |The creative will display video assets. This type of creative must have video assets provided.|
 * @export
 * @enum {string}
 */

export enum CreativeTypeInCreativeResponse {
    Image = 'IMAGE',
    Video = 'VIDEO'
}

/**
 * Creative update model.
 * @export
 * @interface CreativeUpdate
 */
export interface CreativeUpdate {
    /**
     * Unique identifier of the creative.
     * @type {number}
     * @memberof CreativeUpdate
     */
    creativeId: number;
    /**
     * 
     * @type {CreativeTypeInCreativeRequest}
     * @memberof CreativeUpdate
     */
    creativeType?: CreativeTypeInCreativeRequest | null;
    /**
     * 
     * @type {CreativeProperties}
     * @memberof CreativeUpdate
     */
    properties: CreativeProperties;
}
/**
 * User-customizable properties of a custom image creative.
 * @export
 * @interface CustomImageCreativeProperties
 */
export interface CustomImageCreativeProperties {
    /**
     * 
     * @type {Image}
     * @memberof CustomImageCreativeProperties
     */
    rectCustomImage?: Image;
    /**
     * 
     * @type {Image}
     * @memberof CustomImageCreativeProperties
     */
    squareCustomImage?: Image;
    /**
     * An optional collection of 1:1 square images which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
     * @type {Array<Image>}
     * @memberof CustomImageCreativeProperties
     */
    squareImages?: Array<Image>;
    /**
     * An optional collection of 16:9 landscape images which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
     * @type {Array<Image>}
     * @memberof CustomImageCreativeProperties
     */
    landscapeImages?: Array<Image>;
    /**
     * An optional collection of 9:16 portrait images which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
     * @type {Array<Image>}
     * @memberof CustomImageCreativeProperties
     */
    portraitImages?: Array<Image>;
}
/**
 * Object representing date range type rule duration.
 * @export
 * @interface DateRangeTypeRuleDuration
 */
export interface DateRangeTypeRuleDuration {
    /**
     * The end date of the budget rule in YYYYMMDD format. The end date is inclusive. Required to be equal or greater than `startDate`.
     * @type {string}
     * @memberof DateRangeTypeRuleDuration
     */
    endDate?: string;
    /**
     * The start date of the budget rule in YYYYMMDD format. The start date is inclusive. Required to be greater than or equal to current date.
     * @type {string}
     * @memberof DateRangeTypeRuleDuration
     */
    startDate: string;
}
/**
 * The day of the week.
 * @export
 * @enum {string}
 */

export enum DayOfWeek {
    Monday = 'MONDAY',
    Tuesday = 'TUESDAY',
    Wednesday = 'WEDNESDAY',
    Thursday = 'THURSDAY',
    Friday = 'FRIDAY',
    Saturday = 'SATURDAY',
    Sunday = 'SUNDAY'
}

/**
 * Object representing event type rule duration.
 * @export
 * @interface EventTypeRuleDuration
 */
export interface EventTypeRuleDuration {
    /**
     * The event identifier. This value is available from the budget rules recommendation API.
     * @type {string}
     * @memberof EventTypeRuleDuration
     */
    eventId: string;
    /**
     * The event end date in YYYYMMDD format. Read-only.
     * @type {string}
     * @memberof EventTypeRuleDuration
     */
    endDate?: string;
    /**
     * The event name. Read-only.
     * @type {string}
     * @memberof EventTypeRuleDuration
     */
    eventName?: string;
    /**
     * The event start date in YYYYMMDD format. Read-only. Note that this field is present only for announced events.
     * @type {string}
     * @memberof EventTypeRuleDuration
     */
    startDate?: string;
}
/**
 * Forecast impressions, clicks, reach, or conversions.
 * @export
 * @interface Forecast
 */
export interface Forecast {
    /**
     * Describes which metric is forecasted. |Name|Description| |-----------|------------------------| |IMPRESSIONS|Available impressions| |REACH      |[Preview only] Delivered viewable impressions| |CLICKS     |[Preview only] Delivered page visits| |CONVERSIONS|[Preview only] Delivered conversions|
     * @type {string}
     * @memberof Forecast
     */
    metric?: ForecastMetricEnum;
    /**
     * 
     * @type {ForecastRange}
     * @memberof Forecast
     */
    value?: ForecastRange;
}

/**
    * @export
    * @enum {string}
    */
export enum ForecastMetricEnum {
    Impressions = 'IMPRESSIONS',
    Reach = 'REACH',
    Clicks = 'CLICKS',
    Conversions = 'CONVERSIONS'
}

/**
 * Forecast range values.
 * @export
 * @interface ForecastRange
 */
export interface ForecastRange {
    /**
     * 
     * @type {number}
     * @memberof ForecastRange
     */
    min?: number;
    /**
     * 
     * @type {number}
     * @memberof ForecastRange
     */
    max?: number;
}
/**
 * 
 * @export
 * @interface GetOptimizationRuleResponse
 */
export interface GetOptimizationRuleResponse {
    /**
     * 
     * @type {OptimizationRule}
     * @memberof GetOptimizationRuleResponse
     */
    optimizationRule?: OptimizationRule;
    /**
     * A list of adGroup identifiers that the optimization rule associates with.
     * @type {Array<number>}
     * @memberof GetOptimizationRuleResponse
     */
    adGroupIds?: Array<number>;
}
/**
 * 
 * @export
 * @interface GetSDBudgetRuleResponse
 */
export interface GetSDBudgetRuleResponse {
    /**
     * 
     * @type {SDBudgetRule}
     * @memberof GetSDBudgetRuleResponse
     */
    budgetRule?: SDBudgetRule;
}
/**
 * 
 * @export
 * @interface GetSDBudgetRulesForAdvertiserResponse
 */
export interface GetSDBudgetRulesForAdvertiserResponse {
    /**
     * A list of rules created by the advertiser.
     * @type {Array<SDBudgetRule>}
     * @memberof GetSDBudgetRulesForAdvertiserResponse
     */
    budgetRulesForAdvertiserResponse?: Array<SDBudgetRule>;
    /**
     * To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
     * @type {string}
     * @memberof GetSDBudgetRulesForAdvertiserResponse
     */
    nextToken?: string;
}
/**
 * A product an advertisers wants to advertise. Recommendations will be made for specified goal products.
 * @export
 * @interface GoalProduct
 */
export interface GoalProduct {
    /**
     * Amazon Standard Identification Number
     * @type {string}
     * @memberof GoalProduct
     */
    asin: string;
}
/**
 * User-customizable properties of a creative with headline.
 * @export
 * @interface HeadlineCreativeProperties
 */
export interface HeadlineCreativeProperties {
    /**
     * A marketing phrase to display on the ad. This field is optional and mutable. Maximum number of characters allowed is 50.
     * @type {string}
     * @memberof HeadlineCreativeProperties
     */
    headline?: string;
}
/**
 * This field denotes image which is displayed on the ad. This can either be a brand logo or a custom image. This field is optional and mutable. For custom image, both rectCustomImage and squareCustomImage should use the same asset id and asset version. Specific restrictions based on the Image type are listed in the following table. |Image type|Maximum file size|Minimum width|Minimum height|Accepted file formats| |------|-----------|-----------|-----------|-----------| |Custom Image|5MB|1200|628|JPEG, JPG, PNG, GIF| |Brand Logo|1MB|600|100|JPEG, JPG, PNG| Note: For square custom images the cropped image should be 628x628 at minimum.
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * The unique identifier of the image asset. This assetId comes from the Creative Asset Library.
     * @type {string}
     * @memberof Image
     */
    assetId: string;
    /**
     * The identifier of the particular image assetversion.
     * @type {string}
     * @memberof Image
     */
    assetVersion: string;
    /**
     * 
     * @type {ImageCroppingCoordinates}
     * @memberof Image
     */
    croppingCoordinates?: ImageCroppingCoordinates;
}
/**
 * Optional cropping coordinates to apply to the image.
 * @export
 * @interface ImageCroppingCoordinates
 */
export interface ImageCroppingCoordinates {
    /**
     * Pixel distance from the top edge of the cropping zone to the top edge of the original image.
     * @type {number}
     * @memberof ImageCroppingCoordinates
     */
    top: number;
    /**
     * Pixel distance from the left edge of the cropping zone to the left edge of the original image.
     * @type {number}
     * @memberof ImageCroppingCoordinates
     */
    left: number;
    /**
     * Pixel width of the cropping zone.
     * @type {number}
     * @memberof ImageCroppingCoordinates
     */
    width: number;
    /**
     * Pixel height of the cropping zone.
     * @type {number}
     * @memberof ImageCroppingCoordinates
     */
    height: number;
}
/**
 * The type of the landingPage used. This field is completely optional and will be set in conjunction with the LandingPageURL to indicate the type of landing page that will be set. This field is not supported when using ASIN or SKU fields.
 * @export
 * @enum {string}
 */

export enum LandingPageType {
    Store = 'STORE',
    Moment = 'MOMENT',
    OffAmazonLink = 'OFF_AMAZON_LINK'
}

/**
 * Locale string as described in [BCP 47](https://tools.ietf.org/html/bcp47). For example, `en-US`
 * @export
 * @enum {string}
 */

export enum Locale {
    EnUs = 'en-US',
    EsMx = 'es-MX',
    ZhCn = 'zh-CN',
    EsEs = 'es-ES',
    ItIt = 'it-IT',
    FrFr = 'fr-FR',
    FrCa = 'fr-CA',
    DeDe = 'de-DE',
    JaJp = 'ja-JP',
    KoKr = 'ko-KR',
    EnGb = 'en-GB',
    EnCa = 'en-CA',
    HiIn = 'hi-IN',
    EnIn = 'en-IN',
    EnDe = 'en-DE',
    EnEs = 'en-ES',
    EnFr = 'en-FR',
    EnIt = 'en-IT',
    EnJp = 'en-JP',
    EnAe = 'en-AE',
    ArAe = 'ar-AE'
}

/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    state?: LocationStateEnum;
    /**
     * The identifier of the location.
     * @type {number}
     * @memberof Location
     */
    locationExpressionId?: number;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof Location
     */
    adGroupId?: number;
    /**
     * The Location definition.
     * @type {Array<LocationExpression>}
     * @memberof Location
     */
    expression?: Array<LocationExpression>;
    /**
     * The human-readable location definition.
     * @type {Array<ResolvedLocationExpression>}
     * @memberof Location
     */
    resolvedExpression?: Array<ResolvedLocationExpression>;
}

/**
    * @export
    * @enum {string}
    */
export enum LocationStateEnum {
    Enabled = 'enabled'
}

/**
 * 
 * @export
 * @interface LocationAllOf
 */
export interface LocationAllOf {
    /**
     * The identifier of the location.
     * @type {number}
     * @memberof LocationAllOf
     */
    locationExpressionId?: number;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof LocationAllOf
     */
    adGroupId?: number;
    /**
     * The Location definition.
     * @type {Array<LocationExpression>}
     * @memberof LocationAllOf
     */
    expression?: Array<LocationExpression>;
    /**
     * The human-readable location definition.
     * @type {Array<ResolvedLocationExpression>}
     * @memberof LocationAllOf
     */
    resolvedExpression?: Array<ResolvedLocationExpression>;
}
/**
 * 
 * @export
 * @interface LocationExpression
 */
export interface LocationExpression {
    /**
     * 
     * @type {LocationPredicate}
     * @memberof LocationExpression
     */
    type?: LocationPredicate;
    /**
     * The location identifier. Currently, this can correspond to either a \'city\', \'state\', \'dma\', \'postal code\', or \'country\'. Its value is discoverable using the GET /locations API.
     * @type {string}
     * @memberof LocationExpression
     */
    value?: string;
}
/**
 * The location category.
 * @export
 * @enum {string}
 */

export enum LocationPredicate {
    Location = 'location'
}

/**
 * User-customizable properties of a creative with a logo.
 * @export
 * @interface LogoCreativeProperties
 */
export interface LogoCreativeProperties {
    /**
     * 
     * @type {Image}
     * @memberof LogoCreativeProperties
     */
    brandLogo?: Image;
}
/**
 * The error response object.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof ModelError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface NegativeTargetingClause
 */
export interface NegativeTargetingClause {
    /**
     * 
     * @type {string}
     * @memberof NegativeTargetingClause
     */
    state?: NegativeTargetingClauseStateEnum;
    /**
     * 
     * @type {number}
     * @memberof NegativeTargetingClause
     */
    targetId?: number;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof NegativeTargetingClause
     */
    adGroupId?: number;
    /**
     * 
     * @type {string}
     * @memberof NegativeTargetingClause
     */
    expressionType?: NegativeTargetingClauseExpressionTypeEnum;
    /**
     * The expression to negatively match against. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.
     * @type {Array<NegativeTargetingExpression>}
     * @memberof NegativeTargetingClause
     */
    expression?: Array<NegativeTargetingExpression>;
    /**
     * The resolved negative targeting expression.
     * @type {Array<NegativeTargetingExpression>}
     * @memberof NegativeTargetingClause
     */
    resolvedExpression?: Array<NegativeTargetingExpression>;
}

/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface NegativeTargetingClauseAllOf
 */
export interface NegativeTargetingClauseAllOf {
    /**
     * 
     * @type {number}
     * @memberof NegativeTargetingClauseAllOf
     */
    targetId?: number;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof NegativeTargetingClauseAllOf
     */
    adGroupId?: number;
    /**
     * 
     * @type {string}
     * @memberof NegativeTargetingClauseAllOf
     */
    expressionType?: NegativeTargetingClauseAllOfExpressionTypeEnum;
    /**
     * The expression to negatively match against. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.
     * @type {Array<NegativeTargetingExpression>}
     * @memberof NegativeTargetingClauseAllOf
     */
    expression?: Array<NegativeTargetingExpression>;
    /**
     * The resolved negative targeting expression.
     * @type {Array<NegativeTargetingExpression>}
     * @memberof NegativeTargetingClauseAllOf
     */
    resolvedExpression?: Array<NegativeTargetingExpression>;
}

/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseAllOfExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface NegativeTargetingClauseEx
 */
export interface NegativeTargetingClauseEx {
    /**
     * 
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    targetId?: number;
    /**
     * 
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    adGroupId?: number;
    /**
     * 
     * @type {string}
     * @memberof NegativeTargetingClauseEx
     */
    state?: NegativeTargetingClauseExStateEnum;
    /**
     * 
     * @type {string}
     * @memberof NegativeTargetingClauseEx
     */
    expressionType?: NegativeTargetingClauseExExpressionTypeEnum;
    /**
     * The expression to negatively match against. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.
     * @type {Array<NegativeTargetingClauseExExpression>}
     * @memberof NegativeTargetingClauseEx
     */
    expression?: Array<NegativeTargetingClauseExExpression>;
    /**
     * The status of the target.
     * @type {string}
     * @memberof NegativeTargetingClauseEx
     */
    servingStatus?: NegativeTargetingClauseExServingStatusEnum;
    /**
     * Epoch date the target was created.
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    creationDate?: number;
    /**
     * Epoch date of the last update to any property associated with the target.
     * @type {number}
     * @memberof NegativeTargetingClauseEx
     */
    lastUpdatedDate?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseExStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseExExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}
/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseExServingStatusEnum {
    AdvertiserStatusEnabled = 'ADVERTISER_STATUS_ENABLED',
    StatusUnavailable = 'STATUS_UNAVAILABLE',
    AdvertiserPaused = 'ADVERTISER_PAUSED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    AdvertiserPaymentFailure = 'ADVERTISER_PAYMENT_FAILURE',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    PendingStartDate = 'PENDING_START_DATE',
    Ended = 'ENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupStatusEnabled = 'AD_GROUP_STATUS_ENABLED',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    AdGroupIncomplete = 'AD_GROUP_INCOMPLETE',
    AdGroupLowBid = 'AD_GROUP_LOW_BID',
    TargetStatusLive = 'TARGET_STATUS_LIVE',
    TargetStatusPaused = 'TARGET_STATUS_PAUSED',
    TargetStatusArchived = 'TARGET_STATUS_ARCHIVED'
}

/**
 * 
 * @export
 * @interface NegativeTargetingClauseExExpression
 */
export interface NegativeTargetingClauseExExpression {
    /**
     * The intent type. See the [targeting topic](https://advertising.amazon.com/help#GQCBASRVERXSARL3) in the Amazon Ads support center for more information.
     * @type {string}
     * @memberof NegativeTargetingClauseExExpression
     */
    type?: NegativeTargetingClauseExExpressionTypeEnum;
    /**
     * The value to be negatively targeted. Used only in manual expressions.
     * @type {string}
     * @memberof NegativeTargetingClauseExExpression
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingClauseExExpressionTypeEnum {
    AsinSameAs = 'asinSameAs',
    AsinBrandSameAs = 'asinBrandSameAs'
}

/**
 * 
 * @export
 * @interface NegativeTargetingExpression
 */
export interface NegativeTargetingExpression {
    /**
     * The intent type. See the [targeting topic](https://advertising.amazon.com/help#GQCBASRVERXSARL3) in the Amazon Ads support center for more information.
     * @type {string}
     * @memberof NegativeTargetingExpression
     */
    type?: NegativeTargetingExpressionTypeEnum;
    /**
     * The value to be negatively targeted. Used only in manual expressions.
     * @type {string}
     * @memberof NegativeTargetingExpression
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum NegativeTargetingExpressionTypeEnum {
    AsinSameAs = 'asinSameAs',
    AsinBrandSameAs = 'asinBrandSameAs'
}

/**
 * 
 * @export
 * @interface OptimizationRule
 */
export interface OptimizationRule {
    /**
     * The state of the optimization rule.
     * @type {string}
     * @memberof OptimizationRule
     */
    state?: OptimizationRuleStateEnum;
    /**
     * The name of the optimization rule.
     * @type {string}
     * @memberof OptimizationRule
     */
    ruleName?: string;
    /**
     * A list of rule conditions that define the advertiser\'s intent for the outcome of the rule. The rule uses \'AND\' logic to combine every condition in this list, and will validate the combination when the rule is created or updated.
     * @type {Array<RuleCondition>}
     * @memberof OptimizationRule
     */
    ruleConditions?: Array<RuleCondition>;
    /**
     * The identifier of the optimization rule.
     * @type {string}
     * @memberof OptimizationRule
     */
    ruleId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum OptimizationRuleStateEnum {
    Enabled = 'enabled',
    PausedComingLater = 'paused [COMING LATER]'
}

/**
 * 
 * @export
 * @interface OptimizationRuleAllOf
 */
export interface OptimizationRuleAllOf {
    /**
     * The identifier of the optimization rule.
     * @type {string}
     * @memberof OptimizationRuleAllOf
     */
    ruleId?: string;
}
/**
 * 
 * @export
 * @interface OptimizationRuleResponse
 */
export interface OptimizationRuleResponse {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof OptimizationRuleResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof OptimizationRuleResponse
     */
    description?: string;
    /**
     * The identifier of the optimization rule.
     * @type {string}
     * @memberof OptimizationRuleResponse
     */
    ruleId?: string;
}
/**
 * JSONPatch request document.
 * @export
 * @interface PatchDocument
 */
export interface PatchDocument {
    /**
     * The JSONPatch operation type.
     * @type {string}
     * @memberof PatchDocument
     */
    op: PatchDocumentOpEnum;
    /**
     * A path constructed from the JSON object to be updated.
     * @type {string}
     * @memberof PatchDocument
     */
    path: string;
    /**
     * The value used by the operation specified in the `op` field.
     * @type {string | number | boolean | Array<any> | object}
     * @memberof PatchDocument
     */
    value?: string | number | boolean | Array<any> | object;
}

/**
    * @export
    * @enum {string}
    */
export enum PatchDocumentOpEnum {
    Add = 'add',
    Remove = 'remove',
    Replace = 'replace'
}

/**
 * JSONPatch request request object.
 * @export
 * @interface PatchRequest
 */
export interface PatchRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchRequest
     */
    id: string;
    /**
     * 
     * @type {Array<PatchDocument>}
     * @memberof PatchRequest
     */
    request: Array<PatchDocument>;
}
/**
 * 
 * @export
 * @interface PerformanceMeasureCondition
 */
export interface PerformanceMeasureCondition {
    /**
     * 
     * @type {PerformanceMetric}
     * @memberof PerformanceMeasureCondition
     */
    metricName: PerformanceMetric;
    /**
     * 
     * @type {ComparisonOperator}
     * @memberof PerformanceMeasureCondition
     */
    comparisonOperator: ComparisonOperator;
    /**
     * The performance threshold value.
     * @type {number}
     * @memberof PerformanceMeasureCondition
     */
    threshold: number;
}
/**
 * The advertising performance metric.
 * @export
 * @enum {string}
 */

export enum PerformanceMetric {
    Acos = 'ACOS',
    Ctr = 'CTR',
    Cvr = 'CVR',
    Roas = 'ROAS'
}

/**
 * An object giving the name of the performance metric and its value when the rule was evaluated
 * @export
 * @interface PerformanceMetricValue
 */
export interface PerformanceMetricValue {
    /**
     * Name of the performance metric
     * @type {string}
     * @memberof PerformanceMetricValue
     */
    name?: string;
    /**
     * Value of the performance metric
     * @type {number}
     * @memberof PerformanceMetricValue
     */
    value?: number;
}
/**
 * Placement type where the rule should be applied, defaults to `ALL`(including home page, detail page, twitch and offsite).  **Future** More available placemenTypes will be supported.
 * @export
 * @enum {string}
 */

export enum PlacementType {
    All = 'ALL'
}

/**
 * Creative model for preview.
 * @export
 * @interface PreviewCreativeModel
 */
export interface PreviewCreativeModel {
    /**
     * 
     * @type {CreativeTypeInCreativeRequest}
     * @memberof PreviewCreativeModel
     */
    creativeType?: CreativeTypeInCreativeRequest | null;
    /**
     * 
     * @type {CreativeProperties}
     * @memberof PreviewCreativeModel
     */
    properties?: CreativeProperties;
}
/**
 * 
 * @export
 * @interface ProductAd
 */
export interface ProductAd {
    /**
     * The state of the campaign associated with the product ad.
     * @type {string}
     * @memberof ProductAd
     */
    state?: ProductAdStateEnum;
    /**
     * The identifier of the product ad.
     * @type {number}
     * @memberof ProductAd
     */
    adId?: number;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof ProductAd
     */
    adGroupId?: number;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof ProductAd
     */
    campaignId?: number;
    /**
     * The URL where customers will land after clicking on its link. Must be provided if a LandingPageType is set. Please note that if a single product ad sets the landing page url, only one product ad can be added to the ad group. This field is not supported when using ASIN or SKU fields. ||Specifications| |------------------|------------------| |LandingPageType| Description| |STORE| Not yet supported. The url should be in the format of https://www.amazon.com/stores/_* (using a correct Amazon url based on the marketplace)| |MOMENT| Not yet supported. The url should be in the format of https://www.amazon.com/moments/promotion/{campaignId} (using a correct Amazon url based on the marketplace)| |OFF_AMAZON_LINK| The url should be in the format of https://www.****.com. Note that this LandingPageType is not supported when using ASIN or SKU fields. A custom creative of headline, logo, image are require for this LandingPageType. |
     * @type {string}
     * @memberof ProductAd
     */
    landingPageURL?: string;
    /**
     * 
     * @type {LandingPageType}
     * @memberof ProductAd
     */
    landingPageType?: LandingPageType;
    /**
     * The name of the ad. Note that this field is not supported when using ASIN or SKU fields.
     * @type {string}
     * @memberof ProductAd
     */
    adName?: string;
    /**
     * The Amazon ASIN of the product advertised by the product ad.
     * @type {string}
     * @memberof ProductAd
     */
    asin?: string;
    /**
     * The Amazon SKU of the product advertised by the product ad.
     * @type {string}
     * @memberof ProductAd
     */
    sku?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ProductAdStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface ProductAdAllOf
 */
export interface ProductAdAllOf {
    /**
     * The identifier of the product ad.
     * @type {number}
     * @memberof ProductAdAllOf
     */
    adId?: number;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof ProductAdAllOf
     */
    adGroupId?: number;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof ProductAdAllOf
     */
    campaignId?: number;
    /**
     * The URL where customers will land after clicking on its link. Must be provided if a LandingPageType is set. Please note that if a single product ad sets the landing page url, only one product ad can be added to the ad group. This field is not supported when using ASIN or SKU fields. ||Specifications| |------------------|------------------| |LandingPageType| Description| |STORE| Not yet supported. The url should be in the format of https://www.amazon.com/stores/_* (using a correct Amazon url based on the marketplace)| |MOMENT| Not yet supported. The url should be in the format of https://www.amazon.com/moments/promotion/{campaignId} (using a correct Amazon url based on the marketplace)| |OFF_AMAZON_LINK| The url should be in the format of https://www.****.com. Note that this LandingPageType is not supported when using ASIN or SKU fields. A custom creative of headline, logo, image are require for this LandingPageType. |
     * @type {string}
     * @memberof ProductAdAllOf
     */
    landingPageURL?: string;
    /**
     * 
     * @type {LandingPageType}
     * @memberof ProductAdAllOf
     */
    landingPageType?: LandingPageType;
    /**
     * The name of the ad. Note that this field is not supported when using ASIN or SKU fields.
     * @type {string}
     * @memberof ProductAdAllOf
     */
    adName?: string;
    /**
     * The Amazon ASIN of the product advertised by the product ad.
     * @type {string}
     * @memberof ProductAdAllOf
     */
    asin?: string;
    /**
     * The Amazon SKU of the product advertised by the product ad.
     * @type {string}
     * @memberof ProductAdAllOf
     */
    sku?: string;
}
/**
 * 
 * @export
 * @interface ProductAdResponse
 */
export interface ProductAdResponse {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof ProductAdResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof ProductAdResponse
     */
    description?: string;
    /**
     * The identifier of the ad.
     * @type {number}
     * @memberof ProductAdResponse
     */
    adId?: number;
}
/**
 * 
 * @export
 * @interface ProductAdResponseEx
 */
export interface ProductAdResponseEx {
    /**
     * The identifier of the ad.
     * @type {number}
     * @memberof ProductAdResponseEx
     */
    adId?: number;
    /**
     * The identifier of the ad group associated with the ad.
     * @type {number}
     * @memberof ProductAdResponseEx
     */
    adGroupId?: number;
    /**
     * The identifier of the campaign associated with the ad.
     * @type {number}
     * @memberof ProductAdResponseEx
     */
    campaignId?: number;
    /**
     * The URL where customers will land after clicking on its link. Must be provided if a LandingPageType is set. Please note that if a single product ad sets the landing page url, only one product ad can be added to the ad group. This field is not supported when using ASIN or SKU fields. ||Specifications| |------------------|------------------| |LandingPageType| Description| |STORE| Not yet supported. The url should be in the format of https://www.amazon.com/stores/_* (using a correct Amazon url based on the marketplace)| |MOMENT| Not yet supported. The url should be in the format of https://www.amazon.com/moments/promotion/{campaignId} (using a correct Amazon url based on the marketplace)| |OFF_AMAZON_LINK| The url should be in the format of https://www.****.com. Note that this LandingPageType is not supported when using ASIN or SKU fields. A custom creative of headline, logo, image are require for this LandingPageType. |
     * @type {string}
     * @memberof ProductAdResponseEx
     */
    landingPageURL?: string;
    /**
     * 
     * @type {LandingPageType}
     * @memberof ProductAdResponseEx
     */
    landingPageType?: LandingPageType;
    /**
     * The name of the ad. Note that this field is not supported when using ASIN or SKU fields.
     * @type {string}
     * @memberof ProductAdResponseEx
     */
    adName?: string;
    /**
     * The ASIN of the product being advertised.
     * @type {string}
     * @memberof ProductAdResponseEx
     */
    asin?: string;
    /**
     * The SKU of the product being advertised.
     * @type {string}
     * @memberof ProductAdResponseEx
     */
    sku?: string;
    /**
     * The state of the product ad.
     * @type {string}
     * @memberof ProductAdResponseEx
     */
    state?: ProductAdResponseExStateEnum;
    /**
     * The status of the product ad.
     * @type {string}
     * @memberof ProductAdResponseEx
     */
    servingStatus?: ProductAdResponseExServingStatusEnum;
    /**
     * Epoch date the product ad was created.
     * @type {number}
     * @memberof ProductAdResponseEx
     */
    creationDate?: number;
    /**
     * Epoch date of the last update to any property associated with the product ad.
     * @type {number}
     * @memberof ProductAdResponseEx
     */
    lastUpdatedDate?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ProductAdResponseExStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum ProductAdResponseExServingStatusEnum {
    AdvertiserStatusEnabled = 'ADVERTISER_STATUS_ENABLED',
    StatusUnavailable = 'STATUS_UNAVAILABLE',
    AdvertiserPaused = 'ADVERTISER_PAUSED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    AdvertiserPaymentFailure = 'ADVERTISER_PAYMENT_FAILURE',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    PendingStartDate = 'PENDING_START_DATE',
    Ended = 'ENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupStatusEnabled = 'AD_GROUP_STATUS_ENABLED',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    AdGroupIncomplete = 'AD_GROUP_INCOMPLETE',
    AdGroupLowBid = 'AD_GROUP_LOW_BID',
    AdStatusLive = 'AD_STATUS_LIVE',
    AdStatusPaused = 'AD_STATUS_PAUSED',
    AdStatusArchived = 'AD_STATUS_ARCHIVED',
    MissingImage = 'MISSING_IMAGE',
    MissingDecoration = 'MISSING_DECORATION',
    NotBuyable = 'NOT_BUYABLE',
    NotInBuybox = 'NOT_IN_BUYBOX',
    OutOfStock = 'OUT_OF_STOCK',
    NotInPolicy = 'NOT_IN_POLICY'
}

/**
 * A recommended product to target ads on
 * @export
 * @interface ProductRecommendation
 */
export interface ProductRecommendation {
    /**
     * Amazon Standard Identification Number
     * @type {string}
     * @memberof ProductRecommendation
     */
    asin?: string;
    /**
     * A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
     * @type {number}
     * @memberof ProductRecommendation
     */
    rank?: number;
}
/**
 * Signifies a type of recommendation
 * @export
 * @enum {string}
 */

export enum RecommendationType {
    Product = 'PRODUCT'
}

/**
 * 
 * @export
 * @interface Recurrence
 */
export interface Recurrence {
    /**
     * 
     * @type {RecurrenceType}
     * @memberof Recurrence
     */
    type?: RecurrenceType;
    /**
     * Object representing days of the week for weekly type rule. It is not required for daily recurrence type
     * @type {Array<DayOfWeek>}
     * @memberof Recurrence
     */
    daysOfWeek?: Array<DayOfWeek>;
}
/**
 * depicts the type of recurrence
 * @export
 * @enum {string}
 */

export enum RecurrenceType {
    Daily = 'DAILY',
    Weekly = 'WEEKLY'
}

/**
 * 
 * @export
 * @interface ReportRequest
 */
export interface ReportRequest {
    /**
     * Date in YYYYMMDD format. The report contains only metrics generated on the specified date. Note that the time zone used for date calculation is the one associated with the profile used to make the request.
     * @type {string}
     * @memberof ReportRequest
     */
    reportDate?: string;
    /**
     * 
     * @type {TacticReport}
     * @memberof ReportRequest
     */
    tactic?: TacticReport;
    /**
     * 
     * @type {Segment}
     * @memberof ReportRequest
     */
    segment?: Segment;
    /**
     * A comma-separated list of the metrics to be included in the report.  Each report type supports different metrics. **To understand supported metrics for each report type, see [Report types](/API/docs/en-us/guides/reporting/v2/report-types).**  **Note**: Campaigns with vCPM costType should use view+click based metrics (viewAttributedConversions14d, viewAttributedDetailPageView14d, viewAttributedSales14d, viewAttributedUnitsOrdered14d, viewImpressions).  **Note**: Detail page view metrics (attributedDetailPageView14d, viewAttributedDetailPageView14d) have an SLA of 3 days.  **Tip**: Use new-to-brand (NTB) metrics to calculate how efficient your campaigns are at driving new shoppers:    1. Percentage of NTB orders = attributedOrdersNewToBrand14d / attributedConversions14d   2. Percentage NTB sales = attributedSalesNewToBrand14d / attributedSales14d   3. Percentage NTB units = attributedUnitsOrderedNewToBrand14d / attributedUnitsOrdered14d   4. NTB order rate = attributedOrdersNewToBrand14 / impressions
     * @type {string}
     * @memberof ReportRequest
     */
    metrics?: string;
}
/**
 * 
 * @export
 * @interface ReportResponse
 */
export interface ReportResponse {
    /**
     * The identifier of the report.
     * @type {string}
     * @memberof ReportResponse
     */
    reportId?: string;
    /**
     * The type of report requested.
     * @type {string}
     * @memberof ReportResponse
     */
    recordType?: ReportResponseRecordTypeEnum;
    /**
     * The build status of the report.
     * @type {string}
     * @memberof ReportResponse
     */
    status?: ReportResponseStatusEnum;
    /**
     * A human-readable description of the current status.
     * @type {string}
     * @memberof ReportResponse
     */
    statusDetails?: string;
    /**
     * The URI location of the report.
     * @type {string}
     * @memberof ReportResponse
     */
    location?: string;
    /**
     * The size of the report file, in bytes.
     * @type {number}
     * @memberof ReportResponse
     */
    fileSize?: number;
    /**
     * Epoch date of the expiration of the URI in the `location` property.
     * @type {number}
     * @memberof ReportResponse
     */
    expiration?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ReportResponseRecordTypeEnum {
    Campaign = 'CAMPAIGN',
    AdGroup = 'AD_GROUP',
    ProductAd = 'PRODUCT_AD'
}
/**
    * @export
    * @enum {string}
    */
export enum ReportResponseStatusEnum {
    InProgress = 'IN_PROGRESS',
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * 
 * @export
 * @interface ResolvedLocationExpression
 */
export interface ResolvedLocationExpression {
    /**
     * 
     * @type {LocationPredicate}
     * @memberof ResolvedLocationExpression
     */
    type?: LocationPredicate;
    /**
     * The human-readable location name.
     * @type {string}
     * @memberof ResolvedLocationExpression
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface RuleBasedBudget
 */
export interface RuleBasedBudget {
    /**
     * 
     * @type {boolean}
     * @memberof RuleBasedBudget
     */
    isProcessing?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RuleBasedBudget
     */
    applicableRuleName?: string;
    /**
     * 
     * @type {number}
     * @memberof RuleBasedBudget
     */
    value?: number;
    /**
     * 
     * @type {string}
     * @memberof RuleBasedBudget
     */
    applicableRuleId?: string;
}
/**
 * A rule condition that defines the advertiser\'s intent for the outcome of the rule. Certain actions are performed by the product to achieve and maintain the rule condition.
 * @export
 * @interface RuleCondition
 */
export interface RuleCondition {
    /**
     * The name of the metric. Supported rule metrics and corresponding supported comparisonOperators: |      MetricName      |ComparisonOperator  |Description| |------------------|--------------------|-------------------| |COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS     |              LESS_THAN_OR_EQUAL_TO             |Maximize viewable impressions while cost per 1000 views less than or equal to `threshold`| |COST_PER_ORDER    |              LESS_THAN_OR_EQUAL_TO            |Maximize viewable impressions/page visits/conversion while cost per order less than or equal to `threshold`| |COST_PER_CLICK    |              LESS_THAN_OR_EQUAL_TO            |Maximize page visits while cost per click less than or equal to `threshold`|
     * @type {string}
     * @memberof RuleCondition
     */
    metricName: RuleConditionMetricNameEnum;
    /**
     * The comparison operator.
     * @type {string}
     * @memberof RuleCondition
     */
    comparisonOperator: RuleConditionComparisonOperatorEnum;
    /**
     * The value of the threshold associated with the metric. The threshold values has defined minimums depending on the metric names in the following table: |                  MetricName            | Minimum of `threshold` Value  | |----------------------------------------|-----------------------------------| |COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS  | 1                                 | |COST_PER_ORDER                          | 3                                 | |COST_PER_CLICK                          | 0.5                               |
     * @type {number}
     * @memberof RuleCondition
     */
    threshold: number;
}

/**
    * @export
    * @enum {string}
    */
export enum RuleConditionMetricNameEnum {
    ThousandViewableImpressions = 'COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS',
    Order = 'COST_PER_ORDER',
    Click = 'COST_PER_CLICK'
}
/**
    * @export
    * @enum {string}
    */
export enum RuleConditionComparisonOperatorEnum {
    LessThanOrEqualTo = 'LESS_THAN_OR_EQUAL_TO'
}

/**
 * 
 * @export
 * @interface RuleDuration
 */
export interface RuleDuration {
    /**
     * 
     * @type {EventTypeRuleDuration}
     * @memberof RuleDuration
     */
    eventTypeRuleDuration?: EventTypeRuleDuration;
    /**
     * 
     * @type {DateRangeTypeRuleDuration}
     * @memberof RuleDuration
     */
    dateRangeTypeRuleDuration?: DateRangeTypeRuleDuration;
}
/**
 * An audience category determines the goal of the audience such as In-market, Interest, Lifestyle and Life Event
 * @export
 * @enum {string}
 */

export enum SDAudienceCategory {
    InMarket = 'In-market',
    Lifestyle = 'Lifestyle',
    Interest = 'Interest',
    LifeEvent = 'Life event'
}

/**
 * List of recommended standard Amazon audience targets of a specific audience category
 * @export
 * @interface SDAudienceCategoryRecommendations
 */
export interface SDAudienceCategoryRecommendations {
    /**
     * 
     * @type {SDAudienceCategory}
     * @memberof SDAudienceCategoryRecommendations
     */
    category?: SDAudienceCategory;
    /**
     * List of recommended standard Amazon audience targets
     * @type {Array<SDAudienceRecommendation>}
     * @memberof SDAudienceCategoryRecommendations
     */
    audiences?: Array<SDAudienceRecommendation>;
}
/**
 * A recommended standard Amazon audience to target ads on
 * @export
 * @interface SDAudienceRecommendation
 */
export interface SDAudienceRecommendation {
    /**
     * The audience identifier
     * @type {string}
     * @memberof SDAudienceRecommendation
     */
    audience?: string;
    /**
     * The Amazon audience name
     * @type {string}
     * @memberof SDAudienceRecommendation
     */
    name?: string;
    /**
     * A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
     * @type {number}
     * @memberof SDAudienceRecommendation
     */
    rank?: number;
}
/**
 * 
 * @export
 * @interface SDAudienceRecommendations
 */
export interface SDAudienceRecommendations {
    /**
     * List of recommended audience targets, broken down by audience category
     * @type {Array<SDAudienceCategoryRecommendations>}
     * @memberof SDAudienceRecommendations
     */
    audiences?: Array<SDAudienceCategoryRecommendations>;
}
/**
 * Determines what the recommended bids will be optimized for.  |Name|CostType|Description| |----|--------|-----------| |reach|vcpm|Optimize for viewable impressions. $1 is the minimum bid for vCPM.| |clicks|cpc|Optimize for page visits| |conversions|cpc|Optimize for conversion| |leads |cpc| [PREVIEW ONLY] Optimize for lead generation.|
 * @export
 * @enum {string}
 */

export enum SDBidOptimizationV32 {
    Clicks = 'clicks',
    Conversions = 'conversions',
    Reach = 'reach'
}

/**
 * A recommended bid range to use for a target.
 * @export
 * @interface SDBidRecommendationV31
 */
export interface SDBidRecommendationV31 {
    /**
     * The lowest recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDBidRecommendationV31
     */
    rangeLower: number;
    /**
     * The highest recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDBidRecommendationV31
     */
    rangeUpper: number;
    /**
     * The recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDBidRecommendationV31
     */
    recommended: number;
}
/**
 * 
 * @export
 * @interface SDBudgetHistory
 */
export interface SDBudgetHistory {
    /**
     * 
     * @type {Array<SDRuleBasedBudget>}
     * @memberof SDBudgetHistory
     */
    history?: Array<SDRuleBasedBudget>;
}
/**
 * 
 * @export
 * @interface SDBudgetRule
 */
export interface SDBudgetRule {
    /**
     * 
     * @type {State}
     * @memberof SDBudgetRule
     */
    ruleState?: State;
    /**
     * Epoch time of budget rule update. Read-only.
     * @type {number}
     * @memberof SDBudgetRule
     */
    lastUpdatedDate?: number;
    /**
     * Epoch time of budget rule creation. Read-only.
     * @type {number}
     * @memberof SDBudgetRule
     */
    createdDate?: number;
    /**
     * 
     * @type {SDBudgetRuleDetails}
     * @memberof SDBudgetRule
     */
    ruleDetails?: SDBudgetRuleDetails;
    /**
     * The budget rule identifier.
     * @type {string}
     * @memberof SDBudgetRule
     */
    ruleId: string;
    /**
     * The budget rule status. Read-only.
     * @type {string}
     * @memberof SDBudgetRule
     */
    ruleStatus?: string;
}
/**
 * Object representing details of a budget rule for SD campaign
 * @export
 * @interface SDBudgetRuleDetails
 */
export interface SDBudgetRuleDetails {
    /**
     * 
     * @type {RuleDuration}
     * @memberof SDBudgetRuleDetails
     */
    duration?: RuleDuration;
    /**
     * 
     * @type {Recurrence}
     * @memberof SDBudgetRuleDetails
     */
    recurrence?: Recurrence;
    /**
     * 
     * @type {SDRuleType}
     * @memberof SDBudgetRuleDetails
     */
    ruleType?: SDRuleType;
    /**
     * 
     * @type {BudgetIncreaseBy}
     * @memberof SDBudgetRuleDetails
     */
    budgetIncreaseBy?: BudgetIncreaseBy;
    /**
     * The budget rule name. Required to be unique within a campaign.
     * @type {string}
     * @memberof SDBudgetRuleDetails
     */
    name?: string;
    /**
     * 
     * @type {PerformanceMeasureCondition}
     * @memberof SDBudgetRuleDetails
     */
    performanceMeasureCondition?: PerformanceMeasureCondition;
}
/**
 * A recommended category to target ads on
 * @export
 * @interface SDCategoryRecommendation
 */
export interface SDCategoryRecommendation {
    /**
     * The category identifier
     * @type {number}
     * @memberof SDCategoryRecommendation
     */
    category?: number;
    /**
     * The category name
     * @type {string}
     * @memberof SDCategoryRecommendation
     */
    name?: string;
    /**
     * The path of the category within the category catalogue.
     * @type {Array<string>}
     * @memberof SDCategoryRecommendation
     */
    path?: Array<string>;
    /**
     * 
     * @type {SDCategoryRecommendationTargetableAsinCountRange}
     * @memberof SDCategoryRecommendation
     */
    targetableAsinCountRange?: SDCategoryRecommendationTargetableAsinCountRange;
    /**
     * A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
     * @type {number}
     * @memberof SDCategoryRecommendation
     */
    rank?: number;
}
/**
 * The range of ASINs available within the category catalogue. If no targetable ASIN counts are available then the targetableAsinCountRange value will be null without any properties.
 * @export
 * @interface SDCategoryRecommendationTargetableAsinCountRange
 */
export interface SDCategoryRecommendationTargetableAsinCountRange {
    /**
     * 
     * @type {number}
     * @memberof SDCategoryRecommendationTargetableAsinCountRange
     */
    rangeLower?: number;
    /**
     * 
     * @type {number}
     * @memberof SDCategoryRecommendationTargetableAsinCountRange
     */
    rangeUpper?: number;
}
/**
 * A recommended category to target ads on
 * @export
 * @interface SDCategoryRecommendationV33
 */
export interface SDCategoryRecommendationV33 {
    /**
     * The category identifier
     * @type {number}
     * @memberof SDCategoryRecommendationV33
     */
    category?: number;
    /**
     * The category name
     * @type {string}
     * @memberof SDCategoryRecommendationV33
     */
    name?: string;
    /**
     * The translated category name by requested locale, field will not be provided if locale is not provided or campaign localization service is down.
     * @type {string}
     * @memberof SDCategoryRecommendationV33
     */
    translatedName?: string;
    /**
     * The path of the category within the category catalogue.
     * @type {Array<string>}
     * @memberof SDCategoryRecommendationV33
     */
    path?: Array<string>;
    /**
     * The translated path of the category within the category catalogue by requested locale, field will not be provided if locale is not provided or campaign localization is down.
     * @type {Array<string>}
     * @memberof SDCategoryRecommendationV33
     */
    translatedPath?: Array<string>;
    /**
     * 
     * @type {SDCategoryRecommendationV33TargetableAsinCountRange}
     * @memberof SDCategoryRecommendationV33
     */
    targetableAsinCountRange?: SDCategoryRecommendationV33TargetableAsinCountRange;
    /**
     * A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation.
     * @type {number}
     * @memberof SDCategoryRecommendationV33
     */
    rank?: number;
}
/**
 * The range of ASINs available within the category catalogue.
 * @export
 * @interface SDCategoryRecommendationV33TargetableAsinCountRange
 */
export interface SDCategoryRecommendationV33TargetableAsinCountRange {
    /**
     * 
     * @type {number}
     * @memberof SDCategoryRecommendationV33TargetableAsinCountRange
     */
    rangeLower?: number;
    /**
     * 
     * @type {number}
     * @memberof SDCategoryRecommendationV33TargetableAsinCountRange
     */
    rangeUpper?: number;
}
/**
 * 
 * @export
 * @interface SDCategoryRecommendations
 */
export interface SDCategoryRecommendations {
    /**
     * List of recommended category targets
     * @type {Array<SDCategoryRecommendation>}
     * @memberof SDCategoryRecommendations
     */
    categories?: Array<SDCategoryRecommendation>;
}
/**
 * 
 * @export
 * @interface SDCategoryRecommendationsV33
 */
export interface SDCategoryRecommendationsV33 {
    /**
     * List of recommended category targets.
     * @type {Array<SDCategoryRecommendationV33>}
     * @memberof SDCategoryRecommendationsV33
     */
    categories?: Array<SDCategoryRecommendationV33>;
}
/**
 * Determines what performance metric the bid recommendations will be optimized for. |Name|Description| |----|----------|-----------| |cpc|The bid recommendations will be optimized for clicks triggered by the ad.| |vcpm|The bid recommendations will be optimized for viewed impressions triggered by the ad. $1 is the minimum bid for vCPM.|
 * @export
 * @enum {string}
 */

export enum SDCostTypeV31 {
    Cpc = 'cpc',
    Vcpm = 'vcpm'
}

/**
 * 
 * @export
 * @interface SDErrorResponse
 */
export interface SDErrorResponse {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof SDErrorResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof SDErrorResponse
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface SDForecastErrorResponse
 */
export interface SDForecastErrorResponse {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof SDForecastErrorResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof SDForecastErrorResponse
     */
    details?: string;
}
/**
 * Request payload for SD forecasting. Below are required and optional fields. Fields not listed will not impact forecast results. |Field              |Object            |Required| |-------------------|------------------|--------| |startDate          |Campaign          |required| |endDate            |Campaign          |optional| |bidOptimization    |AdGroup           |required| |defaultBid         |AdGroup           |optional| |asin               |ProductAds        |required for vendors| |sku                |ProductAds        |required for sellers| |bid                |TargetingClauses  |required when defaultBid is not set| |expression         |TargetingClauses  |required|
 * @export
 * @interface SDForecastRequest
 */
export interface SDForecastRequest {
    /**
     * 
     * @type {Campaign}
     * @memberof SDForecastRequest
     */
    campaign: Campaign;
    /**
     * 
     * @type {AdGroup}
     * @memberof SDForecastRequest
     */
    adGroup: AdGroup;
    /**
     * 
     * @type {Array<ProductAd>}
     * @memberof SDForecastRequest
     */
    productAds: Array<ProductAd>;
    /**
     * A list of SD targeting clauses.
     * @type {Array<TargetingClause>}
     * @memberof SDForecastRequest
     */
    targetingClauses: Array<TargetingClause>;
    /**
     * A list of SD negative targeting clauses.
     * @type {Array<NegativeTargetingClause>}
     * @memberof SDForecastRequest
     */
    negativeTargetingClauses?: Array<NegativeTargetingClause>;
}
/**
 * Response to a request for SD forecasting.
 * @export
 * @interface SDForecastResponse
 */
export interface SDForecastResponse {
    /**
     * 
     * @type {string}
     * @memberof SDForecastResponse
     */
    bidOptimization?: string;
    /**
     * Forecasts for campaign start date and end date. Default end date is start date plus 7 days.
     * @type {Array<Forecast>}
     * @memberof SDForecastResponse
     */
    lifetimeForecasts?: Array<Forecast>;
    /**
     * Weekly average forecasts.
     * @type {Array<Forecast>}
     * @memberof SDForecastResponse
     */
    weeklyForecasts?: Array<Forecast>;
    /**
     * Daily average forecasts.
     * @type {Array<Forecast>}
     * @memberof SDForecastResponse
     */
    dailyForecasts?: Array<Forecast>;
}
/**
 * A product an advertisers wants to advertise. Recommendations will be made for specified goal products.
 * @export
 * @interface SDGoalProduct
 */
export interface SDGoalProduct {
    /**
     * Amazon Standard Identification Number
     * @type {string}
     * @memberof SDGoalProduct
     */
    asin: string;
}
/**
 * A recommended product to target ads on
 * @export
 * @interface SDProductRecommendation
 */
export interface SDProductRecommendation {
    /**
     * Amazon Standard Identification Number
     * @type {string}
     * @memberof SDProductRecommendation
     */
    asin?: string;
    /**
     * A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
     * @type {number}
     * @memberof SDProductRecommendation
     */
    rank?: number;
}
/**
 * A recommended product to target ads on
 * @export
 * @interface SDProductRecommendationV32
 */
export interface SDProductRecommendationV32 {
    /**
     * Amazon Standard Identification Number
     * @type {string}
     * @memberof SDProductRecommendationV32
     */
    asin?: string;
    /**
     * A rank to signify which recommendations are weighed more heavily, with a lower rank signifying a stronger recommendation
     * @type {number}
     * @memberof SDProductRecommendationV32
     */
    rank?: number;
    /**
     * The top advertised products this recommendation is made for.
     * @type {Array<string>}
     * @memberof SDProductRecommendationV32
     */
    advertisedAsins?: Array<string>;
}
/**
 * 
 * @export
 * @interface SDProductRecommendationsV31
 */
export interface SDProductRecommendationsV31 {
    /**
     * List of recommended product targets
     * @type {Array<SDProductRecommendation>}
     * @memberof SDProductRecommendationsV31
     */
    products?: Array<SDProductRecommendation>;
}
/**
 * 
 * @export
 * @interface SDProductRecommendationsV32
 */
export interface SDProductRecommendationsV32 {
    /**
     * List of recommended product targets
     * @type {Array<SDProductRecommendationV32>}
     * @memberof SDProductRecommendationsV32
     */
    products?: Array<SDProductRecommendationV32>;
}
/**
 * Recommendation results for contextual targeting.
 * @export
 * @interface SDProductTargetingRecommendationsSuccess
 */
export interface SDProductTargetingRecommendationsSuccess {
    /**
     * HTTP status code 200 indicating a successful response for product recomendations.
     * @type {string}
     * @memberof SDProductTargetingRecommendationsSuccess
     */
    code?: string;
    /**
     * The theme name specified in the request.
     * @type {string}
     * @memberof SDProductTargetingRecommendationsSuccess
     */
    name?: string;
    /**
     * A list of recommended products.
     * @type {Array<SDProductRecommendationV32>}
     * @memberof SDProductTargetingRecommendationsSuccess
     */
    recommendations?: Array<SDProductRecommendationV32>;
}
/**
 * Contextual targeting theme definitions.
 * @export
 * @interface SDProductTargetingTheme
 */
export interface SDProductTargetingTheme {
    /**
     * This is the meaningful theme name which will be used as a unique identifier across various themes in the same request. This identifier will also be used to map the recommendations back to the theme in the response body. Note: the value for this field cannot be \"default\" as that\'s a reserved keyword in the system.
     * @type {string}
     * @memberof SDProductTargetingTheme
     */
    name: string;
    /**
     * A list of expressions defining the contextual targeting theme. The list will define an AND operator on different expressions. For example, asinPriceGreaterThan and asinReviewRatingLessThan can be used to request product recommendations which are both with greater price and less review rating compared to the goal products. Note: Currently the service only supports one item in the array.
     * @type {Array<SDProductTargetingThemeExpression>}
     * @memberof SDProductTargetingTheme
     */
    expression: Array<SDProductTargetingThemeExpression>;
}
/**
 * The expression used to define the contextual targeting theme.
 * @export
 * @interface SDProductTargetingThemeExpression
 */
export interface SDProductTargetingThemeExpression {
    /**
     * The contextual targeting grammar used to define the targeting theme. Note asinAsBestSeller is currently not supported.
     * @type {string}
     * @memberof SDProductTargetingThemeExpression
     */
    type: SDProductTargetingThemeExpressionTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SDProductTargetingThemeExpressionTypeEnum {
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinGlanceViewsGreaterThan = 'asinGlanceViewsGreaterThan',
    AsinBrandSameAs = 'asinBrandSameAs'
}

/**
 * Signifies a type of recommendation
 * @export
 * @enum {string}
 */

export enum SDRecommendationType {
    Product = 'PRODUCT'
}

/**
 * Signifies a type of recommendation
 * @export
 * @enum {string}
 */

export enum SDRecommendationTypeV31 {
    Product = 'PRODUCT',
    Category = 'CATEGORY'
}

/**
 * Signifies a type of recommendation. PRODUCT and CATEGORY are supported by tactic T00020. CATEGORY and AUDIENCE are supported by tactic T00030.
 * @export
 * @enum {string}
 */

export enum SDRecommendationTypeV32 {
    Product = 'PRODUCT',
    Category = 'CATEGORY',
    Audience = 'AUDIENCE'
}

/**
 * 
 * @export
 * @interface SDRuleBasedBudget
 */
export interface SDRuleBasedBudget {
    /**
     * Epoch time of budget rule execution.
     * @type {number}
     * @memberof SDRuleBasedBudget
     */
    executionTime?: number;
    /**
     * 
     * @type {SDBudgetRule}
     * @memberof SDRuleBasedBudget
     */
    appliedRule?: SDBudgetRule;
    /**
     * The budget value.
     * @type {number}
     * @memberof SDRuleBasedBudget
     */
    ruleBasedBudgetValue?: number;
    /**
     * The daily budget value.
     * @type {number}
     * @memberof SDRuleBasedBudget
     */
    dailyBudgetValue?: number;
    /**
     * 
     * @type {PerformanceMetricValue}
     * @memberof SDRuleBasedBudget
     */
    performanceMetric?: PerformanceMetricValue;
}
/**
 * The type of budget rule. SCHEDULE: A budget rule based on a start and end date. PERFORMANCE: A budget rule based on advertising performance criteria.
 * @export
 * @enum {string}
 */

export enum SDRuleType {
    Schedule = 'SCHEDULE',
    Performance = 'PERFORMANCE'
}

/**
 * The advertising tactic associated with the campaign. The following table lists available tactic names: |Tactic Name|Type|Description|         |-----------|-----|-----------|         |T00020 &nbsp;    |Products&nbsp;| Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.
 * @export
 * @enum {string}
 */

export enum SDTactic {
    T00020 = 'T00020'
}

/**
 * The advertising tactic associated with the campaign. The following table lists available tactic names: |Tactic Name|Type|Description|         |-----------|-----|-----------|         |T00020 &nbsp;    |Products&nbsp;| Products: Choose individual products to show your ads in placements related to those products.<br>Categories: Choose individual categories to show your ads in placements related to those categories.|         |T00030&nbsp;|Audiences &nbsp;|Select individual audiences to show your ads.|
 * @export
 * @enum {string}
 */

export enum SDTacticV31 {
    T00020 = 'T00020',
    T00030 = 'T00030'
}

/**
 * @type SDTargetExpressionV31
 * @export
 */
export type SDTargetExpressionV31 = SDTargetingPredicateNestedV31 | SDTargetingPredicateV31;

/**
 * Request for targeting bid recommendations.
 * @export
 * @interface SDTargetingBidRecommendationsRequestV31
 */
export interface SDTargetingBidRecommendationsRequestV31 {
    /**
     * A list of products to tailor bid recommendations for category and audience based targeting clauses.
     * @type {Array<SDGoalProduct>}
     * @memberof SDTargetingBidRecommendationsRequestV31
     */
    products?: Array<SDGoalProduct>;
    /**
     * A list of targeting clauses to receive bid recommendations for.
     * @type {Array<SDTargetingBidRecommendationsRequestV31TargetingClauses>}
     * @memberof SDTargetingBidRecommendationsRequestV31
     */
    targetingClauses: Array<SDTargetingBidRecommendationsRequestV31TargetingClauses>;
}
/**
 * 
 * @export
 * @interface SDTargetingBidRecommendationsRequestV31TargetingClauses
 */
export interface SDTargetingBidRecommendationsRequestV31TargetingClauses {
    /**
     * 
     * @type {SDTargetingClauseV31}
     * @memberof SDTargetingBidRecommendationsRequestV31TargetingClauses
     */
    targetingClause: SDTargetingClauseV31;
}
/**
 * Request for targeting bid recommendations.
 * @export
 * @interface SDTargetingBidRecommendationsRequestV32
 */
export interface SDTargetingBidRecommendationsRequestV32 {
    /**
     * A list of products to tailor bid recommendations for category and audience based targeting clauses.
     * @type {Array<SDGoalProduct>}
     * @memberof SDTargetingBidRecommendationsRequestV32
     */
    products?: Array<SDGoalProduct>;
    /**
     * 
     * @type {SDBidOptimizationV32}
     * @memberof SDTargetingBidRecommendationsRequestV32
     */
    bidOptimization: SDBidOptimizationV32;
    /**
     * 
     * @type {SDCostTypeV31}
     * @memberof SDTargetingBidRecommendationsRequestV32
     */
    costType: SDCostTypeV31;
    /**
     * A list of targeting clauses to receive bid recommendations for.
     * @type {Array<SDTargetingBidRecommendationsRequestV31TargetingClauses>}
     * @memberof SDTargetingBidRecommendationsRequestV32
     */
    targetingClauses: Array<SDTargetingBidRecommendationsRequestV31TargetingClauses>;
}
/**
 * Failed bid recommendation response.
 * @export
 * @interface SDTargetingBidRecommendationsResponseItemFailureV31
 */
export interface SDTargetingBidRecommendationsResponseItemFailureV31 {
    /**
     * The HTTP status code of this item.
     * @type {string}
     * @memberof SDTargetingBidRecommendationsResponseItemFailureV31
     */
    code: string;
    /**
     * A human-readable description of this item on error.
     * @type {string}
     * @memberof SDTargetingBidRecommendationsResponseItemFailureV31
     */
    details: string;
}
/**
 * A recommended bid range to use for a target.
 * @export
 * @interface SDTargetingBidRecommendationsResponseItemSuccessV31
 */
export interface SDTargetingBidRecommendationsResponseItemSuccessV31 {
    /**
     * The HTTP status code of this item.
     * @type {string}
     * @memberof SDTargetingBidRecommendationsResponseItemSuccessV31
     */
    code: string;
    /**
     * The lowest recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDTargetingBidRecommendationsResponseItemSuccessV31
     */
    rangeLower: number;
    /**
     * The highest recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDTargetingBidRecommendationsResponseItemSuccessV31
     */
    rangeUpper: number;
    /**
     * The recommended bid to use to win an ad placement for this target.
     * @type {number}
     * @memberof SDTargetingBidRecommendationsResponseItemSuccessV31
     */
    recommended: number;
}
/**
 * Success response for corresponding targeting clause on the request.
 * @export
 * @interface SDTargetingBidRecommendationsResponseItemSuccessV31AllOf
 */
export interface SDTargetingBidRecommendationsResponseItemSuccessV31AllOf {
    /**
     * The HTTP status code of this item.
     * @type {string}
     * @memberof SDTargetingBidRecommendationsResponseItemSuccessV31AllOf
     */
    code?: string;
}
/**
 * Response to a request for targeting bid recommendations.
 * @export
 * @interface SDTargetingBidRecommendationsResponseV31
 */
export interface SDTargetingBidRecommendationsResponseV31 {
    /**
     * 
     * @type {SDCostTypeV31}
     * @memberof SDTargetingBidRecommendationsResponseV31
     */
    costType: SDCostTypeV31;
    /**
     * 
     * @type {Array<SDTargetingBidRecommendationsResponseItemSuccessV31 | SDTargetingBidRecommendationsResponseItemFailureV31>}
     * @memberof SDTargetingBidRecommendationsResponseV31
     */
    bidRecommendations: Array<SDTargetingBidRecommendationsResponseItemSuccessV31 | SDTargetingBidRecommendationsResponseItemFailureV31>;
}
/**
 * Response to a request for targeting bid recommendations.
 * @export
 * @interface SDTargetingBidRecommendationsResponseV32
 */
export interface SDTargetingBidRecommendationsResponseV32 {
    /**
     * 
     * @type {SDBidOptimizationV32}
     * @memberof SDTargetingBidRecommendationsResponseV32
     */
    bidOptimization: SDBidOptimizationV32;
    /**
     * 
     * @type {SDCostTypeV31}
     * @memberof SDTargetingBidRecommendationsResponseV32
     */
    costType: SDCostTypeV31;
    /**
     * 
     * @type {Array<SDTargetingBidRecommendationsResponseItemSuccessV31 | SDTargetingBidRecommendationsResponseItemFailureV31>}
     * @memberof SDTargetingBidRecommendationsResponseV32
     */
    bidRecommendations: Array<SDTargetingBidRecommendationsResponseItemSuccessV31 | SDTargetingBidRecommendationsResponseItemFailureV31>;
}
/**
 * The targeting clause
 * @export
 * @interface SDTargetingClauseV31
 */
export interface SDTargetingClauseV31 {
    /**
     * Tactic T00020 ad groups only allow manual targeting.
     * @type {string}
     * @memberof SDTargetingClauseV31
     */
    expressionType: SDTargetingClauseV31ExpressionTypeEnum;
    /**
     * The targeting expression to match against.  ------- Applicable to contextual targeting (T00020) ------- * A \'TargetingExpression\' in a contextual targeting campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to audience targeting (T00030) ------- * A \'TargetingExpression\' in an audience campaign can only contain \'TargetingPredicateNested\' components.
     * @type {Array<SDTargetExpressionV31>}
     * @memberof SDTargetingClauseV31
     */
    expression: Array<SDTargetExpressionV31>;
}

/**
    * @export
    * @enum {string}
    */
export enum SDTargetingClauseV31ExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * A predicate to match against inside the TargetingPredicateNested component (only applicable to audience targeting - T00030).  * All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system. * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the \'between\' strings to construct a targeting expression the format of the string is \'double-double\' where the first double must be smaller than the second double. Prices are not inclusive. * The exactProduct, similarProduct, relatedProduct, and negative types do not utilize the value field. * The only type currently applicable to Amazon Audiences targeting is \'audienceSameAs\'.
 * @export
 * @interface SDTargetingPredicateBaseV31
 */
export interface SDTargetingPredicateBaseV31 {
    /**
     * 
     * @type {string}
     * @memberof SDTargetingPredicateBaseV31
     */
    type: SDTargetingPredicateBaseV31TypeEnum;
    /**
     * The value to be targeted.
     * @type {string}
     * @memberof SDTargetingPredicateBaseV31
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SDTargetingPredicateBaseV31TypeEnum {
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    SimilarProduct = 'similarProduct',
    RelatedProduct = 'relatedProduct',
    ExactProduct = 'exactProduct',
    AsinIsPrimeShippingEligible = 'asinIsPrimeShippingEligible',
    AsinAgeRangeSameAs = 'asinAgeRangeSameAs',
    AsinGenreSameAs = 'asinGenreSameAs',
    AudienceSameAs = 'audienceSameAs',
    Lookback = 'lookback'
}

/**
 * A behavioral event and list of targeting predicates that represents an audience to target (only applicable to audience targeting - T00030).  * For manual ASIN-grain targeting, the value array must contain only, \'exactProduct\', \'similarProduct\', \'relatedProduct\' and \'lookback\' TargetingPredicateBase components. The \'lookback\' is mandatory and the value should be set to \'7\', \'14\', \'30\', \'60\', \'90\', \'180\' or \'365\'. * For manual Category-grain targeting, the value array must contain a \'lookback\' and \'asinCategorySameAs\' TargetingPredicateBase component, which can be further refined with optional brand, price, star-rating and shipping eligibility refinements. The \'lookback\' is mandatory and the value should be set to \'7\', \'14\', \'30\', \'60\', \'90\', \'180\' or \'365\'. * For manual Category-grain targeting, the value array must contain a \'lookback\' and \'asinCategorySameAs\' TargetingPredicateBase component, which can be further refined with optional brand, price, star-rating and shipping eligibility refinements. * For Amazon Audiences targeting, the TargetingPredicateNested type should be set to \'audience\' and the value array should include one TargetingPredicateBase component with type set to \'audienceSameAs\'.
 * @export
 * @interface SDTargetingPredicateNestedV31
 */
export interface SDTargetingPredicateNestedV31 {
    /**
     * 
     * @type {string}
     * @memberof SDTargetingPredicateNestedV31
     */
    type: SDTargetingPredicateNestedV31TypeEnum;
    /**
     * 
     * @type {Array<SDTargetingPredicateBaseV31>}
     * @memberof SDTargetingPredicateNestedV31
     */
    value: Array<SDTargetingPredicateBaseV31>;
}

/**
    * @export
    * @enum {string}
    */
export enum SDTargetingPredicateNestedV31TypeEnum {
    Views = 'views',
    Audience = 'audience',
    Purchases = 'purchases'
}

/**
 * A predicate to match against in the Targeting Expression (only applicable to contextual targeting - T00020).  * All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system. * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the \'between\' strings to construct a targeting expression the format of the string is \'double-double\' where the first double must be smaller than the second double. Prices are not inclusive.
 * @export
 * @interface SDTargetingPredicateV31
 */
export interface SDTargetingPredicateV31 {
    /**
     * 
     * @type {string}
     * @memberof SDTargetingPredicateV31
     */
    type: SDTargetingPredicateV31TypeEnum;
    /**
     * The value to be targeted.
     * @type {string}
     * @memberof SDTargetingPredicateV31
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SDTargetingPredicateV31TypeEnum {
    AsinSameAs = 'asinSameAs',
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    AsinIsPrimeShippingEligible = 'asinIsPrimeShippingEligible',
    AsinAgeRangeSameAs = 'asinAgeRangeSameAs',
    AsinGenreSameAs = 'asinGenreSameAs'
}

/**
 * A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.
 * @export
 * @interface SDTargetingRecommendations
 */
export interface SDTargetingRecommendations {
    /**
     * List of recommended product targets
     * @type {Array<SDProductRecommendation>}
     * @memberof SDTargetingRecommendations
     */
    products?: Array<SDProductRecommendation>;
}
/**
 * A targeting recommendation failure record.
 * @export
 * @interface SDTargetingRecommendationsFailure
 */
export interface SDTargetingRecommendationsFailure {
    /**
     * HTTP status code indicating a failure response for targeting recomendations.
     * @type {string}
     * @memberof SDTargetingRecommendationsFailure
     */
    code?: string;
    /**
     * The theme name specified in the request. If the themes field is not provided in the request, the value of this field will be set to default.
     * @type {string}
     * @memberof SDTargetingRecommendationsFailure
     */
    name?: string;
    /**
     * A human friendly error message indicating the failure reasons.
     * @type {string}
     * @memberof SDTargetingRecommendationsFailure
     */
    errorMessage?: string;
}
/**
 * List of supported locales.
 * @export
 * @enum {string}
 */

export enum SDTargetingRecommendationsLocale {
    ArAe = 'ar_AE',
    DeDe = 'de_DE',
    EnAe = 'en_AE',
    EnAu = 'en_AU',
    EnCa = 'en_CA',
    EnGb = 'en_GB',
    EnIn = 'en_IN',
    EnSg = 'en_SG',
    EnUs = 'en_US',
    EsEs = 'es_ES',
    EsMx = 'es_MX',
    FrCa = 'fr_CA',
    FrFr = 'fr_FR',
    HiIn = 'hi_IN',
    ItIt = 'it_IT',
    JaJp = 'ja_JP',
    KoKr = 'ko_KR',
    NlNl = 'nl_NL',
    PlPl = 'pl_PL',
    PtBr = 'pt_BR',
    SvSe = 'sv_SE',
    TaIn = 'ta_IN',
    ThTh = 'th_TH',
    TrTr = 'tr_TR',
    ViVn = 'vi_VN',
    ZhCn = 'zh_CN'
}

/**
 * Request for targeting recommendations
 * @export
 * @interface SDTargetingRecommendationsRequest
 */
export interface SDTargetingRecommendationsRequest {
    /**
     * 
     * @type {SDTactic}
     * @memberof SDTargetingRecommendationsRequest
     */
    tactic: SDTactic;
    /**
     * A list of products for which to get targeting recommendations
     * @type {Array<SDGoalProduct>}
     * @memberof SDTargetingRecommendationsRequest
     */
    products: Array<SDGoalProduct>;
    /**
     * A filter to indicate which types of recommendations to request.
     * @type {Array<SDRecommendationType>}
     * @memberof SDTargetingRecommendationsRequest
     */
    typeFilter: Array<SDRecommendationType>;
}
/**
 * Request for targeting recommendations
 * @export
 * @interface SDTargetingRecommendationsRequestV31
 */
export interface SDTargetingRecommendationsRequestV31 {
    /**
     * 
     * @type {SDTacticV31}
     * @memberof SDTargetingRecommendationsRequestV31
     */
    tactic: SDTacticV31;
    /**
     * A list of products for which to get targeting recommendations
     * @type {Array<SDGoalProduct>}
     * @memberof SDTargetingRecommendationsRequestV31
     */
    products: Array<SDGoalProduct>;
    /**
     * A filter to indicate which types of recommendations to request.
     * @type {Array<SDRecommendationTypeV31>}
     * @memberof SDTargetingRecommendationsRequestV31
     */
    typeFilter: Array<SDRecommendationTypeV31>;
}
/**
 * Request for targeting recommendations for API version 3.2.
 * @export
 * @interface SDTargetingRecommendationsRequestV32
 */
export interface SDTargetingRecommendationsRequestV32 {
    /**
     * 
     * @type {SDTacticV31}
     * @memberof SDTargetingRecommendationsRequestV32
     */
    tactic: SDTacticV31;
    /**
     * A list of products for which to get targeting recommendations
     * @type {Array<SDGoalProduct>}
     * @memberof SDTargetingRecommendationsRequestV32
     */
    products: Array<SDGoalProduct>;
    /**
     * A filter to indicate which types of recommendations to request.
     * @type {Array<SDRecommendationTypeV31>}
     * @memberof SDTargetingRecommendationsRequestV32
     */
    typeFilter: Array<SDRecommendationTypeV31>;
    /**
     * 
     * @type {SDTargetingRecommendationsThemes}
     * @memberof SDTargetingRecommendationsRequestV32
     */
    themes?: SDTargetingRecommendationsThemes;
}
/**
 * Request for targeting recommendations for API version 3.3.
 * @export
 * @interface SDTargetingRecommendationsRequestV33
 */
export interface SDTargetingRecommendationsRequestV33 {
    /**
     * 
     * @type {SDTacticV31}
     * @memberof SDTargetingRecommendationsRequestV33
     */
    tactic: SDTacticV31;
    /**
     * A list of products for which to get targeting recommendations
     * @type {Array<SDGoalProduct>}
     * @memberof SDTargetingRecommendationsRequestV33
     */
    products: Array<SDGoalProduct>;
    /**
     * A filter to indicate which types of recommendations to request.
     * @type {Array<SDRecommendationTypeV32>}
     * @memberof SDTargetingRecommendationsRequestV33
     */
    typeFilter: Array<SDRecommendationTypeV32>;
    /**
     * 
     * @type {SDTargetingRecommendationsThemes}
     * @memberof SDTargetingRecommendationsRequestV33
     */
    themes?: SDTargetingRecommendationsThemes;
}
/**
 * Response to a request for targeting recommendations.
 * @export
 * @interface SDTargetingRecommendationsResponse
 */
export interface SDTargetingRecommendationsResponse {
    /**
     * 
     * @type {SDTargetingRecommendations}
     * @memberof SDTargetingRecommendationsResponse
     */
    recommendations?: SDTargetingRecommendations;
}
/**
 * Response to a request for targeting recommendations.
 * @export
 * @interface SDTargetingRecommendationsResponseV31
 */
export interface SDTargetingRecommendationsResponseV31 {
    /**
     * 
     * @type {SDTargetingRecommendationsV31}
     * @memberof SDTargetingRecommendationsResponseV31
     */
    recommendations?: SDTargetingRecommendationsV31;
}
/**
 * Response to a request for targeting recommendations.
 * @export
 * @interface SDTargetingRecommendationsResponseV32
 */
export interface SDTargetingRecommendationsResponseV32 {
    /**
     * 
     * @type {SDTargetingRecommendationsV32}
     * @memberof SDTargetingRecommendationsResponseV32
     */
    recommendations?: SDTargetingRecommendationsV32;
}
/**
 * Response to a request for targeting recommendations.
 * @export
 * @interface SDTargetingRecommendationsResponseV33
 */
export interface SDTargetingRecommendationsResponseV33 {
    /**
     * 
     * @type {SDTargetingRecommendationsV33}
     * @memberof SDTargetingRecommendationsResponseV33
     */
    recommendations?: SDTargetingRecommendationsV33;
}
/**
 * The themes used to refine the recommendations. Currently only contextual targeting themes are supported.
 * @export
 * @interface SDTargetingRecommendationsThemes
 */
export interface SDTargetingRecommendationsThemes {
    /**
     * A list of themes for product targeting recommendations. If this list is empty, the service will return all the current available theme recommendations. Recommendations will be returned for each theme. If specified, each theme should only include unique expressions.
     * @type {Array<SDProductTargetingTheme>}
     * @memberof SDTargetingRecommendationsThemes
     */
    product?: Array<SDProductTargetingTheme>;
}
/**
 * 
 * @export
 * @interface SDTargetingRecommendationsV31
 */
export interface SDTargetingRecommendationsV31 {
    /**
     * List of recommended product targets
     * @type {Array<SDProductRecommendation>}
     * @memberof SDTargetingRecommendationsV31
     */
    products?: Array<SDProductRecommendation>;
    /**
     * List of recommended category targets
     * @type {Array<SDCategoryRecommendation>}
     * @memberof SDTargetingRecommendationsV31
     */
    categories?: Array<SDCategoryRecommendation>;
}
/**
 * For v3.2 the service will continue to return the recommendations returned for v3.1 in products field, and return recommendations for contextual targeting themes in themes field.
 * @export
 * @interface SDTargetingRecommendationsV32
 */
export interface SDTargetingRecommendationsV32 {
    /**
     * List of recommended product targets
     * @type {Array<SDProductRecommendationV32>}
     * @memberof SDTargetingRecommendationsV32
     */
    products?: Array<SDProductRecommendationV32>;
    /**
     * List of recommended category targets
     * @type {Array<SDCategoryRecommendation>}
     * @memberof SDTargetingRecommendationsV32
     */
    categories?: Array<SDCategoryRecommendation>;
    /**
     * 
     * @type {object}
     * @memberof SDTargetingRecommendationsV32
     */
    themes?: object;
}
/**
 * For v3.3 the service will continue to return the recommendations returned for v3.2, and return audience recommendations if requested.
 * @export
 * @interface SDTargetingRecommendationsV33
 */
export interface SDTargetingRecommendationsV33 {
    /**
     * List of recommended product targets
     * @type {Array<SDProductRecommendationV32>}
     * @memberof SDTargetingRecommendationsV33
     */
    products?: Array<SDProductRecommendationV32>;
    /**
     * List of recommended category targets.
     * @type {Array<SDCategoryRecommendationV33>}
     * @memberof SDTargetingRecommendationsV33
     */
    categories?: Array<SDCategoryRecommendationV33>;
    /**
     * List of recommended audience targets, broken down by audience category
     * @type {Array<SDAudienceCategoryRecommendations>}
     * @memberof SDTargetingRecommendationsV33
     */
    audiences?: Array<SDAudienceCategoryRecommendations>;
    /**
     * 
     * @type {object}
     * @memberof SDTargetingRecommendationsV33
     */
    themes?: object;
}
/**
 * 
 * @export
 * @interface SDThemeRecommendations
 */
export interface SDThemeRecommendations {
    /**
     * 
     * @type {object}
     * @memberof SDThemeRecommendations
     */
    themes?: object;
}
/**
 * Optional. A dimension used to further segment certain types of reports.  Note: matchedTarget reports only return targets that have generated at least one click. | Dimension | Report types | Tactics | Metrics | Description | |---------|------------------|-------------|-------------|------------| | matchedTarget | campaigns, adGroups, targets | T00020, T00030 | Existing metrics for each report type are accepted. |  Segments a report based on the ASIN of the product page where the ad appeared.|
 * @export
 * @enum {string}
 */

export enum Segment {
    MatchedTarget = 'matchedTarget'
}

/**
 * 
 * @export
 * @interface SnapshotRequest
 */
export interface SnapshotRequest {
    /**
     * Optional. Restricts results to entities with state within the specified comma-separated list. Default behavior is to include \'enabled\' and \'paused\'. You can include \'enabled\', \'paused\', and \'archived\' or any combination.
     * @type {string}
     * @memberof SnapshotRequest
     */
    stateFilter?: SnapshotRequestStateFilterEnum;
    /**
     * 
     * @type {TacticFilter}
     * @memberof SnapshotRequest
     */
    tacticFilter?: TacticFilter;
}

/**
    * @export
    * @enum {string}
    */
export enum SnapshotRequestStateFilterEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface SnapshotResponse
 */
export interface SnapshotResponse {
    /**
     * The identifier of the snapshot that was requested.
     * @type {string}
     * @memberof SnapshotResponse
     */
    snapshotId?: string;
    /**
     * The record type of the snapshot file.
     * @type {string}
     * @memberof SnapshotResponse
     */
    recordType?: SnapshotResponseRecordTypeEnum;
    /**
     * The status of the generation of the snapshot.
     * @type {string}
     * @memberof SnapshotResponse
     */
    status?: SnapshotResponseStatusEnum;
    /**
     * Optional description of the status.
     * @type {string}
     * @memberof SnapshotResponse
     */
    statusDetails?: string;
    /**
     * The URI for the snapshot. It\'s only available if status is SUCCESS.
     * @type {string}
     * @memberof SnapshotResponse
     */
    location?: string;
    /**
     * The size of the snapshot file in bytes. It\'s only available if status is SUCCESS.
     * @type {number}
     * @memberof SnapshotResponse
     */
    fileSize?: number;
    /**
     * The epoch time for expiration of the snapshot file and each snapshot file will be expired in 30 mins after generated. It\'s only available if status is SUCCESS.
     * @type {number}
     * @memberof SnapshotResponse
     */
    expiration?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum SnapshotResponseRecordTypeEnum {
    Campaigns = 'campaigns',
    Adgroups = 'adgroups',
    ProductAds = 'productAds',
    Targets = 'targets'
}
/**
    * @export
    * @enum {string}
    */
export enum SnapshotResponseStatusEnum {
    InProgress = 'IN_PROGRESS',
    Success = 'SUCCESS',
    Failure = 'FAILURE'
}

/**
 * The budget rule state.
 * @export
 * @enum {string}
 */

export enum State {
    Active = 'ACTIVE',
    Paused = 'PAUSED'
}

/**
 * The advertising tactic associated with the campaign. The following table lists available tactic names: |Tactic Name|Type|Description| |-----------|-----|-----------| |T00020     |Contextual targeting | Choose individual products to show your ads in placements related to those products.<br> Choose individual categories to show your ads in placements related to those categories on and off Amazon.| |T00030     |Audiences targeting | Select individual audiences to show your ads.|
 * @export
 * @enum {string}
 */

export enum Tactic {
    T00020 = 'T00020',
    T00030 = 'T00030'
}

/**
 * Optional. Restricts results to entities with the advertising tactic associated with the campaign. Must be one of the following table lists available tactic names: |Tactic Name|Type|Description| |-----------|-----|-----------| |T00020     |Contextual targeting | Choose individual products to show your ads in placements related to those products.<br> Choose individual categories to show your ads in placements related to those categories on and off Amazon.| |T00030     |Audiences targeting | Select individual audiences to show your ads.|
 * @export
 * @enum {string}
 */

export enum TacticFilter {
    T00020 = 'T00020',
    T00030 = 'T00030',
    T00020T00030 = 'T00020,T00030'
}

/**
 * The advertising tactic associated with the campaign. The following table lists available tactic names: |Tactic Name|Type|Description| |-----------|-----|-----------| |T00020     |Contextual targeting | Choose individual products to show your ads in placements related to those products.<br> Choose individual categories to show your ads in placements related to those categories on and off Amazon.| |T00030     |Audiences targeting | Select individual audiences to show your ads.|
 * @export
 * @enum {string}
 */

export enum TacticReport {
    T00020 = 'T00020',
    T00030 = 'T00030'
}

/**
 * 
 * @export
 * @interface TargetResponse
 */
export interface TargetResponse {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof TargetResponse
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof TargetResponse
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof TargetResponse
     */
    targetId?: number;
}
/**
 * 
 * @export
 * @interface TargetingClause
 */
export interface TargetingClause {
    /**
     * 
     * @type {string}
     * @memberof TargetingClause
     */
    state?: TargetingClauseStateEnum;
    /**
     * The bid will override the adGroup bid if specified. This field is not used for negative targeting clauses. The bid must be less than the maximum allowable bid for the campaign\'s marketplace; for a list of maximum allowable bids, find the [\"Bid constraints by marketplace\" table in our documentation overview](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace). You cannot manually set a bid when the targeting clause\'s adGroup has an enabled optimization rule.
     * @type {number}
     * @memberof TargetingClause
     */
    bid?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TargetingClause
     */
    targetId?: number;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof TargetingClause
     */
    adGroupId?: number;
    /**
     * Tactic T00020 & T00030 ad groups should use \'manual\' targeting.
     * @type {string}
     * @memberof TargetingClause
     */
    expressionType?: TargetingClauseExpressionTypeEnum;
    /**
     * The targeting expression to match against.  ------- Applicable to contextual targeting (T00020) ------- * A \'TargetingExpression\' in a contextual targeting campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to audience targeting (T00030) ------- * A \'TargetingExpression\' in an audience campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify ASIN-grain (\'exactProduct\'), manual ASIN-grain (\'relatedProducts\' or \'relatedProducts\'), or category-grain targeting.
     * @type {Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>}
     * @memberof TargetingClause
     */
    expression?: Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>;
    /**
     * The targeting expression to match against.  ------- Applicable to contextual targeting (T00020) ------- * A \'TargetingExpression\' in a contextual targeting campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to audience targeting (T00030) ------- * A \'TargetingExpression\' in an audience campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify ASIN-grain (\'exactProduct\'), manual ASIN-grain (\'relatedProducts\' or \'relatedProducts\'), or category-grain targeting.
     * @type {Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>}
     * @memberof TargetingClause
     */
    resolvedExpression?: Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum TargetingClauseExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface TargetingClauseAllOf
 */
export interface TargetingClauseAllOf {
    /**
     * 
     * @type {number}
     * @memberof TargetingClauseAllOf
     */
    targetId?: number;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof TargetingClauseAllOf
     */
    adGroupId?: number;
    /**
     * Tactic T00020 & T00030 ad groups should use \'manual\' targeting.
     * @type {string}
     * @memberof TargetingClauseAllOf
     */
    expressionType?: TargetingClauseAllOfExpressionTypeEnum;
    /**
     * The targeting expression to match against.  ------- Applicable to contextual targeting (T00020) ------- * A \'TargetingExpression\' in a contextual targeting campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to audience targeting (T00030) ------- * A \'TargetingExpression\' in an audience campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify ASIN-grain (\'exactProduct\'), manual ASIN-grain (\'relatedProducts\' or \'relatedProducts\'), or category-grain targeting.
     * @type {Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>}
     * @memberof TargetingClauseAllOf
     */
    expression?: Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>;
    /**
     * The targeting expression to match against.  ------- Applicable to contextual targeting (T00020) ------- * A \'TargetingExpression\' in a contextual targeting campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to audience targeting (T00030) ------- * A \'TargetingExpression\' in an audience campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify ASIN-grain (\'exactProduct\'), manual ASIN-grain (\'relatedProducts\' or \'relatedProducts\'), or category-grain targeting.
     * @type {Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>}
     * @memberof TargetingClauseAllOf
     */
    resolvedExpression?: Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingClauseAllOfExpressionTypeEnum {
    Manual = 'manual',
    Auto = 'auto'
}

/**
 * 
 * @export
 * @interface TargetingClauseEx
 */
export interface TargetingClauseEx {
    /**
     * 
     * @type {number}
     * @memberof TargetingClauseEx
     */
    targetId?: number;
    /**
     * 
     * @type {number}
     * @memberof TargetingClauseEx
     */
    adGroupId?: number;
    /**
     * 
     * @type {string}
     * @memberof TargetingClauseEx
     */
    state?: TargetingClauseExStateEnum;
    /**
     * 
     * @type {string}
     * @memberof TargetingClauseEx
     */
    expressionType?: TargetingClauseExExpressionTypeEnum;
    /**
     * If a value for `bid` is specified, it overrides the current adGroup bid. When using vcpm costType. $1 is the minimum bid for vCPM. Note that this field is ignored for negative targeting clauses.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    bid?: number;
    /**
     * The targeting expression to match against.  ------- Applicable to contextual targeting (T00020) ------- * A \'TargetingExpression\' in a contextual targeting campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to audience targeting (T00030) ------- * A \'TargetingExpression\' in an audience campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify ASIN-grain (\'exactProduct\'), manual ASIN-grain (\'relatedProducts\' or \'relatedProducts\'), or category-grain targeting.
     * @type {Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>}
     * @memberof TargetingClauseEx
     */
    expression?: Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>;
    /**
     * The targeting expression to match against.  ------- Applicable to contextual targeting (T00020) ------- * A \'TargetingExpression\' in a contextual targeting campaign can only contain \'TargetingPredicate\' components. * Expressions must specify either a category predicate or an ASIN predicate, but never both. * Only one category may be specified per targeting expression. * Only one brand may be specified per targeting expression. * Only one asin may be specified per targeting expression. * To exclude a brand from a targeting expression you must create a negative targeting expression in the same ad group as the positive targeting expression.  ------- Applicable to audience targeting (T00030) ------- * A \'TargetingExpression\' in an audience campaign can only contain \'TargetingPredicateNested\' components. * Expressions must specify ASIN-grain (\'exactProduct\'), manual ASIN-grain (\'relatedProducts\' or \'relatedProducts\'), or category-grain targeting.
     * @type {Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>}
     * @memberof TargetingClauseEx
     */
    resolvedExpression?: Array<TargetingPredicate | TargetingPredicateLegacy | TargetingPredicateNested>;
    /**
     * The status of the target.
     * @type {string}
     * @memberof TargetingClauseEx
     */
    servingStatus?: TargetingClauseExServingStatusEnum;
    /**
     * Epoch date the target was created.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    creationDate?: number;
    /**
     * Epoch date of the last update to any property associated with the target.
     * @type {number}
     * @memberof TargetingClauseEx
     */
    lastUpdatedDate?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingClauseExStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}
/**
    * @export
    * @enum {string}
    */
export enum TargetingClauseExExpressionTypeEnum {
    Auto = 'auto',
    Manual = 'manual'
}
/**
    * @export
    * @enum {string}
    */
export enum TargetingClauseExServingStatusEnum {
    AdvertiserStatusEnabled = 'ADVERTISER_STATUS_ENABLED',
    StatusUnavailable = 'STATUS_UNAVAILABLE',
    AdvertiserPaused = 'ADVERTISER_PAUSED',
    AccountOutOfBudget = 'ACCOUNT_OUT_OF_BUDGET',
    AdvertiserPaymentFailure = 'ADVERTISER_PAYMENT_FAILURE',
    CampaignPaused = 'CAMPAIGN_PAUSED',
    CampaignArchived = 'CAMPAIGN_ARCHIVED',
    PendingStartDate = 'PENDING_START_DATE',
    Ended = 'ENDED',
    CampaignOutOfBudget = 'CAMPAIGN_OUT_OF_BUDGET',
    AdGroupStatusEnabled = 'AD_GROUP_STATUS_ENABLED',
    AdGroupPaused = 'AD_GROUP_PAUSED',
    AdGroupArchived = 'AD_GROUP_ARCHIVED',
    AdGroupIncomplete = 'AD_GROUP_INCOMPLETE',
    AdGroupLowBid = 'AD_GROUP_LOW_BID',
    TargetStatusLive = 'TARGET_STATUS_LIVE',
    TargetStatusPaused = 'TARGET_STATUS_PAUSED',
    TargetStatusArchived = 'TARGET_STATUS_ARCHIVED'
}

/**
 * A predicate to match against in the targeting expression (only applicable to contextual targeting - T00020).  * All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system. * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the \'between\' strings to construct a targeting expression the format of the string is \'double-double\' where the first double must be smaller than the second double. Prices are not inclusive.
 * @export
 * @interface TargetingPredicate
 */
export interface TargetingPredicate {
    /**
     * 
     * @type {string}
     * @memberof TargetingPredicate
     */
    type?: TargetingPredicateTypeEnum;
    /**
     * The value to be targeted.
     * @type {string}
     * @memberof TargetingPredicate
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingPredicateTypeEnum {
    AsinSameAs = 'asinSameAs',
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    AsinIsPrimeShippingEligible = 'asinIsPrimeShippingEligible',
    AsinAgeRangeSameAs = 'asinAgeRangeSameAs',
    AsinGenreSameAs = 'asinGenreSameAs',
    SimilarProduct = 'similarProduct'
}

/**
 * A predicate to match against inside the TargetingPredicateNested component (only applicable to audience targeting - T00030).  * All IDs passed for category and brand-targeting predicates must be valid IDs in the Amazon Ads browse system. * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the \'between\' strings to construct a targeting expression the format of the string is \'double-double\' where the first double must be smaller than the second double. Prices are not inclusive. * The \'exactProduct\', \'similarProduct\', \'relatedProduct\', and \'negative\' types do not utilize the value field. * The only type currently applicable to Amazon Audiences targeting is \'audienceSameAs\'. * A \'relatedProduct\' TargetingPredicateBase will Target an audience that has purchased a related product in the past 7,14,30,60,90,180, or 365 days.
 * @export
 * @interface TargetingPredicateBase
 */
export interface TargetingPredicateBase {
    /**
     * 
     * @type {string}
     * @memberof TargetingPredicateBase
     */
    type?: TargetingPredicateBaseTypeEnum;
    /**
     * The value to be targeted.
     * @type {string}
     * @memberof TargetingPredicateBase
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingPredicateBaseTypeEnum {
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    SimilarProduct = 'similarProduct',
    ExactProduct = 'exactProduct',
    AsinIsPrimeShippingEligible = 'asinIsPrimeShippingEligible',
    AsinAgeRangeSameAs = 'asinAgeRangeSameAs',
    AsinGenreSameAs = 'asinGenreSameAs',
    AudienceSameAs = 'audienceSameAs',
    Lookback = 'lookback',
    Negative = 'negative',
    RelatedProduct = 'relatedProduct'
}

/**
 * 
 * @export
 * @interface TargetingPredicateLegacy
 */
export interface TargetingPredicateLegacy {
    /**
     * 
     * @type {string}
     * @memberof TargetingPredicateLegacy
     */
    type?: TargetingPredicateLegacyTypeEnum;
    /**
     * The value to be targeted.
     * @type {string}
     * @memberof TargetingPredicateLegacy
     */
    value?: string;
    /**
     * The type of event that the value applies to. Only available for similarProduct and exactProduct currently. * views event type corresponds to a customer who viewed the detail page of the product(s).
     * @type {string}
     * @memberof TargetingPredicateLegacy
     */
    eventType?: TargetingPredicateLegacyEventTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingPredicateLegacyTypeEnum {
    AsinSameAs = 'asinSameAs',
    AsinCategorySameAs = 'asinCategorySameAs',
    AsinBrandSameAs = 'asinBrandSameAs',
    AsinPriceBetween = 'asinPriceBetween',
    AsinPriceGreaterThan = 'asinPriceGreaterThan',
    AsinPriceLessThan = 'asinPriceLessThan',
    AsinReviewRatingLessThan = 'asinReviewRatingLessThan',
    AsinReviewRatingGreaterThan = 'asinReviewRatingGreaterThan',
    AsinReviewRatingBetween = 'asinReviewRatingBetween',
    SimilarProduct = 'similarProduct',
    ExactProduct = 'exactProduct',
    AsinIsPrimeShippingEligible = 'asinIsPrimeShippingEligible',
    AsinAgeRangeSameAs = 'asinAgeRangeSameAs',
    AsinGenreSameAs = 'asinGenreSameAs'
}
/**
    * @export
    * @enum {string}
    */
export enum TargetingPredicateLegacyEventTypeEnum {
    Views = 'views'
}

/**
 * A behavioral event and list of targeting predicates that represents an audience to target (only applicable to audience targeting - T00030).  * For manual ASIN-grain targeting, the value array must contain only, \'exactProduct\', \'similarProduct\', \'relatedProduct\' and \'lookback\' TargetingPredicateBase components. The \'lookback\' is mandatory and the value should be set to \'7\', \'14\', \'30\', \'60\', \'90\', \'180\' or \'365\'. * For manual Category-grain targeting, the value array must contain a \'lookback\' and \'asinCategorySameAs\' TargetingPredicateBase component, which can be further refined with optional brand, price, star-rating and shipping eligibility refinements. The \'lookback\' is mandatory and the value should be set to \'7\', \'14\', \'30\', \'60\', \'90\', \'180\' or \'365\'. * For Amazon Audiences targeting, the TargetingPredicateNested type should be set to \'audience\' and the value array should include one TargetingPredicateBase component with type set to \'audienceSameAs\'.
 * @export
 * @interface TargetingPredicateNested
 */
export interface TargetingPredicateNested {
    /**
     * 
     * @type {string}
     * @memberof TargetingPredicateNested
     */
    type?: TargetingPredicateNestedTypeEnum;
    /**
     * 
     * @type {Array<TargetingPredicateBase>}
     * @memberof TargetingPredicateNested
     */
    value?: Array<TargetingPredicateBase>;
}

/**
    * @export
    * @enum {string}
    */
export enum TargetingPredicateNestedTypeEnum {
    Views = 'views',
    Audience = 'audience',
    Purchases = 'purchases'
}

/**
 * A collection of targeting recommendations. Results will be sorted with strongest recommendations in the beginning.
 * @export
 * @interface TargetingRecommendations
 */
export interface TargetingRecommendations {
    /**
     * List of recommended product targets
     * @type {Array<ProductRecommendation>}
     * @memberof TargetingRecommendations
     */
    products?: Array<ProductRecommendation>;
}
/**
 * Request for targeting recommendations
 * @export
 * @interface TargetingRecommendationsRequest
 */
export interface TargetingRecommendationsRequest {
    /**
     * 
     * @type {Tactic}
     * @memberof TargetingRecommendationsRequest
     */
    tactic: Tactic;
    /**
     * A list of products for which to get targeting recommendations
     * @type {Array<GoalProduct>}
     * @memberof TargetingRecommendationsRequest
     */
    products: Array<GoalProduct>;
    /**
     * A filter to indicate which types of recommendations to request. T00030 only allow \"CATEGORY\".
     * @type {Array<RecommendationType>}
     * @memberof TargetingRecommendationsRequest
     */
    typeFilter: Array<RecommendationType>;
}
/**
 * Response to a request for targeting recommendations.
 * @export
 * @interface TargetingRecommendationsResponse
 */
export interface TargetingRecommendationsResponse {
    /**
     * 
     * @type {TargetingRecommendations}
     * @memberof TargetingRecommendationsResponse
     */
    recommendations?: TargetingRecommendations;
}
/**
 * 
 * @export
 * @interface UpdateAdGroup
 */
export interface UpdateAdGroup {
    /**
     * The name of the ad group.
     * @type {string}
     * @memberof UpdateAdGroup
     */
    name?: string;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof UpdateAdGroup
     */
    campaignId?: number;
    /**
     * The amount of the default bid associated with the ad group. Used if no bid is specified.
     * @type {number}
     * @memberof UpdateAdGroup
     */
    defaultBid?: number;
    /**
     * Bid Optimization for the Adgroup. Default behavior is to optimize for clicks. |Name|CostType|Description| |----|--------|-----------| |reach |vcpm|Optimize for viewable impressions. $1 is the minimum bid for vCPM.| |clicks |cpc|[Default] Optimize for page visits.| |conversions |cpc|Optimize for conversion.|
     * @type {string}
     * @memberof UpdateAdGroup
     */
    bidOptimization?: UpdateAdGroupBidOptimizationEnum;
    /**
     * The state of the ad group.
     * @type {string}
     * @memberof UpdateAdGroup
     */
    state?: UpdateAdGroupStateEnum;
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof UpdateAdGroup
     */
    adGroupId: number;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateAdGroupBidOptimizationEnum {
    Clicks = 'clicks',
    Conversions = 'conversions',
    Reach = 'reach'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateAdGroupStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface UpdateAdGroupAllOf
 */
export interface UpdateAdGroupAllOf {
    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof UpdateAdGroupAllOf
     */
    adGroupId?: number;
}
/**
 * 
 * @export
 * @interface UpdateBudgetRulesResponse
 */
export interface UpdateBudgetRulesResponse {
    /**
     * 
     * @type {Array<BudgetRuleResponse>}
     * @memberof UpdateBudgetRulesResponse
     */
    responses?: Array<BudgetRuleResponse>;
}
/**
 * 
 * @export
 * @interface UpdateCampaign
 */
export interface UpdateCampaign {
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof UpdateCampaign
     */
    name?: string;
    /**
     * The time period over which the amount specified in the `budget` property is allocated.
     * @type {string}
     * @memberof UpdateCampaign
     */
    budgetType?: UpdateCampaignBudgetTypeEnum;
    /**
     * The amount of the budget.
     * @type {number}
     * @memberof UpdateCampaign
     */
    budget?: number;
    /**
     * The YYYYMMDD start date of the campaign. The date must be today or in the future.
     * @type {string}
     * @memberof UpdateCampaign
     */
    startDate?: string;
    /**
     * The YYYYMMDD end date of the campaign.
     * @type {string}
     * @memberof UpdateCampaign
     */
    endDate?: string | null;
    /**
     * Determines how the campaign will bid and charge. |Name|Description| |----|----------| |cpc |[Default] The performance of this campaign is measured by the clicks triggered by the ad.| |vcpm |The performance of this campaign is measured by the viewed impressions triggered by the ad. |  To view minimum and maximum bids based on the costType, see [Limits](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace).
     * @type {string}
     * @memberof UpdateCampaign
     */
    costType?: UpdateCampaignCostTypeEnum;
    /**
     * The state of the campaign.
     * @type {string}
     * @memberof UpdateCampaign
     */
    state?: UpdateCampaignStateEnum;
    /**
     * Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.
     * @type {number}
     * @memberof UpdateCampaign
     */
    portfolioId?: number | null;
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof UpdateCampaign
     */
    campaignId: number;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateCampaignBudgetTypeEnum {
    Daily = 'daily'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateCampaignCostTypeEnum {
    Cpc = 'cpc',
    Vcpm = 'vcpm'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateCampaignStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface UpdateCampaignAllOf
 */
export interface UpdateCampaignAllOf {
    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof UpdateCampaignAllOf
     */
    campaignId?: number;
}
/**
 * 
 * @export
 * @interface UpdateNegativeTargetingClause
 */
export interface UpdateNegativeTargetingClause {
    /**
     * 
     * @type {string}
     * @memberof UpdateNegativeTargetingClause
     */
    state?: UpdateNegativeTargetingClauseStateEnum;
    /**
     * 
     * @type {number}
     * @memberof UpdateNegativeTargetingClause
     */
    targetId: number;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateNegativeTargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface UpdateOptimizationRule
 */
export interface UpdateOptimizationRule {
    /**
     * The state of the optimization rule.
     * @type {string}
     * @memberof UpdateOptimizationRule
     */
    state?: UpdateOptimizationRuleStateEnum;
    /**
     * The name of the optimization rule.
     * @type {string}
     * @memberof UpdateOptimizationRule
     */
    ruleName?: string;
    /**
     * A list of rule conditions that define the advertiser\'s intent for the outcome of the rule. The rule uses \'AND\' logic to combine every condition in this list, and will validate the combination when the rule is created or updated.
     * @type {Array<RuleCondition>}
     * @memberof UpdateOptimizationRule
     */
    ruleConditions?: Array<RuleCondition>;
    /**
     * The identifier of the optimization rule.
     * @type {string}
     * @memberof UpdateOptimizationRule
     */
    ruleId: string;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateOptimizationRuleStateEnum {
    Enabled = 'enabled',
    PausedComingLater = 'paused [COMING LATER]'
}

/**
 * 
 * @export
 * @interface UpdateProductAd
 */
export interface UpdateProductAd {
    /**
     * The state of the campaign associated with the product ad.
     * @type {string}
     * @memberof UpdateProductAd
     */
    state?: UpdateProductAdStateEnum;
    /**
     * The identifier of the product ad.
     * @type {number}
     * @memberof UpdateProductAd
     */
    adId: number;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateProductAdStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface UpdateProductAdAllOf
 */
export interface UpdateProductAdAllOf {
    /**
     * The identifier of the product ad.
     * @type {number}
     * @memberof UpdateProductAdAllOf
     */
    adId?: number;
}
/**
 * Request object for updating budget rule for SD campaign
 * @export
 * @interface UpdateSDBudgetRulesRequest
 */
export interface UpdateSDBudgetRulesRequest {
    /**
     * A list of budget rule details.
     * @type {Array<SDBudgetRule>}
     * @memberof UpdateSDBudgetRulesRequest
     */
    budgetRulesDetails?: Array<SDBudgetRule>;
}
/**
 * 
 * @export
 * @interface UpdateTargetingClause
 */
export interface UpdateTargetingClause {
    /**
     * 
     * @type {string}
     * @memberof UpdateTargetingClause
     */
    state?: UpdateTargetingClauseStateEnum;
    /**
     * The bid will override the adGroup bid if specified. This field is not used for negative targeting clauses. The bid must be less than the maximum allowable bid for the campaign\'s marketplace; for a list of maximum allowable bids, find the [\"Bid constraints by marketplace\" table in our documentation overview](https://advertising.amazon.com/API/docs/en-us/concepts/limits#bid-constraints-by-marketplace). You cannot manually set a bid when the targeting clause\'s adGroup has an enabled optimization rule.
     * @type {number}
     * @memberof UpdateTargetingClause
     */
    bid?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateTargetingClause
     */
    targetId: number;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateTargetingClauseStateEnum {
    Enabled = 'enabled',
    Paused = 'paused',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface UpdateTargetingClauseAllOf
 */
export interface UpdateTargetingClauseAllOf {
    /**
     * 
     * @type {number}
     * @memberof UpdateTargetingClauseAllOf
     */
    targetId?: number;
}
/**
 * This field denotes video which is displayed on the ad. This field is optional and mutable. A video asset must be provided for a VIDEO creative. Specific restrictions based on the video are listed in the following table. ||Specifications| |------------------|------------------| |Maximum file size|500MB| |Aspect ratio|16:9| |Minimum duration|6s| |Maximum duration|45s| |Minimum frame size|1920x1080| |Minimum video bitrate|4mbps| |Video frame rate(fps)|23.976(recommended), 24, 25, or 29.97| |Video frame rate mode|Constant| |Minimum audio bitrate|192kbps| |Audio sample rate|44.1kHz or 48kHz| |Supported Formats|Video: H.264, MPEG-2, or MPEG-4; Audio: PCM or AAC| |Audio Channel|Audio format needs to be stereo or mono.| |Recommended video bitrate|8mbps| |Recommended duration|A duration of exactly 6s, 15s, 20s, or 30s is recommended. Use of videos outside of these durations may negatively impact your campaign performance. Shorter lengths will drive higher VCR (although scale on 6s may be limited).|
 * @export
 * @interface Video
 */
export interface Video {
    /**
     * The unique identifier of the video asset. This assetId comes from the Creative Asset Library.
     * @type {string}
     * @memberof Video
     */
    assetId: string;
    /**
     * The identifier of the particular video assetversion.
     * @type {string}
     * @memberof Video
     */
    assetVersion: string;
}
/**
 * User-customizable properties of a video creative.
 * @export
 * @interface VideoCreativeProperties
 */
export interface VideoCreativeProperties {
    /**
     * 
     * @type {Video}
     * @memberof VideoCreativeProperties
     */
    video?: Video;
    /**
     * An optional collection of 1:1 square videos which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
     * @type {Array<Video>}
     * @memberof VideoCreativeProperties
     */
    squareVideos?: Array<Video>;
    /**
     * An optional collection of 16:9 landscape videos which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
     * @type {Array<Video>}
     * @memberof VideoCreativeProperties
     */
    landscapeVideos?: Array<Video>;
    /**
     * An optional collection of 9:16 portrait videos which are displayed on the ad. This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
     * @type {Array<Video>}
     * @memberof VideoCreativeProperties
     */
    portraitVideos?: Array<Video>;
}

/**
 * AdGroupsApi - axios parameter creator
 * @export
 */
export const AdGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.
         * @summary Sets the ad group status to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveAdGroup: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveAdGroup', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveAdGroup', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('archiveAdGroup', 'adGroupId', adGroupId)
            const localVarPath = `/sd/adGroups/{adGroupId}`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates one or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateAdGroup>} [createAdGroup] An array of AdGroup objects. For each object, specify required fields and their values. Required fields are &#x60;campaignId&#x60;, &#x60;name&#x60;, &#x60;state&#x60;, and &#x60;defaultBid&#x60;. Maximum length of the array is 100 objects. Note - when using landingPageType of OFF_AMAZON_LINK or STORES within productAds, only 1 adGroup is supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdGroups: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createAdGroup?: Array<CreateAdGroup>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createAdGroups', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createAdGroups', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/adGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAdGroup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an AdGroup object for a requested campaign. Note that the AdGroup object is designed for performance, with a small set of commonly used ad group fields to reduce size. If the extended set of fields is required, use the campaign operations that return the AdGroupResponseEx object.
         * @summary Gets a requested ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroup: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAdGroup', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAdGroup', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('getAdGroup', 'adGroupId', adGroupId)
            const localVarPath = `/sd/adGroups/{adGroupId}`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets extended information for a requested ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupResponseEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getAdGroupResponseEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getAdGroupResponseEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('getAdGroupResponseEx', 'adGroupId', adGroupId)
            const localVarPath = `/sd/adGroups/extended/{adGroupId}`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of AdGroup objects for a requested set of Sponsored Display ad groups. Note that the AdGroup object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the ad group operations that return the AdGroupResponseEx object.
         * @summary Gets a list of ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of AdGroup objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten ad groups set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten ad groups, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only ad groups with state set to one of the values in the specified comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the specified comma-delimited list.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only ad groups with the specified name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdGroups: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, name?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listAdGroups', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listAdGroups', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/adGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of AdGroupResponseEx objects for a set of requested ad groups.
         * @summary Gets a list of ad groups with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of ad groups. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the comma-delimited list.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only ad groups with the specified name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdGroupsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, name?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listAdGroupsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listAdGroupsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/adGroups/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates on or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateAdGroup>} [updateAdGroup] An array of AdGroup objects. For each object, specify an ad group identifier and mutable fields with their updated values. The mutable fields are \&#39;name\&#39;, \&#39;defaultBid\&#39;, and \&#39;state\&#39;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdGroups: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateAdGroup?: Array<UpdateAdGroup>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateAdGroups', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateAdGroups', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/adGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAdGroup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdGroupsApi - functional programming interface
 * @export
 */
export const AdGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.
         * @summary Sets the ad group status to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveAdGroup(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveAdGroup(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates one or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateAdGroup>} [createAdGroup] An array of AdGroup objects. For each object, specify required fields and their values. Required fields are &#x60;campaignId&#x60;, &#x60;name&#x60;, &#x60;state&#x60;, and &#x60;defaultBid&#x60;. Maximum length of the array is 100 objects. Note - when using landingPageType of OFF_AMAZON_LINK or STORES within productAds, only 1 adGroup is supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createAdGroup?: Array<CreateAdGroup>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdGroupResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createAdGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns an AdGroup object for a requested campaign. Note that the AdGroup object is designed for performance, with a small set of commonly used ad group fields to reduce size. If the extended set of fields is required, use the campaign operations that return the AdGroupResponseEx object.
         * @summary Gets a requested ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdGroup(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdGroup(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets extended information for a requested ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdGroupResponseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdGroupResponseEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdGroupResponseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of AdGroup objects for a requested set of Sponsored Display ad groups. Note that the AdGroup object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the ad group operations that return the AdGroupResponseEx object.
         * @summary Gets a list of ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of AdGroup objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten ad groups set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten ad groups, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only ad groups with state set to one of the values in the specified comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the specified comma-delimited list.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only ad groups with the specified name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, name?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of AdGroupResponseEx objects for a set of requested ad groups.
         * @summary Gets a list of ad groups with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of ad groups. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the comma-delimited list.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only ad groups with the specified name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdGroupsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, name?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdGroupResponseEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAdGroupsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates on or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateAdGroup>} [updateAdGroup] An array of AdGroup objects. For each object, specify an ad group identifier and mutable fields with their updated values. The mutable fields are \&#39;name\&#39;, \&#39;defaultBid\&#39;, and \&#39;state\&#39;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateAdGroup?: Array<UpdateAdGroup>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdGroupResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateAdGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdGroupsApi - factory interface
 * @export
 */
export const AdGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdGroupsApiFp(configuration)
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.
         * @summary Sets the ad group status to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveAdGroup(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): AxiosPromise<AdGroupResponse> {
            return localVarFp.archiveAdGroup(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates one or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateAdGroup>} [createAdGroup] An array of AdGroup objects. For each object, specify required fields and their values. Required fields are &#x60;campaignId&#x60;, &#x60;name&#x60;, &#x60;state&#x60;, and &#x60;defaultBid&#x60;. Maximum length of the array is 100 objects. Note - when using landingPageType of OFF_AMAZON_LINK or STORES within productAds, only 1 adGroup is supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createAdGroup?: Array<CreateAdGroup>, options?: any): AxiosPromise<Array<AdGroupResponse>> {
            return localVarFp.createAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createAdGroup, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an AdGroup object for a requested campaign. Note that the AdGroup object is designed for performance, with a small set of commonly used ad group fields to reduce size. If the extended set of fields is required, use the campaign operations that return the AdGroupResponseEx object.
         * @summary Gets a requested ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroup(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): AxiosPromise<AdGroup> {
            return localVarFp.getAdGroup(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets extended information for a requested ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the requested ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdGroupResponseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): AxiosPromise<AdGroupResponseEx> {
            return localVarFp.getAdGroupResponseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of AdGroup objects for a requested set of Sponsored Display ad groups. Note that the AdGroup object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the ad group operations that return the AdGroupResponseEx object.
         * @summary Gets a list of ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of AdGroup objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten ad groups set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten ad groups, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only ad groups with state set to one of the values in the specified comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the specified comma-delimited list.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only ad groups with the specified name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, name?: string, options?: any): AxiosPromise<Array<AdGroup>> {
            return localVarFp.listAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of AdGroupResponseEx objects for a set of requested ad groups.
         * @summary Gets a list of ad groups with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of ad groups. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the comma-delimited list.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only ad groups with the specified name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdGroupsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', campaignIdFilter?: string, adGroupIdFilter?: string, name?: string, options?: any): AxiosPromise<Array<AdGroupResponseEx>> {
            return localVarFp.listAdGroupsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, campaignIdFilter, adGroupIdFilter, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates on or more ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateAdGroup>} [updateAdGroup] An array of AdGroup objects. For each object, specify an ad group identifier and mutable fields with their updated values. The mutable fields are \&#39;name\&#39;, \&#39;defaultBid\&#39;, and \&#39;state\&#39;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdGroups(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateAdGroup?: Array<UpdateAdGroup>, options?: any): AxiosPromise<Array<AdGroupResponse>> {
            return localVarFp.updateAdGroups(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateAdGroup, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveAdGroup operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiArchiveAdGroupRequest
 */
export interface AdGroupsApiArchiveAdGroupRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AdGroupsApiArchiveAdGroup
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiArchiveAdGroup
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested ad group.
     * @type {number}
     * @memberof AdGroupsApiArchiveAdGroup
     */
    readonly adGroupId: number
}

/**
 * Request parameters for createAdGroups operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiCreateAdGroupsRequest
 */
export interface AdGroupsApiCreateAdGroupsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AdGroupsApiCreateAdGroups
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiCreateAdGroups
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of AdGroup objects. For each object, specify required fields and their values. Required fields are &#x60;campaignId&#x60;, &#x60;name&#x60;, &#x60;state&#x60;, and &#x60;defaultBid&#x60;. Maximum length of the array is 100 objects. Note - when using landingPageType of OFF_AMAZON_LINK or STORES within productAds, only 1 adGroup is supported.
     * @type {Array<CreateAdGroup>}
     * @memberof AdGroupsApiCreateAdGroups
     */
    readonly createAdGroup?: Array<CreateAdGroup>
}

/**
 * Request parameters for getAdGroup operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiGetAdGroupRequest
 */
export interface AdGroupsApiGetAdGroupRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroup
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroup
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested ad group.
     * @type {number}
     * @memberof AdGroupsApiGetAdGroup
     */
    readonly adGroupId: number
}

/**
 * Request parameters for getAdGroupResponseEx operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiGetAdGroupResponseExRequest
 */
export interface AdGroupsApiGetAdGroupResponseExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroupResponseEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiGetAdGroupResponseEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested ad group.
     * @type {number}
     * @memberof AdGroupsApiGetAdGroupResponseEx
     */
    readonly adGroupId: number
}

/**
 * Request parameters for listAdGroups operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiListAdGroupsRequest
 */
export interface AdGroupsApiListAdGroupsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of AdGroup objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten ad groups set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten ad groups, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly count?: number

    /**
     * Optional. The returned array is filtered to include only ad groups with state set to one of the values in the specified comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the specified comma-delimited list.
     * @type {string}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly campaignIdFilter?: string

    /**
     * Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
     * @type {string}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. The returned array includes only ad groups with the specified name.
     * @type {string}
     * @memberof AdGroupsApiListAdGroups
     */
    readonly name?: string
}

/**
 * Request parameters for listAdGroupsEx operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiListAdGroupsExRequest
 */
export interface AdGroupsApiListAdGroupsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of ad groups. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly count?: number

    /**
     * Optional. The returned array is filtered to include only campaigns with state set to one of the values in the comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the comma-delimited list.
     * @type {string}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly campaignIdFilter?: string

    /**
     * Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
     * @type {string}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. The returned array includes only ad groups with the specified name.
     * @type {string}
     * @memberof AdGroupsApiListAdGroupsEx
     */
    readonly name?: string
}

/**
 * Request parameters for updateAdGroups operation in AdGroupsApi.
 * @export
 * @interface AdGroupsApiUpdateAdGroupsRequest
 */
export interface AdGroupsApiUpdateAdGroupsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof AdGroupsApiUpdateAdGroups
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof AdGroupsApiUpdateAdGroups
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of AdGroup objects. For each object, specify an ad group identifier and mutable fields with their updated values. The mutable fields are \&#39;name\&#39;, \&#39;defaultBid\&#39;, and \&#39;state\&#39;. Maximum length of the array is 100 objects.
     * @type {Array<UpdateAdGroup>}
     * @memberof AdGroupsApiUpdateAdGroups
     */
    readonly updateAdGroup?: Array<UpdateAdGroup>
}

/**
 * AdGroupsApi - object-oriented interface
 * @export
 * @class AdGroupsApi
 * @extends {BaseAPI}
 */
export class AdGroupsApi extends BaseAPI {
    /**
     * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.
     * @summary Sets the ad group status to archived.
     * @param {AdGroupsApiArchiveAdGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public archiveAdGroup(requestParameters: AdGroupsApiArchiveAdGroupRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).archiveAdGroup(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates one or more ad groups.
     * @param {AdGroupsApiCreateAdGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public createAdGroups(requestParameters: AdGroupsApiCreateAdGroupsRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).createAdGroups(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createAdGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an AdGroup object for a requested campaign. Note that the AdGroup object is designed for performance, with a small set of commonly used ad group fields to reduce size. If the extended set of fields is required, use the campaign operations that return the AdGroupResponseEx object.
     * @summary Gets a requested ad group.
     * @param {AdGroupsApiGetAdGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public getAdGroup(requestParameters: AdGroupsApiGetAdGroupRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).getAdGroup(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets extended information for a requested ad group.
     * @param {AdGroupsApiGetAdGroupResponseExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public getAdGroupResponseEx(requestParameters: AdGroupsApiGetAdGroupResponseExRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).getAdGroupResponseEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of AdGroup objects for a requested set of Sponsored Display ad groups. Note that the AdGroup object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the ad group operations that return the AdGroupResponseEx object.
     * @summary Gets a list of ad groups.
     * @param {AdGroupsApiListAdGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public listAdGroups(requestParameters: AdGroupsApiListAdGroupsRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).listAdGroups(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.campaignIdFilter, requestParameters.adGroupIdFilter, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of AdGroupResponseEx objects for a set of requested ad groups.
     * @summary Gets a list of ad groups with extended fields.
     * @param {AdGroupsApiListAdGroupsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public listAdGroupsEx(requestParameters: AdGroupsApiListAdGroupsExRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).listAdGroupsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.campaignIdFilter, requestParameters.adGroupIdFilter, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates on or more ad groups.
     * @param {AdGroupsApiUpdateAdGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdGroupsApi
     */
    public updateAdGroups(requestParameters: AdGroupsApiUpdateAdGroupsRequest, options?: any) {
        return AdGroupsApiFp(this.configuration).updateAdGroups(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateAdGroup, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BidRecommendationsApi - axios parameter creator
 * @export
 */
export const BidRecommendationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses. Note - these recommendations are only available when productAds have ASIN or SKU fields.  The recommended bids are derrived from the last 7 days of winning auction bids for the related targeting clause.   Receive bid recommendations using the following: Contextual targeting clause|Description| |-----------|----| |asinSameAs=B0123456789|Receive a bid recommendation for this target product |asinCategorySameAs=12345|Receive a bid recommendation for this target category |similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.   Audience targeting clause|Description| |-----------|----| |views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category |views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins |views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins |purchases(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has purchased products in the given category |purchases(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has purchased the advertised asins |purchases(relatedProduct lookback=30)|Receive a bid recommendation for a target audience that has purchased related products to the advertised asins |audience(audienceSameAs=12345)|Receive a bid recommendation for the given target audience   #### Notes: - Refinements are currently not supported and if included will not impact the bid recommendation for the target.   #### Advertised ASIN Notes: - For asinSameAs targets the advertised asins will not impact the bid recommendation - For asinCategrySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation - For similarProduct, exactProduct, and relatedProduct targets the advertised asins are required
         * @summary Returns a set of bid recommendations for targeting clauses
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingBidRecommendationsRequestV32} [sDTargetingBidRecommendationsRequestV32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetBidRecommendations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDTargetingBidRecommendationsRequestV32?: SDTargetingBidRecommendationsRequestV32, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getTargetBidRecommendations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getTargetBidRecommendations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/targets/bid/recommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.sdtargetingrecommendations.v3.2+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sDTargetingBidRecommendationsRequestV32, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BidRecommendationsApi - functional programming interface
 * @export
 */
export const BidRecommendationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BidRecommendationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses. Note - these recommendations are only available when productAds have ASIN or SKU fields.  The recommended bids are derrived from the last 7 days of winning auction bids for the related targeting clause.   Receive bid recommendations using the following: Contextual targeting clause|Description| |-----------|----| |asinSameAs=B0123456789|Receive a bid recommendation for this target product |asinCategorySameAs=12345|Receive a bid recommendation for this target category |similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.   Audience targeting clause|Description| |-----------|----| |views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category |views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins |views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins |purchases(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has purchased products in the given category |purchases(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has purchased the advertised asins |purchases(relatedProduct lookback=30)|Receive a bid recommendation for a target audience that has purchased related products to the advertised asins |audience(audienceSameAs=12345)|Receive a bid recommendation for the given target audience   #### Notes: - Refinements are currently not supported and if included will not impact the bid recommendation for the target.   #### Advertised ASIN Notes: - For asinSameAs targets the advertised asins will not impact the bid recommendation - For asinCategrySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation - For similarProduct, exactProduct, and relatedProduct targets the advertised asins are required
         * @summary Returns a set of bid recommendations for targeting clauses
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingBidRecommendationsRequestV32} [sDTargetingBidRecommendationsRequestV32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargetBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDTargetingBidRecommendationsRequestV32?: SDTargetingBidRecommendationsRequestV32, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDTargetingBidRecommendationsResponseV32>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargetBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDTargetingBidRecommendationsRequestV32, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BidRecommendationsApi - factory interface
 * @export
 */
export const BidRecommendationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BidRecommendationsApiFp(configuration)
    return {
        /**
         * Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses. Note - these recommendations are only available when productAds have ASIN or SKU fields.  The recommended bids are derrived from the last 7 days of winning auction bids for the related targeting clause.   Receive bid recommendations using the following: Contextual targeting clause|Description| |-----------|----| |asinSameAs=B0123456789|Receive a bid recommendation for this target product |asinCategorySameAs=12345|Receive a bid recommendation for this target category |similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.   Audience targeting clause|Description| |-----------|----| |views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category |views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins |views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins |purchases(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has purchased products in the given category |purchases(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has purchased the advertised asins |purchases(relatedProduct lookback=30)|Receive a bid recommendation for a target audience that has purchased related products to the advertised asins |audience(audienceSameAs=12345)|Receive a bid recommendation for the given target audience   #### Notes: - Refinements are currently not supported and if included will not impact the bid recommendation for the target.   #### Advertised ASIN Notes: - For asinSameAs targets the advertised asins will not impact the bid recommendation - For asinCategrySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation - For similarProduct, exactProduct, and relatedProduct targets the advertised asins are required
         * @summary Returns a set of bid recommendations for targeting clauses
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingBidRecommendationsRequestV32} [sDTargetingBidRecommendationsRequestV32] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetBidRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDTargetingBidRecommendationsRequestV32?: SDTargetingBidRecommendationsRequestV32, options?: any): AxiosPromise<SDTargetingBidRecommendationsResponseV32> {
            return localVarFp.getTargetBidRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDTargetingBidRecommendationsRequestV32, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTargetBidRecommendations operation in BidRecommendationsApi.
 * @export
 * @interface BidRecommendationsApiGetTargetBidRecommendationsRequest
 */
export interface BidRecommendationsApiGetTargetBidRecommendationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BidRecommendationsApiGetTargetBidRecommendations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BidRecommendationsApiGetTargetBidRecommendations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {SDTargetingBidRecommendationsRequestV32}
     * @memberof BidRecommendationsApiGetTargetBidRecommendations
     */
    readonly sDTargetingBidRecommendationsRequestV32?: SDTargetingBidRecommendationsRequestV32
}

/**
 * BidRecommendationsApi - object-oriented interface
 * @export
 * @class BidRecommendationsApi
 * @extends {BaseAPI}
 */
export class BidRecommendationsApi extends BaseAPI {
    /**
     * Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses. Note - these recommendations are only available when productAds have ASIN or SKU fields.  The recommended bids are derrived from the last 7 days of winning auction bids for the related targeting clause.   Receive bid recommendations using the following: Contextual targeting clause|Description| |-----------|----| |asinSameAs=B0123456789|Receive a bid recommendation for this target product |asinCategorySameAs=12345|Receive a bid recommendation for this target category |similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.   Audience targeting clause|Description| |-----------|----| |views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category |views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins |views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins |purchases(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has purchased products in the given category |purchases(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has purchased the advertised asins |purchases(relatedProduct lookback=30)|Receive a bid recommendation for a target audience that has purchased related products to the advertised asins |audience(audienceSameAs=12345)|Receive a bid recommendation for the given target audience   #### Notes: - Refinements are currently not supported and if included will not impact the bid recommendation for the target.   #### Advertised ASIN Notes: - For asinSameAs targets the advertised asins will not impact the bid recommendation - For asinCategrySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation - For similarProduct, exactProduct, and relatedProduct targets the advertised asins are required
     * @summary Returns a set of bid recommendations for targeting clauses
     * @param {BidRecommendationsApiGetTargetBidRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BidRecommendationsApi
     */
    public getTargetBidRecommendations(requestParameters: BidRecommendationsApiGetTargetBidRecommendationsRequest, options?: any) {
        return BidRecommendationsApiFp(this.configuration).getTargetBidRecommendations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.sDTargetingBidRecommendationsRequestV32, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BrandSafetyListApi - axios parameter creator
 * @export
 */
export const BrandSafetyListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list. 
         * @summary Creates one or more domains to add to a Brand Safety Deny List. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {BrandSafetyPostRequest} brandSafetyPostRequest An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrandSafetyDenyListDomains: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, brandSafetyPostRequest: BrandSafetyPostRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createBrandSafetyDenyListDomains', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createBrandSafetyDenyListDomains', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'brandSafetyPostRequest' is not null or undefined
            assertParamExists('createBrandSafetyDenyListDomains', 'brandSafetyPostRequest', brandSafetyPostRequest)
            const localVarPath = `/sd/brandSafety/deny`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(brandSafetyPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is \"COMPLETED\", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted. 
         * @summary Archives all of the domains in the Brand Safety Deny List. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandSafetyDenyList: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('deleteBrandSafetyDenyList', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('deleteBrandSafetyDenyList', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/brandSafety/deny`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests. 
         * @summary Gets the results for the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} requestId The ID of the request previously submitted.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 results, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestResults: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, startIndex?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getRequestResults', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getRequestResults', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('getRequestResults', 'requestId', requestId)
            const localVarPath = `/sd/brandSafety/{requestId}/results`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted. 
         * @summary Gets the status of the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} requestId The ID of the request previously submitted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestStatus: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getRequestStatus', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getRequestStatus', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('getRequestStatus', 'requestId', requestId)
            const localVarPath = `/sd/brandSafety/{requestId}/status`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of websites/apps that are on the advertiser\'s Brand Safety Deny List. It can take up to 15 minutes from the time a domain is added/deleted to the time it is reflected in the deny list.
         * @summary Gets a list of websites/apps that are on the advertiser\'s Brand Safety Deny List.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 domains, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomains: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listDomains', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listDomains', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/brandSafety/deny`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days. 
         * @summary List status of all requests
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRequestStatus: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listRequestStatus', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listRequestStatus', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/brandSafety/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrandSafetyListApi - functional programming interface
 * @export
 */
export const BrandSafetyListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrandSafetyListApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list. 
         * @summary Creates one or more domains to add to a Brand Safety Deny List. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {BrandSafetyPostRequest} brandSafetyPostRequest An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrandSafetyDenyListDomains(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, brandSafetyPostRequest: BrandSafetyPostRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandSafetyUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrandSafetyDenyListDomains(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, brandSafetyPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is \"COMPLETED\", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted. 
         * @summary Archives all of the domains in the Brand Safety Deny List. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrandSafetyDenyList(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandSafetyUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrandSafetyDenyList(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests. 
         * @summary Gets the results for the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} requestId The ID of the request previously submitted.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 results, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestResults(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, startIndex?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandSafetyRequestResultsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestResults(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, requestId, startIndex, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted. 
         * @summary Gets the status of the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} requestId The ID of the request previously submitted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandSafetyRequestStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of websites/apps that are on the advertiser\'s Brand Safety Deny List. It can take up to 15 minutes from the time a domain is added/deleted to the time it is reflected in the deny list.
         * @summary Gets a list of websites/apps that are on the advertiser\'s Brand Safety Deny List.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 domains, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDomains(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandSafetyGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDomains(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days. 
         * @summary List status of all requests
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRequestStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandSafetyListRequestStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRequestStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BrandSafetyListApi - factory interface
 * @export
 */
export const BrandSafetyListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrandSafetyListApiFp(configuration)
    return {
        /**
         * Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list. 
         * @summary Creates one or more domains to add to a Brand Safety Deny List. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {BrandSafetyPostRequest} brandSafetyPostRequest An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrandSafetyDenyListDomains(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, brandSafetyPostRequest: BrandSafetyPostRequest, options?: any): AxiosPromise<BrandSafetyUpdateResponse> {
            return localVarFp.createBrandSafetyDenyListDomains(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, brandSafetyPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is \"COMPLETED\", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted. 
         * @summary Archives all of the domains in the Brand Safety Deny List. 
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandSafetyDenyList(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): AxiosPromise<BrandSafetyUpdateResponse> {
            return localVarFp.deleteBrandSafetyDenyList(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options).then((request) => request(axios, basePath));
        },
        /**
         * When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests. 
         * @summary Gets the results for the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} requestId The ID of the request previously submitted.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 results, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestResults(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, startIndex?: number, count?: number, options?: any): AxiosPromise<BrandSafetyRequestResultsResponse> {
            return localVarFp.getRequestResults(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, requestId, startIndex, count, options).then((request) => request(axios, basePath));
        },
        /**
         * When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted. 
         * @summary Gets the status of the given request
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} requestId The ID of the request previously submitted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, requestId: string, options?: any): AxiosPromise<BrandSafetyRequestStatusResponse> {
            return localVarFp.getRequestStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of websites/apps that are on the advertiser\'s Brand Safety Deny List. It can take up to 15 minutes from the time a domain is added/deleted to the time it is reflected in the deny list.
         * @summary Gets a list of websites/apps that are on the advertiser\'s Brand Safety Deny List.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
         * @param {number} [count] Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 domains, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDomains(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, options?: any): AxiosPromise<BrandSafetyGetResponse> {
            return localVarFp.listDomains(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, options).then((request) => request(axios, basePath));
        },
        /**
         * List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days. 
         * @summary List status of all requests
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRequestStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, options?: any): AxiosPromise<BrandSafetyListRequestStatusResponse> {
            return localVarFp.listRequestStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBrandSafetyDenyListDomains operation in BrandSafetyListApi.
 * @export
 * @interface BrandSafetyListApiCreateBrandSafetyDenyListDomainsRequest
 */
export interface BrandSafetyListApiCreateBrandSafetyDenyListDomainsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyListApiCreateBrandSafetyDenyListDomains
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BrandSafetyListApiCreateBrandSafetyDenyListDomains
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects. 
     * @type {BrandSafetyPostRequest}
     * @memberof BrandSafetyListApiCreateBrandSafetyDenyListDomains
     */
    readonly brandSafetyPostRequest: BrandSafetyPostRequest
}

/**
 * Request parameters for deleteBrandSafetyDenyList operation in BrandSafetyListApi.
 * @export
 * @interface BrandSafetyListApiDeleteBrandSafetyDenyListRequest
 */
export interface BrandSafetyListApiDeleteBrandSafetyDenyListRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyListApiDeleteBrandSafetyDenyList
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BrandSafetyListApiDeleteBrandSafetyDenyList
     */
    readonly amazonAdvertisingAPIScope: string
}

/**
 * Request parameters for getRequestResults operation in BrandSafetyListApi.
 * @export
 * @interface BrandSafetyListApiGetRequestResultsRequest
 */
export interface BrandSafetyListApiGetRequestResultsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyListApiGetRequestResults
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BrandSafetyListApiGetRequestResults
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The ID of the request previously submitted.
     * @type {string}
     * @memberof BrandSafetyListApiGetRequestResults
     */
    readonly requestId: string

    /**
     * Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
     * @type {number}
     * @memberof BrandSafetyListApiGetRequestResults
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 results, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
     * @type {number}
     * @memberof BrandSafetyListApiGetRequestResults
     */
    readonly count?: number
}

/**
 * Request parameters for getRequestStatus operation in BrandSafetyListApi.
 * @export
 * @interface BrandSafetyListApiGetRequestStatusRequest
 */
export interface BrandSafetyListApiGetRequestStatusRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyListApiGetRequestStatus
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BrandSafetyListApiGetRequestStatus
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The ID of the request previously submitted.
     * @type {string}
     * @memberof BrandSafetyListApiGetRequestStatus
     */
    readonly requestId: string
}

/**
 * Request parameters for listDomains operation in BrandSafetyListApi.
 * @export
 * @interface BrandSafetyListApiListDomainsRequest
 */
export interface BrandSafetyListApiListDomainsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyListApiListDomains
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BrandSafetyListApiListDomains
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0. 
     * @type {number}
     * @memberof BrandSafetyListApiListDomains
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex&#x3D;0 and count&#x3D;1000. To return the next 1000 domains, set startIndex&#x3D;1000 and count&#x3D;1000, and so on. Defaults to max page size(1000). 
     * @type {number}
     * @memberof BrandSafetyListApiListDomains
     */
    readonly count?: number
}

/**
 * Request parameters for listRequestStatus operation in BrandSafetyListApi.
 * @export
 * @interface BrandSafetyListApiListRequestStatusRequest
 */
export interface BrandSafetyListApiListRequestStatusRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof BrandSafetyListApiListRequestStatus
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof BrandSafetyListApiListRequestStatus
     */
    readonly amazonAdvertisingAPIScope: string
}

/**
 * BrandSafetyListApi - object-oriented interface
 * @export
 * @class BrandSafetyListApi
 * @extends {BaseAPI}
 */
export class BrandSafetyListApi extends BaseAPI {
    /**
     * Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list. 
     * @summary Creates one or more domains to add to a Brand Safety Deny List. 
     * @param {BrandSafetyListApiCreateBrandSafetyDenyListDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyListApi
     */
    public createBrandSafetyDenyListDomains(requestParameters: BrandSafetyListApiCreateBrandSafetyDenyListDomainsRequest, options?: any) {
        return BrandSafetyListApiFp(this.configuration).createBrandSafetyDenyListDomains(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.brandSafetyPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is \"COMPLETED\", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted. 
     * @summary Archives all of the domains in the Brand Safety Deny List. 
     * @param {BrandSafetyListApiDeleteBrandSafetyDenyListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyListApi
     */
    public deleteBrandSafetyDenyList(requestParameters: BrandSafetyListApiDeleteBrandSafetyDenyListRequest, options?: any) {
        return BrandSafetyListApiFp(this.configuration).deleteBrandSafetyDenyList(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests. 
     * @summary Gets the results for the given request
     * @param {BrandSafetyListApiGetRequestResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyListApi
     */
    public getRequestResults(requestParameters: BrandSafetyListApiGetRequestResultsRequest, options?: any) {
        return BrandSafetyListApiFp(this.configuration).getRequestResults(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.requestId, requestParameters.startIndex, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted. 
     * @summary Gets the status of the given request
     * @param {BrandSafetyListApiGetRequestStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyListApi
     */
    public getRequestStatus(requestParameters: BrandSafetyListApiGetRequestStatusRequest, options?: any) {
        return BrandSafetyListApiFp(this.configuration).getRequestStatus(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of websites/apps that are on the advertiser\'s Brand Safety Deny List. It can take up to 15 minutes from the time a domain is added/deleted to the time it is reflected in the deny list.
     * @summary Gets a list of websites/apps that are on the advertiser\'s Brand Safety Deny List.
     * @param {BrandSafetyListApiListDomainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyListApi
     */
    public listDomains(requestParameters: BrandSafetyListApiListDomainsRequest, options?: any) {
        return BrandSafetyListApiFp(this.configuration).listDomains(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days. 
     * @summary List status of all requests
     * @param {BrandSafetyListApiListRequestStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandSafetyListApi
     */
    public listRequestStatus(requestParameters: BrandSafetyListApiListRequestStatusRequest, options?: any) {
        return BrandSafetyListApiFp(this.configuration).listRequestStatus(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BudgetRulesApi - axios parameter creator
 * @export
 */
export const BudgetRulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates one or more budget rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {CreateSDBudgetRulesRequest} createSDBudgetRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBudgetRulesForSDCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createSDBudgetRulesRequest: CreateSDBudgetRulesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createBudgetRulesForSDCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createBudgetRulesForSDCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'createSDBudgetRulesRequest' is not null or undefined
            assertParamExists('createBudgetRulesForSDCampaigns', 'createSDBudgetRulesRequest', createSDBudgetRulesRequest)
            const localVarPath = `/sd/budgetRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSDBudgetRulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a budget rule specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} budgetRuleId The budget rule identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetRuleByRuleIdForSDCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, budgetRuleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getBudgetRuleByRuleIdForSDCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getBudgetRuleByRuleIdForSDCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'budgetRuleId' is not null or undefined
            assertParamExists('getBudgetRuleByRuleIdForSDCampaigns', 'budgetRuleId', budgetRuleId)
            const localVarPath = `/sd/budgetRules/{budgetRuleId}`
                .replace(`{${"budgetRuleId"}}`, encodeURIComponent(String(budgetRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Deprecation notice: This endpoint will be deprecated on August 31, 2023.** The budget history is returned for the time period specified in the required startDate and endDate parameters. The maximum time period is 90 days.
         * @summary Gets the budget history for a campaign specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a Login with Amazon account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} campaignId The campaign identifier.
         * @param {number} pageSize Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
         * @param {string} startDate The start date of the budget history in YYYYMMDD format.
         * @param {string} endDate The end date of the budget history in YYYYMMDD format.
         * @param {string} [nextToken] To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleBasedBudgetHistoryForSDCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, pageSize: number, startDate: string, endDate: string, nextToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getRuleBasedBudgetHistoryForSDCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getRuleBasedBudgetHistoryForSDCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getRuleBasedBudgetHistoryForSDCampaigns', 'campaignId', campaignId)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('getRuleBasedBudgetHistoryForSDCampaigns', 'pageSize', pageSize)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getRuleBasedBudgetHistoryForSDCampaigns', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getRuleBasedBudgetHistoryForSDCampaigns', 'endDate', endDate)
            const localVarPath = `/sd/campaigns/{campaignId}/budgetRules/budgetHistory`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all budget rules created by an advertiser
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} pageSize Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
         * @param {string} [nextToken] To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSDBudgetRulesForAdvertiser: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, pageSize: number, nextToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getSDBudgetRulesForAdvertiser', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getSDBudgetRulesForAdvertiser', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('getSDBudgetRulesForAdvertiser', 'pageSize', pageSize)
            const localVarPath = `/sd/budgetRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update one or more budget rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {UpdateSDBudgetRulesRequest} updateSDBudgetRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBudgetRulesForSDCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateSDBudgetRulesRequest: UpdateSDBudgetRulesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateBudgetRulesForSDCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateBudgetRulesForSDCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'updateSDBudgetRulesRequest' is not null or undefined
            assertParamExists('updateBudgetRulesForSDCampaigns', 'updateSDBudgetRulesRequest', updateSDBudgetRulesRequest)
            const localVarPath = `/sd/budgetRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSDBudgetRulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BudgetRulesApi - functional programming interface
 * @export
 */
export const BudgetRulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BudgetRulesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates one or more budget rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {CreateSDBudgetRulesRequest} createSDBudgetRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createSDBudgetRulesRequest: CreateSDBudgetRulesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBudgetRulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createSDBudgetRulesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a budget rule specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} budgetRuleId The budget rule identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBudgetRuleByRuleIdForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, budgetRuleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSDBudgetRuleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBudgetRuleByRuleIdForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, budgetRuleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Deprecation notice: This endpoint will be deprecated on August 31, 2023.** The budget history is returned for the time period specified in the required startDate and endDate parameters. The maximum time period is 90 days.
         * @summary Gets the budget history for a campaign specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a Login with Amazon account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} campaignId The campaign identifier.
         * @param {number} pageSize Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
         * @param {string} startDate The start date of the budget history in YYYYMMDD format.
         * @param {string} endDate The end date of the budget history in YYYYMMDD format.
         * @param {string} [nextToken] To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRuleBasedBudgetHistoryForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, pageSize: number, startDate: string, endDate: string, nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDBudgetHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRuleBasedBudgetHistoryForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, pageSize, startDate, endDate, nextToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all budget rules created by an advertiser
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} pageSize Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
         * @param {string} [nextToken] To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSDBudgetRulesForAdvertiser(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, pageSize: number, nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSDBudgetRulesForAdvertiserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSDBudgetRulesForAdvertiser(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, pageSize, nextToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update one or more budget rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {UpdateSDBudgetRulesRequest} updateSDBudgetRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateSDBudgetRulesRequest: UpdateSDBudgetRulesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBudgetRulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateSDBudgetRulesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BudgetRulesApi - factory interface
 * @export
 */
export const BudgetRulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BudgetRulesApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates one or more budget rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {CreateSDBudgetRulesRequest} createSDBudgetRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createSDBudgetRulesRequest: CreateSDBudgetRulesRequest, options?: any): AxiosPromise<CreateBudgetRulesResponse> {
            return localVarFp.createBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createSDBudgetRulesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a budget rule specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} budgetRuleId The budget rule identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetRuleByRuleIdForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, budgetRuleId: string, options?: any): AxiosPromise<GetSDBudgetRuleResponse> {
            return localVarFp.getBudgetRuleByRuleIdForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, budgetRuleId, options).then((request) => request(axios, basePath));
        },
        /**
         * **Deprecation notice: This endpoint will be deprecated on August 31, 2023.** The budget history is returned for the time period specified in the required startDate and endDate parameters. The maximum time period is 90 days.
         * @summary Gets the budget history for a campaign specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a Login with Amazon account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} campaignId The campaign identifier.
         * @param {number} pageSize Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
         * @param {string} startDate The start date of the budget history in YYYYMMDD format.
         * @param {string} endDate The end date of the budget history in YYYYMMDD format.
         * @param {string} [nextToken] To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRuleBasedBudgetHistoryForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, pageSize: number, startDate: string, endDate: string, nextToken?: string, options?: any): AxiosPromise<SDBudgetHistory> {
            return localVarFp.getRuleBasedBudgetHistoryForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, pageSize, startDate, endDate, nextToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all budget rules created by an advertiser
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {number} pageSize Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
         * @param {string} [nextToken] To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSDBudgetRulesForAdvertiser(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, pageSize: number, nextToken?: string, options?: any): AxiosPromise<GetSDBudgetRulesForAdvertiserResponse> {
            return localVarFp.getSDBudgetRulesForAdvertiser(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, pageSize, nextToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update one or more budget rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {UpdateSDBudgetRulesRequest} updateSDBudgetRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateSDBudgetRulesRequest: UpdateSDBudgetRulesRequest, options?: any): AxiosPromise<UpdateBudgetRulesResponse> {
            return localVarFp.updateBudgetRulesForSDCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateSDBudgetRulesRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBudgetRulesForSDCampaigns operation in BudgetRulesApi.
 * @export
 * @interface BudgetRulesApiCreateBudgetRulesForSDCampaignsRequest
 */
export interface BudgetRulesApiCreateBudgetRulesForSDCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiCreateBudgetRulesForSDCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiCreateBudgetRulesForSDCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {CreateSDBudgetRulesRequest}
     * @memberof BudgetRulesApiCreateBudgetRulesForSDCampaigns
     */
    readonly createSDBudgetRulesRequest: CreateSDBudgetRulesRequest
}

/**
 * Request parameters for getBudgetRuleByRuleIdForSDCampaigns operation in BudgetRulesApi.
 * @export
 * @interface BudgetRulesApiGetBudgetRuleByRuleIdForSDCampaignsRequest
 */
export interface BudgetRulesApiGetBudgetRuleByRuleIdForSDCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiGetBudgetRuleByRuleIdForSDCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiGetBudgetRuleByRuleIdForSDCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The budget rule identifier.
     * @type {string}
     * @memberof BudgetRulesApiGetBudgetRuleByRuleIdForSDCampaigns
     */
    readonly budgetRuleId: string
}

/**
 * Request parameters for getRuleBasedBudgetHistoryForSDCampaigns operation in BudgetRulesApi.
 * @export
 * @interface BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaignsRequest
 */
export interface BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaignsRequest {
    /**
     * The identifier of a client associated with a Login with Amazon account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The campaign identifier.
     * @type {number}
     * @memberof BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaigns
     */
    readonly campaignId: number

    /**
     * Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
     * @type {number}
     * @memberof BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaigns
     */
    readonly pageSize: number

    /**
     * The start date of the budget history in YYYYMMDD format.
     * @type {string}
     * @memberof BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaigns
     */
    readonly startDate: string

    /**
     * The end date of the budget history in YYYYMMDD format.
     * @type {string}
     * @memberof BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaigns
     */
    readonly endDate: string

    /**
     * To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
     * @type {string}
     * @memberof BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaigns
     */
    readonly nextToken?: string
}

/**
 * Request parameters for getSDBudgetRulesForAdvertiser operation in BudgetRulesApi.
 * @export
 * @interface BudgetRulesApiGetSDBudgetRulesForAdvertiserRequest
 */
export interface BudgetRulesApiGetSDBudgetRulesForAdvertiserRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiGetSDBudgetRulesForAdvertiser
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiGetSDBudgetRulesForAdvertiser
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Sets a limit on the number of results returned. Maximum limit of &#x60;pageSize&#x60; is 30.
     * @type {number}
     * @memberof BudgetRulesApiGetSDBudgetRulesForAdvertiser
     */
    readonly pageSize: number

    /**
     * To retrieve the next page of results, call the same operation and specify this token in the request. If the &#x60;nextToken&#x60; field is empty, there are no further results.
     * @type {string}
     * @memberof BudgetRulesApiGetSDBudgetRulesForAdvertiser
     */
    readonly nextToken?: string
}

/**
 * Request parameters for updateBudgetRulesForSDCampaigns operation in BudgetRulesApi.
 * @export
 * @interface BudgetRulesApiUpdateBudgetRulesForSDCampaignsRequest
 */
export interface BudgetRulesApiUpdateBudgetRulesForSDCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiUpdateBudgetRulesForSDCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {string}
     * @memberof BudgetRulesApiUpdateBudgetRulesForSDCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {UpdateSDBudgetRulesRequest}
     * @memberof BudgetRulesApiUpdateBudgetRulesForSDCampaigns
     */
    readonly updateSDBudgetRulesRequest: UpdateSDBudgetRulesRequest
}

/**
 * BudgetRulesApi - object-oriented interface
 * @export
 * @class BudgetRulesApi
 * @extends {BaseAPI}
 */
export class BudgetRulesApi extends BaseAPI {
    /**
     * 
     * @summary Creates one or more budget rules.
     * @param {BudgetRulesApiCreateBudgetRulesForSDCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetRulesApi
     */
    public createBudgetRulesForSDCampaigns(requestParameters: BudgetRulesApiCreateBudgetRulesForSDCampaignsRequest, options?: any) {
        return BudgetRulesApiFp(this.configuration).createBudgetRulesForSDCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createSDBudgetRulesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a budget rule specified by identifier.
     * @param {BudgetRulesApiGetBudgetRuleByRuleIdForSDCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetRulesApi
     */
    public getBudgetRuleByRuleIdForSDCampaigns(requestParameters: BudgetRulesApiGetBudgetRuleByRuleIdForSDCampaignsRequest, options?: any) {
        return BudgetRulesApiFp(this.configuration).getBudgetRuleByRuleIdForSDCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.budgetRuleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Deprecation notice: This endpoint will be deprecated on August 31, 2023.** The budget history is returned for the time period specified in the required startDate and endDate parameters. The maximum time period is 90 days.
     * @summary Gets the budget history for a campaign specified by identifier.
     * @param {BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetRulesApi
     */
    public getRuleBasedBudgetHistoryForSDCampaigns(requestParameters: BudgetRulesApiGetRuleBasedBudgetHistoryForSDCampaignsRequest, options?: any) {
        return BudgetRulesApiFp(this.configuration).getRuleBasedBudgetHistoryForSDCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.campaignId, requestParameters.pageSize, requestParameters.startDate, requestParameters.endDate, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all budget rules created by an advertiser
     * @param {BudgetRulesApiGetSDBudgetRulesForAdvertiserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetRulesApi
     */
    public getSDBudgetRulesForAdvertiser(requestParameters: BudgetRulesApiGetSDBudgetRulesForAdvertiserRequest, options?: any) {
        return BudgetRulesApiFp(this.configuration).getSDBudgetRulesForAdvertiser(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.pageSize, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update one or more budget rules.
     * @param {BudgetRulesApiUpdateBudgetRulesForSDCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetRulesApi
     */
    public updateBudgetRulesForSDCampaigns(requestParameters: BudgetRulesApiUpdateBudgetRulesForSDCampaignsRequest, options?: any) {
        return BudgetRulesApiFp(this.configuration).updateBudgetRulesForSDCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateSDBudgetRulesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BudgetUsageApi - axios parameter creator
 * @export
 */
export const BudgetUsageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Budget usage API for SD campaigns
         * @param {any} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {any} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {BudgetUsageCampaignRequest} [budgetUsageCampaignRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sdCampaignsBudgetUsage: async (amazonAdvertisingAPIClientId: any, amazonAdvertisingAPIScope: any, budgetUsageCampaignRequest?: BudgetUsageCampaignRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('sdCampaignsBudgetUsage', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('sdCampaignsBudgetUsage', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/campaigns/budget/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(JSON.stringify(amazonAdvertisingAPIClientId));
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(JSON.stringify(amazonAdvertisingAPIScope));
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.sdcampaignbudgetusage.v1+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(budgetUsageCampaignRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BudgetUsageApi - functional programming interface
 * @export
 */
export const BudgetUsageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BudgetUsageApiAxiosParamCreator(configuration)
    return {
        /**
         * **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Budget usage API for SD campaigns
         * @param {any} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {any} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {BudgetUsageCampaignRequest} [budgetUsageCampaignRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sdCampaignsBudgetUsage(amazonAdvertisingAPIClientId: any, amazonAdvertisingAPIScope: any, budgetUsageCampaignRequest?: BudgetUsageCampaignRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BudgetUsageCampaignResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sdCampaignsBudgetUsage(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, budgetUsageCampaignRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BudgetUsageApi - factory interface
 * @export
 */
export const BudgetUsageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BudgetUsageApiFp(configuration)
    return {
        /**
         * **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Budget usage API for SD campaigns
         * @param {any} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
         * @param {any} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
         * @param {BudgetUsageCampaignRequest} [budgetUsageCampaignRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sdCampaignsBudgetUsage(amazonAdvertisingAPIClientId: any, amazonAdvertisingAPIScope: any, budgetUsageCampaignRequest?: BudgetUsageCampaignRequest, options?: any): AxiosPromise<BudgetUsageCampaignResponse> {
            return localVarFp.sdCampaignsBudgetUsage(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, budgetUsageCampaignRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for sdCampaignsBudgetUsage operation in BudgetUsageApi.
 * @export
 * @interface BudgetUsageApiSdCampaignsBudgetUsageRequest
 */
export interface BudgetUsageApiSdCampaignsBudgetUsageRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account. This is a required header for advertisers and integrators using the Advertising API.
     * @type {any}
     * @memberof BudgetUsageApiSdCampaignsBudgetUsage
     */
    readonly amazonAdvertisingAPIClientId: any

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header. This is a required header for advertisers and integrators using the Advertising API.
     * @type {any}
     * @memberof BudgetUsageApiSdCampaignsBudgetUsage
     */
    readonly amazonAdvertisingAPIScope: any

    /**
     * 
     * @type {BudgetUsageCampaignRequest}
     * @memberof BudgetUsageApiSdCampaignsBudgetUsage
     */
    readonly budgetUsageCampaignRequest?: BudgetUsageCampaignRequest
}

/**
 * BudgetUsageApi - object-oriented interface
 * @export
 * @class BudgetUsageApi
 * @extends {BaseAPI}
 */
export class BudgetUsageApi extends BaseAPI {
    /**
     * **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @summary Budget usage API for SD campaigns
     * @param {BudgetUsageApiSdCampaignsBudgetUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetUsageApi
     */
    public sdCampaignsBudgetUsage(requestParameters: BudgetUsageApiSdCampaignsBudgetUsageRequest, options?: any) {
        return BudgetUsageApiFp(this.configuration).sdCampaignsBudgetUsage(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.budgetUsageCampaignRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CampaignsApi - axios parameter creator
 * @export
 */
export const CampaignsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.
         * @summary Sets the campaign status to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveCampaign: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveCampaign', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveCampaign', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('archiveCampaign', 'campaignId', campaignId)
            const localVarPath = `/sd/campaigns/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCampaign>} [createCampaign] An array of Campaign objects. For each object, specify required fields and their values. Required fields are &#x60;name&#x60;, &#x60;tactic&#x60;, &#x60;state&#x60;, and &#x60;startDate&#x60;. Maximum length of the array is 100 objects. If you don\&#39;t specify a &#x60;budget&#x60;, it will be set as the [default budget for your region](https://advertising.amazon.com/API/docs/en-us/concepts/limits#default-budgets).   If you are using Optimization rules, the following campaign budget must be at least:   - 5x the value of any COST_PER_ORDER threshold.   - 10x the value of any COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS threshold.   - 20x the value of any COST_PER_CLICK threshold. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCampaign?: Array<CreateCampaign>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCampaign, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Campaign object for a requested campaign. Note that the Campaign object is designed for performance, with a small set of commonly used campaign fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
         * @summary Gets a requested campaign.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the requested campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaign: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getCampaign', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getCampaign', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaign', 'campaignId', campaignId)
            const localVarPath = `/sd/campaigns/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a CampaignResponseEx object for a requested campaign. The CampaignResponseEx includes the extended set of available fields.
         * @summary Gets extended information for a requested campaign.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the requested campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignResponseEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getCampaignResponseEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getCampaignResponseEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaignResponseEx', 'campaignId', campaignId)
            const localVarPath = `/sd/campaigns/extended/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of Campaign objects for a requested set of Sponsored Display campaigns. Note that the Campaign object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
         * @summary Gets a list of campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only campaign with the specified name using an exact string match.
         * @param {string} [campaignIdFilter] Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
         * @param {string} [portfolioIdFilter] Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, portfolioIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (portfolioIdFilter !== undefined) {
                localVarQueryParameter['portfolioIdFilter'] = portfolioIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of CampaignResponseEx objects for a set of requested campaigns.
         * @summary Gets a list of campaigns with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only campaign with the specified name using an exact string match.
         * @param {string} [campaignIdFilter] Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
         * @param {string} [portfolioIdFilter] Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, portfolioIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listCampaignsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listCampaignsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/campaigns/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (portfolioIdFilter !== undefined) {
                localVarQueryParameter['portfolioIdFilter'] = portfolioIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateCampaign>} [updateCampaign] An array of Campaign objects. For each object, specify a campaign identifier and mutable fields with their updated values. The mutable fields are &#x60;name&#x60;, &#x60;state&#x60;, &#x60;budget&#x60;, &#x60;startDate&#x60;, and &#x60;endDate&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaigns: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateCampaign?: Array<UpdateCampaign>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateCampaigns', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateCampaigns', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCampaign, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignsApi - functional programming interface
 * @export
 */
export const CampaignsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampaignsApiAxiosParamCreator(configuration)
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.
         * @summary Sets the campaign status to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveCampaign(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveCampaign(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCampaign>} [createCampaign] An array of Campaign objects. For each object, specify required fields and their values. Required fields are &#x60;name&#x60;, &#x60;tactic&#x60;, &#x60;state&#x60;, and &#x60;startDate&#x60;. Maximum length of the array is 100 objects. If you don\&#39;t specify a &#x60;budget&#x60;, it will be set as the [default budget for your region](https://advertising.amazon.com/API/docs/en-us/concepts/limits#default-budgets).   If you are using Optimization rules, the following campaign budget must be at least:   - 5x the value of any COST_PER_ORDER threshold.   - 10x the value of any COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS threshold.   - 20x the value of any COST_PER_CLICK threshold. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCampaign?: Array<CreateCampaign>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createCampaign, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a Campaign object for a requested campaign. Note that the Campaign object is designed for performance, with a small set of commonly used campaign fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
         * @summary Gets a requested campaign.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the requested campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaign(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaign(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a CampaignResponseEx object for a requested campaign. The CampaignResponseEx includes the extended set of available fields.
         * @summary Gets extended information for a requested campaign.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the requested campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignResponseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignResponseEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignResponseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of Campaign objects for a requested set of Sponsored Display campaigns. Note that the Campaign object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
         * @summary Gets a list of campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only campaign with the specified name using an exact string match.
         * @param {string} [campaignIdFilter] Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
         * @param {string} [portfolioIdFilter] Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, portfolioIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Campaign>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, name, campaignIdFilter, portfolioIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of CampaignResponseEx objects for a set of requested campaigns.
         * @summary Gets a list of campaigns with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only campaign with the specified name using an exact string match.
         * @param {string} [campaignIdFilter] Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
         * @param {string} [portfolioIdFilter] Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaignsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, portfolioIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignResponseEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCampaignsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, name, campaignIdFilter, portfolioIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateCampaign>} [updateCampaign] An array of Campaign objects. For each object, specify a campaign identifier and mutable fields with their updated values. The mutable fields are &#x60;name&#x60;, &#x60;state&#x60;, &#x60;budget&#x60;, &#x60;startDate&#x60;, and &#x60;endDate&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateCampaign?: Array<UpdateCampaign>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateCampaign, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CampaignsApi - factory interface
 * @export
 */
export const CampaignsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampaignsApiFp(configuration)
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.
         * @summary Sets the campaign status to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveCampaign(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): AxiosPromise<CampaignResponse> {
            return localVarFp.archiveCampaign(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCampaign>} [createCampaign] An array of Campaign objects. For each object, specify required fields and their values. Required fields are &#x60;name&#x60;, &#x60;tactic&#x60;, &#x60;state&#x60;, and &#x60;startDate&#x60;. Maximum length of the array is 100 objects. If you don\&#39;t specify a &#x60;budget&#x60;, it will be set as the [default budget for your region](https://advertising.amazon.com/API/docs/en-us/concepts/limits#default-budgets).   If you are using Optimization rules, the following campaign budget must be at least:   - 5x the value of any COST_PER_ORDER threshold.   - 10x the value of any COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS threshold.   - 20x the value of any COST_PER_CLICK threshold. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCampaign?: Array<CreateCampaign>, options?: any): AxiosPromise<Array<CampaignResponse>> {
            return localVarFp.createCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createCampaign, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a Campaign object for a requested campaign. Note that the Campaign object is designed for performance, with a small set of commonly used campaign fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
         * @summary Gets a requested campaign.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the requested campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaign(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): AxiosPromise<Campaign> {
            return localVarFp.getCampaign(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a CampaignResponseEx object for a requested campaign. The CampaignResponseEx includes the extended set of available fields.
         * @summary Gets extended information for a requested campaign.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} campaignId The identifier of the requested campaign.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignResponseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, campaignId: number, options?: any): AxiosPromise<CampaignResponseEx> {
            return localVarFp.getCampaignResponseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of Campaign objects for a requested set of Sponsored Display campaigns. Note that the Campaign object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
         * @summary Gets a list of campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only campaign with the specified name using an exact string match.
         * @param {string} [campaignIdFilter] Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
         * @param {string} [portfolioIdFilter] Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, portfolioIdFilter?: string, options?: any): AxiosPromise<Array<Campaign>> {
            return localVarFp.listCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, name, campaignIdFilter, portfolioIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of CampaignResponseEx objects for a set of requested campaigns.
         * @summary Gets a list of campaigns with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [name] Optional. The returned array includes only campaign with the specified name using an exact string match.
         * @param {string} [campaignIdFilter] Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
         * @param {string} [portfolioIdFilter] Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaignsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', name?: string, campaignIdFilter?: string, portfolioIdFilter?: string, options?: any): AxiosPromise<Array<CampaignResponseEx>> {
            return localVarFp.listCampaignsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, name, campaignIdFilter, portfolioIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates one or more campaigns.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateCampaign>} [updateCampaign] An array of Campaign objects. For each object, specify a campaign identifier and mutable fields with their updated values. The mutable fields are &#x60;name&#x60;, &#x60;state&#x60;, &#x60;budget&#x60;, &#x60;startDate&#x60;, and &#x60;endDate&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaigns(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateCampaign?: Array<UpdateCampaign>, options?: any): AxiosPromise<Array<CampaignResponse>> {
            return localVarFp.updateCampaigns(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateCampaign, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveCampaign operation in CampaignsApi.
 * @export
 * @interface CampaignsApiArchiveCampaignRequest
 */
export interface CampaignsApiArchiveCampaignRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CampaignsApiArchiveCampaign
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiArchiveCampaign
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the campaign.
     * @type {number}
     * @memberof CampaignsApiArchiveCampaign
     */
    readonly campaignId: number
}

/**
 * Request parameters for createCampaigns operation in CampaignsApi.
 * @export
 * @interface CampaignsApiCreateCampaignsRequest
 */
export interface CampaignsApiCreateCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CampaignsApiCreateCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiCreateCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of Campaign objects. For each object, specify required fields and their values. Required fields are &#x60;name&#x60;, &#x60;tactic&#x60;, &#x60;state&#x60;, and &#x60;startDate&#x60;. Maximum length of the array is 100 objects. If you don\&#39;t specify a &#x60;budget&#x60;, it will be set as the [default budget for your region](https://advertising.amazon.com/API/docs/en-us/concepts/limits#default-budgets).   If you are using Optimization rules, the following campaign budget must be at least:   - 5x the value of any COST_PER_ORDER threshold.   - 10x the value of any COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS threshold.   - 20x the value of any COST_PER_CLICK threshold. 
     * @type {Array<CreateCampaign>}
     * @memberof CampaignsApiCreateCampaigns
     */
    readonly createCampaign?: Array<CreateCampaign>
}

/**
 * Request parameters for getCampaign operation in CampaignsApi.
 * @export
 * @interface CampaignsApiGetCampaignRequest
 */
export interface CampaignsApiGetCampaignRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CampaignsApiGetCampaign
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiGetCampaign
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested campaign.
     * @type {number}
     * @memberof CampaignsApiGetCampaign
     */
    readonly campaignId: number
}

/**
 * Request parameters for getCampaignResponseEx operation in CampaignsApi.
 * @export
 * @interface CampaignsApiGetCampaignResponseExRequest
 */
export interface CampaignsApiGetCampaignResponseExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CampaignsApiGetCampaignResponseEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiGetCampaignResponseEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested campaign.
     * @type {number}
     * @memberof CampaignsApiGetCampaignResponseEx
     */
    readonly campaignId: number
}

/**
 * Request parameters for listCampaigns operation in CampaignsApi.
 * @export
 * @interface CampaignsApiListCampaignsRequest
 */
export interface CampaignsApiListCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CampaignsApiListCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiListCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof CampaignsApiListCampaigns
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof CampaignsApiListCampaigns
     */
    readonly count?: number

    /**
     * Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof CampaignsApiListCampaigns
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. The returned array includes only campaign with the specified name using an exact string match.
     * @type {string}
     * @memberof CampaignsApiListCampaigns
     */
    readonly name?: string

    /**
     * Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
     * @type {string}
     * @memberof CampaignsApiListCampaigns
     */
    readonly campaignIdFilter?: string

    /**
     * Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
     * @type {string}
     * @memberof CampaignsApiListCampaigns
     */
    readonly portfolioIdFilter?: string
}

/**
 * Request parameters for listCampaignsEx operation in CampaignsApi.
 * @export
 * @interface CampaignsApiListCampaignsExRequest
 */
export interface CampaignsApiListCampaignsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten campaigns set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly count?: number

    /**
     * Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. The returned array includes only campaign with the specified name using an exact string match.
     * @type {string}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly name?: string

    /**
     * Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
     * @type {string}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly campaignIdFilter?: string

    /**
     * Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
     * @type {string}
     * @memberof CampaignsApiListCampaignsEx
     */
    readonly portfolioIdFilter?: string
}

/**
 * Request parameters for updateCampaigns operation in CampaignsApi.
 * @export
 * @interface CampaignsApiUpdateCampaignsRequest
 */
export interface CampaignsApiUpdateCampaignsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CampaignsApiUpdateCampaigns
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CampaignsApiUpdateCampaigns
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of Campaign objects. For each object, specify a campaign identifier and mutable fields with their updated values. The mutable fields are &#x60;name&#x60;, &#x60;state&#x60;, &#x60;budget&#x60;, &#x60;startDate&#x60;, and &#x60;endDate&#x60;. Maximum length of the array is 100 objects.
     * @type {Array<UpdateCampaign>}
     * @memberof CampaignsApiUpdateCampaigns
     */
    readonly updateCampaign?: Array<UpdateCampaign>
}

/**
 * CampaignsApi - object-oriented interface
 * @export
 * @class CampaignsApi
 * @extends {BaseAPI}
 */
export class CampaignsApi extends BaseAPI {
    /**
     * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.
     * @summary Sets the campaign status to archived.
     * @param {CampaignsApiArchiveCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public archiveCampaign(requestParameters: CampaignsApiArchiveCampaignRequest, options?: any) {
        return CampaignsApiFp(this.configuration).archiveCampaign(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates one or more campaigns.
     * @param {CampaignsApiCreateCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public createCampaigns(requestParameters: CampaignsApiCreateCampaignsRequest, options?: any) {
        return CampaignsApiFp(this.configuration).createCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createCampaign, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a Campaign object for a requested campaign. Note that the Campaign object is designed for performance, with a small set of commonly used campaign fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
     * @summary Gets a requested campaign.
     * @param {CampaignsApiGetCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaign(requestParameters: CampaignsApiGetCampaignRequest, options?: any) {
        return CampaignsApiFp(this.configuration).getCampaign(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a CampaignResponseEx object for a requested campaign. The CampaignResponseEx includes the extended set of available fields.
     * @summary Gets extended information for a requested campaign.
     * @param {CampaignsApiGetCampaignResponseExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaignResponseEx(requestParameters: CampaignsApiGetCampaignResponseExRequest, options?: any) {
        return CampaignsApiFp(this.configuration).getCampaignResponseEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of Campaign objects for a requested set of Sponsored Display campaigns. Note that the Campaign object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.
     * @summary Gets a list of campaigns.
     * @param {CampaignsApiListCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public listCampaigns(requestParameters: CampaignsApiListCampaignsRequest, options?: any) {
        return CampaignsApiFp(this.configuration).listCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.name, requestParameters.campaignIdFilter, requestParameters.portfolioIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of CampaignResponseEx objects for a set of requested campaigns.
     * @summary Gets a list of campaigns with extended fields.
     * @param {CampaignsApiListCampaignsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public listCampaignsEx(requestParameters: CampaignsApiListCampaignsExRequest, options?: any) {
        return CampaignsApiFp(this.configuration).listCampaignsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.name, requestParameters.campaignIdFilter, requestParameters.portfolioIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates one or more campaigns.
     * @param {CampaignsApiUpdateCampaignsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public updateCampaigns(requestParameters: CampaignsApiUpdateCampaignsRequest, options?: any) {
        return CampaignsApiFp(this.configuration).updateCampaigns(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateCampaign, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CreativesApi - axios parameter creator
 * @export
 */
export const CreativesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary A POST request of one or more creatives.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCreative>} [createCreative] An array of Creative objects to create. Maximum length of the array is 100 objects. Note - when using productAds with landingPageURL of OFF_AMAZON_LINK, STORE, or MOMENT, the following properties are required all together; 1) headline, 2) brandLogo, and 3) rectCustomImage, squareCustomImage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCreatives: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCreative?: Array<CreateCreative>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createCreatives', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createCreatives', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/creatives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCreative, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of creative moderations
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Locale} language The language of the returned creative moderation metadata.
         * @param {number} [startIndex] Sets a cursor into the requested set of creative moderations. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creative moderations set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creative moderations, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {string} [adGroupIdFilter] The returned array includes only creative moderations associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
         * @param {string} [creativeIdFilter] The returned array includes only creative moderations with creative identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCreativeModerations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, language: Locale, startIndex?: number, count?: number, adGroupIdFilter?: string, creativeIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listCreativeModerations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listCreativeModerations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('listCreativeModerations', 'language', language)
            const localVarPath = `/sd/moderation/creatives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (creativeIdFilter !== undefined) {
                localVarQueryParameter['creativeIdFilter'] = creativeIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of creatives
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Sets a cursor into the requested set of creatives. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creatives set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creatives, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {string} [adGroupIdFilter] The returned array includes only creatives associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
         * @param {string} [creativeIdFilter] The returned array includes only creatives with identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCreatives: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, adGroupIdFilter?: string, creativeIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listCreatives', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listCreatives', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/creatives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (creativeIdFilter !== undefined) {
                localVarQueryParameter['creativeIdFilter'] = creativeIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets creative preview HTML.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {CreativePreviewRequest} [creativePreviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreativePreview: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativePreviewRequest?: CreativePreviewRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('postCreativePreview', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('postCreativePreview', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/creatives/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creativePreviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates one or more creatives.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreativeUpdate>} [creativeUpdate] An array of creative objects to update. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCreatives: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeUpdate?: Array<CreativeUpdate>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateCreatives', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateCreatives', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/creatives`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creativeUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreativesApi - functional programming interface
 * @export
 */
export const CreativesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreativesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary A POST request of one or more creatives.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCreative>} [createCreative] An array of Creative objects to create. Maximum length of the array is 100 objects. Note - when using productAds with landingPageURL of OFF_AMAZON_LINK, STORE, or MOMENT, the following properties are required all together; 1) headline, 2) brandLogo, and 3) rectCustomImage, squareCustomImage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCreative?: Array<CreateCreative>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreativeResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createCreative, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of creative moderations
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Locale} language The language of the returned creative moderation metadata.
         * @param {number} [startIndex] Sets a cursor into the requested set of creative moderations. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creative moderations set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creative moderations, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {string} [adGroupIdFilter] The returned array includes only creative moderations associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
         * @param {string} [creativeIdFilter] The returned array includes only creative moderations with creative identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCreativeModerations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, language: Locale, startIndex?: number, count?: number, adGroupIdFilter?: string, creativeIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreativeModeration>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCreativeModerations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, language, startIndex, count, adGroupIdFilter, creativeIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of creatives
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Sets a cursor into the requested set of creatives. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creatives set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creatives, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {string} [adGroupIdFilter] The returned array includes only creatives associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
         * @param {string} [creativeIdFilter] The returned array includes only creatives with identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, adGroupIdFilter?: string, creativeIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Creative>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, adGroupIdFilter, creativeIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets creative preview HTML.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {CreativePreviewRequest} [creativePreviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreativePreview(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativePreviewRequest?: CreativePreviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreativePreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreativePreview(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativePreviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates one or more creatives.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreativeUpdate>} [creativeUpdate] An array of creative objects to update. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeUpdate?: Array<CreativeUpdate>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreativeResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativeUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreativesApi - factory interface
 * @export
 */
export const CreativesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreativesApiFp(configuration)
    return {
        /**
         * 
         * @summary A POST request of one or more creatives.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateCreative>} [createCreative] An array of Creative objects to create. Maximum length of the array is 100 objects. Note - when using productAds with landingPageURL of OFF_AMAZON_LINK, STORE, or MOMENT, the following properties are required all together; 1) headline, 2) brandLogo, and 3) rectCustomImage, squareCustomImage.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createCreative?: Array<CreateCreative>, options?: any): AxiosPromise<Array<CreativeResponse>> {
            return localVarFp.createCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createCreative, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of creative moderations
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Locale} language The language of the returned creative moderation metadata.
         * @param {number} [startIndex] Sets a cursor into the requested set of creative moderations. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creative moderations set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creative moderations, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {string} [adGroupIdFilter] The returned array includes only creative moderations associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
         * @param {string} [creativeIdFilter] The returned array includes only creative moderations with creative identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCreativeModerations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, language: Locale, startIndex?: number, count?: number, adGroupIdFilter?: string, creativeIdFilter?: string, options?: any): AxiosPromise<Array<CreativeModeration>> {
            return localVarFp.listCreativeModerations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, language, startIndex, count, adGroupIdFilter, creativeIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of creatives
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Sets a cursor into the requested set of creatives. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creatives set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creatives, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {string} [adGroupIdFilter] The returned array includes only creatives associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
         * @param {string} [creativeIdFilter] The returned array includes only creatives with identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, adGroupIdFilter?: string, creativeIdFilter?: string, options?: any): AxiosPromise<Array<Creative>> {
            return localVarFp.listCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, adGroupIdFilter, creativeIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets creative preview HTML.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {CreativePreviewRequest} [creativePreviewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreativePreview(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativePreviewRequest?: CreativePreviewRequest, options?: any): AxiosPromise<CreativePreviewResponse> {
            return localVarFp.postCreativePreview(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativePreviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates one or more creatives.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreativeUpdate>} [creativeUpdate] An array of creative objects to update. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCreatives(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, creativeUpdate?: Array<CreativeUpdate>, options?: any): AxiosPromise<Array<CreativeResponse>> {
            return localVarFp.updateCreatives(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, creativeUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCreatives operation in CreativesApi.
 * @export
 * @interface CreativesApiCreateCreativesRequest
 */
export interface CreativesApiCreateCreativesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CreativesApiCreateCreatives
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CreativesApiCreateCreatives
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of Creative objects to create. Maximum length of the array is 100 objects. Note - when using productAds with landingPageURL of OFF_AMAZON_LINK, STORE, or MOMENT, the following properties are required all together; 1) headline, 2) brandLogo, and 3) rectCustomImage, squareCustomImage.
     * @type {Array<CreateCreative>}
     * @memberof CreativesApiCreateCreatives
     */
    readonly createCreative?: Array<CreateCreative>
}

/**
 * Request parameters for listCreativeModerations operation in CreativesApi.
 * @export
 * @interface CreativesApiListCreativeModerationsRequest
 */
export interface CreativesApiListCreativeModerationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CreativesApiListCreativeModerations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CreativesApiListCreativeModerations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The language of the returned creative moderation metadata.
     * @type {Locale}
     * @memberof CreativesApiListCreativeModerations
     */
    readonly language: Locale

    /**
     * Sets a cursor into the requested set of creative moderations. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof CreativesApiListCreativeModerations
     */
    readonly startIndex?: number

    /**
     * Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creative moderations set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creative moderations, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof CreativesApiListCreativeModerations
     */
    readonly count?: number

    /**
     * The returned array includes only creative moderations associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
     * @type {string}
     * @memberof CreativesApiListCreativeModerations
     */
    readonly adGroupIdFilter?: string

    /**
     * The returned array includes only creative moderations with creative identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
     * @type {string}
     * @memberof CreativesApiListCreativeModerations
     */
    readonly creativeIdFilter?: string
}

/**
 * Request parameters for listCreatives operation in CreativesApi.
 * @export
 * @interface CreativesApiListCreativesRequest
 */
export interface CreativesApiListCreativesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CreativesApiListCreatives
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CreativesApiListCreatives
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Sets a cursor into the requested set of creatives. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof CreativesApiListCreatives
     */
    readonly startIndex?: number

    /**
     * Sets the number of creative objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten creatives set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten creatives, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof CreativesApiListCreatives
     */
    readonly count?: number

    /**
     * The returned array includes only creatives associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;creativeIdFilter&#x60; parameter.
     * @type {string}
     * @memberof CreativesApiListCreatives
     */
    readonly adGroupIdFilter?: string

    /**
     * The returned array includes only creatives with identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the &#x60;adGroupIdFilter&#x60; parameter.
     * @type {string}
     * @memberof CreativesApiListCreatives
     */
    readonly creativeIdFilter?: string
}

/**
 * Request parameters for postCreativePreview operation in CreativesApi.
 * @export
 * @interface CreativesApiPostCreativePreviewRequest
 */
export interface CreativesApiPostCreativePreviewRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CreativesApiPostCreativePreview
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CreativesApiPostCreativePreview
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {CreativePreviewRequest}
     * @memberof CreativesApiPostCreativePreview
     */
    readonly creativePreviewRequest?: CreativePreviewRequest
}

/**
 * Request parameters for updateCreatives operation in CreativesApi.
 * @export
 * @interface CreativesApiUpdateCreativesRequest
 */
export interface CreativesApiUpdateCreativesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof CreativesApiUpdateCreatives
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof CreativesApiUpdateCreatives
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of creative objects to update. Maximum length of the array is 100 objects.
     * @type {Array<CreativeUpdate>}
     * @memberof CreativesApiUpdateCreatives
     */
    readonly creativeUpdate?: Array<CreativeUpdate>
}

/**
 * CreativesApi - object-oriented interface
 * @export
 * @class CreativesApi
 * @extends {BaseAPI}
 */
export class CreativesApi extends BaseAPI {
    /**
     * 
     * @summary A POST request of one or more creatives.
     * @param {CreativesApiCreateCreativesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativesApi
     */
    public createCreatives(requestParameters: CreativesApiCreateCreativesRequest, options?: any) {
        return CreativesApiFp(this.configuration).createCreatives(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createCreative, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of creative moderations
     * @param {CreativesApiListCreativeModerationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativesApi
     */
    public listCreativeModerations(requestParameters: CreativesApiListCreativeModerationsRequest, options?: any) {
        return CreativesApiFp(this.configuration).listCreativeModerations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.language, requestParameters.startIndex, requestParameters.count, requestParameters.adGroupIdFilter, requestParameters.creativeIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of creatives
     * @param {CreativesApiListCreativesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativesApi
     */
    public listCreatives(requestParameters: CreativesApiListCreativesRequest, options?: any) {
        return CreativesApiFp(this.configuration).listCreatives(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.adGroupIdFilter, requestParameters.creativeIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets creative preview HTML.
     * @param {CreativesApiPostCreativePreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativesApi
     */
    public postCreativePreview(requestParameters: CreativesApiPostCreativePreviewRequest, options?: any) {
        return CreativesApiFp(this.configuration).postCreativePreview(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.creativePreviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates one or more creatives.
     * @param {CreativesApiUpdateCreativesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreativesApi
     */
    public updateCreatives(requestParameters: CreativesApiUpdateCreativesRequest, options?: any) {
        return CreativesApiFp(this.configuration).updateCreatives(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.creativeUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ForecastsApi - axios parameter creator
 * @export
 */
export const ForecastsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns forecasts for a given ad group specified in SD forecast request.
         * @summary Return forecasts for an ad group that may or may not exist.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDForecastRequest} [sDForecastRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSDForecast: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDForecastRequest?: SDForecastRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createSDForecast', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createSDForecast', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/forecasts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.sdforecasts.v3.0+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sDForecastRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ForecastsApi - functional programming interface
 * @export
 */
export const ForecastsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ForecastsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns forecasts for a given ad group specified in SD forecast request.
         * @summary Return forecasts for an ad group that may or may not exist.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDForecastRequest} [sDForecastRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSDForecast(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDForecastRequest?: SDForecastRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDForecastResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSDForecast(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDForecastRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ForecastsApi - factory interface
 * @export
 */
export const ForecastsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ForecastsApiFp(configuration)
    return {
        /**
         * Returns forecasts for a given ad group specified in SD forecast request.
         * @summary Return forecasts for an ad group that may or may not exist.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDForecastRequest} [sDForecastRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSDForecast(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, sDForecastRequest?: SDForecastRequest, options?: any): AxiosPromise<SDForecastResponse> {
            return localVarFp.createSDForecast(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, sDForecastRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSDForecast operation in ForecastsApi.
 * @export
 * @interface ForecastsApiCreateSDForecastRequest
 */
export interface ForecastsApiCreateSDForecastRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ForecastsApiCreateSDForecast
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ForecastsApiCreateSDForecast
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {SDForecastRequest}
     * @memberof ForecastsApiCreateSDForecast
     */
    readonly sDForecastRequest?: SDForecastRequest
}

/**
 * ForecastsApi - object-oriented interface
 * @export
 * @class ForecastsApi
 * @extends {BaseAPI}
 */
export class ForecastsApi extends BaseAPI {
    /**
     * Returns forecasts for a given ad group specified in SD forecast request.
     * @summary Return forecasts for an ad group that may or may not exist.
     * @param {ForecastsApiCreateSDForecastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForecastsApi
     */
    public createSDForecast(requestParameters: ForecastsApiCreateSDForecastRequest, options?: any) {
        return ForecastsApiFp(this.configuration).createSDForecast(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.sDForecastRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LocationsApi - axios parameter creator
 * @export
 */
export const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This resource is not available when productAds have ASIN or SKU fields and only available for advertisers that do not sell products on Amazon.   See [Developer Guide](https://advertising.amazon.com/API/docs/en-us/guides/sponsored-display/non-amazon-sellers/get-started)  Locations optimize Ad Groups for delivery to users that have an association with those locations. For example, an Ad Group might contain the following:  - A Targeting Clause representing an audience of users that viewed a shoe  - A Location representing Seattle, Washington, USA. - A Location representing New York, New York, USA. In this case, delivery of the Targeting Clause will be optimized for New York and Seattle.   You can discover predefined Locations to use in your Ad Groups by calling the GET /locations API. The table below lists  several example Locations. | Location | Description | |---------------------------|-------------| | location=amzn1.ad-geo.XHvCjcKHXsKUwos= | Optimize the AdGroup for the specified location (either a \'city\', \'state\', \'dma\', \'postal code\', or \'country\').|  If Locations are to be used, they must be created before Targeting Clauses within an Ad Group. Creating a Location after a   Targeting Clause is only permitted if other Locations already exist in the Ad Group. In that case, additional  Locations increase the Targeting Clause\'s potential reach.
         * @summary Creates one or more locations associated with an ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateLocation>} [createLocation] A list of up to 20 Locations for creation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createLocation?: Array<CreateLocation>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createLocations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createLocations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createLocation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationsApi - functional programming interface
 * @export
 */
export const LocationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)
    return {
        /**
         * This resource is not available when productAds have ASIN or SKU fields and only available for advertisers that do not sell products on Amazon.   See [Developer Guide](https://advertising.amazon.com/API/docs/en-us/guides/sponsored-display/non-amazon-sellers/get-started)  Locations optimize Ad Groups for delivery to users that have an association with those locations. For example, an Ad Group might contain the following:  - A Targeting Clause representing an audience of users that viewed a shoe  - A Location representing Seattle, Washington, USA. - A Location representing New York, New York, USA. In this case, delivery of the Targeting Clause will be optimized for New York and Seattle.   You can discover predefined Locations to use in your Ad Groups by calling the GET /locations API. The table below lists  several example Locations. | Location | Description | |---------------------------|-------------| | location=amzn1.ad-geo.XHvCjcKHXsKUwos= | Optimize the AdGroup for the specified location (either a \'city\', \'state\', \'dma\', \'postal code\', or \'country\').|  If Locations are to be used, they must be created before Targeting Clauses within an Ad Group. Creating a Location after a   Targeting Clause is only permitted if other Locations already exist in the Ad Group. In that case, additional  Locations increase the Targeting Clause\'s potential reach.
         * @summary Creates one or more locations associated with an ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateLocation>} [createLocation] A list of up to 20 Locations for creation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLocations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createLocation?: Array<CreateLocation>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Location>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLocations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createLocation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationsApi - factory interface
 * @export
 */
export const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationsApiFp(configuration)
    return {
        /**
         * This resource is not available when productAds have ASIN or SKU fields and only available for advertisers that do not sell products on Amazon.   See [Developer Guide](https://advertising.amazon.com/API/docs/en-us/guides/sponsored-display/non-amazon-sellers/get-started)  Locations optimize Ad Groups for delivery to users that have an association with those locations. For example, an Ad Group might contain the following:  - A Targeting Clause representing an audience of users that viewed a shoe  - A Location representing Seattle, Washington, USA. - A Location representing New York, New York, USA. In this case, delivery of the Targeting Clause will be optimized for New York and Seattle.   You can discover predefined Locations to use in your Ad Groups by calling the GET /locations API. The table below lists  several example Locations. | Location | Description | |---------------------------|-------------| | location=amzn1.ad-geo.XHvCjcKHXsKUwos= | Optimize the AdGroup for the specified location (either a \'city\', \'state\', \'dma\', \'postal code\', or \'country\').|  If Locations are to be used, they must be created before Targeting Clauses within an Ad Group. Creating a Location after a   Targeting Clause is only permitted if other Locations already exist in the Ad Group. In that case, additional  Locations increase the Targeting Clause\'s potential reach.
         * @summary Creates one or more locations associated with an ad group.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateLocation>} [createLocation] A list of up to 20 Locations for creation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLocations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createLocation?: Array<CreateLocation>, options?: any): AxiosPromise<Array<Location>> {
            return localVarFp.createLocations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createLocation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createLocations operation in LocationsApi.
 * @export
 * @interface LocationsApiCreateLocationsRequest
 */
export interface LocationsApiCreateLocationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof LocationsApiCreateLocations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof LocationsApiCreateLocations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of up to 20 Locations for creation.
     * @type {Array<CreateLocation>}
     * @memberof LocationsApiCreateLocations
     */
    readonly createLocation?: Array<CreateLocation>
}

/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
export class LocationsApi extends BaseAPI {
    /**
     * This resource is not available when productAds have ASIN or SKU fields and only available for advertisers that do not sell products on Amazon.   See [Developer Guide](https://advertising.amazon.com/API/docs/en-us/guides/sponsored-display/non-amazon-sellers/get-started)  Locations optimize Ad Groups for delivery to users that have an association with those locations. For example, an Ad Group might contain the following:  - A Targeting Clause representing an audience of users that viewed a shoe  - A Location representing Seattle, Washington, USA. - A Location representing New York, New York, USA. In this case, delivery of the Targeting Clause will be optimized for New York and Seattle.   You can discover predefined Locations to use in your Ad Groups by calling the GET /locations API. The table below lists  several example Locations. | Location | Description | |---------------------------|-------------| | location=amzn1.ad-geo.XHvCjcKHXsKUwos= | Optimize the AdGroup for the specified location (either a \'city\', \'state\', \'dma\', \'postal code\', or \'country\').|  If Locations are to be used, they must be created before Targeting Clauses within an Ad Group. Creating a Location after a   Targeting Clause is only permitted if other Locations already exist in the Ad Group. In that case, additional  Locations increase the Targeting Clause\'s potential reach.
     * @summary Creates one or more locations associated with an ad group.
     * @param {LocationsApiCreateLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    public createLocations(requestParameters: LocationsApiCreateLocationsRequest, options?: any) {
        return LocationsApiFp(this.configuration).createLocations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createLocation, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LocationsBetaApi - axios parameter creator
 * @export
 */
export const LocationsBetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a list of Sponsored Display Location objects. This resource is not available when productAds have ASIN or SKU fields and only available for advertisers that do not sell products on Amazon. See [Developer Guide](https://advertising.amazon.com/API/docs/en-us/guides/sponsored-display/non-amazon-sellers/get-started)
         * @summary Gets a list of locations associated with ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled'} [stateFilter] Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;.
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to locations with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional list of comma separated campaignIds. Restricts results to locations with the specified &#x60;campaignId&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled', adGroupIdFilter?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listLocations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listLocations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationsBetaApi - functional programming interface
 * @export
 */
export const LocationsBetaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationsBetaApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets a list of Sponsored Display Location objects. This resource is not available when productAds have ASIN or SKU fields and only available for advertisers that do not sell products on Amazon. See [Developer Guide](https://advertising.amazon.com/API/docs/en-us/guides/sponsored-display/non-amazon-sellers/get-started)
         * @summary Gets a list of locations associated with ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled'} [stateFilter] Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;.
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to locations with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional list of comma separated campaignIds. Restricts results to locations with the specified &#x60;campaignId&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLocations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled', adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Location>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLocations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adGroupIdFilter, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationsBetaApi - factory interface
 * @export
 */
export const LocationsBetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationsBetaApiFp(configuration)
    return {
        /**
         * Gets a list of Sponsored Display Location objects. This resource is not available when productAds have ASIN or SKU fields and only available for advertisers that do not sell products on Amazon. See [Developer Guide](https://advertising.amazon.com/API/docs/en-us/guides/sponsored-display/non-amazon-sellers/get-started)
         * @summary Gets a list of locations associated with ad groups.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled'} [stateFilter] Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;.
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to locations with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional list of comma separated campaignIds. Restricts results to locations with the specified &#x60;campaignId&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLocations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled', adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<Location>> {
            return localVarFp.listLocations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adGroupIdFilter, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listLocations operation in LocationsBetaApi.
 * @export
 * @interface LocationsBetaApiListLocationsRequest
 */
export interface LocationsBetaApiListLocationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof LocationsBetaApiListLocations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof LocationsBetaApiListLocations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. 0-indexed record offset for the result set. Defaults to 0.
     * @type {number}
     * @memberof LocationsBetaApiListLocations
     */
    readonly startIndex?: number

    /**
     * Optional. Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof LocationsBetaApiListLocations
     */
    readonly count?: number

    /**
     * Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;.
     * @type {'enabled'}
     * @memberof LocationsBetaApiListLocations
     */
    readonly stateFilter?: 'enabled'

    /**
     * Optional list of comma separated adGroupIds. Restricts results to locations with the specified &#x60;adGroupId&#x60;.
     * @type {string}
     * @memberof LocationsBetaApiListLocations
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional list of comma separated campaignIds. Restricts results to locations with the specified &#x60;campaignId&#x60;.
     * @type {string}
     * @memberof LocationsBetaApiListLocations
     */
    readonly campaignIdFilter?: string
}

/**
 * LocationsBetaApi - object-oriented interface
 * @export
 * @class LocationsBetaApi
 * @extends {BaseAPI}
 */
export class LocationsBetaApi extends BaseAPI {
    /**
     * Gets a list of Sponsored Display Location objects. This resource is not available when productAds have ASIN or SKU fields and only available for advertisers that do not sell products on Amazon. See [Developer Guide](https://advertising.amazon.com/API/docs/en-us/guides/sponsored-display/non-amazon-sellers/get-started)
     * @summary Gets a list of locations associated with ad groups.
     * @param {LocationsBetaApiListLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsBetaApi
     */
    public listLocations(requestParameters: LocationsBetaApiListLocationsRequest, options?: any) {
        return LocationsBetaApiFp(this.configuration).listLocations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.adGroupIdFilter, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NegativeTargetingApi - axios parameter creator
 * @export
 */
export const NegativeTargetingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Equivalent to using the updateNegativeTargetingClauses operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
         * @summary Sets the `state` of a negative targeting clause to `archived`.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The identifier of a negative targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveNegativeTargetingClause: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveNegativeTargetingClause', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveNegativeTargetingClause', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'negativeTargetId' is not null or undefined
            assertParamExists('archiveNegativeTargetingClause', 'negativeTargetId', negativeTargetId)
            const localVarPath = `/sd/negativeTargets/{negativeTargetId}`
                .replace(`{${"negativeTargetId"}}`, encodeURIComponent(String(negativeTargetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Successfully created negative targeting clauses associated with an ad group are assigned a unique target identifier. Product negative targeting clause examples: | Negative targeting clause | Description | |---------------------------|-------------| | asinSameAs=B0123456789 | Negatively target this product.| | asinBrandSameAs=12345 | Negatively target products in the brand.|
         * @summary Creates one or more negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateNegativeTargetingClause>} [createNegativeTargetingClause] A list of up to 100 negative targeting clauses for creation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNegativeTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createNegativeTargetingClause?: Array<CreateNegativeTargetingClause>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createNegativeTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createNegativeTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/negativeTargets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createNegativeTargetingClause, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This call returns the minimal set of negative targeting clause fields, but is more efficient than getNegativeTargetsEx.
         * @summary Gets a negative targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The negative targeting clause identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeTargets: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getNegativeTargets', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getNegativeTargets', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'negativeTargetId' is not null or undefined
            assertParamExists('getNegativeTargets', 'negativeTargetId', negativeTargetId)
            const localVarPath = `/sd/negativeTargets/{negativeTargetId}`
                .replace(`{${"negativeTargetId"}}`, encodeURIComponent(String(negativeTargetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a negative targeting clause with extended fields. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTarget.
         * @summary Gets extended information for a negative targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The negative targeting clause identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeTargetsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getNegativeTargetsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getNegativeTargetsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'negativeTargetId' is not null or undefined
            assertParamExists('getNegativeTargetsEx', 'negativeTargetId', negativeTargetId)
            const localVarPath = `/sd/negativeTargets/extended/{negativeTargetId}`
                .replace(`{${"negativeTargetId"}}`, encodeURIComponent(String(negativeTargetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of negative targeting clauses objects for a requested set of Sponsored Display negative targets. Note that the Negative Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the negative target operations that return the NegativeTargetingClauseEx object.
         * @summary Gets a list of negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adGroupIdFilter?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listNegativeTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listNegativeTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/negativeTargets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of NegativeTargetingClauseEx objects for a set of requested negative targets. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTargets.
         * @summary Gets a list of negative targeting clause objects with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include &#x60;enabled&#x60;, &#x60;paused&#x60;, and &#x60;archived&#x60;.
         * @param {string} [targetIdFilter] Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to ads within campaigns specified in the comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeTargetingClausesEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', targetIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listNegativeTargetingClausesEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listNegativeTargetingClausesEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/negativeTargets/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (targetIdFilter !== undefined) {
                localVarQueryParameter['targetIdFilter'] = targetIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates one or more negative targeting clauses. Negative targeting clauses are identified using their targetId. The mutable field is `state`. Maximum length of the array is 100 objects.
         * @summary Updates one or more negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateNegativeTargetingClause>} [updateNegativeTargetingClause] A list of up to 100 negative targeting clauses. Note that the only mutable field is &#x60;state&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNegativeTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateNegativeTargetingClause?: Array<UpdateNegativeTargetingClause>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateNegativeTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateNegativeTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/negativeTargets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateNegativeTargetingClause, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NegativeTargetingApi - functional programming interface
 * @export
 */
export const NegativeTargetingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NegativeTargetingApiAxiosParamCreator(configuration)
    return {
        /**
         * Equivalent to using the updateNegativeTargetingClauses operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
         * @summary Sets the `state` of a negative targeting clause to `archived`.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The identifier of a negative targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveNegativeTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveNegativeTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, negativeTargetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Successfully created negative targeting clauses associated with an ad group are assigned a unique target identifier. Product negative targeting clause examples: | Negative targeting clause | Description | |---------------------------|-------------| | asinSameAs=B0123456789 | Negatively target this product.| | asinBrandSameAs=12345 | Negatively target products in the brand.|
         * @summary Creates one or more negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateNegativeTargetingClause>} [createNegativeTargetingClause] A list of up to 100 negative targeting clauses for creation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createNegativeTargetingClause?: Array<CreateNegativeTargetingClause>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createNegativeTargetingClause, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This call returns the minimal set of negative targeting clause fields, but is more efficient than getNegativeTargetsEx.
         * @summary Gets a negative targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The negative targeting clause identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNegativeTargets(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NegativeTargetingClause>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNegativeTargets(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, negativeTargetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a negative targeting clause with extended fields. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTarget.
         * @summary Gets extended information for a negative targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The negative targeting clause identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNegativeTargetsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NegativeTargetingClauseEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNegativeTargetsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, negativeTargetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a list of negative targeting clauses objects for a requested set of Sponsored Display negative targets. Note that the Negative Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the negative target operations that return the NegativeTargetingClauseEx object.
         * @summary Gets a list of negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NegativeTargetingClause>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adGroupIdFilter, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of NegativeTargetingClauseEx objects for a set of requested negative targets. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTargets.
         * @summary Gets a list of negative targeting clause objects with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include &#x60;enabled&#x60;, &#x60;paused&#x60;, and &#x60;archived&#x60;.
         * @param {string} [targetIdFilter] Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to ads within campaigns specified in the comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNegativeTargetingClausesEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', targetIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NegativeTargetingClauseEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNegativeTargetingClausesEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, targetIdFilter, adGroupIdFilter, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates one or more negative targeting clauses. Negative targeting clauses are identified using their targetId. The mutable field is `state`. Maximum length of the array is 100 objects.
         * @summary Updates one or more negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateNegativeTargetingClause>} [updateNegativeTargetingClause] A list of up to 100 negative targeting clauses. Note that the only mutable field is &#x60;state&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateNegativeTargetingClause?: Array<UpdateNegativeTargetingClause>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateNegativeTargetingClause, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NegativeTargetingApi - factory interface
 * @export
 */
export const NegativeTargetingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NegativeTargetingApiFp(configuration)
    return {
        /**
         * Equivalent to using the updateNegativeTargetingClauses operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
         * @summary Sets the `state` of a negative targeting clause to `archived`.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The identifier of a negative targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveNegativeTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options?: any): AxiosPromise<TargetResponse> {
            return localVarFp.archiveNegativeTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, negativeTargetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Successfully created negative targeting clauses associated with an ad group are assigned a unique target identifier. Product negative targeting clause examples: | Negative targeting clause | Description | |---------------------------|-------------| | asinSameAs=B0123456789 | Negatively target this product.| | asinBrandSameAs=12345 | Negatively target products in the brand.|
         * @summary Creates one or more negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateNegativeTargetingClause>} [createNegativeTargetingClause] A list of up to 100 negative targeting clauses for creation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createNegativeTargetingClause?: Array<CreateNegativeTargetingClause>, options?: any): AxiosPromise<Array<TargetResponse>> {
            return localVarFp.createNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createNegativeTargetingClause, options).then((request) => request(axios, basePath));
        },
        /**
         * This call returns the minimal set of negative targeting clause fields, but is more efficient than getNegativeTargetsEx.
         * @summary Gets a negative targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The negative targeting clause identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeTargets(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options?: any): AxiosPromise<NegativeTargetingClause> {
            return localVarFp.getNegativeTargets(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, negativeTargetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a negative targeting clause with extended fields. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTarget.
         * @summary Gets extended information for a negative targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} negativeTargetId The negative targeting clause identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNegativeTargetsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, negativeTargetId: number, options?: any): AxiosPromise<NegativeTargetingClauseEx> {
            return localVarFp.getNegativeTargetsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, negativeTargetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of negative targeting clauses objects for a requested set of Sponsored Display negative targets. Note that the Negative Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the negative target operations that return the NegativeTargetingClauseEx object.
         * @summary Gets a list of negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<NegativeTargetingClause>> {
            return localVarFp.listNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adGroupIdFilter, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of NegativeTargetingClauseEx objects for a set of requested negative targets. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTargets.
         * @summary Gets a list of negative targeting clause objects with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include &#x60;enabled&#x60;, &#x60;paused&#x60;, and &#x60;archived&#x60;.
         * @param {string} [targetIdFilter] Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to ads within campaigns specified in the comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNegativeTargetingClausesEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', targetIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<NegativeTargetingClauseEx>> {
            return localVarFp.listNegativeTargetingClausesEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, targetIdFilter, adGroupIdFilter, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates one or more negative targeting clauses. Negative targeting clauses are identified using their targetId. The mutable field is `state`. Maximum length of the array is 100 objects.
         * @summary Updates one or more negative targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateNegativeTargetingClause>} [updateNegativeTargetingClause] A list of up to 100 negative targeting clauses. Note that the only mutable field is &#x60;state&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNegativeTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateNegativeTargetingClause?: Array<UpdateNegativeTargetingClause>, options?: any): AxiosPromise<Array<TargetResponse>> {
            return localVarFp.updateNegativeTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateNegativeTargetingClause, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveNegativeTargetingClause operation in NegativeTargetingApi.
 * @export
 * @interface NegativeTargetingApiArchiveNegativeTargetingClauseRequest
 */
export interface NegativeTargetingApiArchiveNegativeTargetingClauseRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof NegativeTargetingApiArchiveNegativeTargetingClause
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeTargetingApiArchiveNegativeTargetingClause
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of a negative targeting clause.
     * @type {number}
     * @memberof NegativeTargetingApiArchiveNegativeTargetingClause
     */
    readonly negativeTargetId: number
}

/**
 * Request parameters for createNegativeTargetingClauses operation in NegativeTargetingApi.
 * @export
 * @interface NegativeTargetingApiCreateNegativeTargetingClausesRequest
 */
export interface NegativeTargetingApiCreateNegativeTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof NegativeTargetingApiCreateNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeTargetingApiCreateNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of up to 100 negative targeting clauses for creation.
     * @type {Array<CreateNegativeTargetingClause>}
     * @memberof NegativeTargetingApiCreateNegativeTargetingClauses
     */
    readonly createNegativeTargetingClause?: Array<CreateNegativeTargetingClause>
}

/**
 * Request parameters for getNegativeTargets operation in NegativeTargetingApi.
 * @export
 * @interface NegativeTargetingApiGetNegativeTargetsRequest
 */
export interface NegativeTargetingApiGetNegativeTargetsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof NegativeTargetingApiGetNegativeTargets
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeTargetingApiGetNegativeTargets
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The negative targeting clause identifier.
     * @type {number}
     * @memberof NegativeTargetingApiGetNegativeTargets
     */
    readonly negativeTargetId: number
}

/**
 * Request parameters for getNegativeTargetsEx operation in NegativeTargetingApi.
 * @export
 * @interface NegativeTargetingApiGetNegativeTargetsExRequest
 */
export interface NegativeTargetingApiGetNegativeTargetsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof NegativeTargetingApiGetNegativeTargetsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeTargetingApiGetNegativeTargetsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The negative targeting clause identifier.
     * @type {number}
     * @memberof NegativeTargetingApiGetNegativeTargetsEx
     */
    readonly negativeTargetId: number
}

/**
 * Request parameters for listNegativeTargetingClauses operation in NegativeTargetingApi.
 * @export
 * @interface NegativeTargetingApiListNegativeTargetingClausesRequest
 */
export interface NegativeTargetingApiListNegativeTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. 0-indexed record offset for the result set. Defaults to 0.
     * @type {number}
     * @memberof NegativeTargetingApiListNegativeTargetingClauses
     */
    readonly startIndex?: number

    /**
     * Optional. Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof NegativeTargetingApiListNegativeTargetingClauses
     */
    readonly count?: number

    /**
     * Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof NegativeTargetingApiListNegativeTargetingClauses
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClauses
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClauses
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for listNegativeTargetingClausesEx operation in NegativeTargetingApi.
 * @export
 * @interface NegativeTargetingApiListNegativeTargetingClausesExRequest
 */
export interface NegativeTargetingApiListNegativeTargetingClausesExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. 0-indexed record offset for the result set. Defaults to 0.
     * @type {number}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly startIndex?: number

    /**
     * Optional. Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly count?: number

    /**
     * Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include &#x60;enabled&#x60;, &#x60;paused&#x60;, and &#x60;archived&#x60;.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly targetIdFilter?: string

    /**
     * Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified &#x60;adGroupId&#x60;.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. Restricts results to ads within campaigns specified in the comma-separated list.
     * @type {string}
     * @memberof NegativeTargetingApiListNegativeTargetingClausesEx
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for updateNegativeTargetingClauses operation in NegativeTargetingApi.
 * @export
 * @interface NegativeTargetingApiUpdateNegativeTargetingClausesRequest
 */
export interface NegativeTargetingApiUpdateNegativeTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof NegativeTargetingApiUpdateNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof NegativeTargetingApiUpdateNegativeTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of up to 100 negative targeting clauses. Note that the only mutable field is &#x60;state&#x60;.
     * @type {Array<UpdateNegativeTargetingClause>}
     * @memberof NegativeTargetingApiUpdateNegativeTargetingClauses
     */
    readonly updateNegativeTargetingClause?: Array<UpdateNegativeTargetingClause>
}

/**
 * NegativeTargetingApi - object-oriented interface
 * @export
 * @class NegativeTargetingApi
 * @extends {BaseAPI}
 */
export class NegativeTargetingApi extends BaseAPI {
    /**
     * Equivalent to using the updateNegativeTargetingClauses operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
     * @summary Sets the `state` of a negative targeting clause to `archived`.
     * @param {NegativeTargetingApiArchiveNegativeTargetingClauseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeTargetingApi
     */
    public archiveNegativeTargetingClause(requestParameters: NegativeTargetingApiArchiveNegativeTargetingClauseRequest, options?: any) {
        return NegativeTargetingApiFp(this.configuration).archiveNegativeTargetingClause(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.negativeTargetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Successfully created negative targeting clauses associated with an ad group are assigned a unique target identifier. Product negative targeting clause examples: | Negative targeting clause | Description | |---------------------------|-------------| | asinSameAs=B0123456789 | Negatively target this product.| | asinBrandSameAs=12345 | Negatively target products in the brand.|
     * @summary Creates one or more negative targeting clauses.
     * @param {NegativeTargetingApiCreateNegativeTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeTargetingApi
     */
    public createNegativeTargetingClauses(requestParameters: NegativeTargetingApiCreateNegativeTargetingClausesRequest, options?: any) {
        return NegativeTargetingApiFp(this.configuration).createNegativeTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createNegativeTargetingClause, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This call returns the minimal set of negative targeting clause fields, but is more efficient than getNegativeTargetsEx.
     * @summary Gets a negative targeting clause specified by identifier.
     * @param {NegativeTargetingApiGetNegativeTargetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeTargetingApi
     */
    public getNegativeTargets(requestParameters: NegativeTargetingApiGetNegativeTargetsRequest, options?: any) {
        return NegativeTargetingApiFp(this.configuration).getNegativeTargets(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.negativeTargetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a negative targeting clause with extended fields. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTarget.
     * @summary Gets extended information for a negative targeting clause.
     * @param {NegativeTargetingApiGetNegativeTargetsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeTargetingApi
     */
    public getNegativeTargetsEx(requestParameters: NegativeTargetingApiGetNegativeTargetsExRequest, options?: any) {
        return NegativeTargetingApiFp(this.configuration).getNegativeTargetsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.negativeTargetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of negative targeting clauses objects for a requested set of Sponsored Display negative targets. Note that the Negative Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the negative target operations that return the NegativeTargetingClauseEx object.
     * @summary Gets a list of negative targeting clauses.
     * @param {NegativeTargetingApiListNegativeTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeTargetingApi
     */
    public listNegativeTargetingClauses(requestParameters: NegativeTargetingApiListNegativeTargetingClausesRequest, options?: any) {
        return NegativeTargetingApiFp(this.configuration).listNegativeTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.adGroupIdFilter, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of NegativeTargetingClauseEx objects for a set of requested negative targets. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTargets.
     * @summary Gets a list of negative targeting clause objects with extended fields.
     * @param {NegativeTargetingApiListNegativeTargetingClausesExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeTargetingApi
     */
    public listNegativeTargetingClausesEx(requestParameters: NegativeTargetingApiListNegativeTargetingClausesExRequest, options?: any) {
        return NegativeTargetingApiFp(this.configuration).listNegativeTargetingClausesEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.targetIdFilter, requestParameters.adGroupIdFilter, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates one or more negative targeting clauses. Negative targeting clauses are identified using their targetId. The mutable field is `state`. Maximum length of the array is 100 objects.
     * @summary Updates one or more negative targeting clauses.
     * @param {NegativeTargetingApiUpdateNegativeTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NegativeTargetingApi
     */
    public updateNegativeTargetingClauses(requestParameters: NegativeTargetingApiUpdateNegativeTargetingClausesRequest, options?: any) {
        return NegativeTargetingApiFp(this.configuration).updateNegativeTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateNegativeTargetingClause, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OptimizationRulesPreviewOnlyApi - axios parameter creator
 * @export
 */
export const OptimizationRulesPreviewOnlyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.  * When an optimization rule is associated to an ad group, manual bids for individual targets will be overridden. * Only one optimization rule can be associated per adGroup. This note will be removed when multiple rules are supported per adGroup.
         * @summary Associate one or more optimization rules to an ad group specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the ad group.
         * @param {CreateAssociatedOptimizationRulesRequest} [createAssociatedOptimizationRulesRequest] A list of optimization rule identifiers. Only one optimization rule identifier is currently supported per request. This note will be removed when multiple rule identifiers are supported.  For each ad group, only one optimization rule metric name is supported, based on the ad group\&#39;s &#x60;bidOptimization&#x60; type. Refer to the following table for the metric names supported for each type. |  AdGroup.bidOptimization |     Supported OptimizationRule.metricName       | |------------------|--------------------| |   reach       | COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS  | |   clicks      | COST_PER_CLICK          | |  conversions  | COST_PER_ORDER          |
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associateOptimizationRulesWithAdGroup: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, createAssociatedOptimizationRulesRequest?: CreateAssociatedOptimizationRulesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('associateOptimizationRulesWithAdGroup', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('associateOptimizationRulesWithAdGroup', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('associateOptimizationRulesWithAdGroup', 'adGroupId', adGroupId)
            const localVarPath = `/sd/adGroups/{adGroupId}/optimizationRules`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAssociatedOptimizationRulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.   * When an optimization rule is associated to an ad group, manual bids for individual targets will be overridden. * Optimization rules can only be associated to ad groups that have productAds with ASIN or SKU. * If you are using optimization rules, the following campaign budget must be at least:   - 5x the value of any COST_PER_ORDER threshold.   - 10x the value of any COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS threshold.   - 20x the value of any COST_PER_CLICK threshold.
         * @summary Creates one or more optimization rules, also known as outcome optimizations.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateOptimizationRule>} [createOptimizationRule] An array of OptimizationRule objects. For each object, specify required fields and their values. Required fields are &#x60;state&#x60; and &#x60;ruleConditions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOptimizationRules: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createOptimizationRule?: Array<CreateOptimizationRule>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createOptimizationRules', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createOptimizationRules', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/optimizationRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOptimizationRule, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an array of OptimizationRule objects for a requested set of Sponsored Display optimization rules.
         * @summary Gets a list of optimization rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of optimization rules. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of OptimizationRule objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten optimization rules set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten optimization rules, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {string} [stateFilter] Optional. The returned array is filtered to include only optimization rules with state set to one of the values in the specified comma-delimited list. Available values:   - enabled   - paused [COMING LATER]   - enabled, paused [COMING LATER]
         * @param {string} [name] Optional. The returned array includes only optimization rules with the specified name using an exact string match.
         * @param {string} [optimizationRuleIdFilter] Optional. The returned array is filtered to include only optimization rules associated with the optimization rule identifiers in the specified comma-delimited list.  Maximum size limit 50.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only optimization rules associated with the ad group identifiers in the comma-delimited list.  Maximum size limit 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptimizationRules: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: string, name?: string, optimizationRuleIdFilter?: string, adGroupIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listOptimizationRules', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listOptimizationRules', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/optimizationRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (optimizationRuleIdFilter !== undefined) {
                localVarQueryParameter['optimizationRuleIdFilter'] = optimizationRuleIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an OptimizationRule object for a requested Sponsored Display optimization rule.
         * @summary Gets a list of optimization rules associated to an adgroup specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sdAdGroupsAdGroupIdOptimizationRulesGet: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('sdAdGroupsAdGroupIdOptimizationRulesGet', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('sdAdGroupsAdGroupIdOptimizationRulesGet', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adGroupId' is not null or undefined
            assertParamExists('sdAdGroupsAdGroupIdOptimizationRulesGet', 'adGroupId', adGroupId)
            const localVarPath = `/sd/adGroups/{adGroupId}/optimizationRules`
                .replace(`{${"adGroupId"}}`, encodeURIComponent(String(adGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an OptimizationRule object for a requested Sponsored Display optimization rule.
         * @summary Gets a requested optimization rule.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} optimizationRuleId The identifier of the requested optimization rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sdOptimizationRulesOptimizationRuleIdGet: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, optimizationRuleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('sdOptimizationRulesOptimizationRuleIdGet', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('sdOptimizationRulesOptimizationRuleIdGet', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'optimizationRuleId' is not null or undefined
            assertParamExists('sdOptimizationRulesOptimizationRuleIdGet', 'optimizationRuleId', optimizationRuleId)
            const localVarPath = `/sd/optimizationRules/{optimizationRuleId}`
                .replace(`{${"optimizationRuleId"}}`, encodeURIComponent(String(optimizationRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
         * @summary Updates one or more optimization rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateOptimizationRule>} [updateOptimizationRule] An array of OptimizationRule objects. For each object, specify an optimization rule identifier and mutable fields with their updated values. The mutable fields are &#x60;ruleName&#x60;, &#x60;state&#x60;, and &#x60;ruleConditions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOptimizationRules: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateOptimizationRule?: Array<UpdateOptimizationRule>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateOptimizationRules', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateOptimizationRules', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/optimizationRules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOptimizationRule, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OptimizationRulesPreviewOnlyApi - functional programming interface
 * @export
 */
export const OptimizationRulesPreviewOnlyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OptimizationRulesPreviewOnlyApiAxiosParamCreator(configuration)
    return {
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.  * When an optimization rule is associated to an ad group, manual bids for individual targets will be overridden. * Only one optimization rule can be associated per adGroup. This note will be removed when multiple rules are supported per adGroup.
         * @summary Associate one or more optimization rules to an ad group specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the ad group.
         * @param {CreateAssociatedOptimizationRulesRequest} [createAssociatedOptimizationRulesRequest] A list of optimization rule identifiers. Only one optimization rule identifier is currently supported per request. This note will be removed when multiple rule identifiers are supported.  For each ad group, only one optimization rule metric name is supported, based on the ad group\&#39;s &#x60;bidOptimization&#x60; type. Refer to the following table for the metric names supported for each type. |  AdGroup.bidOptimization |     Supported OptimizationRule.metricName       | |------------------|--------------------| |   reach       | COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS  | |   clicks      | COST_PER_CLICK          | |  conversions  | COST_PER_ORDER          |
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async associateOptimizationRulesWithAdGroup(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, createAssociatedOptimizationRulesRequest?: CreateAssociatedOptimizationRulesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptimizationRuleResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.associateOptimizationRulesWithAdGroup(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, createAssociatedOptimizationRulesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.   * When an optimization rule is associated to an ad group, manual bids for individual targets will be overridden. * Optimization rules can only be associated to ad groups that have productAds with ASIN or SKU. * If you are using optimization rules, the following campaign budget must be at least:   - 5x the value of any COST_PER_ORDER threshold.   - 10x the value of any COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS threshold.   - 20x the value of any COST_PER_CLICK threshold.
         * @summary Creates one or more optimization rules, also known as outcome optimizations.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateOptimizationRule>} [createOptimizationRule] An array of OptimizationRule objects. For each object, specify required fields and their values. Required fields are &#x60;state&#x60; and &#x60;ruleConditions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOptimizationRules(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createOptimizationRule?: Array<CreateOptimizationRule>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptimizationRuleResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOptimizationRules(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createOptimizationRule, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an array of OptimizationRule objects for a requested set of Sponsored Display optimization rules.
         * @summary Gets a list of optimization rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of optimization rules. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of OptimizationRule objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten optimization rules set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten optimization rules, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {string} [stateFilter] Optional. The returned array is filtered to include only optimization rules with state set to one of the values in the specified comma-delimited list. Available values:   - enabled   - paused [COMING LATER]   - enabled, paused [COMING LATER]
         * @param {string} [name] Optional. The returned array includes only optimization rules with the specified name using an exact string match.
         * @param {string} [optimizationRuleIdFilter] Optional. The returned array is filtered to include only optimization rules associated with the optimization rule identifiers in the specified comma-delimited list.  Maximum size limit 50.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only optimization rules associated with the ad group identifiers in the comma-delimited list.  Maximum size limit 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOptimizationRules(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: string, name?: string, optimizationRuleIdFilter?: string, adGroupIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptimizationRule>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOptimizationRules(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, name, optimizationRuleIdFilter, adGroupIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an OptimizationRule object for a requested Sponsored Display optimization rule.
         * @summary Gets a list of optimization rules associated to an adgroup specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sdAdGroupsAdGroupIdOptimizationRulesGet(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptimizationRule>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sdAdGroupsAdGroupIdOptimizationRulesGet(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an OptimizationRule object for a requested Sponsored Display optimization rule.
         * @summary Gets a requested optimization rule.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} optimizationRuleId The identifier of the requested optimization rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sdOptimizationRulesOptimizationRuleIdGet(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, optimizationRuleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OptimizationRule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sdOptimizationRulesOptimizationRuleIdGet(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, optimizationRuleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
         * @summary Updates one or more optimization rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateOptimizationRule>} [updateOptimizationRule] An array of OptimizationRule objects. For each object, specify an optimization rule identifier and mutable fields with their updated values. The mutable fields are &#x60;ruleName&#x60;, &#x60;state&#x60;, and &#x60;ruleConditions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOptimizationRules(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateOptimizationRule?: Array<UpdateOptimizationRule>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OptimizationRuleResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOptimizationRules(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateOptimizationRule, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OptimizationRulesPreviewOnlyApi - factory interface
 * @export
 */
export const OptimizationRulesPreviewOnlyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OptimizationRulesPreviewOnlyApiFp(configuration)
    return {
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.  * When an optimization rule is associated to an ad group, manual bids for individual targets will be overridden. * Only one optimization rule can be associated per adGroup. This note will be removed when multiple rules are supported per adGroup.
         * @summary Associate one or more optimization rules to an ad group specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the ad group.
         * @param {CreateAssociatedOptimizationRulesRequest} [createAssociatedOptimizationRulesRequest] A list of optimization rule identifiers. Only one optimization rule identifier is currently supported per request. This note will be removed when multiple rule identifiers are supported.  For each ad group, only one optimization rule metric name is supported, based on the ad group\&#39;s &#x60;bidOptimization&#x60; type. Refer to the following table for the metric names supported for each type. |  AdGroup.bidOptimization |     Supported OptimizationRule.metricName       | |------------------|--------------------| |   reach       | COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS  | |   clicks      | COST_PER_CLICK          | |  conversions  | COST_PER_ORDER          |
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        associateOptimizationRulesWithAdGroup(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, createAssociatedOptimizationRulesRequest?: CreateAssociatedOptimizationRulesRequest, options?: any): AxiosPromise<Array<OptimizationRuleResponse>> {
            return localVarFp.associateOptimizationRulesWithAdGroup(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, createAssociatedOptimizationRulesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.   * When an optimization rule is associated to an ad group, manual bids for individual targets will be overridden. * Optimization rules can only be associated to ad groups that have productAds with ASIN or SKU. * If you are using optimization rules, the following campaign budget must be at least:   - 5x the value of any COST_PER_ORDER threshold.   - 10x the value of any COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS threshold.   - 20x the value of any COST_PER_CLICK threshold.
         * @summary Creates one or more optimization rules, also known as outcome optimizations.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateOptimizationRule>} [createOptimizationRule] An array of OptimizationRule objects. For each object, specify required fields and their values. Required fields are &#x60;state&#x60; and &#x60;ruleConditions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOptimizationRules(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createOptimizationRule?: Array<CreateOptimizationRule>, options?: any): AxiosPromise<Array<OptimizationRuleResponse>> {
            return localVarFp.createOptimizationRules(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createOptimizationRule, options).then((request) => request(axios, basePath));
        },
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an array of OptimizationRule objects for a requested set of Sponsored Display optimization rules.
         * @summary Gets a list of optimization rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of optimization rules. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of OptimizationRule objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten optimization rules set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten optimization rules, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {string} [stateFilter] Optional. The returned array is filtered to include only optimization rules with state set to one of the values in the specified comma-delimited list. Available values:   - enabled   - paused [COMING LATER]   - enabled, paused [COMING LATER]
         * @param {string} [name] Optional. The returned array includes only optimization rules with the specified name using an exact string match.
         * @param {string} [optimizationRuleIdFilter] Optional. The returned array is filtered to include only optimization rules associated with the optimization rule identifiers in the specified comma-delimited list.  Maximum size limit 50.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only optimization rules associated with the ad group identifiers in the comma-delimited list.  Maximum size limit 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptimizationRules(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: string, name?: string, optimizationRuleIdFilter?: string, adGroupIdFilter?: string, options?: any): AxiosPromise<Array<OptimizationRule>> {
            return localVarFp.listOptimizationRules(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, name, optimizationRuleIdFilter, adGroupIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an OptimizationRule object for a requested Sponsored Display optimization rule.
         * @summary Gets a list of optimization rules associated to an adgroup specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adGroupId The identifier of the ad group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sdAdGroupsAdGroupIdOptimizationRulesGet(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adGroupId: number, options?: any): AxiosPromise<Array<OptimizationRule>> {
            return localVarFp.sdAdGroupsAdGroupIdOptimizationRulesGet(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an OptimizationRule object for a requested Sponsored Display optimization rule.
         * @summary Gets a requested optimization rule.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} optimizationRuleId The identifier of the requested optimization rule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sdOptimizationRulesOptimizationRuleIdGet(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, optimizationRuleId: string, options?: any): AxiosPromise<OptimizationRule> {
            return localVarFp.sdOptimizationRulesOptimizationRuleIdGet(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, optimizationRuleId, options).then((request) => request(axios, basePath));
        },
        /**
         * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
         * @summary Updates one or more optimization rules.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateOptimizationRule>} [updateOptimizationRule] An array of OptimizationRule objects. For each object, specify an optimization rule identifier and mutable fields with their updated values. The mutable fields are &#x60;ruleName&#x60;, &#x60;state&#x60;, and &#x60;ruleConditions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOptimizationRules(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateOptimizationRule?: Array<UpdateOptimizationRule>, options?: any): AxiosPromise<Array<OptimizationRuleResponse>> {
            return localVarFp.updateOptimizationRules(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateOptimizationRule, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for associateOptimizationRulesWithAdGroup operation in OptimizationRulesPreviewOnlyApi.
 * @export
 * @interface OptimizationRulesPreviewOnlyApiAssociateOptimizationRulesWithAdGroupRequest
 */
export interface OptimizationRulesPreviewOnlyApiAssociateOptimizationRulesWithAdGroupRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiAssociateOptimizationRulesWithAdGroup
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiAssociateOptimizationRulesWithAdGroup
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof OptimizationRulesPreviewOnlyApiAssociateOptimizationRulesWithAdGroup
     */
    readonly adGroupId: number

    /**
     * A list of optimization rule identifiers. Only one optimization rule identifier is currently supported per request. This note will be removed when multiple rule identifiers are supported.  For each ad group, only one optimization rule metric name is supported, based on the ad group\&#39;s &#x60;bidOptimization&#x60; type. Refer to the following table for the metric names supported for each type. |  AdGroup.bidOptimization |     Supported OptimizationRule.metricName       | |------------------|--------------------| |   reach       | COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS  | |   clicks      | COST_PER_CLICK          | |  conversions  | COST_PER_ORDER          |
     * @type {CreateAssociatedOptimizationRulesRequest}
     * @memberof OptimizationRulesPreviewOnlyApiAssociateOptimizationRulesWithAdGroup
     */
    readonly createAssociatedOptimizationRulesRequest?: CreateAssociatedOptimizationRulesRequest
}

/**
 * Request parameters for createOptimizationRules operation in OptimizationRulesPreviewOnlyApi.
 * @export
 * @interface OptimizationRulesPreviewOnlyApiCreateOptimizationRulesRequest
 */
export interface OptimizationRulesPreviewOnlyApiCreateOptimizationRulesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiCreateOptimizationRules
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiCreateOptimizationRules
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of OptimizationRule objects. For each object, specify required fields and their values. Required fields are &#x60;state&#x60; and &#x60;ruleConditions&#x60;.
     * @type {Array<CreateOptimizationRule>}
     * @memberof OptimizationRulesPreviewOnlyApiCreateOptimizationRules
     */
    readonly createOptimizationRule?: Array<CreateOptimizationRule>
}

/**
 * Request parameters for listOptimizationRules operation in OptimizationRulesPreviewOnlyApi.
 * @export
 * @interface OptimizationRulesPreviewOnlyApiListOptimizationRulesRequest
 */
export interface OptimizationRulesPreviewOnlyApiListOptimizationRulesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiListOptimizationRules
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiListOptimizationRules
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of optimization rules. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof OptimizationRulesPreviewOnlyApiListOptimizationRules
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of OptimizationRule objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten optimization rules set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten optimization rules, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof OptimizationRulesPreviewOnlyApiListOptimizationRules
     */
    readonly count?: number

    /**
     * Optional. The returned array is filtered to include only optimization rules with state set to one of the values in the specified comma-delimited list. Available values:   - enabled   - paused [COMING LATER]   - enabled, paused [COMING LATER]
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiListOptimizationRules
     */
    readonly stateFilter?: string

    /**
     * Optional. The returned array includes only optimization rules with the specified name using an exact string match.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiListOptimizationRules
     */
    readonly name?: string

    /**
     * Optional. The returned array is filtered to include only optimization rules associated with the optimization rule identifiers in the specified comma-delimited list.  Maximum size limit 50.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiListOptimizationRules
     */
    readonly optimizationRuleIdFilter?: string

    /**
     * Optional. The returned array is filtered to include only optimization rules associated with the ad group identifiers in the comma-delimited list.  Maximum size limit 50.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiListOptimizationRules
     */
    readonly adGroupIdFilter?: string
}

/**
 * Request parameters for sdAdGroupsAdGroupIdOptimizationRulesGet operation in OptimizationRulesPreviewOnlyApi.
 * @export
 * @interface OptimizationRulesPreviewOnlyApiSdAdGroupsAdGroupIdOptimizationRulesGetRequest
 */
export interface OptimizationRulesPreviewOnlyApiSdAdGroupsAdGroupIdOptimizationRulesGetRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiSdAdGroupsAdGroupIdOptimizationRulesGet
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiSdAdGroupsAdGroupIdOptimizationRulesGet
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the ad group.
     * @type {number}
     * @memberof OptimizationRulesPreviewOnlyApiSdAdGroupsAdGroupIdOptimizationRulesGet
     */
    readonly adGroupId: number
}

/**
 * Request parameters for sdOptimizationRulesOptimizationRuleIdGet operation in OptimizationRulesPreviewOnlyApi.
 * @export
 * @interface OptimizationRulesPreviewOnlyApiSdOptimizationRulesOptimizationRuleIdGetRequest
 */
export interface OptimizationRulesPreviewOnlyApiSdOptimizationRulesOptimizationRuleIdGetRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiSdOptimizationRulesOptimizationRuleIdGet
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiSdOptimizationRulesOptimizationRuleIdGet
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested optimization rule.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiSdOptimizationRulesOptimizationRuleIdGet
     */
    readonly optimizationRuleId: string
}

/**
 * Request parameters for updateOptimizationRules operation in OptimizationRulesPreviewOnlyApi.
 * @export
 * @interface OptimizationRulesPreviewOnlyApiUpdateOptimizationRulesRequest
 */
export interface OptimizationRulesPreviewOnlyApiUpdateOptimizationRulesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiUpdateOptimizationRules
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof OptimizationRulesPreviewOnlyApiUpdateOptimizationRules
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of OptimizationRule objects. For each object, specify an optimization rule identifier and mutable fields with their updated values. The mutable fields are &#x60;ruleName&#x60;, &#x60;state&#x60;, and &#x60;ruleConditions&#x60;.
     * @type {Array<UpdateOptimizationRule>}
     * @memberof OptimizationRulesPreviewOnlyApiUpdateOptimizationRules
     */
    readonly updateOptimizationRule?: Array<UpdateOptimizationRule>
}

/**
 * OptimizationRulesPreviewOnlyApi - object-oriented interface
 * @export
 * @class OptimizationRulesPreviewOnlyApi
 * @extends {BaseAPI}
 */
export class OptimizationRulesPreviewOnlyApi extends BaseAPI {
    /**
     * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.  * When an optimization rule is associated to an ad group, manual bids for individual targets will be overridden. * Only one optimization rule can be associated per adGroup. This note will be removed when multiple rules are supported per adGroup.
     * @summary Associate one or more optimization rules to an ad group specified by identifier.
     * @param {OptimizationRulesPreviewOnlyApiAssociateOptimizationRulesWithAdGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptimizationRulesPreviewOnlyApi
     */
    public associateOptimizationRulesWithAdGroup(requestParameters: OptimizationRulesPreviewOnlyApiAssociateOptimizationRulesWithAdGroupRequest, options?: any) {
        return OptimizationRulesPreviewOnlyApiFp(this.configuration).associateOptimizationRulesWithAdGroup(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, requestParameters.createAssociatedOptimizationRulesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.   * When an optimization rule is associated to an ad group, manual bids for individual targets will be overridden. * Optimization rules can only be associated to ad groups that have productAds with ASIN or SKU. * If you are using optimization rules, the following campaign budget must be at least:   - 5x the value of any COST_PER_ORDER threshold.   - 10x the value of any COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS threshold.   - 20x the value of any COST_PER_CLICK threshold.
     * @summary Creates one or more optimization rules, also known as outcome optimizations.
     * @param {OptimizationRulesPreviewOnlyApiCreateOptimizationRulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptimizationRulesPreviewOnlyApi
     */
    public createOptimizationRules(requestParameters: OptimizationRulesPreviewOnlyApiCreateOptimizationRulesRequest, options?: any) {
        return OptimizationRulesPreviewOnlyApiFp(this.configuration).createOptimizationRules(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createOptimizationRule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an array of OptimizationRule objects for a requested set of Sponsored Display optimization rules.
     * @summary Gets a list of optimization rules.
     * @param {OptimizationRulesPreviewOnlyApiListOptimizationRulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptimizationRulesPreviewOnlyApi
     */
    public listOptimizationRules(requestParameters: OptimizationRulesPreviewOnlyApiListOptimizationRulesRequest, options?: any) {
        return OptimizationRulesPreviewOnlyApiFp(this.configuration).listOptimizationRules(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.name, requestParameters.optimizationRuleIdFilter, requestParameters.adGroupIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an OptimizationRule object for a requested Sponsored Display optimization rule.
     * @summary Gets a list of optimization rules associated to an adgroup specified by identifier.
     * @param {OptimizationRulesPreviewOnlyApiSdAdGroupsAdGroupIdOptimizationRulesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptimizationRulesPreviewOnlyApi
     */
    public sdAdGroupsAdGroupIdOptimizationRulesGet(requestParameters: OptimizationRulesPreviewOnlyApiSdAdGroupsAdGroupIdOptimizationRulesGetRequest, options?: any) {
        return OptimizationRulesPreviewOnlyApiFp(this.configuration).sdAdGroupsAdGroupIdOptimizationRulesGet(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available. Gets an OptimizationRule object for a requested Sponsored Display optimization rule.
     * @summary Gets a requested optimization rule.
     * @param {OptimizationRulesPreviewOnlyApiSdOptimizationRulesOptimizationRuleIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptimizationRulesPreviewOnlyApi
     */
    public sdOptimizationRulesOptimizationRuleIdGet(requestParameters: OptimizationRulesPreviewOnlyApiSdOptimizationRulesOptimizationRuleIdGetRequest, options?: any) {
        return OptimizationRulesPreviewOnlyApiFp(this.configuration).sdOptimizationRulesOptimizationRuleIdGet(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.optimizationRuleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This operation is a PREVIEW ONLY. This note will be removed once this functionality becomes available.
     * @summary Updates one or more optimization rules.
     * @param {OptimizationRulesPreviewOnlyApiUpdateOptimizationRulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptimizationRulesPreviewOnlyApi
     */
    public updateOptimizationRules(requestParameters: OptimizationRulesPreviewOnlyApiUpdateOptimizationRulesRequest, options?: any) {
        return OptimizationRulesPreviewOnlyApiFp(this.configuration).updateOptimizationRules(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateOptimizationRule, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductAdsApi - axios parameter creator
 * @export
 */
export const ProductAdsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.
         * @summary Sets the status of a sproduct ad to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the produce ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveProductAd: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveProductAd', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveProductAd', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('archiveProductAd', 'adId', adId)
            const localVarPath = `/sd/productAds/{adId}`
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates one or more product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateProductAd>} [createProductAd] An array of ProductAd objects. For each object, specify required fields and their values. Required fields are &#x60;adGroupId&#x60;, &#x60;SKU&#x60; (for sellers) or &#x60;ASIN&#x60; (for vendors), and &#x60;state&#x60;\&#39;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductAds: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createProductAd?: Array<CreateProductAd>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createProductAds', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createProductAds', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/productAds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductAd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operations that returns the ProductAdResponseEx object.
         * @summary Gets a requested product ad.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the requested product ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductAd: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getProductAd', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getProductAd', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('getProductAd', 'adId', adId)
            const localVarPath = `/sd/productAds/{adId}`
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets extended information for a product ad.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the requested product ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductAdResponseEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getProductAdResponseEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getProductAdResponseEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'adId' is not null or undefined
            assertParamExists('getProductAdResponseEx', 'adId', adId)
            const localVarPath = `/sd/productAds/extended/{adId}`
                .replace(`{${"adId"}}`, encodeURIComponent(String(adId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of ProductAd objects for a requested set of Sponsored Display product ads. Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operation that returns the ProductAdResponseEx object.
         * @summary Gets a list of product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of ProductAd objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ad set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten product ads, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only products ads associated with campaigns that have state set to one of the values in the comma-delimited list.
         * @param {string} [adIdFilter] Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductAds: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listProductAds', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listProductAds', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/productAds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (adIdFilter !== undefined) {
                localVarQueryParameter['adIdFilter'] = adIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of ProductAdResponseEx objects for a set of requested ad groups. The ProductAdResponseEx object includes the extended set of available fields.
         * @summary Gets a list of product ads with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of ProduceAdEx objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ads set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [adIdFilter] Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductAdsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listProductAdsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listProductAdsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/productAds/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (adIdFilter !== undefined) {
                localVarQueryParameter['adIdFilter'] = adIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates one or more product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateProductAd>} [updateProductAd] An array of ProductAd objects. For each object, specify a product ad identifier and the only mutable field, &#x60;state&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductAds: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateProductAd?: Array<UpdateProductAd>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateProductAds', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateProductAds', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/productAds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductAd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductAdsApi - functional programming interface
 * @export
 */
export const ProductAdsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductAdsApiAxiosParamCreator(configuration)
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.
         * @summary Sets the status of a sproduct ad to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the produce ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveProductAd(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveProductAd(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates one or more product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateProductAd>} [createProductAd] An array of ProductAd objects. For each object, specify required fields and their values. Required fields are &#x60;adGroupId&#x60;, &#x60;SKU&#x60; (for sellers) or &#x60;ASIN&#x60; (for vendors), and &#x60;state&#x60;\&#39;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createProductAd?: Array<CreateProductAd>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAdResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createProductAd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operations that returns the ProductAdResponseEx object.
         * @summary Gets a requested product ad.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the requested product ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductAd(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAd>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductAd(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets extended information for a product ad.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the requested product ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductAdResponseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAdResponseEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductAdResponseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of ProductAd objects for a requested set of Sponsored Display product ads. Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operation that returns the ProductAdResponseEx object.
         * @summary Gets a list of product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of ProductAd objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ad set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten product ads, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only products ads associated with campaigns that have state set to one of the values in the comma-delimited list.
         * @param {string} [adIdFilter] Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAd>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adIdFilter, adGroupIdFilter, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of ProductAdResponseEx objects for a set of requested ad groups. The ProductAdResponseEx object includes the extended set of available fields.
         * @summary Gets a list of product ads with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of ProduceAdEx objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ads set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [adIdFilter] Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductAdsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAdResponseEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProductAdsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adIdFilter, adGroupIdFilter, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates one or more product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateProductAd>} [updateProductAd] An array of ProductAd objects. For each object, specify a product ad identifier and the only mutable field, &#x60;state&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateProductAd?: Array<UpdateProductAd>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAdResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateProductAd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductAdsApi - factory interface
 * @export
 */
export const ProductAdsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductAdsApiFp(configuration)
    return {
        /**
         * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.
         * @summary Sets the status of a sproduct ad to archived.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the produce ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveProductAd(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): AxiosPromise<ProductAdResponse> {
            return localVarFp.archiveProductAd(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates one or more product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateProductAd>} [createProductAd] An array of ProductAd objects. For each object, specify required fields and their values. Required fields are &#x60;adGroupId&#x60;, &#x60;SKU&#x60; (for sellers) or &#x60;ASIN&#x60; (for vendors), and &#x60;state&#x60;\&#39;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createProductAd?: Array<CreateProductAd>, options?: any): AxiosPromise<Array<ProductAdResponse>> {
            return localVarFp.createProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createProductAd, options).then((request) => request(axios, basePath));
        },
        /**
         * Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operations that returns the ProductAdResponseEx object.
         * @summary Gets a requested product ad.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the requested product ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductAd(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): AxiosPromise<ProductAd> {
            return localVarFp.getProductAd(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets extended information for a product ad.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} adId The identifier of the requested product ad.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductAdResponseEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, adId: number, options?: any): AxiosPromise<ProductAdResponseEx> {
            return localVarFp.getProductAdResponseEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, adId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of ProductAd objects for a requested set of Sponsored Display product ads. Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operation that returns the ProductAdResponseEx object.
         * @summary Gets a list of product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of ProductAd objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ad set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten product ads, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only products ads associated with campaigns that have state set to one of the values in the comma-delimited list.
         * @param {string} [adIdFilter] Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<ProductAd>> {
            return localVarFp.listProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adIdFilter, adGroupIdFilter, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of ProductAdResponseEx objects for a set of requested ad groups. The ProductAdResponseEx object includes the extended set of available fields.
         * @summary Gets a list of product ads with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
         * @param {number} [count] Optional. Sets the number of ProduceAdEx objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ads set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
         * @param {string} [adIdFilter] Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
         * @param {string} [adGroupIdFilter] Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
         * @param {string} [campaignIdFilter] Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductAdsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<ProductAdResponseEx>> {
            return localVarFp.listProductAdsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adIdFilter, adGroupIdFilter, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates one or more product ads.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateProductAd>} [updateProductAd] An array of ProductAd objects. For each object, specify a product ad identifier and the only mutable field, &#x60;state&#x60;. Maximum length of the array is 100 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductAds(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateProductAd?: Array<UpdateProductAd>, options?: any): AxiosPromise<Array<ProductAdResponse>> {
            return localVarFp.updateProductAds(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateProductAd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveProductAd operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiArchiveProductAdRequest
 */
export interface ProductAdsApiArchiveProductAdRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProductAdsApiArchiveProductAd
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiArchiveProductAd
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the produce ad.
     * @type {number}
     * @memberof ProductAdsApiArchiveProductAd
     */
    readonly adId: number
}

/**
 * Request parameters for createProductAds operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiCreateProductAdsRequest
 */
export interface ProductAdsApiCreateProductAdsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProductAdsApiCreateProductAds
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiCreateProductAds
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of ProductAd objects. For each object, specify required fields and their values. Required fields are &#x60;adGroupId&#x60;, &#x60;SKU&#x60; (for sellers) or &#x60;ASIN&#x60; (for vendors), and &#x60;state&#x60;\&#39;. Maximum length of the array is 100 objects.
     * @type {Array<CreateProductAd>}
     * @memberof ProductAdsApiCreateProductAds
     */
    readonly createProductAd?: Array<CreateProductAd>
}

/**
 * Request parameters for getProductAd operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiGetProductAdRequest
 */
export interface ProductAdsApiGetProductAdRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProductAdsApiGetProductAd
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiGetProductAd
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested product ad.
     * @type {number}
     * @memberof ProductAdsApiGetProductAd
     */
    readonly adId: number
}

/**
 * Request parameters for getProductAdResponseEx operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiGetProductAdResponseExRequest
 */
export interface ProductAdsApiGetProductAdResponseExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProductAdsApiGetProductAdResponseEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiGetProductAdResponseEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested product ad.
     * @type {number}
     * @memberof ProductAdsApiGetProductAdResponseEx
     */
    readonly adId: number
}

/**
 * Request parameters for listProductAds operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiListProductAdsRequest
 */
export interface ProductAdsApiListProductAdsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProductAdsApiListProductAds
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiListProductAds
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof ProductAdsApiListProductAds
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of ProductAd objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ad set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten product ads, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof ProductAdsApiListProductAds
     */
    readonly count?: number

    /**
     * Optional. The returned array is filtered to include only products ads associated with campaigns that have state set to one of the values in the comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof ProductAdsApiListProductAds
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
     * @type {string}
     * @memberof ProductAdsApiListProductAds
     */
    readonly adIdFilter?: string

    /**
     * Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
     * @type {string}
     * @memberof ProductAdsApiListProductAds
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
     * @type {string}
     * @memberof ProductAdsApiListProductAds
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for listProductAdsEx operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiListProductAdsExRequest
 */
export interface ProductAdsApiListProductAdsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the &#x60;count&#x60; parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     * @type {number}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly startIndex?: number

    /**
     * Optional. Sets the number of ProduceAdEx objects in the returned array. Use in conjunction with the &#x60;startIndex&#x60; parameter to control pagination. For example, to return the first ten product ads set &#x60;startIndex&#x3D;0&#x60; and &#x60;count&#x3D;10&#x60;. To return the next ten campaigns, set &#x60;startIndex&#x3D;10&#x60; and &#x60;count&#x3D;10&#x60;, and so on. Defaults to max page size.
     * @type {number}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly count?: number

    /**
     * Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
     * @type {string}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly adIdFilter?: string

    /**
     * Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
     * @type {string}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
     * @type {string}
     * @memberof ProductAdsApiListProductAdsEx
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for updateProductAds operation in ProductAdsApi.
 * @export
 * @interface ProductAdsApiUpdateProductAdsRequest
 */
export interface ProductAdsApiUpdateProductAdsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProductAdsApiUpdateProductAds
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductAdsApiUpdateProductAds
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * An array of ProductAd objects. For each object, specify a product ad identifier and the only mutable field, &#x60;state&#x60;. Maximum length of the array is 100 objects.
     * @type {Array<UpdateProductAd>}
     * @memberof ProductAdsApiUpdateProductAds
     */
    readonly updateProductAd?: Array<UpdateProductAd>
}

/**
 * ProductAdsApi - object-oriented interface
 * @export
 * @class ProductAdsApi
 * @extends {BaseAPI}
 */
export class ProductAdsApi extends BaseAPI {
    /**
     * This operation is equivalent to an update operation that sets the status field to \'archived\'. Note that setting the status field to \'archived\' is permanent and can\'t be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.
     * @summary Sets the status of a sproduct ad to archived.
     * @param {ProductAdsApiArchiveProductAdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public archiveProductAd(requestParameters: ProductAdsApiArchiveProductAdRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).archiveProductAd(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates one or more product ads.
     * @param {ProductAdsApiCreateProductAdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public createProductAds(requestParameters: ProductAdsApiCreateProductAdsRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).createProductAds(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createProductAd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operations that returns the ProductAdResponseEx object.
     * @summary Gets a requested product ad.
     * @param {ProductAdsApiGetProductAdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public getProductAd(requestParameters: ProductAdsApiGetProductAdRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).getProductAd(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets extended information for a product ad.
     * @param {ProductAdsApiGetProductAdResponseExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public getProductAdResponseEx(requestParameters: ProductAdsApiGetProductAdResponseExRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).getProductAdResponseEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.adId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of ProductAd objects for a requested set of Sponsored Display product ads. Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operation that returns the ProductAdResponseEx object.
     * @summary Gets a list of product ads.
     * @param {ProductAdsApiListProductAdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public listProductAds(requestParameters: ProductAdsApiListProductAdsRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).listProductAds(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.adIdFilter, requestParameters.adGroupIdFilter, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of ProductAdResponseEx objects for a set of requested ad groups. The ProductAdResponseEx object includes the extended set of available fields.
     * @summary Gets a list of product ads with extended fields.
     * @param {ProductAdsApiListProductAdsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public listProductAdsEx(requestParameters: ProductAdsApiListProductAdsExRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).listProductAdsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.adIdFilter, requestParameters.adGroupIdFilter, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates one or more product ads.
     * @param {ProductAdsApiUpdateProductAdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAdsApi
     */
    public updateProductAds(requestParameters: ProductAdsApiUpdateProductAdsRequest, options?: any) {
        return ProductAdsApiFp(this.configuration).updateProductAds(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateProductAd, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a `307 Temporary Redirect` response that includes a `location` header with the value set to an AWS S3 path where the report is located. The path expires after 30 seconds. If the path expires before the report is downloaded, a new report request must be created.  **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**
         * @summary Downloads a previously requested report identified by reportId.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} reportId The identifier of the requested report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadReport: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('downloadReport', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('downloadReport', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('downloadReport', 'reportId', reportId)
            const localVarPath = `/v2/reports/{reportId}/download`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uses the `reportId` value from the response of a report previously requested via `POST` method of the `/sd/{recordType}/report` operation.  **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**
         * @summary Gets the status of a report previously requested.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} reportId The identifier of the requested report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportStatus: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getReportStatus', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getReportStatus', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('getReportStatus', 'reportId', reportId)
            const localVarPath = `/v2/reports/{reportId}`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**  The Sponsored Display API supports creation of reports for campaigns, ad groups, product ads, targets, and asins. Create a ReportRequest object specifying the fields corresponding to performance data metrics to include in the report.
         * @summary Creates a report request.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins'} recordType The type of report to generate, either &#x60;campaigns&#x60;, &#x60;adGroups&#x60;, &#x60;productAds&#x60;, &#x60;targets&#x60;, or &#x60;asins&#x60;. The \&#39;asins\&#39; report, also known as the Purchased products report, is only available for seller brand owners.
         * @param {ReportRequest} [reportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestReport: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins', reportRequest?: ReportRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('requestReport', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('requestReport', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'recordType' is not null or undefined
            assertParamExists('requestReport', 'recordType', recordType)
            const localVarPath = `/sd/{recordType}/report`
                .replace(`{${"recordType"}}`, encodeURIComponent(String(recordType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets a `307 Temporary Redirect` response that includes a `location` header with the value set to an AWS S3 path where the report is located. The path expires after 30 seconds. If the path expires before the report is downloaded, a new report request must be created.  **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**
         * @summary Downloads a previously requested report identified by reportId.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} reportId The identifier of the requested report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadReport(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadReport(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, reportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Uses the `reportId` value from the response of a report previously requested via `POST` method of the `/sd/{recordType}/report` operation.  **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**
         * @summary Gets the status of a report previously requested.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} reportId The identifier of the requested report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, reportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**  The Sponsored Display API supports creation of reports for campaigns, ad groups, product ads, targets, and asins. Create a ReportRequest object specifying the fields corresponding to performance data metrics to include in the report.
         * @summary Creates a report request.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins'} recordType The type of report to generate, either &#x60;campaigns&#x60;, &#x60;adGroups&#x60;, &#x60;productAds&#x60;, &#x60;targets&#x60;, or &#x60;asins&#x60;. The \&#39;asins\&#39; report, also known as the Purchased products report, is only available for seller brand owners.
         * @param {ReportRequest} [reportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestReport(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins', reportRequest?: ReportRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestReport(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, reportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * Gets a `307 Temporary Redirect` response that includes a `location` header with the value set to an AWS S3 path where the report is located. The path expires after 30 seconds. If the path expires before the report is downloaded, a new report request must be created.  **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**
         * @summary Downloads a previously requested report identified by reportId.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} reportId The identifier of the requested report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadReport(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportId: string, options?: any): AxiosPromise<void> {
            return localVarFp.downloadReport(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, reportId, options).then((request) => request(axios, basePath));
        },
        /**
         * Uses the `reportId` value from the response of a report previously requested via `POST` method of the `/sd/{recordType}/report` operation.  **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**
         * @summary Gets the status of a report previously requested.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} reportId The identifier of the requested report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportStatus(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, reportId: string, options?: any): AxiosPromise<ReportResponse> {
            return localVarFp.getReportStatus(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, reportId, options).then((request) => request(axios, basePath));
        },
        /**
         * **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**  The Sponsored Display API supports creation of reports for campaigns, ad groups, product ads, targets, and asins. Create a ReportRequest object specifying the fields corresponding to performance data metrics to include in the report.
         * @summary Creates a report request.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins'} recordType The type of report to generate, either &#x60;campaigns&#x60;, &#x60;adGroups&#x60;, &#x60;productAds&#x60;, &#x60;targets&#x60;, or &#x60;asins&#x60;. The \&#39;asins\&#39; report, also known as the Purchased products report, is only available for seller brand owners.
         * @param {ReportRequest} [reportRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestReport(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: 'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins', reportRequest?: ReportRequest, options?: any): AxiosPromise<ReportResponse> {
            return localVarFp.requestReport(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, reportRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for downloadReport operation in ReportsApi.
 * @export
 * @interface ReportsApiDownloadReportRequest
 */
export interface ReportsApiDownloadReportRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ReportsApiDownloadReport
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ReportsApiDownloadReport
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested report.
     * @type {string}
     * @memberof ReportsApiDownloadReport
     */
    readonly reportId: string
}

/**
 * Request parameters for getReportStatus operation in ReportsApi.
 * @export
 * @interface ReportsApiGetReportStatusRequest
 */
export interface ReportsApiGetReportStatusRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ReportsApiGetReportStatus
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ReportsApiGetReportStatus
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of the requested report.
     * @type {string}
     * @memberof ReportsApiGetReportStatus
     */
    readonly reportId: string
}

/**
 * Request parameters for requestReport operation in ReportsApi.
 * @export
 * @interface ReportsApiRequestReportRequest
 */
export interface ReportsApiRequestReportRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ReportsApiRequestReport
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ReportsApiRequestReport
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The type of report to generate, either &#x60;campaigns&#x60;, &#x60;adGroups&#x60;, &#x60;productAds&#x60;, &#x60;targets&#x60;, or &#x60;asins&#x60;. The \&#39;asins\&#39; report, also known as the Purchased products report, is only available for seller brand owners.
     * @type {'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins'}
     * @memberof ReportsApiRequestReport
     */
    readonly recordType: 'campaigns' | 'adGroups' | 'productAds' | 'targets' | 'asins'

    /**
     * 
     * @type {ReportRequest}
     * @memberof ReportsApiRequestReport
     */
    readonly reportRequest?: ReportRequest
}

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
    /**
     * Gets a `307 Temporary Redirect` response that includes a `location` header with the value set to an AWS S3 path where the report is located. The path expires after 30 seconds. If the path expires before the report is downloaded, a new report request must be created.  **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**
     * @summary Downloads a previously requested report identified by reportId.
     * @param {ReportsApiDownloadReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public downloadReport(requestParameters: ReportsApiDownloadReportRequest, options?: any) {
        return ReportsApiFp(this.configuration).downloadReport(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.reportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uses the `reportId` value from the response of a report previously requested via `POST` method of the `/sd/{recordType}/report` operation.  **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**
     * @summary Gets the status of a report previously requested.
     * @param {ReportsApiGetReportStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public getReportStatus(requestParameters: ReportsApiGetReportStatusRequest, options?: any) {
        return ReportsApiFp(this.configuration).getReportStatus(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.reportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**  The Sponsored Display API supports creation of reports for campaigns, ad groups, product ads, targets, and asins. Create a ReportRequest object specifying the fields corresponding to performance data metrics to include in the report.
     * @summary Creates a report request.
     * @param {ReportsApiRequestReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public requestReport(requestParameters: ReportsApiRequestReportRequest, options?: any) {
        return ReportsApiFp(this.configuration).requestReport(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.recordType, requestParameters.reportRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SnapshotsApi - axios parameter creator
 * @export
 */
export const SnapshotsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
         * @summary Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} recordType The type of entity for which the snapshot should be generated. Must be one of: &#x60;campaigns&#x60;, &#x60;adgroups&#x60;, &#x60;productAds&#x60;, or &#x60;targets&#x60;.
         * @param {SnapshotRequest} [snapshotRequest] Request a snapshot file for all entities of a single record type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSnapshot: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: string, snapshotRequest?: SnapshotRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createSnapshot', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createSnapshot', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'recordType' is not null or undefined
            assertParamExists('createSnapshot', 'recordType', recordType)
            const localVarPath = `/sd/{recordType}/snapshot`
                .replace(`{${"recordType"}}`, encodeURIComponent(String(recordType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(snapshotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/overview).**
         * @summary Download previously requested snapshot
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId The Snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadSnapshot: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('downloadSnapshot', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('downloadSnapshot', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('downloadSnapshot', 'snapshotId', snapshotId)
            const localVarPath = `/sd/snapshots/{snapshotId}/download`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
         * @summary Retrieve status, metadata, and location of previously requested snapshot
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId The Snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSnapshot: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getSnapshot', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getSnapshot', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSnapshot', 'snapshotId', snapshotId)
            const localVarPath = `/sd/snapshots/{snapshotId}`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SnapshotsApi - functional programming interface
 * @export
 */
export const SnapshotsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SnapshotsApiAxiosParamCreator(configuration)
    return {
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
         * @summary Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} recordType The type of entity for which the snapshot should be generated. Must be one of: &#x60;campaigns&#x60;, &#x60;adgroups&#x60;, &#x60;productAds&#x60;, or &#x60;targets&#x60;.
         * @param {SnapshotRequest} [snapshotRequest] Request a snapshot file for all entities of a single record type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: string, snapshotRequest?: SnapshotRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, snapshotRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/overview).**
         * @summary Download previously requested snapshot
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId The Snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
         * @summary Retrieve status, metadata, and location of previously requested snapshot
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId The Snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SnapshotsApi - factory interface
 * @export
 */
export const SnapshotsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SnapshotsApiFp(configuration)
    return {
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
         * @summary Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} recordType The type of entity for which the snapshot should be generated. Must be one of: &#x60;campaigns&#x60;, &#x60;adgroups&#x60;, &#x60;productAds&#x60;, or &#x60;targets&#x60;.
         * @param {SnapshotRequest} [snapshotRequest] Request a snapshot file for all entities of a single record type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, recordType: string, snapshotRequest?: SnapshotRequest, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.createSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, recordType, snapshotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/overview).**
         * @summary Download previously requested snapshot
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId The Snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options?: any): AxiosPromise<void> {
            return localVarFp.downloadSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options).then((request) => request(axios, basePath));
        },
        /**
         * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
         * @summary Retrieve status, metadata, and location of previously requested snapshot
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {string} snapshotId The Snapshot identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSnapshot(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, snapshotId: string, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.getSnapshot(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, snapshotId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSnapshot operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiCreateSnapshotRequest
 */
export interface SnapshotsApiCreateSnapshotRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof SnapshotsApiCreateSnapshot
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SnapshotsApiCreateSnapshot
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The type of entity for which the snapshot should be generated. Must be one of: &#x60;campaigns&#x60;, &#x60;adgroups&#x60;, &#x60;productAds&#x60;, or &#x60;targets&#x60;.
     * @type {string}
     * @memberof SnapshotsApiCreateSnapshot
     */
    readonly recordType: string

    /**
     * Request a snapshot file for all entities of a single record type.
     * @type {SnapshotRequest}
     * @memberof SnapshotsApiCreateSnapshot
     */
    readonly snapshotRequest?: SnapshotRequest
}

/**
 * Request parameters for downloadSnapshot operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiDownloadSnapshotRequest
 */
export interface SnapshotsApiDownloadSnapshotRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof SnapshotsApiDownloadSnapshot
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SnapshotsApiDownloadSnapshot
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The Snapshot identifier.
     * @type {string}
     * @memberof SnapshotsApiDownloadSnapshot
     */
    readonly snapshotId: string
}

/**
 * Request parameters for getSnapshot operation in SnapshotsApi.
 * @export
 * @interface SnapshotsApiGetSnapshotRequest
 */
export interface SnapshotsApiGetSnapshotRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof SnapshotsApiGetSnapshot
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof SnapshotsApiGetSnapshot
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The Snapshot identifier.
     * @type {string}
     * @memberof SnapshotsApiGetSnapshot
     */
    readonly snapshotId: string
}

/**
 * SnapshotsApi - object-oriented interface
 * @export
 * @class SnapshotsApi
 * @extends {BaseAPI}
 */
export class SnapshotsApi extends BaseAPI {
    /**
     * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
     * @summary Request a file-based snapshot of all entities of the specified type in the account satisfying the filtering criteria
     * @param {SnapshotsApiCreateSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    public createSnapshot(requestParameters: SnapshotsApiCreateSnapshotRequest, options?: any) {
        return SnapshotsApiFp(this.configuration).createSnapshot(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.recordType, requestParameters.snapshotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/overview).**
     * @summary Download previously requested snapshot
     * @param {SnapshotsApiDownloadSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    public downloadSnapshot(requestParameters: SnapshotsApiDownloadSnapshotRequest, options?: any) {
        return SnapshotsApiFp(this.configuration).downloadSnapshot(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.snapshotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).**
     * @summary Retrieve status, metadata, and location of previously requested snapshot
     * @param {SnapshotsApiGetSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    public getSnapshot(requestParameters: SnapshotsApiGetSnapshotRequest, options?: any) {
        return SnapshotsApiFp(this.configuration).getSnapshot(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.snapshotId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TargetingApi - axios parameter creator
 * @export
 */
export const TargetingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Equivalent to using the `updateTargetingClauses` operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
         * @summary Sets the `state` of a targeting clause to `archived`.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifer of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveTargetingClause: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('archiveTargetingClause', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('archiveTargetingClause', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('archiveTargetingClause', 'targetId', targetId)
            const localVarPath = `/sd/targets/{targetId}`
                .replace(`{${"targetId"}}`, encodeURIComponent(String(targetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Successfully created targeting clauses are assigned a unique `targetId` value.  Create new targeting clauses for campaigns with tactic \'T00020\' using the following: | Contextual targeting clause | Description | |------------------|-------------| | similarProduct | Dynamic segment to target products that are similar to the advertised asin. We recommend using \'similarProduct\' targeting for all adGroups. | | asinSameAs=B0123456789 | Target this product. | | asinCategorySameAs=12345 | Target products in the category. | | asinCategorySameAs=12345 asinBrandSameAs=45678 | Target products in the category and brand. |  **Refinements:** - asinBrandSameAs - asinPriceBetween - asinPriceGreaterThan - asinPriceLessThan - asinReviewRatingLessThan - asinReviewRatingGreaterThan - asinReviewRatingBetween - asinIsPrimeShippingEligible - asinAgeRangeSameAs - asinGenreSameAs  **Refinement Notes:** * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the \'between\' strings to construct a targeting expression the format of the string is \'double-double\' where the first double must be smaller than the second double. Prices are not inclusive. * \'similarProduct\' has no expression value or refinements.  Create new targeting clauses for campaigns with tactic \'T00030\' using the following: | Audience targeting clause | Description | |------------------|-------------| | views(exactProduct lookback=30) | Target an audience that has viewed the advertised asins in the past 7,14,30,60, or 90 days. Note: This target should only be used for productAds with SKU or ASIN. | | views(similarProduct lookback=60) | Target an audience that has viewed similar products to the advertised asins in the past 7,14,30,60, or 90 days. Note: This target should only be used for productAds with SKU or ASIN.| | views(asinCategorySameAs=12345 lookback=90) | Target an audience that has viewed products in the given category in the past 7,14,30,60, or 90 days. | | views(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=60) | Target an audience that has viewed products in the given category, brand, and price range in the past 7,14,30,60, or 90 days. | | purchases(relatedProduct lookback=180) | Target an audience that has purchased a related product in the past 7,14,30,60,90,180 or 365 days. Note: This target should only be used for productAds with SKU or ASIN.| | purchases(exactProduct lookback=365) | Target an audience that has purchased the advertised asins in the past 7,14,30,60,90,180 or 365 days. Note: This target should only be used for productAds with SKU or ASIN.| | purchases(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=90) | Target an audience that has purchased products in the given category, brand, and price range in the past 7,14,30,60,90,180 or 365 days |  Note: 1. There is a limit of 20 targeting clauses per request for T00030. 2. There is a limit of 100 targeting clauses per request for T00020. 3. If you receive the error of \"Cannot create targeting clause: audience size is too small\", please expand or broaden your targeting clause to increase the audience size.
         * @summary Creates one or more targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateTargetingClause>} [createTargetingClause] A list of targeting clauses for creation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createTargetingClause?: Array<CreateTargetingClause>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('createTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('createTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/targets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTargetingClause, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This call returns the minimal set of targeting clause fields.
         * @summary Gets a targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifier of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargets: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getTargets', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getTargets', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('getTargets', 'targetId', targetId)
            const localVarPath = `/sd/targets/{targetId}`
                .replace(`{${"targetId"}}`, encodeURIComponent(String(targetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a targeting clause object with extended fields. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTarget.
         * @summary Gets extended information for a targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifier of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetsEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getTargetsEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getTargetsEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'targetId' is not null or undefined
            assertParamExists('getTargetsEx', 'targetId', targetId)
            const localVarPath = `/sd/targets/extended/{targetId}`
                .replace(`{${"targetId"}}`, encodeURIComponent(String(targetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of targeting clauses objects for a requested set of Sponsored Display targets. Note that the Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the target operations that return the TargetingClauseEx object.
         * @summary Gets a list of targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to those with &#x60;state&#x60; set to values in the specified comma-separated list.
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adGroupIdFilter?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/targets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an array of TargetingClauseEx objects for a set of requested targets. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTargets.
         * @summary Gets a list of targeting clause objects with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
         * @param {string} [targetIdFilter] Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to ads within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTargetingClausesEx: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', targetIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('listTargetingClausesEx', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('listTargetingClausesEx', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/targets/extended`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (stateFilter !== undefined) {
                localVarQueryParameter['stateFilter'] = stateFilter;
            }

            if (targetIdFilter !== undefined) {
                localVarQueryParameter['targetIdFilter'] = targetIdFilter;
            }

            if (adGroupIdFilter !== undefined) {
                localVarQueryParameter['adGroupIdFilter'] = adGroupIdFilter;
            }

            if (campaignIdFilter !== undefined) {
                localVarQueryParameter['campaignIdFilter'] = campaignIdFilter;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates one or more targeting clauses. Targeting clauses are identified using their targetId. The mutable fields are `bid` and `state`. Maximum length of the array is 100 objects.
         * @summary Updates one or more targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateTargetingClause>} [updateTargetingClause] A list of up to 100 targeting clauses. Mutable fields: * &#x60;state&#x60; * &#x60;bid&#x60; (only mutable when the targeting clause\&#39;s adGroup does not have any enabled optimization rule)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTargetingClauses: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateTargetingClause?: Array<UpdateTargetingClause>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('updateTargetingClauses', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('updateTargetingClauses', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/targets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTargetingClause, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TargetingApi - functional programming interface
 * @export
 */
export const TargetingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TargetingApiAxiosParamCreator(configuration)
    return {
        /**
         * Equivalent to using the `updateTargetingClauses` operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
         * @summary Sets the `state` of a targeting clause to `archived`.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifer of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Successfully created targeting clauses are assigned a unique `targetId` value.  Create new targeting clauses for campaigns with tactic \'T00020\' using the following: | Contextual targeting clause | Description | |------------------|-------------| | similarProduct | Dynamic segment to target products that are similar to the advertised asin. We recommend using \'similarProduct\' targeting for all adGroups. | | asinSameAs=B0123456789 | Target this product. | | asinCategorySameAs=12345 | Target products in the category. | | asinCategorySameAs=12345 asinBrandSameAs=45678 | Target products in the category and brand. |  **Refinements:** - asinBrandSameAs - asinPriceBetween - asinPriceGreaterThan - asinPriceLessThan - asinReviewRatingLessThan - asinReviewRatingGreaterThan - asinReviewRatingBetween - asinIsPrimeShippingEligible - asinAgeRangeSameAs - asinGenreSameAs  **Refinement Notes:** * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the \'between\' strings to construct a targeting expression the format of the string is \'double-double\' where the first double must be smaller than the second double. Prices are not inclusive. * \'similarProduct\' has no expression value or refinements.  Create new targeting clauses for campaigns with tactic \'T00030\' using the following: | Audience targeting clause | Description | |------------------|-------------| | views(exactProduct lookback=30) | Target an audience that has viewed the advertised asins in the past 7,14,30,60, or 90 days. Note: This target should only be used for productAds with SKU or ASIN. | | views(similarProduct lookback=60) | Target an audience that has viewed similar products to the advertised asins in the past 7,14,30,60, or 90 days. Note: This target should only be used for productAds with SKU or ASIN.| | views(asinCategorySameAs=12345 lookback=90) | Target an audience that has viewed products in the given category in the past 7,14,30,60, or 90 days. | | views(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=60) | Target an audience that has viewed products in the given category, brand, and price range in the past 7,14,30,60, or 90 days. | | purchases(relatedProduct lookback=180) | Target an audience that has purchased a related product in the past 7,14,30,60,90,180 or 365 days. Note: This target should only be used for productAds with SKU or ASIN.| | purchases(exactProduct lookback=365) | Target an audience that has purchased the advertised asins in the past 7,14,30,60,90,180 or 365 days. Note: This target should only be used for productAds with SKU or ASIN.| | purchases(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=90) | Target an audience that has purchased products in the given category, brand, and price range in the past 7,14,30,60,90,180 or 365 days |  Note: 1. There is a limit of 20 targeting clauses per request for T00030. 2. There is a limit of 100 targeting clauses per request for T00020. 3. If you receive the error of \"Cannot create targeting clause: audience size is too small\", please expand or broaden your targeting clause to increase the audience size.
         * @summary Creates one or more targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateTargetingClause>} [createTargetingClause] A list of targeting clauses for creation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createTargetingClause?: Array<CreateTargetingClause>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createTargetingClause, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This call returns the minimal set of targeting clause fields.
         * @summary Gets a targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifier of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargets(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetingClause>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargets(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a targeting clause object with extended fields. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTarget.
         * @summary Gets extended information for a targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifier of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargetsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TargetingClauseEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargetsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a list of targeting clauses objects for a requested set of Sponsored Display targets. Note that the Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the target operations that return the TargetingClauseEx object.
         * @summary Gets a list of targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to those with &#x60;state&#x60; set to values in the specified comma-separated list.
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetingClause>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adGroupIdFilter, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an array of TargetingClauseEx objects for a set of requested targets. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTargets.
         * @summary Gets a list of targeting clause objects with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
         * @param {string} [targetIdFilter] Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to ads within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTargetingClausesEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', targetIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetingClauseEx>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTargetingClausesEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, targetIdFilter, adGroupIdFilter, campaignIdFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates one or more targeting clauses. Targeting clauses are identified using their targetId. The mutable fields are `bid` and `state`. Maximum length of the array is 100 objects.
         * @summary Updates one or more targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateTargetingClause>} [updateTargetingClause] A list of up to 100 targeting clauses. Mutable fields: * &#x60;state&#x60; * &#x60;bid&#x60; (only mutable when the targeting clause\&#39;s adGroup does not have any enabled optimization rule)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateTargetingClause?: Array<UpdateTargetingClause>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TargetResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateTargetingClause, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TargetingApi - factory interface
 * @export
 */
export const TargetingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TargetingApiFp(configuration)
    return {
        /**
         * Equivalent to using the `updateTargetingClauses` operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
         * @summary Sets the `state` of a targeting clause to `archived`.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifer of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveTargetingClause(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): AxiosPromise<TargetResponse> {
            return localVarFp.archiveTargetingClause(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Successfully created targeting clauses are assigned a unique `targetId` value.  Create new targeting clauses for campaigns with tactic \'T00020\' using the following: | Contextual targeting clause | Description | |------------------|-------------| | similarProduct | Dynamic segment to target products that are similar to the advertised asin. We recommend using \'similarProduct\' targeting for all adGroups. | | asinSameAs=B0123456789 | Target this product. | | asinCategorySameAs=12345 | Target products in the category. | | asinCategorySameAs=12345 asinBrandSameAs=45678 | Target products in the category and brand. |  **Refinements:** - asinBrandSameAs - asinPriceBetween - asinPriceGreaterThan - asinPriceLessThan - asinReviewRatingLessThan - asinReviewRatingGreaterThan - asinReviewRatingBetween - asinIsPrimeShippingEligible - asinAgeRangeSameAs - asinGenreSameAs  **Refinement Notes:** * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the \'between\' strings to construct a targeting expression the format of the string is \'double-double\' where the first double must be smaller than the second double. Prices are not inclusive. * \'similarProduct\' has no expression value or refinements.  Create new targeting clauses for campaigns with tactic \'T00030\' using the following: | Audience targeting clause | Description | |------------------|-------------| | views(exactProduct lookback=30) | Target an audience that has viewed the advertised asins in the past 7,14,30,60, or 90 days. Note: This target should only be used for productAds with SKU or ASIN. | | views(similarProduct lookback=60) | Target an audience that has viewed similar products to the advertised asins in the past 7,14,30,60, or 90 days. Note: This target should only be used for productAds with SKU or ASIN.| | views(asinCategorySameAs=12345 lookback=90) | Target an audience that has viewed products in the given category in the past 7,14,30,60, or 90 days. | | views(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=60) | Target an audience that has viewed products in the given category, brand, and price range in the past 7,14,30,60, or 90 days. | | purchases(relatedProduct lookback=180) | Target an audience that has purchased a related product in the past 7,14,30,60,90,180 or 365 days. Note: This target should only be used for productAds with SKU or ASIN.| | purchases(exactProduct lookback=365) | Target an audience that has purchased the advertised asins in the past 7,14,30,60,90,180 or 365 days. Note: This target should only be used for productAds with SKU or ASIN.| | purchases(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=90) | Target an audience that has purchased products in the given category, brand, and price range in the past 7,14,30,60,90,180 or 365 days |  Note: 1. There is a limit of 20 targeting clauses per request for T00030. 2. There is a limit of 100 targeting clauses per request for T00020. 3. If you receive the error of \"Cannot create targeting clause: audience size is too small\", please expand or broaden your targeting clause to increase the audience size.
         * @summary Creates one or more targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<CreateTargetingClause>} [createTargetingClause] A list of targeting clauses for creation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, createTargetingClause?: Array<CreateTargetingClause>, options?: any): AxiosPromise<Array<TargetResponse>> {
            return localVarFp.createTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, createTargetingClause, options).then((request) => request(axios, basePath));
        },
        /**
         * This call returns the minimal set of targeting clause fields.
         * @summary Gets a targeting clause specified by identifier.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifier of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargets(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): AxiosPromise<TargetingClause> {
            return localVarFp.getTargets(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a targeting clause object with extended fields. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTarget.
         * @summary Gets extended information for a targeting clause.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} targetId The identifier of a targeting clause.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetsEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, targetId: number, options?: any): AxiosPromise<TargetingClauseEx> {
            return localVarFp.getTargetsEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, targetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of targeting clauses objects for a requested set of Sponsored Display targets. Note that the Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the target operations that return the TargetingClauseEx object.
         * @summary Gets a list of targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to those with &#x60;state&#x60; set to values in the specified comma-separated list.
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<TargetingClause>> {
            return localVarFp.listTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, adGroupIdFilter, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an array of TargetingClauseEx objects for a set of requested targets. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTargets.
         * @summary Gets a list of targeting clause objects with extended fields.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {number} [startIndex] Optional. 0-indexed record offset for the result set. Defaults to 0.
         * @param {number} [count] Optional. Number of records to include in the paged response. Defaults to max page size.
         * @param {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'} [stateFilter] Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
         * @param {string} [targetIdFilter] Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
         * @param {string} [adGroupIdFilter] Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
         * @param {string} [campaignIdFilter] Optional. Restricts results to ads within campaigns specified in comma-separated list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTargetingClausesEx(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, startIndex?: number, count?: number, stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived', targetIdFilter?: string, adGroupIdFilter?: string, campaignIdFilter?: string, options?: any): AxiosPromise<Array<TargetingClauseEx>> {
            return localVarFp.listTargetingClausesEx(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, startIndex, count, stateFilter, targetIdFilter, adGroupIdFilter, campaignIdFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates one or more targeting clauses. Targeting clauses are identified using their targetId. The mutable fields are `bid` and `state`. Maximum length of the array is 100 objects.
         * @summary Updates one or more targeting clauses.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {Array<UpdateTargetingClause>} [updateTargetingClause] A list of up to 100 targeting clauses. Mutable fields: * &#x60;state&#x60; * &#x60;bid&#x60; (only mutable when the targeting clause\&#39;s adGroup does not have any enabled optimization rule)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTargetingClauses(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, updateTargetingClause?: Array<UpdateTargetingClause>, options?: any): AxiosPromise<Array<TargetResponse>> {
            return localVarFp.updateTargetingClauses(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, updateTargetingClause, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveTargetingClause operation in TargetingApi.
 * @export
 * @interface TargetingApiArchiveTargetingClauseRequest
 */
export interface TargetingApiArchiveTargetingClauseRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingApiArchiveTargetingClause
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingApiArchiveTargetingClause
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifer of a targeting clause.
     * @type {number}
     * @memberof TargetingApiArchiveTargetingClause
     */
    readonly targetId: number
}

/**
 * Request parameters for createTargetingClauses operation in TargetingApi.
 * @export
 * @interface TargetingApiCreateTargetingClausesRequest
 */
export interface TargetingApiCreateTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingApiCreateTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingApiCreateTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of targeting clauses for creation.
     * @type {Array<CreateTargetingClause>}
     * @memberof TargetingApiCreateTargetingClauses
     */
    readonly createTargetingClause?: Array<CreateTargetingClause>
}

/**
 * Request parameters for getTargets operation in TargetingApi.
 * @export
 * @interface TargetingApiGetTargetsRequest
 */
export interface TargetingApiGetTargetsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingApiGetTargets
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingApiGetTargets
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of a targeting clause.
     * @type {number}
     * @memberof TargetingApiGetTargets
     */
    readonly targetId: number
}

/**
 * Request parameters for getTargetsEx operation in TargetingApi.
 * @export
 * @interface TargetingApiGetTargetsExRequest
 */
export interface TargetingApiGetTargetsExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingApiGetTargetsEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingApiGetTargetsEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The identifier of a targeting clause.
     * @type {number}
     * @memberof TargetingApiGetTargetsEx
     */
    readonly targetId: number
}

/**
 * Request parameters for listTargetingClauses operation in TargetingApi.
 * @export
 * @interface TargetingApiListTargetingClausesRequest
 */
export interface TargetingApiListTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingApiListTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingApiListTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. 0-indexed record offset for the result set. Defaults to 0.
     * @type {number}
     * @memberof TargetingApiListTargetingClauses
     */
    readonly startIndex?: number

    /**
     * Optional. Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof TargetingApiListTargetingClauses
     */
    readonly count?: number

    /**
     * Optional. Restricts results to those with &#x60;state&#x60; set to values in the specified comma-separated list.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof TargetingApiListTargetingClauses
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
     * @type {string}
     * @memberof TargetingApiListTargetingClauses
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
     * @type {string}
     * @memberof TargetingApiListTargetingClauses
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for listTargetingClausesEx operation in TargetingApi.
 * @export
 * @interface TargetingApiListTargetingClausesExRequest
 */
export interface TargetingApiListTargetingClausesExRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Optional. 0-indexed record offset for the result set. Defaults to 0.
     * @type {number}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly startIndex?: number

    /**
     * Optional. Number of records to include in the paged response. Defaults to max page size.
     * @type {number}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly count?: number

    /**
     * Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: &#x60;enabled&#x60;, &#x60;paused&#x60;, or &#x60;archived&#x60;. Default behavior is to include enabled, paused, and archived.
     * @type {'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly stateFilter?: 'enabled' | 'paused' | 'archived' | 'enabled, paused' | 'enabled, archived' | 'paused, archived' | 'enabled, paused, archived'

    /**
     * Optional. Restricts results to ads with the specified &#x60;tagetId&#x60; specified in comma-separated list
     * @type {string}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly targetIdFilter?: string

    /**
     * Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified &#x60;adGroupId&#x60;.
     * @type {string}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly adGroupIdFilter?: string

    /**
     * Optional. Restricts results to ads within campaigns specified in comma-separated list.
     * @type {string}
     * @memberof TargetingApiListTargetingClausesEx
     */
    readonly campaignIdFilter?: string
}

/**
 * Request parameters for updateTargetingClauses operation in TargetingApi.
 * @export
 * @interface TargetingApiUpdateTargetingClausesRequest
 */
export interface TargetingApiUpdateTargetingClausesRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingApiUpdateTargetingClauses
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingApiUpdateTargetingClauses
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * A list of up to 100 targeting clauses. Mutable fields: * &#x60;state&#x60; * &#x60;bid&#x60; (only mutable when the targeting clause\&#39;s adGroup does not have any enabled optimization rule)
     * @type {Array<UpdateTargetingClause>}
     * @memberof TargetingApiUpdateTargetingClauses
     */
    readonly updateTargetingClause?: Array<UpdateTargetingClause>
}

/**
 * TargetingApi - object-oriented interface
 * @export
 * @class TargetingApi
 * @extends {BaseAPI}
 */
export class TargetingApi extends BaseAPI {
    /**
     * Equivalent to using the `updateTargetingClauses` operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.
     * @summary Sets the `state` of a targeting clause to `archived`.
     * @param {TargetingApiArchiveTargetingClauseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingApi
     */
    public archiveTargetingClause(requestParameters: TargetingApiArchiveTargetingClauseRequest, options?: any) {
        return TargetingApiFp(this.configuration).archiveTargetingClause(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.targetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Successfully created targeting clauses are assigned a unique `targetId` value.  Create new targeting clauses for campaigns with tactic \'T00020\' using the following: | Contextual targeting clause | Description | |------------------|-------------| | similarProduct | Dynamic segment to target products that are similar to the advertised asin. We recommend using \'similarProduct\' targeting for all adGroups. | | asinSameAs=B0123456789 | Target this product. | | asinCategorySameAs=12345 | Target products in the category. | | asinCategorySameAs=12345 asinBrandSameAs=45678 | Target products in the category and brand. |  **Refinements:** - asinBrandSameAs - asinPriceBetween - asinPriceGreaterThan - asinPriceLessThan - asinReviewRatingLessThan - asinReviewRatingGreaterThan - asinReviewRatingBetween - asinIsPrimeShippingEligible - asinAgeRangeSameAs - asinGenreSameAs  **Refinement Notes:** * Brand, price, and review predicates are optional and may only be specified if category is also specified. * Review predicates accept numbers between 0 and 5 and are inclusive. * When using either of the \'between\' strings to construct a targeting expression the format of the string is \'double-double\' where the first double must be smaller than the second double. Prices are not inclusive. * \'similarProduct\' has no expression value or refinements.  Create new targeting clauses for campaigns with tactic \'T00030\' using the following: | Audience targeting clause | Description | |------------------|-------------| | views(exactProduct lookback=30) | Target an audience that has viewed the advertised asins in the past 7,14,30,60, or 90 days. Note: This target should only be used for productAds with SKU or ASIN. | | views(similarProduct lookback=60) | Target an audience that has viewed similar products to the advertised asins in the past 7,14,30,60, or 90 days. Note: This target should only be used for productAds with SKU or ASIN.| | views(asinCategorySameAs=12345 lookback=90) | Target an audience that has viewed products in the given category in the past 7,14,30,60, or 90 days. | | views(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=60) | Target an audience that has viewed products in the given category, brand, and price range in the past 7,14,30,60, or 90 days. | | purchases(relatedProduct lookback=180) | Target an audience that has purchased a related product in the past 7,14,30,60,90,180 or 365 days. Note: This target should only be used for productAds with SKU or ASIN.| | purchases(exactProduct lookback=365) | Target an audience that has purchased the advertised asins in the past 7,14,30,60,90,180 or 365 days. Note: This target should only be used for productAds with SKU or ASIN.| | purchases(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=90) | Target an audience that has purchased products in the given category, brand, and price range in the past 7,14,30,60,90,180 or 365 days |  Note: 1. There is a limit of 20 targeting clauses per request for T00030. 2. There is a limit of 100 targeting clauses per request for T00020. 3. If you receive the error of \"Cannot create targeting clause: audience size is too small\", please expand or broaden your targeting clause to increase the audience size.
     * @summary Creates one or more targeting clauses.
     * @param {TargetingApiCreateTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingApi
     */
    public createTargetingClauses(requestParameters: TargetingApiCreateTargetingClausesRequest, options?: any) {
        return TargetingApiFp(this.configuration).createTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.createTargetingClause, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This call returns the minimal set of targeting clause fields.
     * @summary Gets a targeting clause specified by identifier.
     * @param {TargetingApiGetTargetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingApi
     */
    public getTargets(requestParameters: TargetingApiGetTargetsRequest, options?: any) {
        return TargetingApiFp(this.configuration).getTargets(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.targetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a targeting clause object with extended fields. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTarget.
     * @summary Gets extended information for a targeting clause.
     * @param {TargetingApiGetTargetsExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingApi
     */
    public getTargetsEx(requestParameters: TargetingApiGetTargetsExRequest, options?: any) {
        return TargetingApiFp(this.configuration).getTargetsEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.targetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of targeting clauses objects for a requested set of Sponsored Display targets. Note that the Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the target operations that return the TargetingClauseEx object.
     * @summary Gets a list of targeting clauses.
     * @param {TargetingApiListTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingApi
     */
    public listTargetingClauses(requestParameters: TargetingApiListTargetingClausesRequest, options?: any) {
        return TargetingApiFp(this.configuration).listTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.adGroupIdFilter, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an array of TargetingClauseEx objects for a set of requested targets. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTargets.
     * @summary Gets a list of targeting clause objects with extended fields.
     * @param {TargetingApiListTargetingClausesExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingApi
     */
    public listTargetingClausesEx(requestParameters: TargetingApiListTargetingClausesExRequest, options?: any) {
        return TargetingApiFp(this.configuration).listTargetingClausesEx(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.startIndex, requestParameters.count, requestParameters.stateFilter, requestParameters.targetIdFilter, requestParameters.adGroupIdFilter, requestParameters.campaignIdFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates one or more targeting clauses. Targeting clauses are identified using their targetId. The mutable fields are `bid` and `state`. Maximum length of the array is 100 objects.
     * @summary Updates one or more targeting clauses.
     * @param {TargetingApiUpdateTargetingClausesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingApi
     */
    public updateTargetingClauses(requestParameters: TargetingApiUpdateTargetingClausesRequest, options?: any) {
        return TargetingApiFp(this.configuration).updateTargetingClauses(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.updateTargetingClause, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TargetingRecommendationsApi - axios parameter creator
 * @export
 */
export const TargetingRecommendationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API provides product, category and standard audience recommendations to target based on the list of input ASINs. Allow 1 week for our systems to process data for any new ASINs listed on Amazon before using this service. Note -  recommendations are only available for productAds with SKU or ASIN.  For API v3.0, the API returns up to 100 recommendations for contextual targeting.  For API v3.1, the API returns up to 100 recommendations for both product and category targeting.  For API v3.2, the API introduces contextual targeting themes in the request and returns product recommendations based on different targeting themes.  For API v3.3, the API introduces standard audience recommendations and translated category recommendations based on locale.  The currently available tactic identifiers are:  |Tactic Name|Type|Description| |-----------|----|-----------| |T00020&nbsp;|Contextual Targeting|Products: Choose individual products to show your ads in placements related to those products.| |T00030&nbsp;|Audience Targeting|Audiences: Select individual audiences to show your ads.|
         * @summary Returns a set of recommended products and categories to target
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingRecommendationsLocale} [locale] The requested locale from query parameter to return translated category recommendations.
         * @param {SDTargetingRecommendationsRequestV33} [sDTargetingRecommendationsRequestV33] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetRecommendations: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, locale?: SDTargetingRecommendationsLocale, sDTargetingRecommendationsRequestV33?: SDTargetingRecommendationsRequestV33, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('getTargetRecommendations', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('getTargetRecommendations', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            const localVarPath = `/sd/targets/recommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication oauth2AuthorizationCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2AuthorizationCode", ["cpc_advertising:campaign_management"], configuration)

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.sdtargetingrecommendations.v3.3+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sDTargetingRecommendationsRequestV33, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TargetingRecommendationsApi - functional programming interface
 * @export
 */
export const TargetingRecommendationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TargetingRecommendationsApiAxiosParamCreator(configuration)
    return {
        /**
         * This API provides product, category and standard audience recommendations to target based on the list of input ASINs. Allow 1 week for our systems to process data for any new ASINs listed on Amazon before using this service. Note -  recommendations are only available for productAds with SKU or ASIN.  For API v3.0, the API returns up to 100 recommendations for contextual targeting.  For API v3.1, the API returns up to 100 recommendations for both product and category targeting.  For API v3.2, the API introduces contextual targeting themes in the request and returns product recommendations based on different targeting themes.  For API v3.3, the API introduces standard audience recommendations and translated category recommendations based on locale.  The currently available tactic identifiers are:  |Tactic Name|Type|Description| |-----------|----|-----------| |T00020&nbsp;|Contextual Targeting|Products: Choose individual products to show your ads in placements related to those products.| |T00030&nbsp;|Audience Targeting|Audiences: Select individual audiences to show your ads.|
         * @summary Returns a set of recommended products and categories to target
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingRecommendationsLocale} [locale] The requested locale from query parameter to return translated category recommendations.
         * @param {SDTargetingRecommendationsRequestV33} [sDTargetingRecommendationsRequestV33] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTargetRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, locale?: SDTargetingRecommendationsLocale, sDTargetingRecommendationsRequestV33?: SDTargetingRecommendationsRequestV33, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SDTargetingRecommendationsResponseV33>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTargetRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, locale, sDTargetingRecommendationsRequestV33, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TargetingRecommendationsApi - factory interface
 * @export
 */
export const TargetingRecommendationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TargetingRecommendationsApiFp(configuration)
    return {
        /**
         * This API provides product, category and standard audience recommendations to target based on the list of input ASINs. Allow 1 week for our systems to process data for any new ASINs listed on Amazon before using this service. Note -  recommendations are only available for productAds with SKU or ASIN.  For API v3.0, the API returns up to 100 recommendations for contextual targeting.  For API v3.1, the API returns up to 100 recommendations for both product and category targeting.  For API v3.2, the API introduces contextual targeting themes in the request and returns product recommendations based on different targeting themes.  For API v3.3, the API introduces standard audience recommendations and translated category recommendations based on locale.  The currently available tactic identifiers are:  |Tactic Name|Type|Description| |-----------|----|-----------| |T00020&nbsp;|Contextual Targeting|Products: Choose individual products to show your ads in placements related to those products.| |T00030&nbsp;|Audience Targeting|Audiences: Select individual audiences to show your ads.|
         * @summary Returns a set of recommended products and categories to target
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {SDTargetingRecommendationsLocale} [locale] The requested locale from query parameter to return translated category recommendations.
         * @param {SDTargetingRecommendationsRequestV33} [sDTargetingRecommendationsRequestV33] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTargetRecommendations(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, locale?: SDTargetingRecommendationsLocale, sDTargetingRecommendationsRequestV33?: SDTargetingRecommendationsRequestV33, options?: any): AxiosPromise<SDTargetingRecommendationsResponseV33> {
            return localVarFp.getTargetRecommendations(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, locale, sDTargetingRecommendationsRequestV33, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTargetRecommendations operation in TargetingRecommendationsApi.
 * @export
 * @interface TargetingRecommendationsApiGetTargetRecommendationsRequest
 */
export interface TargetingRecommendationsApiGetTargetRecommendationsRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof TargetingRecommendationsApiGetTargetRecommendations
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof TargetingRecommendationsApiGetTargetRecommendations
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * The requested locale from query parameter to return translated category recommendations.
     * @type {SDTargetingRecommendationsLocale}
     * @memberof TargetingRecommendationsApiGetTargetRecommendations
     */
    readonly locale?: SDTargetingRecommendationsLocale

    /**
     * 
     * @type {SDTargetingRecommendationsRequestV33}
     * @memberof TargetingRecommendationsApiGetTargetRecommendations
     */
    readonly sDTargetingRecommendationsRequestV33?: SDTargetingRecommendationsRequestV33
}

/**
 * TargetingRecommendationsApi - object-oriented interface
 * @export
 * @class TargetingRecommendationsApi
 * @extends {BaseAPI}
 */
export class TargetingRecommendationsApi extends BaseAPI {
    /**
     * This API provides product, category and standard audience recommendations to target based on the list of input ASINs. Allow 1 week for our systems to process data for any new ASINs listed on Amazon before using this service. Note -  recommendations are only available for productAds with SKU or ASIN.  For API v3.0, the API returns up to 100 recommendations for contextual targeting.  For API v3.1, the API returns up to 100 recommendations for both product and category targeting.  For API v3.2, the API introduces contextual targeting themes in the request and returns product recommendations based on different targeting themes.  For API v3.3, the API introduces standard audience recommendations and translated category recommendations based on locale.  The currently available tactic identifiers are:  |Tactic Name|Type|Description| |-----------|----|-----------| |T00020&nbsp;|Contextual Targeting|Products: Choose individual products to show your ads in placements related to those products.| |T00030&nbsp;|Audience Targeting|Audiences: Select individual audiences to show your ads.|
     * @summary Returns a set of recommended products and categories to target
     * @param {TargetingRecommendationsApiGetTargetRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TargetingRecommendationsApi
     */
    public getTargetRecommendations(requestParameters: TargetingRecommendationsApiGetTargetRecommendationsRequest, options?: any) {
        return TargetingRecommendationsApiFp(this.configuration).getTargetRecommendations(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.locale, requestParameters.sDTargetingRecommendationsRequestV33, options).then((request) => request(this.axios, this.basePath));
    }
}


