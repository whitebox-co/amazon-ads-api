/* tslint:disable */
/* eslint-disable */
/**
 * Eligibility
 * Check advertising eligibility of products.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
import { createRequestFunction } from "../../helpers";

/**
 * 
 * @export
 * @enum {string}
 */

export enum AcceptLanguage {
    EnUs = 'en-US',
    ArAe = 'ar-AE',
    ZhCn = 'zh-CN',
    NlNl = 'nl-NL',
    EnAu = 'en-AU',
    EnCa = 'en-CA',
    EnIn = 'en-IN',
    EnGb = 'en-GB',
    FrCa = 'fr-CA',
    FrFr = 'fr-FR',
    DeDe = 'de-DE',
    ItIt = 'it-IT',
    JaJp = 'ja-JP',
    KoKr = 'ko-KR',
    PlPl = 'pl-PL',
    PtBr = 'pt-BR',
    EsEs = 'es-ES',
    EsUs = 'es-US',
    EsMx = 'es-MX',
    TrTr = 'tr-TR'
}

/**
 * 
 * @export
 * @interface BadRequestExceptionResponseContent
 */
export interface BadRequestExceptionResponseContent {
    /**
     * Programmatic status code.
     * @type {number}
     * @memberof BadRequestExceptionResponseContent
     */
    code?: number;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof BadRequestExceptionResponseContent
     */
    details?: string;
}
/**
 * @type Check
 * A union of all the checks that we would want to skip
 * @export
 */
export type Check = SkipAllBillingChecks;

/**
 * The advertising eligibility status of a product.
 * @export
 * @interface EligibilityStatus
 */
export interface EligibilityStatus {
    /**
     * An enumerated advertising eligibility severity status. If set to `INELIGIBLE`, the product cannot be included in an advertisement. If set to `ELIGIBLE_WITH_WARNING`, the product may not receive impressions when included in an advertisement.
     * @type {string}
     * @memberof EligibilityStatus
     */
    severity?: EligibilityStatusSeverityEnum;
    /**
     * The status identifier.
     * @type {string}
     * @memberof EligibilityStatus
     */
    name?: EligibilityStatusNameEnum;
    /**
     * A URL with additional information about the status identifier. May not be present for all status identifiers.
     * @type {string}
     * @memberof EligibilityStatus
     */
    helpUrl?: string;
    /**
     * A human-readable description of the status identifier specified in the `name` field.
     * @type {string}
     * @memberof EligibilityStatus
     */
    message?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum EligibilityStatusSeverityEnum {
    Ineligible = 'INELIGIBLE',
    EligibleWithWarning = 'ELIGIBLE_WITH_WARNING'
}
/**
    * @export
    * @enum {string}
    */
export enum EligibilityStatusNameEnum {
    AdultProduct = 'ADULT_PRODUCT',
    ClosedCategory = 'CLOSED_CATEGORY',
    IneligibleCondition = 'INELIGIBLE_CONDITION',
    IneligibleOffer = 'INELIGIBLE_OFFER',
    IneligibleProductCost = 'INELIGIBLE_PRODUCT_COST',
    ListingSupressed = 'LISTING_SUPRESSED',
    MissingImage = 'MISSING_IMAGE',
    MissingTitle = 'MISSING_TITLE',
    NotInBuybox = 'NOT_IN_BUYBOX',
    OutOfStock = 'OUT_OF_STOCK',
    RestrictedCategory = 'RESTRICTED_CATEGORY',
    VariationParent = 'VARIATION_PARENT'
}

/**
 * Describes a single program\'s eligibility status
 * @export
 * @interface EligibilityStatusDetail
 */
export interface EligibilityStatusDetail {
    /**
     * String identifier for the status.
     * @type {Array<ReasonItem>}
     * @memberof EligibilityStatusDetail
     */
    reasons?: Array<ReasonItem>;
    /**
     * Boolean value where if true, advertiser is eligible to access the given program.
     * @type {boolean}
     * @memberof EligibilityStatusDetail
     */
    eligible?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum IneligibleLevel {
    IneligibleWithResolution = 'INELIGIBLE_WITH_RESOLUTION',
    Ineligible = 'INELIGIBLE'
}

/**
 * 
 * @export
 * @interface InternalServerErrorExceptionResponseContent
 */
export interface InternalServerErrorExceptionResponseContent {
    /**
     * Programmatic status code.
     * @type {number}
     * @memberof InternalServerErrorExceptionResponseContent
     */
    code?: number;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof InternalServerErrorExceptionResponseContent
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface NotFoundExceptionResponseContent
 */
export interface NotFoundExceptionResponseContent {
    /**
     * Programmatic status code.
     * @type {number}
     * @memberof NotFoundExceptionResponseContent
     */
    code?: number;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof NotFoundExceptionResponseContent
     */
    details?: string;
}
/**
 * An Amazon product identifier, seller product identifer, or both.
 * @export
 * @interface ProductDetails
 */
export interface ProductDetails {
    /**
     * An Amazon product identifier.
     * @type {string}
     * @memberof ProductDetails
     */
    asin: string;
    /**
     * A seller product identifier.
     * @type {string}
     * @memberof ProductDetails
     */
    sku?: string;
}
/**
 * The error response object.
 * @export
 * @interface ProductEligibilityError
 */
export interface ProductEligibilityError {
    /**
     * The HTTP status code of the response.
     * @type {string}
     * @memberof ProductEligibilityError
     */
    code?: string;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof ProductEligibilityError
     */
    details?: string;
}
/**
 * A product advertising eligibility request object.
 * @export
 * @interface ProductEligibilityRequest
 */
export interface ProductEligibilityRequest {
    /**
     * Set to \'sp\' to check product eligibility for Sponsored Products advertisements. Set to \'sb\' to check product eligibility for Sponsored Brands advertisements. Set to \'sd\' to check product eligibility for Sponsored Display advertisements.
     * @type {string}
     * @memberof ProductEligibilityRequest
     */
    adType?: ProductEligibilityRequestAdTypeEnum;
    /**
     * A list of product identifier objects.
     * @type {Array<ProductDetails>}
     * @memberof ProductEligibilityRequest
     */
    productDetailsList: Array<ProductDetails>;
    /**
     * Set to the locale string in the table below to specify the language in which the response is returned. |Locale|Language (ISO 639)|Country (ISO 3166)| |------|------------------|------------------| |ar-AE|Arabic (ar)|United Arab Emirates (AE)| |zh-CN|Chinese (zh)|China (CN)| |nl-NL|Dutch (nl)|Netherlands (NL)| |en-AU|English (en)|Australia (AU)| |en-CA|English (en)|Canada (CA)| |en-IN|English (en)|India (IN)| |en-GB|English (en)|United Kingdom (GB)| |en-US|English (en)|United States (US)| |fr-CA|French (fr)|Canada (CA)| |fr-FR|French (fr)|France (FR)| |de-DE|German (de)|Germany (DE)| |it-IT|Italian (it)|Italy (IT)| |ja-JP|Japanese (ja)|Japan (JP)| |ko-KR|Korean (ko)|South Korea (KR)| |pt-BR|Portuguese (pt)|Brazil (BR)| |es-ES|Spanish (es)|Spain (ES)| |es-US|Spanish (es)|United States (US)| |es-MX|Spanish (es)|Mexico (MX)| |tr-TR|Turkish (tr)|Turkey (TR)| 
     * @type {string}
     * @memberof ProductEligibilityRequest
     */
    locale?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ProductEligibilityRequestAdTypeEnum {
    Sp = 'sp',
    Sb = 'sb',
    Sd = 'sd'
}

/**
 * A product advertising eligibility response object.
 * @export
 * @interface ProductEligibilityResponse
 */
export interface ProductEligibilityResponse {
    /**
     * A list of product advertising eligibility responses.
     * @type {Array<ProductResponse>}
     * @memberof ProductEligibilityResponse
     */
    productResponseList?: Array<ProductResponse>;
}
/**
 * An product advertising eligibility response.
 * @export
 * @interface ProductResponse
 */
export interface ProductResponse {
    /**
     * 
     * @type {ProductDetails}
     * @memberof ProductResponse
     */
    productDetails: ProductDetails;
    /**
     * 
     * @type {Array<EligibilityStatus>}
     * @memberof ProductResponse
     */
    eligibilityStatusList: Array<EligibilityStatus>;
    /**
     * A human-readable description of the product\'s advertising eligibility status. Inherits highest severity from eligibilityStatusList.
     * @type {string}
     * @memberof ProductResponse
     */
    overallStatus: ProductResponseOverallStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ProductResponseOverallStatusEnum {
    Eligible = 'ELIGIBLE',
    Ineligible = 'INELIGIBLE',
    EligibleWithWarning = 'ELIGIBLE_WITH_WARNING'
}

/**
 * A request to evaluate account level eligibility for Amazon ad programs (Sponsored Products, Sponsored Brands, Sponsored Display, Stores, etc).
 * @export
 * @interface ProgramEligibilityRequestContent
 */
export interface ProgramEligibilityRequestContent {
    /**
     * 
     * @type {Check}
     * @memberof ProgramEligibilityRequestContent
     */
    skipChecks?: Check;
}
/**
 * An object of program eligibility responses for an advertiser.
 * @export
 * @interface ProgramEligibilityResponseContent
 */
export interface ProgramEligibilityResponseContent {
    /**
     * This is a map that will be key\'d on the ad program (SB/SD); the value will be an eligibility object.
     * @type {{ [key: string]: EligibilityStatusDetail; }}
     * @memberof ProgramEligibilityResponseContent
     */
    eligibilityStatusMap?: { [key: string]: EligibilityStatusDetail; };
}
/**
 * 
 * @export
 * @interface RateExceededExceptionResponseContent
 */
export interface RateExceededExceptionResponseContent {
    /**
     * Programmatic status code.
     * @type {number}
     * @memberof RateExceededExceptionResponseContent
     */
    code?: number;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof RateExceededExceptionResponseContent
     */
    details?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum ReasonCode {
    BillingAccountNotFound = 'BILLING_ACCOUNT_NOT_FOUND',
    PaymentProfileNotFound = 'PAYMENT_PROFILE_NOT_FOUND',
    PaymentMethodNotFound = 'PAYMENT_METHOD_NOT_FOUND',
    PaymentMethodNotValid = 'PAYMENT_METHOD_NOT_VALID',
    ExpiredPaymentMethod = 'EXPIRED_PAYMENT_METHOD',
    VettingFailure = 'VETTING_FAILURE',
    AccountSuspended = 'ACCOUNT_SUSPENDED',
    TaxInfoNotComplete = 'TAX_INFO_NOT_COMPLETE',
    PrepayBalanceTooLow = 'PREPAY_BALANCE_TOO_LOW',
    RoBalanceTooLow = 'RO_BALANCE_TOO_LOW',
    NoBrandRelations = 'NO_BRAND_RELATIONS',
    NotBrandRepresentative = 'NOT_BRAND_REPRESENTATIVE',
    NoTacticEnabled = 'NO_TACTIC_ENABLED',
    DirectToConsumerOwnerTagIdNotFound = 'DIRECT_TO_CONSUMER_OWNER_TAG_ID_NOT_FOUND',
    DirectToConsumerSubscriptionNotFound = 'DIRECT_TO_CONSUMER_SUBSCRIPTION_NOT_FOUND',
    AdvertisingAccountNotFound = 'ADVERTISING_ACCOUNT_NOT_FOUND',
    NotLaunchedInMarketplace = 'NOT_LAUNCHED_IN_MARKETPLACE',
    Unknown = 'UNKNOWN',
    Blocked = 'BLOCKED'
}

/**
 * 
 * @export
 * @interface ReasonItem
 */
export interface ReasonItem {
    /**
     * 
     * @type {ReasonCode}
     * @memberof ReasonItem
     */
    code?: ReasonCode;
    /**
     * 
     * @type {IneligibleLevel}
     * @memberof ReasonItem
     */
    level?: IneligibleLevel;
    /**
     * Message explaining what the status means. Example: Payment preference not found for associated billing account. Please add a new payment method
     * @type {string}
     * @memberof ReasonItem
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface SkipAllBillingChecks
 */
export interface SkipAllBillingChecks {
    /**
     * Skip all billing/payments/suspension related checks
     * @type {boolean}
     * @memberof SkipAllBillingChecks
     */
    skipAllBillingChecks: boolean;
}
/**
 * 
 * @export
 * @interface UnauthorizedExceptionResponseContent
 */
export interface UnauthorizedExceptionResponseContent {
    /**
     * Programmatic status code.
     * @type {number}
     * @memberof UnauthorizedExceptionResponseContent
     */
    code?: number;
    /**
     * A human-readable description of the response.
     * @type {string}
     * @memberof UnauthorizedExceptionResponseContent
     */
    details?: string;
}

/**
 * ProductEligibilityApi - axios parameter creator
 * @export
 */
export const ProductEligibilityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a list of advertising eligibility objects for a set of products. Requests are permitted only for products sold by the merchant associated with the profile. Note that the request object is a list of ASINs, but multiple SKUs are returned if there is more than one SKU associated with an ASIN. If a product is not eligible for advertising, the response includes an object describing the reasons for ineligibility.  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Gets advertising eligibility status for a list of products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {ProductEligibilityRequest} productEligibilityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productEligibility: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, productEligibilityRequest: ProductEligibilityRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('productEligibility', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('productEligibility', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'productEligibilityRequest' is not null or undefined
            assertParamExists('productEligibility', 'productEligibilityRequest', productEligibilityRequest)
            const localVarPath = `/eligibility/product/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productEligibilityRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductEligibilityApi - functional programming interface
 * @export
 */
export const ProductEligibilityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductEligibilityApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets a list of advertising eligibility objects for a set of products. Requests are permitted only for products sold by the merchant associated with the profile. Note that the request object is a list of ASINs, but multiple SKUs are returned if there is more than one SKU associated with an ASIN. If a product is not eligible for advertising, the response includes an object describing the reasons for ineligibility.  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Gets advertising eligibility status for a list of products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {ProductEligibilityRequest} productEligibilityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, productEligibilityRequest: ProductEligibilityRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductEligibilityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, productEligibilityRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductEligibilityApi - factory interface
 * @export
 */
export const ProductEligibilityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductEligibilityApiFp(configuration)
    return {
        /**
         * Gets a list of advertising eligibility objects for a set of products. Requests are permitted only for products sold by the merchant associated with the profile. Note that the request object is a list of ASINs, but multiple SKUs are returned if there is more than one SKU associated with an ASIN. If a product is not eligible for advertising, the response includes an object describing the reasons for ineligibility.  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @summary Gets advertising eligibility status for a list of products.
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
         * @param {ProductEligibilityRequest} productEligibilityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, productEligibilityRequest: ProductEligibilityRequest, options?: any): AxiosPromise<ProductEligibilityResponse> {
            return localVarFp.productEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, productEligibilityRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for productEligibility operation in ProductEligibilityApi.
 * @export
 * @interface ProductEligibilityApiProductEligibilityRequest
 */
export interface ProductEligibilityApiProductEligibilityRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProductEligibilityApiProductEligibility
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header.
     * @type {string}
     * @memberof ProductEligibilityApiProductEligibility
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * 
     * @type {ProductEligibilityRequest}
     * @memberof ProductEligibilityApiProductEligibility
     */
    readonly productEligibilityRequest: ProductEligibilityRequest
}

/**
 * ProductEligibilityApi - object-oriented interface
 * @export
 * @class ProductEligibilityApi
 * @extends {BaseAPI}
 */
export class ProductEligibilityApi extends BaseAPI {
    /**
     * Gets a list of advertising eligibility objects for a set of products. Requests are permitted only for products sold by the merchant associated with the profile. Note that the request object is a list of ASINs, but multiple SKUs are returned if there is more than one SKU associated with an ASIN. If a product is not eligible for advertising, the response includes an object describing the reasons for ineligibility.  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @summary Gets advertising eligibility status for a list of products.
     * @param {ProductEligibilityApiProductEligibilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductEligibilityApi
     */
    public productEligibility(requestParameters: ProductEligibilityApiProductEligibilityRequest, options?: any) {
        return ProductEligibilityApiFp(this.configuration).productEligibility(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.productEligibilityRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProgramEligibilityApi - axios parameter creator
 * @export
 */
export const ProgramEligibilityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Checks the advertiser\'s eligibility to ad programs.  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} advertiserId Advertiser ID populated from the federated gateway authorizer context
         * @param {AcceptLanguage} [acceptLanguage] Specify the language in which the response is returned.
         * @param {string} [entityId] Entity ID populated from the federated gateway authorizer context
         * @param {string} [entityType] Entity type (seller, vendor, author, etc) populated from the federated gateway authorizer context. Note, must be a Seller Central Entity.
         * @param {string} [marketplaceId] Marketplace ID populated from the federated gateway authorizer context
         * @param {string} [obfuscatedMarketplaceId] Obfuscated Marketplace ID populated from the federated gateway authorizer context, this is included in case marketplace ID is not included
         * @param {ProgramEligibilityRequestContent} [programEligibilityRequestContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programEligibility: async (amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, advertiserId: string, acceptLanguage?: AcceptLanguage, entityId?: string, entityType?: string, marketplaceId?: string, obfuscatedMarketplaceId?: string, programEligibilityRequestContent?: ProgramEligibilityRequestContent, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonAdvertisingAPIClientId' is not null or undefined
            assertParamExists('programEligibility', 'amazonAdvertisingAPIClientId', amazonAdvertisingAPIClientId)
            // verify required parameter 'amazonAdvertisingAPIScope' is not null or undefined
            assertParamExists('programEligibility', 'amazonAdvertisingAPIScope', amazonAdvertisingAPIScope)
            // verify required parameter 'advertiserId' is not null or undefined
            assertParamExists('programEligibility', 'advertiserId', advertiserId)
            const localVarPath = `/eligibility/programs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage !== undefined && acceptLanguage !== null) {
                localVarHeaderParameter['Accept-Language'] = String(JSON.stringify(acceptLanguage));
            }

            if (amazonAdvertisingAPIClientId !== undefined && amazonAdvertisingAPIClientId !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-ClientId'] = String(amazonAdvertisingAPIClientId);
            }

            if (amazonAdvertisingAPIScope !== undefined && amazonAdvertisingAPIScope !== null) {
                localVarHeaderParameter['Amazon-Advertising-API-Scope'] = String(amazonAdvertisingAPIScope);
            }

            if (advertiserId !== undefined && advertiserId !== null) {
                localVarHeaderParameter['advertiserId'] = String(advertiserId);
            }

            if (entityId !== undefined && entityId !== null) {
                localVarHeaderParameter['entityId'] = String(entityId);
            }

            if (entityType !== undefined && entityType !== null) {
                localVarHeaderParameter['entityType'] = String(entityType);
            }

            if (marketplaceId !== undefined && marketplaceId !== null) {
                localVarHeaderParameter['marketplaceId'] = String(marketplaceId);
            }

            if (obfuscatedMarketplaceId !== undefined && obfuscatedMarketplaceId !== null) {
                localVarHeaderParameter['obfuscatedMarketplaceId'] = String(obfuscatedMarketplaceId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(programEligibilityRequestContent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProgramEligibilityApi - functional programming interface
 * @export
 */
export const ProgramEligibilityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProgramEligibilityApiAxiosParamCreator(configuration)
    return {
        /**
         * Checks the advertiser\'s eligibility to ad programs.  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} advertiserId Advertiser ID populated from the federated gateway authorizer context
         * @param {AcceptLanguage} [acceptLanguage] Specify the language in which the response is returned.
         * @param {string} [entityId] Entity ID populated from the federated gateway authorizer context
         * @param {string} [entityType] Entity type (seller, vendor, author, etc) populated from the federated gateway authorizer context. Note, must be a Seller Central Entity.
         * @param {string} [marketplaceId] Marketplace ID populated from the federated gateway authorizer context
         * @param {string} [obfuscatedMarketplaceId] Obfuscated Marketplace ID populated from the federated gateway authorizer context, this is included in case marketplace ID is not included
         * @param {ProgramEligibilityRequestContent} [programEligibilityRequestContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, advertiserId: string, acceptLanguage?: AcceptLanguage, entityId?: string, entityType?: string, marketplaceId?: string, obfuscatedMarketplaceId?: string, programEligibilityRequestContent?: ProgramEligibilityRequestContent, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramEligibilityResponseContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, advertiserId, acceptLanguage, entityId, entityType, marketplaceId, obfuscatedMarketplaceId, programEligibilityRequestContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProgramEligibilityApi - factory interface
 * @export
 */
export const ProgramEligibilityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProgramEligibilityApiFp(configuration)
    return {
        /**
         * Checks the advertiser\'s eligibility to ad programs.  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
         * @param {string} amazonAdvertisingAPIClientId The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
         * @param {string} amazonAdvertisingAPIScope The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
         * @param {string} advertiserId Advertiser ID populated from the federated gateway authorizer context
         * @param {AcceptLanguage} [acceptLanguage] Specify the language in which the response is returned.
         * @param {string} [entityId] Entity ID populated from the federated gateway authorizer context
         * @param {string} [entityType] Entity type (seller, vendor, author, etc) populated from the federated gateway authorizer context. Note, must be a Seller Central Entity.
         * @param {string} [marketplaceId] Marketplace ID populated from the federated gateway authorizer context
         * @param {string} [obfuscatedMarketplaceId] Obfuscated Marketplace ID populated from the federated gateway authorizer context, this is included in case marketplace ID is not included
         * @param {ProgramEligibilityRequestContent} [programEligibilityRequestContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programEligibility(amazonAdvertisingAPIClientId: string, amazonAdvertisingAPIScope: string, advertiserId: string, acceptLanguage?: AcceptLanguage, entityId?: string, entityType?: string, marketplaceId?: string, obfuscatedMarketplaceId?: string, programEligibilityRequestContent?: ProgramEligibilityRequestContent, options?: any): AxiosPromise<ProgramEligibilityResponseContent> {
            return localVarFp.programEligibility(amazonAdvertisingAPIClientId, amazonAdvertisingAPIScope, advertiserId, acceptLanguage, entityId, entityType, marketplaceId, obfuscatedMarketplaceId, programEligibilityRequestContent, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for programEligibility operation in ProgramEligibilityApi.
 * @export
 * @interface ProgramEligibilityApiProgramEligibilityRequest
 */
export interface ProgramEligibilityApiProgramEligibilityRequest {
    /**
     * The identifier of a client associated with a \&quot;Login with Amazon\&quot; account.
     * @type {string}
     * @memberof ProgramEligibilityApiProgramEligibility
     */
    readonly amazonAdvertisingAPIClientId: string

    /**
     * The identifier of a profile associated with the advertiser account. Use &#x60;GET&#x60; method on Profiles resource to list profiles associated with the access token passed in the HTTP Authorization header and choose profile id &#x60;profileId&#x60; from the response to pass it as input.
     * @type {string}
     * @memberof ProgramEligibilityApiProgramEligibility
     */
    readonly amazonAdvertisingAPIScope: string

    /**
     * Advertiser ID populated from the federated gateway authorizer context
     * @type {string}
     * @memberof ProgramEligibilityApiProgramEligibility
     */
    readonly advertiserId: string

    /**
     * Specify the language in which the response is returned.
     * @type {AcceptLanguage}
     * @memberof ProgramEligibilityApiProgramEligibility
     */
    readonly acceptLanguage?: AcceptLanguage

    /**
     * Entity ID populated from the federated gateway authorizer context
     * @type {string}
     * @memberof ProgramEligibilityApiProgramEligibility
     */
    readonly entityId?: string

    /**
     * Entity type (seller, vendor, author, etc) populated from the federated gateway authorizer context. Note, must be a Seller Central Entity.
     * @type {string}
     * @memberof ProgramEligibilityApiProgramEligibility
     */
    readonly entityType?: string

    /**
     * Marketplace ID populated from the federated gateway authorizer context
     * @type {string}
     * @memberof ProgramEligibilityApiProgramEligibility
     */
    readonly marketplaceId?: string

    /**
     * Obfuscated Marketplace ID populated from the federated gateway authorizer context, this is included in case marketplace ID is not included
     * @type {string}
     * @memberof ProgramEligibilityApiProgramEligibility
     */
    readonly obfuscatedMarketplaceId?: string

    /**
     * 
     * @type {ProgramEligibilityRequestContent}
     * @memberof ProgramEligibilityApiProgramEligibility
     */
    readonly programEligibilityRequestContent?: ProgramEligibilityRequestContent
}

/**
 * ProgramEligibilityApi - object-oriented interface
 * @export
 * @class ProgramEligibilityApi
 * @extends {BaseAPI}
 */
export class ProgramEligibilityApi extends BaseAPI {
    /**
     * Checks the advertiser\'s eligibility to ad programs.  **Requires one of these permissions**: [\"advertiser_campaign_edit\",\"advertiser_campaign_view\"]
     * @param {ProgramEligibilityApiProgramEligibilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramEligibilityApi
     */
    public programEligibility(requestParameters: ProgramEligibilityApiProgramEligibilityRequest, options?: any) {
        return ProgramEligibilityApiFp(this.configuration).programEligibility(requestParameters.amazonAdvertisingAPIClientId, requestParameters.amazonAdvertisingAPIScope, requestParameters.advertiserId, requestParameters.acceptLanguage, requestParameters.entityId, requestParameters.entityType, requestParameters.marketplaceId, requestParameters.obfuscatedMarketplaceId, requestParameters.programEligibilityRequestContent, options).then((request) => request(this.axios, this.basePath));
    }
}


